stdout of test 'inspect05` in directory 'src/modules/mal` itself:


# 00:03:55 >  
# 00:03:55 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=33330 --set sql_port=49911 --set xquery_port=56575 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  inspect05.mal </dev/null
# 00:03:55 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information.
##Illustrate the modules loaded after start
#k:= inspect.getKind();
#m:= inspect.getModule();
#f:= inspect.getFunction();
#s:= inspect.getSignature();
#io.print(k,m,f,s);
#

function user.main():void;	# 0  (main:void)
#Illustrate the modules loaded after start 	# 1  (_2:str)
    k := inspect.getKind();	# 2 INSPECTgetkind (k:bat[:void,:str])
    m := inspect.getModule();	# 3 INSPECTgetAllModules (m:bat[:void,:str])
    f := inspect.getFunction();	# 4 INSPECTgetAllFunctions (f:bat[:void,:str])
    s := inspect.getSignatures();	# 5 INSPECTgetAllSignatures (s:bat[:void,:str])
    a := inspect.getAddresses();	# 6 INSPECTgetAllAddresses (a:bat[:void,:str])
    io.print(k,m,f,s,a);	# 7 IOtable (_7:int)<-(k:bat[:void,:str])(m:bat[:void,:str])(f:bat[:void,:str])(s:bat[:void,:str])(a:bat[:void,:str])
end main;	# 8  
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
# view	symbol		symbol		symbol				 symbol												 symbol					  # name
# oid	str		str		str				str												str					  # type
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
[ 0@0,	  "function",	  "user",	  "main",			  "():void;",											  "nil"					  ]
[ 1@0,	  "function",	  "user",	  "main",			  "():void;",											  "nil"					  ]
[ 2@0,	  "command",	  "partitions",	  "compress",			  "(b:bat[:void,:any_1]):bat[:void,:any_1] ",							  "BPTcompress;"			  ]
[ 3@0,	  "command",	  "partitions",	  "close",			  "():void ",											  "BPTclose;"				  ]
[ 4@0,	  "command",	  "partitions",	  "dump",			  "():void ",											  "BPTdump;"				  ]
[ 5@0,	  "command",	  "partitions",	  "delete",			  "(b:bat[:void,:any_1],p:bat[:void,:any_1]):bat[:void,:any_1] ",				  "BPTdeleteBAT;"			  ]
[ 6@0,	  "command",	  "partitions",	  "delete",			  "(b:bat[:void,:any_1],h:oid):bat[:void,:any_1] ",						  "BPTdelete_oid;"			  ]
[ 7@0,	  "command",	  "partitions",	  "discard",			  "(name:bat[:void,:any_1]):void ",								  "BPTdiscard;"				  ]
[ 8@0,	  "command",	  "partitions",	  "deposit",			  "(b:str,p:str,cap:int):void ",								  "BPTdepositPartition;"		  ]
[ 9@0,	  "command",	  "partitions",	  "deposit",			  "(b:bat[:void,:any_1],p:bat[:void,:any_1]):void ",						  "BPTdeposit2;"			  ]
[ 10@0,	  "command",	  "partitions",	  "deposit",			  "(b:bat[:void,:any_1]):void ",								  "BPTdeposit;"				  ]
[ 11@0,	  "command",	  "partitions",	  "destroy",			  "():void ",											  "BPTdestroy;"				  ]
[ 12@0,	  "command",	  "partitions",	  "epilogue",			  "():void ",											  "BPTepilogue;"			  ]
[ 13@0,	  "command",	  "partitions",	  "getRange",			  "(b:bat[:void,:any_1]) (first:oid,last:oid) ",						  "BPTgetRange;"			  ]
[ 14@0,	  "command",	  "partitions",	  "getLastPartition",		  "(b:bat[:void,:any_1]):bat[:void,:any_1] ",							  "BPTgetLastPartition;"		  ]
[ 15@0,	  "command",	  "partitions",	  "hasMoreElements",		  "(b:bat[:void,:any_1],first:oid,last:oid) (_4:int,_5:bat[:void,:any_1]) ",			  "BPThasMoreElementsRng;"		  ]
[ 16@0,	  "command",	  "partitions",	  "hasMoreElements",		  "(b:bat[:void,:any_1]) (_2:int,_3:bat[:void,:any_1]) ",					  "BPThasMoreElements;"			  ]
[ 17@0,	  "command",	  "partitions",	  "hasMoreElements",		  "():int ",											  "BPThasMoreElementsBase;"		  ]
[ 18@0,	  "command",	  "partitions",	  "insert",			  "(b:bat[:void,:any_1],p:bat[:void,:any_1]):bat[:void,:any_1] ",				  "BPTinsertBAT;"			  ]
[ 19@0,	  "command",	  "partitions",	  "insert",			  "(b:bat[:void,:any_1],t:any_1):bat[:void,:any_1] ",						  "BPTinsert_void_bun;"			  ]
[ 20@0,	  "command",	  "partitions",	  "insert",			  "(b:bat[:void,:any_1],h:void,t:any_1):bat[:void,:any_1] ",					  "BPTinsert;"				  ]
[ 21@0,	  "command",	  "partitions",	  "newIterator",		  "(b:bat[:void,:any_1],first:oid,last:oid) (_4:int,_5:bat[:void,:any_1]) ",			  "BPTnewIteratorRng;"			  ]
[ 22@0,	  "command",	  "partitions",	  "newIterator",		  "(b:bat[:void,:any_1]) (_2:int,_3:bat[:void,:any_1]) ",					  "BPTnewIterator;"			  ]
[ 23@0,	  "command",	  "partitions",	  "newIterator",		  "():int ",											  "BPTnewIteratorBase;"			  ]
[ 24@0,	  "command",	  "partitions",	  "open",			  "():void ",											  "BPTopen;"				  ]
[ 25@0,	  "command",	  "partitions",	  "prelude",			  "():void ",											  "BPTprelude;"				  ]
[ 26@0,	  "pattern",	  "partitions",	  "release",			  "(b:bat[:void,:any_1]):void ",								  "BPTrelease;"				  ]
[ 27@0,	  "pattern",	  "partitions",	  "releaseAll",			  "():void ",											  "BPTreleaseAll;"			  ]
[ 28@0,	  "command",	  "partitions",	  "setCapacity",		  "(b:bat[:void,:any_1],s:int):void ",								  "BPTsetCapacity;"			  ]
[ 29@0,	  "pattern",	  "partitions",	  "toString",			  "(idx:int):str ",										  "BPTtoString;"			  ]
[ 30@0,	  "command",	  "partitions",	  "take",			  "(idx:int):bat[:void,:any_1] ",								  "BPTtake;"				  ]
[ 31@0,	  "command",	  "transaction",  "alpha",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",							  "TRNtrans_alpha;"			  ]
[ 32@0,	  "pattern",	  "transaction",  "abort",			  "(c:any...):void ",										  "TRNtrans_abort;"			  ]
[ 33@0,	  "command",	  "transaction",  "abort",			  "():void ",											  "TRNglobal_abort;"			  ]
[ 34@0,	  "pattern",	  "transaction",  "clean",			  "(c:any...):void ",										  "TRNtrans_clean;"			  ]
[ 35@0,	  "pattern",	  "transaction",  "commit",			  "(c:any...):void ",										  "TRNtrans_commit;"			  ]
[ 36@0,	  "command",	  "transaction",  "commit",			  "():void ",											  "TRNglobal_commit;"			  ]
[ 37@0,	  "command",	  "transaction",  "delta",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",							  "TRNtrans_delta;"			  ]
[ 38@0,	  "command",	  "transaction",  "sync",			  "():void ",											  "TRNglobal_sync;"			  ]
[ 39@0,	  "pattern",	  "chopper",	  "getTail",			  "(b:bat[:any_2,:any_1],i:lng):any_1 ",								  "CHPgetTail;"				  ]
[ 40@0,	  "pattern",	  "chopper",	  "getHead",			  "(b:bat[:any_1,:any],i:lng):any_1 ",									  "CHPgetHead;"				  ]
[ 41@0,	  "pattern",	  "chopper",	  "hasMoreElements",		  "(b:bat[:void,:any_2]) (_2:lng,h:oid,t:any_2) ",							  "CHPbunHasMoreElements;"		  ]
[ 42@0,	  "pattern",	  "chopper",	  "hasMoreElements",		  "(b:bat[:any_1,:any_2]) (_2:lng,h:any_1,t:any_2) ",							  "CHPbunHasMoreElements;"		  ]
[ 43@0,	  "command",	  "chopper",	  "hasMoreElements",		  "(b:bat[:any_1,:any_2],size:lng) (_3:lng,_4:bat[:any_1,:any_2]) ",					  "CHPhasMoreChunks;"			  ]
[ 44@0,	  "pattern",	  "chopper",	  "newIterator",		  "(b:bat[:void,:any_2]) (_2:lng,h:oid,t:any_2) ",							  "CHPbunIterator;"			  ]
[ 45@0,	  "pattern",	  "chopper",	  "newIterator",		  "(b:bat[:any_1,:any_2]) (_2:lng,h:any_1,t:any_2) ",							  "CHPbunIterator;"			  ]
[ 46@0,	  "command",	  "chopper",	  "newIterator",		  "(b:bat[:any_1,:any_2],size:lng) (_3:lng,_4:bat[:any_1,:any_2]) ",					  "CHPnewChunkIterator;"		  ]
[ 47@0,	  "pattern",	  "optimizer",	  "aliasRemoval",		  "(mod:str,fcn:str):str ",									  "QOTARoptimizerCALL;"			  ]
[ 48@0,	  "pattern",	  "optimizer",	  "aliasRemoval",		  "():str ",											  "QOTARoptimizer;"			  ]
[ 49@0,	  "pattern",	  "optimizer",	  "clrDebug",			  "():void ",											  "QOTclrdebugOptimizers;"		  ]
[ 50@0,	  "pattern",	  "optimizer",	  "costEstimation",		  "(mod:str,fcn:str):str ",									  "QOTRMoptimizerCALL;"			  ]
[ 51@0,	  "pattern",	  "optimizer",	  "costEstimation",		  "():str ",											  "QOTRMoptimizer;"			  ]
[ 52@0,	  "pattern",	  "optimizer",	  "coercions",			  "(mod:str,fcn:str):str ",									  "QOTCOoptimizerCALL;"			  ]
[ 53@0,	  "pattern",	  "optimizer",	  "coercions",			  "():str ",											  "QOTCOoptimizer;"			  ]
[ 54@0,	  "pattern",	  "optimizer",	  "crack",			  "(mod:str,fcn:str):str ",									  "QOTCRKoptimizerCALL;"		  ]
[ 55@0,	  "pattern",	  "optimizer",	  "crack",			  "():str ",											  "QOTCRKoptimizer;"			  ]
[ 56@0,	  "pattern",	  "optimizer",	  "commonExpressionRemoval",	  "(mod:any_1,fcn:any_2):str ",									  "QOTCXoptimizerCALL;"			  ]
[ 57@0,	  "pattern",	  "optimizer",	  "commonExpressionRemoval",	  "():str ",											  "QOTCXoptimizer;"			  ]
[ 58@0,	  "pattern",	  "optimizer",	  "dumpQEP",			  "():void ",											  "QEPtreedump;"			  ]
[ 59@0,	  "pattern",	  "optimizer",	  "deadCodeRemoval",		  "(mod:str,fcn:str):str ",									  "QOTDCoptimizerCALL;"			  ]
[ 60@0,	  "pattern",	  "optimizer",	  "deadCodeRemoval",		  "():str ",											  "QOTDCoptimizer;"			  ]
[ 61@0,	  "pattern",	  "optimizer",	  "emptySet",			  "(mod:str,fcn:str):str ",									  "QOTESoptimizerCALL;"			  ]
[ 62@0,	  "pattern",	  "optimizer",	  "emptySet",			  "():str ",											  "QOTESoptimizer;"			  ]
[ 63@0,	  "pattern",	  "optimizer",	  "expressionAccumulation",	  "(mod:str,fcn:str):str ",									  "QOTAEoptimizerCALL;"			  ]
[ 64@0,	  "pattern",	  "optimizer",	  "expressionAccumulation",	  "():str ",											  "QOTAEoptimizer;"			  ]
[ 65@0,	  "pattern",	  "optimizer",	  "factorize",			  "(mod:str,fcn:str):str ",									  "QOTFToptimizerCALL;"			  ]
[ 66@0,	  "pattern",	  "optimizer",	  "factorize",			  "():str ",											  "QOTFToptimizer;"			  ]
[ 67@0,	  "pattern",	  "optimizer",	  "generators",			  "(mod:str,fcn:str):str ",									  "QOTBGoptimizerCALL;"			  ]
[ 68@0,	  "pattern",	  "optimizer",	  "generators",			  "():str ",											  "QOTBGoptimizer;"			  ]
[ 69@0,	  "pattern",	  "optimizer",	  "garbageCollector",		  "(mod:str,fcn:str):str ",									  "QOTGCoptimizerCALL;"			  ]
[ 70@0,	  "pattern",	  "optimizer",	  "garbageCollector",		  "():str ",											  "QOTGCoptimizer;"			  ]
[ 71@0,	  "pattern",	  "optimizer",	  "multiplex",			  "(CMD:str,a:any...):any ",									  "OPTmultiplex;"			  ]
[ 72@0,	  "pattern",	  "optimizer",	  "macroContraction",		  "(mod:str,fcn:str):void ",									  "QOTMCoptimizerSymbol;"		  ]
[ 73@0,	  "pattern",	  "optimizer",	  "macroContraction",		  "(mod:str):void ",										  "QOTMCoptimizerModule;"		  ]
[ 74@0,	  "pattern",	  "optimizer",	  "macroContraction",		  "():void ",											  "QOTMCoptimizer;"			  ]
[ 75@0,	  "pattern",	  "optimizer",	  "macroExpansion",		  "(mod:str,fcn:str):void ",									  "QOTMEoptimizerSymbol;"		  ]
[ 76@0,	  "pattern",	  "optimizer",	  "macroExpansion",		  "(mod:str):void ",										  "QOTMEoptimizerModule;"		  ]
[ 77@0,	  "pattern",	  "optimizer",	  "macroExpansion",		  "():void ",											  "QOTMEoptimizer;"			  ]
[ 78@0,	  "pattern",	  "optimizer",	  "multitable",			  "(mod:str,fcn:str):str ",									  "QOTMToptimizerCALL;"			  ]
[ 79@0,	  "pattern",	  "optimizer",	  "multitable",			  "():str ",											  "QOTMToptimizer;"			  ]
[ 80@0,	  "pattern",	  "optimizer",	  "optimize",			  "(mod:str,fcn:str):void ",									  "QOToptimize;"			  ]
[ 81@0,	  "pattern",	  "optimizer",	  "partitionedQuery",		  "(mod:str,fcn:str):str ",									  "QOTBPToptimizerCALL;"		  ]
[ 82@0,	  "pattern",	  "optimizer",	  "partitionedQuery",		  "():str ",											  "QOTBPToptimizer;"			  ]
[ 83@0,	  "pattern",	  "optimizer",	  "peephole",			  "(mod:str,fcn:str):str ",									  "QOTPHoptimizerCALL;"			  ]
[ 84@0,	  "pattern",	  "optimizer",	  "peephole",			  "():str ",											  "QOTPHoptimizer;"			  ]
[ 85@0,	  "pattern",	  "optimizer",	  "prelude",			  "():void ",											  "optimizer_prelude;"			  ]
[ 86@0,	  "pattern",	  "optimizer",	  "remoteQueries",		  "(mod:str,fcn:str):str ",										  "QOTRQoptimizerCALL;"			  ]
[ 87@0,	  "pattern",	  "optimizer",	  "remoteQueries",		  "():str ",												  "QOTRQoptimizer;"			  ]
[ 88@0,	  "pattern",	  "optimizer",	  "reduce",			  "(mod:str,fcn:str):str ",										  "QOTMRoptimizerCALL;"			  ]
[ 89@0,	  "pattern",	  "optimizer",	  "reduce",			  "():str ",												  "QOTMRoptimizer;"			  ]
[ 90@0,	  "pattern",	  "optimizer",	  "showPlan",			  "():void ",												  "QOTshowPlan;"			  ]
[ 91@0,	  "pattern",	  "optimizer",	  "showPlan",			  "(M:str,F:str,s:str):void ",										  "QOTshowPlan;"			  ]
[ 92@0,	  "pattern",	  "optimizer",	  "showFlowGraph",		  "(M:str,F:str,s:str):void ",										  "QOTshowFlowGraph;"			  ]
[ 93@0,	  "pattern",	  "optimizer",	  "setDebug",			  "():void ",												  "QOTdebugOptimizers;"			  ]
[ 94@0,	  "pattern",	  "optimizer",	  "singleton",			  "(mod:str,fcn:str):str ",										  "QOTSToptimizerCALL;"			  ]
[ 95@0,	  "pattern",	  "optimizer",	  "singleton",			  "():str ",												  "QOTSToptimizer;"			  ]
[ 96@0,	  "pattern",	  "optimizer",	  "strengthReduction",		  "(mod:str,fcn:str):str ",										  "QOTSRoptimizerCALL;"			  ]
[ 97@0,	  "pattern",	  "optimizer",	  "strengthReduction",		  "():str ",												  "QOTSRoptimizer;"			  ]
[ 98@0,	  "command",	  "mat",	  "expand",			  "(grp:str):bat[:any_1,:any_2] ",									  "MATdummy;"				  ]
[ 99@0,	  "command",	  "mat",	  "info",			  "(g:str,e:str):bat[:any_1,:any_2] ",									  "MATinfo;"				  ]
[ 100@0,  "command",	  "mat",	  "iterator",			  "(grp:str):bat[:any_1,:any_2] ",									  "MATdummy;"				  ]
[ 101@0,  "pattern",	  "mat",	  "new",			  "(b:bat[:any_1,:any_2]...):bat[:any_1,:any_2] ",							  "MATnew;"				  ]
[ 102@0,  "pattern",	  "mat",	  "print",			  "(b:bat[:any_1,:any_2]...):void ",									  "MATprint;"				  ]
[ 103@0,  "pattern",	  "mat",	  "pack",			  "(b:bat[:any_1,:any_2]...):bat[:any_1,:any_2] ",							  "MATpack;"				  ]
[ 104@0,  "pattern",	  "statistics",	  "close",			  "():void ",												  "STATclose;"				  ]
[ 105@0,  "command",	  "statistics",	  "dump",			  "():void ",												  "STATdump;"				  ]
[ 106@0,  "command",	  "statistics",	  "discard",			  "(name:bat[:any_1,:any_2]):void ",									  "STATdiscard2;"			  ]
[ 107@0,  "pattern",	  "statistics",	  "discard",			  "(name:str):void ",											  "STATdiscard;"			  ]
[ 108@0,  "command",	  "statistics",	  "deposit",			  "(name:bat[:any_1,:any_2]):void ",									  "STATdeposit;"			  ]
[ 109@0,  "command",	  "statistics",	  "deposit",			  "(name:str):void ",											  "STATdepositStr;"			  ]
[ 110@0,  "pattern",	  "statistics",	  "destroy",			  "():void ",												  "STATdestroy;"			  ]
[ 111@0,  "command",	  "statistics",	  "epilogue",			  "():void ",												  "STATepilogue;"			  ]
[ 112@0,  "command",	  "statistics",	  "forceUpdate",		  "(bnme:str):void ",											  "STATforceUpdate;"			  ]
[ 113@0,  "command",	  "statistics",	  "forceUpdate",		  "():void ",												  "STATforceUpdateAll;"			  ]
[ 114@0,  "command",	  "statistics",	  "getHistogram",		  "(nme:str):bat[:any_1,:any_2] ",									  "STATgetHistogram;"			  ]
[ 115@0,  "command",	  "statistics",	  "getMax",			  "(nme:str):lng ",											  "STATgetMax;"				  ]
[ 116@0,  "command",	  "statistics",	  "getMin",			  "(nme:str):lng ",											  "STATgetMin;"				  ]
[ 117@0,  "command",	  "statistics",	  "getSize",			  "(nme:str):lng ",											  "STATgetSize;"			  ]
[ 118@0,  "command",	  "statistics",	  "getCount",			  "(nme:str):lng ",											  "STATgetCount;"			  ]
[ 119@0,  "command",	  "statistics",	  "getHotset",			  "():bat[:int,:str] ",											  "STATgetHotset;"			  ]
[ 120@0,  "command",	  "statistics",	  "getObjects",			  "():bat[:int,:str] ",											  "STATgetObjects;"			  ]
[ 121@0,  "pattern",	  "statistics",	  "hasMoreElements",		  "() (_1:lng,_2:str) ",										  "STAThasMoreElements;"		  ]
[ 122@0,  "pattern",	  "statistics",	  "newIterator",		  "() (_1:lng,_2:str) ",										  "STATnewIterator;"			  ]
[ 123@0,  "pattern",	  "statistics",	  "open",			  "():void ",												  "STATopen;"				  ]
[ 124@0,  "command",	  "statistics",	  "prelude",			  "():void ",												  "STATprelude;"			  ]
[ 125@0,  "command",	  "statistics",	  "release",			  "(name:bat[:any_1,:any_2]):void ",									  "STATrelease;"			  ]
[ 126@0,  "pattern",	  "statistics",	  "release",			  "(name:str):void ",											  "STATreleaseStr;"			  ]
[ 127@0,  "pattern",	  "statistics",	  "releaseAll",			  "():void ",												  "STATreleaseAll;"			  ]
[ 128@0,  "pattern",	  "statistics",	  "toString",			  "(name:any_1):str ",											  "STATtoString;"			  ]
[ 129@0,  "pattern",	  "statistics",	  "take",			  "(name:any_1):any_2 ",										  "STATtake;"				  ]
[ 130@0,  "command",	  "statistics",	  "update",			  "():void ",												  "STATupdate;"				  ]
[ 131@0,  "command",	  "profiler",	  "activate",			  "(name:str):void ",											  "CMDactivateProfiler;"		  ]
[ 132@0,  "command",	  "profiler",	  "cleanup",			  "():void ",												  "CMDcleanup;"				  ]
[ 133@0,  "command",	  "profiler",	  "clearTrace",			  "():void ",												  "CMDclearTrace;"			  ]
[ 134@0,  "command",	  "profiler",	  "clrFilter",			  "(mod:str,fcn:str):void ",										  "CMDclrFilterProfiler;"		  ]
[ 135@0,  "command",	  "profiler",	  "closeStream",		  "():void ",												  "CMDcloseProfilerStream;"		  ]
[ 136@0,  "command",	  "profiler",	  "dumpTrace",			  "():void ",												  "CMDdumpTrace;"			  ]
[ 137@0,  "command",	  "profiler",	  "deactivate",			  "(name:str):void ",											  "CMDdeactivateProfiler;"		  ]
[ 138@0,  "command",	  "profiler",	  "getTrace",			  "(e:str):bat[:int,:any_1] ",										  "CMDgetTrace;"			  ]
[ 139@0,  "command",	  "profiler",	  "openStream",			  "(fnme:str):void ",											  "CMDsetProfilerStream;"		  ]
[ 140@0,  "command",	  "profiler",	  "openStream",			  "():void ",												  "CMDopenProfilerStream;"		  ]
[ 141@0,  "command",	  "profiler",	  "setOfflineProfiling",	  "():void ",												  "CMDsetOfflineProfiling;"		  ]
[ 142@0,  "command",	  "profiler",	  "setOnlineProfiling",		  "():void ",												  "CMDsetOnlineProfiling;"		  ]
[ 143@0,  "command",	  "profiler",	  "setCachedProfiling",		  "():void ",												  "CMDsetCachedProfiling;"		  ]
[ 144@0,  "command",	  "profiler",	  "stopTrace",			  "():void ",												  "CMDstopTrace;"			  ]
[ 145@0,  "command",	  "profiler",	  "startTrace",			  "():void ",												  "CMDstartTrace;"			  ]
[ 146@0,  "command",	  "profiler",	  "stop",			  "():void ",												  "CMDstopProfiler;"			  ]
[ 147@0,  "command",	  "profiler",	  "start",			  "():void ",												  "CMDstartProfiler;"			  ]
[ 148@0,  "command",	  "profiler",	  "setEndPoint",		  "(mod:str,fcn:str):void ",										  "CMDendPointProfiler;"		  ]
[ 149@0,  "command",	  "profiler",	  "setStartPoint",		  "(mod:str,fcn:str):void ",										  "CMDstartPointProfiler;"		  ]
[ 150@0,  "command",	  "profiler",	  "setFilter",			  "(mod:str,fcn:str):void ",										  "CMDsetFilterProfiler;"		  ]
[ 151@0,  "command",	  "profiler",	  "setNone",			  "():void ",												  "CMDsetNoneProfiler;"			  ]
[ 152@0,  "command",	  "profiler",	  "setAll",			  "():void ",												  "CMDsetAllProfiler;"			  ]
[ 153@0,  "pattern",	  "mserver",	  "bind",			  "(key:int,remoteName:str):bat[:any_1,:any_2] ",							  "SERVERbindBAT;"			  ]
[ 154@0,  "command",	  "mserver",	  "connect_ssl",		  "(host:str,port:int,usr:str,passwd:str,lang:str):int ",						  "SERVERconnectssl;"			  ]
[ 155@0,  "command",	  "mserver",	  "connect",			  "(host:str,port:int,usr:str,passwd:str,lang:str):int ",						  "SERVERconnect;"			  ]
[ 156@0,  "command",	  "mserver",	  "destroy",			  "(mid:int):void ",											  "SERVERdestroy;"			  ]
[ 157@0,  "command",	  "mserver",	  "disconnect",			  "(mid:int):void ",											  "SERVERdisconnect;"			  ]
[ 158@0,  "command",	  "mserver",	  "epilogue",			  "():void ",												  "SERVERepilogue;"			  ]
[ 159@0,  "command",	  "mserver",	  "explain",			  "(mid:int):str ",											  "SERVERexplain;"			  ]
[ 160@0,  "command",	  "mserver",	  "error",			  "(mid:int):int ",											  "SERVERerror;"			  ]
[ 161@0,  "command",	  "mserver",	  "fetch_reset",		  "(hdl:int):int ",											  "SERVERfetch_reset;"			  ]
[ 162@0,  "command",	  "mserver",	  "fetch_line",			  "(hdl:int):str ",											  "SERVERfetch_line;"			  ]
[ 163@0,  "command",	  "mserver",	  "fetch_field_array",		  "(hdl:int):bat[:int,:str] ",										  "SERVERfetch_field_bat;"		  ]
[ 164@0,  "command",	  "mserver",	  "fetch_field",		  "(hdl:int,fnr:int):chr ",										  "SERVERfetch_field_chr;"		  ]
[ 165@0,  "command",	  "mserver",	  "fetch_field",		  "(hdl:int,fnr:int):oid ",										  "SERVERfetch_field_oid;"		  ]
[ 166@0,  "command",	  "mserver",	  "fetch_field",		  "(hdl:int,fnr:int):void ",										  "SERVERfetch_field_void;"		  ]
[ 167@0,  "command",	  "mserver",	  "fetch_field",		  "(hdl:int,fnr:int):sht ",										  "SERVERfetch_field_sht;"		  ]
[ 168@0,  "command",	  "mserver",	  "fetch_field",		  "(hdl:int,fnr:int):lng ",										  "SERVERfetch_field_lng;"		  ]
[ 169@0,  "command",	  "mserver",	  "fetch_field",		  "(hdl:int,fnr:int):int ",										  "SERVERfetch_field_int;"		  ]
[ 170@0,  "command",	  "mserver",	  "fetch_field",		  "(hdl:int,fnr:int):str ",										  "SERVERfetch_field_str;"		  ]
[ 171@0,  "command",	  "mserver",	  "fetch_all_rows",		  "(hdl:int):int ",											  "SERVERfetch_all_rows;"		  ]
[ 172@0,  "command",	  "mserver",	  "fetch_row",			  "(hdl:int):int ",											  "SERVERfetch_row;"			  ]
[ 173@0,  "command",	  "mserver",	  "fetch_row",			  "(hdl:int):int ",											  "SERVERrows_affected;"		  ]
[ 174@0,  "command",	  "mserver",	  "finish",			  "(hdl:int):int ",											  "SERVERfinish;"			  ]
[ 175@0,  "command",	  "mserver",	  "getError",			  "(mid:int):str ",											  "SERVERgetError;"			  ]
[ 176@0,  "command",	  "mserver",	  "get_row_count",		  "(hdl:int):int ",											  "SERVERget_row_count;"		  ]
[ 177@0,  "command",	  "mserver",	  "get_field_count",		  "(hdl:int):int ",											  "SERVERget_field_count;"		  ]
[ 178@0,  "command",	  "mserver",	  "lookup",			  "(dbalias:str):int ",											  "SERVERlookup;"			  ]
[ 179@0,  "command",	  "mserver",	  "listen_ssl",			  "(port:int,maxusers:int,keyfile:str,certfile:str,cmd:str):int ",					  "SERVERlistenSSL;"			  ]
[ 180@0,  "command",	  "mserver",	  "listen",			  "(port:int,maxusers:int,cmd:str):int ",								  "SERVERlisten3;"			  ]
[ 181@0,  "command",	  "mserver",	  "listen",			  "(port:int,maxusers:int):int ",									  "SERVERlisten2;"			  ]
[ 182@0,  "command",	  "mserver",	  "listen",			  "(port:int):int ",											  "SERVERlisten_port;"			  ]
[ 183@0,  "command",	  "mserver",	  "listen",			  "():int ",												  "SERVERlisten_default;"		  ]
[ 184@0,  "command",	  "mserver",	  "malclient",			  "(in:streams,out:streams):void ",									  "SERVERclient;"			  ]
[ 185@0,  "command",	  "mserver",	  "next_result",		  "(hdl:int):int ",											  "SERVERnext_result;"			  ]
[ 186@0,  "command",	  "mserver",	  "prelude",			  "():void ",												  "SERVERprelude;"			  ]
[ 187@0,  "pattern",	  "mserver",	  "put",			  "(mid:int,nme:str,val:any_1):void ",									  "SERVERput;"				  ]
[ 188@0,  "command",	  "mserver",	  "prepare",			  "(mid:int,qry:str):int ",										  "SERVERprepare;"			  ]
[ 189@0,  "command",	  "mserver",	  "ping",			  "(mid:int):int ",											  "SERVERping;"				  ]
[ 190@0,  "pattern",	  "mserver",	  "query_array",		  "(mid:int,qry:str,arg:str...):int ",									  "SERVERquery_array;"			  ]
[ 191@0,  "command",	  "mserver",	  "query_handle",		  "(mid:int,qry:str):int ",										  "SERVERquery_handle;"			  ]
[ 192@0,  "command",	  "mserver",	  "query",			  "(mid:int,qry:str):int ",										  "SERVERquery;"			  ]
[ 193@0,  "command",	  "mserver",	  "rpc",			  "(key:int,qry:str):void ",										  "SERVERquery;"			  ]
[ 194@0,  "pattern",	  "mserver",	  "rpc",			  "(key:int,qry:str):bat[:any_1,:any_2] ",								  "SERVERmapi_rpc_bat;"			  ]
[ 195@0,  "pattern",	  "mserver",	  "rpc",			  "(key:int,qry:str):any ",										  "SERVERmapi_rpc_single_row;"		  ]
[ 196@0,  "command",	  "mserver",	  "reconnect",			  "(mid:int):void ",											  "SERVERreconnect;"			  ]
[ 197@0,  "command",	  "mserver",	  "reconnect",			  "(dbalias:str,host:str,port:int,usr:str,passwd:str,lang:str):int ",					  "SERVERreconnectAlias;"		  ]
[ 198@0,  "command",	  "mserver",	  "resume",			  "():void ",												  "SERVERresume;"			  ]
[ 199@0,  "command",	  "mserver",	  "setAlias",			  "(dbalias:str):void ",										  "SERVERsetAlias;"			  ]
[ 200@0,  "command",	  "mserver",	  "suspend",			  "():void ",												  "SERVERsuspend;"			  ]
[ 201@0,  "command",	  "mserver",	  "stop",			  "():void ",												  "SERVERstop;"				  ]
[ 202@0,  "pattern",	  "language",	  "assert",			  "(v:any_1,pname:str,oper:str,val:any_2):void ",							  "MALassertTriple;"			  ]
[ 203@0,  "command",	  "language",	  "assert",			  "(v:oid,term:str):void ",										  "MALassertOid;"			  ]
[ 204@0,  "command",	  "language",	  "assert",			  "(v:str,term:str):void ",										  "MALassertStr;"			  ]
[ 205@0,  "command",	  "language",	  "assert",			  "(v:lng,term:str):void ",										  "MALassertLng;"			  ]
[ 206@0,  "command",	  "language",	  "assert",			  "(v:int,term:str):void ",										  "MALassertInt;"			  ]
[ 207@0,  "command",	  "language",	  "assert",			  "(v:sht,term:str):void ",										  "MALassertSht;"			  ]
[ 208@0,  "command",	  "language",	  "assert",			  "(v:bit,term:str):void ",										  "MALassertBit;"			  ]
[ 209@0,  "pattern",	  "language",	  "call",			  "(s:bat[:any_1,:str]):void ",										  "CMDcallBAT;"				  ]
[ 210@0,  "pattern",	  "language",	  "call",			  "(s:str):void ",											  "CMDcallString;"			  ]
[ 211@0,  "command",	  "language",	  "nextElement",		  "(step:dbl,last:dbl) (_3:bit,_4:dbl) ",								  "RNGnextElement_dbl;"			  ]
[ 212@0,  "command",	  "language",	  "nextElement",		  "(step:flt,last:flt) (_3:bit,_4:flt) ",								  "RNGnextElement_flt;"			  ]
[ 213@0,  "command",	  "language",	  "nextElement",		  "(step:lng,last:lng) (_3:bit,_4:lng) ",								  "RNGnextElement_lng;"			  ]
[ 214@0,  "command",	  "language",	  "nextElement",		  "(step:int,last:int) (_3:bit,_4:int) ",								  "RNGnextElement_int;"			  ]
[ 215@0,  "command",	  "language",	  "nextElement",		  "(step:sht,last:sht) (_3:bit,_4:sht) ",								  "RNGnextElement_sht;"			  ]
[ 216@0,  "command",	  "language",	  "nextElement",		  "(step:oid,last:oid) (_3:bit,_4:oid) ",								  "RNGnextElement_oid;"			  ]
[ 217@0,  "command",	  "language",	  "newRange",			  "(v:dbl) (_2:bit,_3:dbl) ",										  "RNGnewRange_dbl;"			  ]
[ 218@0,  "command",	  "language",	  "newRange",			  "(v:flt) (_2:bit,_3:flt) ",										  "RNGnewRange_flt;"			  ]
[ 219@0,  "command",	  "language",	  "newRange",			  "(v:lng) (_2:bit,_3:lng) ",										  "RNGnewRange_lng;"			  ]
[ 220@0,  "command",	  "language",	  "newRange",			  "(v:int) (_2:bit,_3:int) ",										  "RNGnewRange_int;"			  ]
[ 221@0,  "command",	  "language",	  "newRange",			  "(v:sht) (_2:bit,_3:sht) ",										  "RNGnewRange_sht;"			  ]
[ 222@0,  "command",	  "language",	  "newRange",			  "(v:oid) (_2:bit,_3:oid) ",										  "RNGnewRange_oid;"			  ]
[ 223@0,  "command",	  "language",	  "register",			  "(m:str,f:str,code:str,help:str):void ",								  "CMDregisterFunction;"		  ]
[ 224@0,  "command",	  "language",	  "raise",			  "(msg:str):str ",											  "CMDraise;"				  ]
[ 225@0,  "command",	  "language",	  "source",			  "(f:str):void ",											  "CMDevalFile;"			  ]
[ 226@0,  "command",	  "inspect",	  "getEnvironment",		  "():bat[:str,:str] ",											  "INSPECTgetEnvironment;"		  ]
[ 227@0,  "command",	  "inspect",	  "getAtomSizes",		  "():bat[:int,:int] ",											  "INSPECTatom_sizes;"			  ]
[ 228@0,  "command",	  "inspect",	  "getAtomSuperNames",		  "():bat[:int,:str] ",											  "INSPECTatom_sup_names;"		  ]
[ 229@0,  "command",	  "inspect",	  "getAtomNames",		  "():bat[:int,:str] ",											  "INSPECTatom_names;"			  ]
[ 230@0,  "command",	  "inspect",	  "getTypeIndex",		  "(v:str):int ",											  "INSPECTtypeIndex;"			  ]
[ 231@0,  "command",	  "inspect",	  "getTypeName",		  "(v:int):str ",											  "INSPECTtypename;"			  ]
[ 232@0,  "pattern",	  "inspect",	  "getType",			  "(v:any_1):str ",											  "INSPECTtypeName;"			  ]
[ 233@0,  "pattern",	  "inspect",	  "getType",			  "(v:bat[:any_1,:any_2]) (ht:str,tt:str) ",								  "INSPECTtypeName;"			  ]
[ 234@0,  "command",	  "inspect",	  "getSize",			  "(mod:str,fcn:str):lng ",										  "INSPECTgetFunctionSize;"		  ]
[ 235@0,  "command",	  "inspect",	  "getSize",			  "(mod:str):bat[:str,:lng] ",										  "INSPECTgetModuleSize;"		  ]
[ 236@0,  "pattern",	  "inspect",	  "getSize",			  "():lng ",												  "INSPECTgetSize;"			  ]
[ 237@0,  "command",	  "inspect",	  "getAddresses",		  "():bat[:void,:str] ",										  "INSPECTgetAllAddresses;"		  ]
[ 238@0,  "command",	  "inspect",	  "getSignatures",		  "():bat[:void,:str] ",										  "INSPECTgetAllSignatures;"		  ]
[ 239@0,  "command",	  "inspect",	  "getFunction",		  "():bat[:void,:str] ",										  "INSPECTgetAllFunctions;"		  ]
[ 240@0,  "command",	  "inspect",	  "getModule",			  "():bat[:void,:str] ",										  "INSPECTgetAllModules;"		  ]
[ 241@0,  "command",	  "inspect",	  "getKind",			  "():bat[:void,:str] ",										  "INSPECTgetkind;"			  ]
[ 242@0,  "command",	  "inspect",	  "getSource",			  "(mod:str,fcn:str):str ",										  "INSPECTgetSource;"			  ]
[ 243@0,  "command",	  "inspect",	  "getComment",			  "(mod:str,fcn:str):bat[:str,:str] ",									  "INSPECTgetComment;"			  ]
[ 244@0,  "command",	  "inspect",	  "getAddress",			  "(mod:str,fcn:str):bat[:str,:str] ",									  "INSPECTgetAddress;"			  ]
[ 245@0,  "command",	  "inspect",	  "getSignature",		  "(mod:str,fcn:str):bat[:str,:str] ",									  "INSPECTgetSignature;"		  ]
[ 246@0,  "command",	  "inspect",	  "getDefinition",		  "(mod:str,fcn:str):bat[:str,:str] ",									  "INSPECTgetDefinition;"		  ]
[ 247@0,  "command",	  "inspect",	  "showSource",			  "(mod:str,fcn:str):str ",										  "INSPECTshowFunction3;"		  ]
[ 248@0,  "pattern",	  "inspect",	  "showSource",			  "():void ",												  "INSPECTshowFunction;"		  ]
[ 249@0,  "command",	  "manual",	  "createHelp",			  "():void ",												  "MANUALcreateHelp;"			  ]
[ 250@0,  "command",	  "manual",	  "createOverview",		  "():void ",												  "MANUALcreateOverview;"		  ]
[ 251@0,  "command",	  "manual",	  "create",			  "():void ",												  "MANUALcreate0;"			  ]
[ 252@0,  "command",	  "manual",	  "create",			  "(mod:str):void ",											  "MANUALcreate1;"			  ]
[ 253@0,  "command",	  "manual",	  "create",			  "(file:str,mod:str,recursive:int):void ",								  "MANUALcreate;"			  ]
[ 254@0,  "command",	  "manual",	  "create",			  "(file:str,mod:str):void ",										  "MANUALcreate2;"			  ]
[ 255@0,  "command",	  "manual",	  "completion",			  "(text:str):void ",											  "MANUALcompletion;"			  ]
[ 256@0,  "command",	  "manual",	  "help",			  "(text:str):void ",											  "MANUALhelp;"				  ]
[ 257@0,  "command",	  "manual",	  "search",			  "(text:str):void ",											  "MANUALsearch;"			  ]
[ 258@0,  "command",	  "pbm",	  "compress",			  "(grp:str):void ",											  "PBMcompress;"			  ]
[ 259@0,  "command",	  "pbm",	  "close",			  "():void ",												  "PBMclose;"				  ]
[ 260@0,  "command",	  "pbm",	  "dump",			  "():void ",												  "PBMdump;"				  ]
[ 261@0,  "command",	  "pbm",	  "discard",			  "(nme:str,b:bat[:void,:any_1]):void ",								  "PBMdiscardComponent;"		  ]
[ 262@0,  "command",	  "pbm",	  "discard",			  "(name:str):void ",											  "PBMdiscard;"				  ]
[ 263@0,  "command",	  "pbm",	  "discard",			  "():void ",												  "PBMdiscardAll;"			  ]
[ 264@0,  "command",	  "pbm",	  "deposit",			  "(nme:str,b:bat[:any_1,:any_2]):void ",								  "PBMdepositIndexed;"			  ]
[ 265@0,  "command",	  "pbm",	  "deposit",			  "(nme:str,elm:str,b:bat[:any_1,:any_2]):void ",							  "PBMdeposit;"				  ]
[ 266@0,  "command",	  "pbm",	  "deposit",			  "(nme:str,elm:str,b:str):void ",									  "PBMdepositByName;"			  ]
[ 267@0,  "command",	  "pbm",	  "deposit",			  "(nme:str,elm:str,idx:int):void ",									  "PBMdeposit;"				  ]
[ 268@0,  "command",	  "pbm",	  "destroy",			  "():void ",												  "PBMdestroy;"				  ]
[ 269@0,  "command",	  "pbm",	  "epilogue",			  "():void ",												  "PBMepilogue;"			  ]
[ 270@0,  "command",	  "pbm",	  "getRange",			  "(b:bat[:void,:any_1]) (first:oid,last:oid) ",							  "PBMgetRange;"			  ]
[ 271@0,  "command",	  "pbm",	  "getLast",			  "(grp:str):bat[:any_1,:any_2] ",									  "PBMgetLast;"				  ]
[ 272@0,  "command",	  "pbm",	  "getNextElement",		  "(grp:str,first:oid,last:oid):bat[:any_1,:any_2] ",							  "PBMgetNextElementRng;"		  ]
[ 273@0,  "command",	  "pbm",	  "getNextElement",		  "(grp:str):bat[:any_2,:any_1] ",									  "PBMgetNextElement;"			  ]
[ 274@0,  "command",	  "pbm",	  "generator",			  "(s:str):bat[:any_1,:any_2] ",									  "PBMdummy;"				  ]
[ 275@0,  "command",	  "pbm",	  "getComponents",		  "(grp:str):bat[:str,:str] ",										  "PBMgetComponents;"			  ]
[ 276@0,  "command",	  "pbm",	  "getNextName",		  "() (_1:int,_2:str,_3:str) ",										  "PBMgetNextName;"			  ]
[ 277@0,  "command",	  "pbm",	  "getNames",			  "():bat[:str,:str] ",											  "PBMgetNames;"			  ]
[ 278@0,  "command",	  "pbm",	  "newIterator",		  "(grp:str,first:oid,last:oid):bat[:any_1,:any_2] ",							  "PBMnewIteratorRng;"			  ]
[ 279@0,  "command",	  "pbm",	  "newIterator",		  "(grp:str):bat[:any_1,:any_2] ",									  "PBMnewIterator;"			  ]
[ 280@0,  "command",	  "pbm",	  "newIterator",		  "() (_1:int,_2:str,_3:str) ",										  "PBMnewIteratorBase;"			  ]
[ 281@0,  "command",	  "pbm",	  "open",			  "():void ",												  "PBMopen;"				  ]
[ 282@0,  "command",	  "pbm",	  "prelude",			  "():void ",												  "PBMprelude;"				  ]
[ 283@0,  "command",	  "pbm",	  "releaseAll",			  "(nme:str):void ",											  "PBMreleaseAll;"			  ]
[ 284@0,  "command",	  "pbm",	  "setReadMode",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",								  "PBMdummy;"				  ]
[ 285@0,  "command",	  "pbm",	  "setWriteMode",		  "(nme:str):bat[:any_1,:any_2] ",									  "PBMdummy;"				  ]
[ 286@0,  "command",	  "pbm",	  "take",			  "(grp:str,idx:int):bat[:any_1,:any_2] ",								  "PBMtakeIndexed;"			  ]
[ 287@0,  "command",	  "pbm",	  "take",			  "(grp:str,elm:str):bat[:any_1,:any_2] ",								  "PBMtake;"				  ]
[ 288@0,  "pattern",	  "box",	  "close",			  "(bname:str):void ",											  "BOXclose;"				  ]
[ 289@0,  "pattern",	  "box",	  "discard",			  "(bname:str,name:str):void ",										  "BOXdiscard;"				  ]
[ 290@0,  "pattern",	  "box",	  "deposit",			  "(bname:str,name:str,v:any_1):void ",									  "BOXdeposit;"				  ]
[ 291@0,  "pattern",	  "box",	  "destroy",			  "(bname:str):void ",											  "BOXdestroy;"				  ]
[ 292@0,  "command",	  "box",	  "getBoxNames",		  "():bat[:int,:str] ",											  "BOXgetBoxNames;"			  ]
[ 293@0,  "pattern",	  "box",	  "iterator",			  "(nme:str):lng ",											  "BOXiterator;"			  ]
[ 294@0,  "pattern",	  "box",	  "open",			  "(nme:str):any_1 ",											  "BOXopen;"				  ]
[ 295@0,  "pattern",	  "box",	  "release",			  "(bname:str,nme:str,val:any_1):void ",								  "BOXrelease;"				  ]
[ 296@0,  "pattern",	  "box",	  "releaseAll",			  "(bname:str):void ",											  "BOXreleaseAll;"			  ]
[ 297@0,  "pattern",	  "box",	  "toString",			  "(bname:str,name:str):str ",										  "BOXtoString;"			  ]
[ 298@0,  "pattern",	  "box",	  "take",			  "(bnme:str,vnme:str):any_1 ",										  "BOXtake;"				  ]
[ 299@0,  "command",	  "bbp",	  "bind",			  "(idx:int):bat[:any_1,:any_2] ",									  "CMDbbpbindindex;"			  ]
[ 300@0,  "pattern",	  "bbp",	  "bind",			  "(name:str):bat[:any_1,:any_2] ",									  "CMDbbpbind;"				  ]
[ 301@0,  "pattern",	  "bbp",	  "bind",			  "(name:str,loc:str):bat[:any_1,:any_2] ",								  "CMDbbpbindDefinition;"		  ]
[ 302@0,  "pattern",	  "bbp",	  "commit",			  "():void ",												  "CMDbbpReleaseAll;"			  ]
[ 303@0,  "command",	  "bbp",	  "close",			  "():void ",												  "CMDbbpclose;"			  ]
[ 304@0,  "pattern",	  "bbp",	  "discard",			  "(name:str):void ",											  "CMDbbpdiscard;"			  ]
[ 305@0,  "pattern",	  "bbp",	  "destroy",			  "(b:bat[:any_1,:any_2],immediate:bit):void ",								  "CMDbbpdestroyBAT;"			  ]
[ 306@0,  "pattern",	  "bbp",	  "destroy",			  "(b:bat[:any_1,:any_2]):void ",									  "CMDbbpdestroyBAT1;"			  ]
[ 307@0,  "pattern",	  "bbp",	  "deposit",			  "(name:str,v:bat[:any_1,:any_2]):void ",								  "CMDbbpdeposit;"			  ]
[ 308@0,  "command",	  "bbp",	  "destroy",			  "():void ",												  "CMDbbpdestroy;"			  ]
[ 309@0,  "command",	  "bbp",	  "getLRefCount",		  "(b:bat[:any_1,:any_2]):int ",									  "CMDgetBATlrefcnt;"			  ]
[ 310@0,  "command",	  "bbp",	  "getRefCount",		  "(b:bat[:any_1,:any_2]):int ",									  "CMDgetBATrefcnt;"			  ]
[ 311@0,  "command",	  "bbp",	  "getKind",			  "():bat[:int,:str] ",											  "CMDbbpKind;"				  ]
[ 312@0,  "command",	  "bbp",	  "getStatus",			  "():bat[:int,:str] ",											  "CMDbbpStatus;"			  ]
[ 313@0,  "command",	  "bbp",	  "getDirty",			  "():bat[:int,:str] ",											  "CMDbbpDirty;"			  ]
[ 314@0,  "command",	  "bbp",	  "getHeat",			  "():bat[:int,:int] ",											  "CMDbbpHeat;"				  ]
[ 315@0,  "command",	  "bbp",	  "getLocation",		  "():bat[:int,:str] ",											  "CMDbbpLocation;"			  ]
[ 316@0,  "command",	  "bbp",	  "getLRefCount",		  "():bat[:int,:int] ",											  "CMDbbpLRefCount;"			  ]
[ 317@0,  "command",	  "bbp",	  "getRefCount",		  "():bat[:int,:int] ",											  "CMDbbpRefCount;"			  ]
[ 318@0,  "command",	  "bbp",	  "getCount",			  "():bat[:int,:lng] ",											  "CMDbbpCount;"			  ]
[ 319@0,  "command",	  "bbp",	  "getName",			  "(b:bat[:any_1,:any_2]):str ",									  "CMDbbpName;"				  ]
[ 320@0,  "command",	  "bbp",	  "getRNames",			  "():bat[:int,:str] ",											  "CMDbbpRNames;"			  ]
[ 321@0,  "command",	  "bbp",	  "getNames",			  "():bat[:int,:str] ",											  "CMDbbpNames;"			  ]
[ 322@0,  "command",	  "bbp",	  "getTailType",		  "():bat[:int,:str] ",											  "CMDbbpTailType;"			  ]
[ 323@0,  "command",	  "bbp",	  "getHeadType",		  "():bat[:int,:str] ",											  "CMDbbpHeadType;"			  ]
[ 324@0,  "pattern",	  "bbp",	  "getObjects",			  "():bat[:int,:str] ",											  "CMDbbpGetObjects;"			  ]
[ 325@0,  "pattern",	  "bbp",	  "iterator",			  "(nme:str):lng ",											  "CMDbbpiterator;"			  ]
[ 326@0,  "command",	  "bbp",	  "open",			  "():void ",												  "CMDbbpopen;"				  ]
[ 327@0,  "pattern",	  "bbp",	  "prelude",			  "():void ",												  "CMDbbpprelude;"			  ]
[ 328@0,  "pattern",	  "bbp",	  "release",			  "(b:bat[:any_1,:any_2]):void ",									  "CMDbbpreleaseBAT;"			  ]
[ 329@0,  "pattern",	  "bbp",	  "release",			  "(name:str,val:bat[:any_1,:any_2]):void ",								  "CMDbbprelease;"			  ]
[ 330@0,  "pattern",	  "bbp",	  "releaseAll",			  "():void ",												  "CMDbbpReleaseAll;"			  ]
[ 331@0,  "pattern",	  "bbp",	  "toString",			  "(name:str):str ",											  "CMDbbptoStr;"			  ]
[ 332@0,  "pattern",	  "bbp",	  "take",			  "(name:str):bat[:any_1,:any_2] ",									  "CMDbbptake;"				  ]
[ 333@0,  "pattern",	  "const",	  "close",			  "():void ",												  "CSTclose;"				  ]
[ 334@0,  "pattern",	  "const",	  "discard",			  "(name:any_1):void ",											  "CSTdiscard;"				  ]
[ 335@0,  "pattern",	  "const",	  "deposit",			  "(name:str,val:any_1):void ",										  "CSTdeposit;"				  ]
[ 336@0,  "pattern",	  "const",	  "destroy",			  "():void ",												  "CSTdestroy;"				  ]
[ 337@0,  "command",	  "const",	  "epiloque",			  "():void ",												  "CSTepilogue;"			  ]
[ 338@0,  "pattern",	  "const",	  "hasMoreElements",		  "() (_1:lng,_2:str) ",										  "CSThasMoreElements;"			  ]
[ 339@0,  "pattern",	  "const",	  "newIterator",		  "() (_1:lng,_2:str) ",										  "CSTnewIterator;"			  ]
[ 340@0,  "pattern",	  "const",	  "open",			  "():void ",												  "CSTopen;"				  ]
[ 341@0,  "pattern",	  "const",	  "prelude",			  "():void ",												  "CSTprelude;"				  ]
[ 342@0,  "pattern",	  "const",	  "release",			  "(name:any_1):void ",											  "CSTrelease;"				  ]
[ 343@0,  "pattern",	  "const",	  "release",			  "(name:str):void ",											  "CSTrelease;"				  ]
[ 344@0,  "pattern",	  "const",	  "releaseAll",			  "():void ",												  "CSTreleaseAll;"			  ]
[ 345@0,  "pattern",	  "const",	  "toString",			  "(name:any_1):str ",											  "CSTtoString;"			  ]
[ 346@0,  "pattern",	  "const",	  "take",			  "(name:str):any_1 ",											  "CSTtake;"				  ]
[ 347@0,  "command",	  "factory",	  "getLocations",		  "():bat[:int,:str] ",											  "FCTgetLocations;"			  ]
[ 348@0,  "command",	  "factory",	  "getTimeStampOut",		  "():date ",												  "FCTgetTimeStampOut;"			  ]
[ 349@0,  "command",	  "factory",	  "getTimeStampIn",		  "():date ",												  "FCTgetTimeStampIn;"			  ]
[ 350@0,  "command",	  "factory",	  "getOwners",			  "():bat[:int,:str] ",											  "FCTgetOwners;"			  ]
[ 351@0,  "command",	  "factory",	  "getCaller",			  "():int ",												  "FCTgetCaller;"			  ]
[ 352@0,  "command",	  "factory",	  "getPlants",			  "():bat[:str,:str] ",											  "FCTgetPlants;"			  ]
[ 353@0,  "command",	  "factory",	  "shutdown",			  "(m:str,f:str):void ",										  "FCTshutdown;"			  ]
[ 354@0,  "command",	  "factory",	  "setLocation",		  "(uri:str):void ",											  "FCTsetLocation;"			  ]
[ 355@0,  "command",	  "io",		  "export",			  "(b:bat[:any_1,:any_2],filepath:str):bit ",								  "IOexport;"				  ]
[ 356@0,  "pattern",	  "io",		  "ftable",			  "(fp:streams,order:int,b1:bat[:any_1,:any],b:bat[:any_1,:any]...):void ",				  "IOfotable;"				  ]
[ 357@0,  "pattern",	  "io",		  "ftable",			  "(filep:streams,b1:bat[:any_1,:any],b:bat[:any_1,:any]...):int ",					  "IOftable;"				  ]
[ 358@0,  "command",	  "io",		  "import",			  "(b:bat[:any_1,:any_2],filepath:str):bit ",								  "IOimport;"				  ]
[ 359@0,  "command",	  "io",		  "printf",			  "(format:str,val:str):int ",										  "IOprint_formatted_str;"		  ]
[ 360@0,  "command",	  "io",		  "printf",			  "(val:str):int ",											  "IOprint_str;"			  ]
[ 361@0,  "command",	  "io",		  "printf",			  "(format:str,val:dbl):int ",										  "IOprint_formatted_dbl;"		  ]
[ 362@0,  "command",	  "io",		  "printf",			  "(format:str,val:flt):int ",										  "IOprint_formatted_flt;"		  ]
[ 363@0,  "command",	  "io",		  "printf",			  "(format:str,val:lng):int ",										  "IOprint_formatted_lng;"		  ]
[ 364@0,  "command",	  "io",		  "printf",			  "(format:str,val:oid):int ",										  "IOprint_oid;"			  ]
[ 365@0,  "command",	  "io",		  "printf",			  "(format:str,val:sht):int ",										  "IOprint_formatted_sht;"		  ]
[ 366@0,  "command",	  "io",		  "printf",			  "(format:str,val:int):int ",										  "IOprint_formatted_int;"		  ]
[ 367@0,  "command",	  "io",		  "printf",			  "(format:str,val:chr):int ",										  "IOprint_formatted_chr;"		  ]
[ 368@0,  "command",	  "io",		  "printf",			  "(format:str,val:bit):int ",										  "IOprint_formatted_bit;"		  ]
[ 369@0,  "pattern",	  "io",		  "printft",			  "(val:any_1):int ",											  "IOprint_ft;"				  ]
[ 370@0,  "pattern",	  "io",		  "prompt",			  "(val:any_1):int ",											  "IOprompt_val;"			  ]
[ 371@0,  "pattern",	  "io",		  "print",			  "(val:bat[:any_1,:any_2]):int ",									  "IOprint_val;"			  ]
[ 372@0,  "pattern",	  "io",		  "print",			  "(val:any_1):int ",											  "IOprint_val;"			  ]
[ 373@0,  "pattern",	  "io",		  "print",			  "(order:int,b:bat[:any_1,:any],b2:bat[:any_1,:any]...):int ",						  "IOotable;"				  ]
[ 374@0,  "pattern",	  "io",		  "print",			  "(b1:bat[:any_1,:any]...):int ",									  "IOtable;"				  ]
[ 375@0,  "pattern",	  "io",		  "print",			  "(val:any_1,lst:any...):int ",									  "IOprint_val;"			  ]
[ 376@0,  "command",	  "io",		  "stdout",			  "():streams ",											  "io_stdout;"				  ]
[ 377@0,  "command",	  "io",		  "stderr",			  "():streams ",											  "io_stderr;"				  ]
[ 378@0,  "command",	  "io",		  "stdin",			  "():bstream ",											  "io_stdin;"				  ]
[ 379@0,  "pattern",	  "io",		  "table",			  "(order:int,b1:bat[:any_1,:any],b2:bat[:any_1,:any]...):int ",					  "IOtotable;"				  ]
[ 380@0,  "pattern",	  "io",		  "table",			  "(b1:bat[:any_1,:any],b2:bat[:any_1,:any]...):int ",							  "IOttable;"				  ]
[ 381@0,  "pattern",	  "tablet",	  "dump",			  "(s:streams,b:bat[:any,:any]...):int ",								  "TABdump;"				  ]
[ 382@0,  "pattern",	  "tablet",	  "display",			  "(v:bat[:any_1,:any]...):int ",									  "TABdisplayTable;"			  ]
[ 383@0,  "pattern",	  "tablet",	  "display",			  "(v:any...):int ",											  "TABdisplayRow;"			  ]
[ 384@0,  "command",	  "tablet",	  "dump",			  "(names:bat[:void,:str],seps:bat[:void,:str],bats:bat[:void,:BAT],datafile:str,nr:int):void ",	  "CMDtablet_dump;"			  ]
[ 385@0,  "command",	  "tablet",	  "firstPage",			  "():void ",												  "TABfirstPage;"			  ]
[ 386@0,  "command",	  "tablet",	  "finish",			  "():void ",												  "TABfinishReport;"			  ]
[ 387@0,  "command",	  "tablet",	  "getPage",			  "(i:int):void ",											  "TABgetPage;"				  ]
[ 388@0,  "command",	  "tablet",	  "getPageCnt",			  "():void ",												  "TABgetPageCnt;"			  ]
[ 389@0,  "pattern",	  "tablet",	  "header",			  "(b:any...):int ",											  "TABheader;"				  ]
[ 390@0,  "command",	  "tablet",	  "input",			  "(names:bat[:void,:str],seps:bat[:void,:str],types:bat[:void,:str],s:streams,nr:int):bat[:str,:BAT] ",  "CMDtablet_input;"			  ]
[ 391@0,  "command",	  "tablet",	  "lastPage",			  "():void ",												  "TABlastPage;"			  ]
[ 392@0,  "command",	  "tablet",	  "load",			  "(names:bat[:void,:str],seps:bat[:void,:str],types:bat[:void,:str],datafile:str,nr:int):bat[:str,:BAT] ", "CMDtablet_load;"			  ]
[ 393@0,  "command",	  "tablet",	  "nextPage",			  "():void ",												  "TABnextPage;"			  ]
[ 394@0,  "command",	  "tablet",	  "output",			  "(order:bat[:any_1,:any_2],seps:bat[:void,:str],bats:bat[:void,:BAT],s:streams):void ",		  "CMDtablet_output;"			  ]
[ 395@0,  "command",	  "tablet",	  "prevPage",			  "():void ",												  "TABprevPage;"			  ]
[ 396@0,  "pattern",	  "tablet",	  "page",			  "(b:bat[:any_1,:any]...):int ",									  "TABpage;"				  ]
[ 397@0,  "command",	  "tablet",	  "setColumnDecimal",		  "(idx:int,s:int,p:int):void ",									  "TABsetColumnDecimal;"		  ]
[ 398@0,  "command",	  "tablet",	  "setColumnPosition",		  "(idx:int,f:int,i:int):void ",									  "TABsetColumnPosition;"		  ]
[ 399@0,  "command",	  "tablet",	  "setColumnWidth",		  "(idx:int,maxwidth:int):void ",									  "TABsetColumnWidth;"			  ]
[ 400@0,  "command",	  "tablet",	  "setColumnNull",		  "(idx:int,fmt:str):void ",										  "TABsetColumnNull;"			  ]
[ 401@0,  "command",	  "tablet",	  "setColumnBracket",		  "(idx:int,lbrk:str,rbrk:str):void ",									  "TABsetColumnBracket;"		  ]
[ 402@0,  "command",	  "tablet",	  "setColumnName",		  "(idx:int,nme:str):void ",										  "TABsetColumnName;"			  ]
[ 403@0,  "pattern",	  "tablet",	  "setColumn",			  "(idx:int,v:any_1):void ",										  "TABsetColumn;"			  ]
[ 404@0,  "command",	  "tablet",	  "setRowBracket",		  "(lbrk:str,rbrk:str):void ",										  "TABsetRowBracket;"			  ]
[ 405@0,  "command",	  "tablet",	  "setTableBracket",		  "(lbrk:str,rbrk:str):void ",										  "TABsetTableBracket;"			  ]
[ 406@0,  "command",	  "tablet",	  "setDelimiter",		  "(sep:str):void ",											  "TABsetDelimiter;"			  ]
[ 407@0,  "command",	  "tablet",	  "setPivot",			  "(b:bat[:void,:oid]):void ",										  "TABsetPivot;"			  ]
[ 408@0,  "command",	  "tablet",	  "setStream",			  "(s:streams):void ",											  "TABsetStream;"			  ]
[ 409@0,  "pattern",	  "tablet",	  "setFormat",			  "(b:any...):void ",											  "TABsetFormat;"			  ]
[ 410@0,  "command",	  "tablet",	  "setProperties",		  "(prop:str):int ",											  "TABsetProperties;"			  ]
[ 411@0,  "command",	  "clients",	  "addScenario",		  "(usr:str,sc:str):void ",										  "CLTaddScenario;"			  ]
[ 412@0,  "command",	  "clients",	  "addUser",			  "(nme:str,pw:str,scen:bat[:str,:any_1]):oid ",							  "CLTaddUser;"				  ]
[ 413@0,  "command",	  "clients",	  "checkPermission",		  "(usr:str,pw:str,sc:str):void ",									  "CLTcheckPermission;"			  ]
[ 414@0,  "command",	  "clients",	  "changePassword",		  "(old:str,new:str):void ",										  "CLTchangePassword;"			  ]
[ 415@0,  "command",	  "clients",	  "changeUsername",		  "(old:str,new:str):void ",										  "CLTchangeUsername;"			  ]
[ 416@0,  "command",	  "clients",	  "getScenario",		  "():str ",												  "CLTgetScenario;"			  ]
[ 417@0,  "command",	  "clients",	  "getInfo",			  "():bat[:str,:str] ",											  "CLTInfo;"				  ]
[ 418@0,  "command",	  "clients",	  "getId",			  "():int ",												  "CLTgetClientId;"			  ]
[ 419@0,  "command",	  "clients",	  "getLogins",			  "():bat[:int,:str] ",											  "CLTLogin;"				  ]
[ 420@0,  "command",	  "clients",	  "getUsers",			  "():bat[:int,:str] ",											  "CLTusers;"				  ]
[ 421@0,  "command",	  "clients",	  "quit",			  "():void ",												  "CLTquit;"				  ]
[ 422@0,  "command",	  "clients",	  "removeScenario",		  "(usr:str,sc:str):void ",										  "CLTremoveScenario;"			  ]
[ 423@0,  "command",	  "clients",	  "removeUser",			  "(nme:str):void ",											  "CLTremoveUser;"			  ]
[ 424@0,  "command",	  "clients",	  "setPassword",		  "(user:str,pass:str):void ",										  "CLTsetPassword;"			  ]
[ 425@0,  "command",	  "clients",	  "setScenario",		  "(msg:str):str ",											  "CLTsetScenario;"			  ]
[ 426@0,  "command",	  "clients",	  "setHistory",			  "(s:str):void ",											  "CLTsetHistory;"			  ]
[ 427@0,  "command",	  "clients",	  "setDebug",			  "(flg:int):void ",											  "CLTsetDebug;"			  ]
[ 428@0,  "command",	  "clients",	  "setListing",			  "(flg:int):int ",											  "CLTsetListing;"			  ]
[ 429@0,  "command",	  "clients",	  "trace",			  "(flag:bit):void ",											  "CLTtrace;"				  ]
[ 430@0,  "command",	  "clients",	  "trace",			  "(nme:str,flag:bit):void ",										  "CLTtrace2;"				  ]
[ 431@0,  "command",	  "batcolor",	  "blue",			  "(c:bat[:void,:color]):bat[:void,:int] ",								  "CLRbatBlue;"				  ]
[ 432@0,  "command",	  "batcolor",	  "cb",				  "(c:bat[:void,:color]):bat[:void,:int] ",								  "CLRbatCb;"				  ]
[ 433@0,  "command",	  "batcolor",	  "cr",				  "(c:bat[:void,:color]):bat[:void,:int] ",								  "CLRbatCr;"				  ]
[ 434@0,  "command",	  "batcolor",	  "color",			  "(s:bat[:void,:str]):bat[:void,:color] ",								  "CLRbatColor;"			  ]
[ 435@0,  "command",	  "batcolor",	  "green",			  "(c:bat[:void,:color]):bat[:void,:int] ",								  "CLRbatGreen;"			  ]
[ 436@0,  "command",	  "batcolor",	  "hue",			  "(c:bat[:void,:color]):bat[:void,:flt] ",								  "CLRbatHue;"				  ]
[ 437@0,  "command",	  "batcolor",	  "hsv",			  "(h:bat[:void,:flt],s:bat[:void,:flt],v:bat[:void,:flt]):bat[:void,:color] ",				  "CLRbatHsv;"				  ]
[ 438@0,  "command",	  "batcolor",	  "hue",			  "(c:bat[:void,:color]):bat[:void,:int] ",								  "CLRbatHueInt;"			  ]
[ 439@0,  "command",	  "batcolor",	  "luminance",			  "(c:bat[:void,:color]):bat[:void,:int] ",								  "CLRbatLuminance;"			  ]
[ 440@0,  "command",	  "batcolor",	  "red",			  "(c:bat[:void,:color]):bat[:void,:int] ",								  "CLRbatRed;"				  ]
[ 441@0,  "command",	  "batcolor",	  "rgb",			  "(r:bat[:void,:int],g:bat[:void,:int],b:bat[:void,:int]):bat[:void,:color] ",				  "CLRbatRgb;"				  ]
[ 442@0,  "command",	  "batcolor",	  "saturation",			  "(c:bat[:void,:color]):bat[:void,:flt] ",								  "CLRbatSaturation;"			  ]
[ 443@0,  "command",	  "batcolor",	  "saturation",			  "(c:bat[:void,:color]):bat[:void,:int] ",								  "CLRbatSaturationInt;"		  ]
[ 444@0,  "command",	  "batcolor",	  "str",			  "(b:bat[:void,:color]):bat[:void,:str] ",								  "CLRbatStr;"				  ]
[ 445@0,  "command",	  "batcolor",	  "value",			  "(c:bat[:void,:color]):bat[:void,:flt] ",								  "CLRbatValue;"			  ]
[ 446@0,  "command",	  "batcolor",	  "value",			  "(c:bat[:void,:color]):bat[:void,:int] ",								  "CLRbatValueInt;"			  ]
[ 447@0,  "command",	  "batstr",	  "!=",				  "(l:bat[:void,:str],r:str):bat[:void,:bit] ",								  "STRbatNotEqualCst;"			  ]
[ 448@0,  "command",	  "batstr",	  "!=",				  "(l:bat[:void,:str],r:bat[:void,:str]):bat[:void,:bit] ",						  "STRbatNotEqual;"			  ]
[ 449@0,  "command",	  "batstr",	  "!=",				  "(l:bat[:void,:str],r:bat[:oid,:str]):bat[:void,:bit] ",						  "STRbatNotEqual;"			  ]
[ 450@0,  "command",	  "batstr",	  "+",				  "(l:str,r:bat[:void,:str]):bat[:void,:str] ",								  "STRcstConcatbat;"			  ]
[ 451@0,  "command",	  "batstr",	  "+",				  "(l:bat[:void,:str],r:str):bat[:void,:str] ",								  "STRbatConcatcst;"			  ]
[ 452@0,  "command",	  "batstr",	  "+",				  "(l:bat[:void,:str],r:bat[:void,:str]):bat[:void,:str] ",						  "STRbatConcat;"			  ]
[ 453@0,  "command",	  "batstr",	  "==",				  "(l:bat[:void,:str],r:str):bat[:void,:bit] ",								  "STRbatEqualCst;"			  ]
[ 454@0,  "command",	  "batstr",	  "==",				  "(l:bat[:void,:str],r:bat[:void,:str]):bat[:void,:bit] ",						  "STRbatEqual;"			  ]
[ 455@0,  "command",	  "batstr",	  "bytes",			  "(s:bat[:void,:str]):bat[:void,:int] ",								  "STRbatBytes;"			  ]
[ 456@0,  "command",	  "batstr",	  "chrAt",			  "(s:bat[:void,:str],index:int):bat[:void,:chr] ",							  "STRbatChrAtcst;"			  ]
[ 457@0,  "command",	  "batstr",	  "chrAt",			  "(s:bat[:void,:str],index:bat[:void,:int]):bat[:void,:chr] ",						  "STRbatChrAt;"			  ]
[ 458@0,  "command",	  "batstr",	  "endsWith",			  "(s:bat[:void,:str],suffix:str):bat[:void,:bit] ",							  "STRbatSuffixcst;"			  ]
[ 459@0,  "command",	  "batstr",	  "endsWith",			  "(s:bat[:void,:str],suffix:bat[:void,:str]):bat[:void,:bit] ",					  "STRbatSuffix;"			  ]
[ 460@0,  "command",	  "batstr",	  "like",			  "(s:bat[:any_1,:str],pat:str):bat[:any_1,:void] ",							  "STRbatlike2;"			  ]
[ 461@0,  "command",	  "batstr",	  "like",			  "(s:bat[:any_1,:str],pat:str,esc:str):bat[:any_1,:void] ",						  "STRbatlike;"				  ]
[ 462@0,  "command",	  "batstr",	  "ltrim",			  "(s:bat[:void,:str]):bat[:void,:str] ",								  "STRbatLtrim;"			  ]
[ 463@0,  "command",	  "batstr",	  "length",			  "(s:bat[:void,:str]):bat[:void,:int] ",								  "STRbatLength;"			  ]
[ 464@0,  "command",	  "batstr",	  "match",			  "(b:bat[:void,:str],pat:str):bat[:void,:bit] ",							  "STRbatmatchCst;"			  ]
[ 465@0,  "command",	  "batstr",	  "r_search",			  "(s:bat[:void,:str],c:str):bat[:void,:int] ",								  "STRbatRstrSearchcst;"		  ]
[ 466@0,  "command",	  "batstr",	  "r_search",			  "(s:bat[:void,:str],c:bat[:void,:str]):bat[:void,:int] ",						  "STRbatRstrSearch;"			  ]
[ 467@0,  "command",	  "batstr",	  "rtrim",			  "(s:bat[:void,:str]):bat[:void,:str] ",								  "STRbatRtrim;"			  ]
[ 468@0,  "command",	  "batstr",	  "substitute",			  "(s:bat[:void,:str],src:str,dst:str,rep:bit):bat[:void,:str] ",					  "STRbatSubstitutecst;"		  ]
[ 469@0,  "command",	  "batstr",	  "string",			  "(s:bat[:void,:str],offset:int,count:int):bat[:void,:str] ",						  "STRbatSubStringcst;"			  ]
[ 470@0,  "command",	  "batstr",	  "string",			  "(b:bat[:void,:str],offset:int):bat[:void,:str] ",							  "STRbatTailcst;"			  ]
[ 471@0,  "command",	  "batstr",	  "string",			  "(b:bat[:void,:str],offset:bat[:void,:int]):bat[:void,:str] ",					  "STRbatTail;"				  ]
[ 472@0,  "command",	  "batstr",	  "search",			  "(s:bat[:void,:str],c:str):bat[:void,:int] ",								  "STRbatstrSearchcst;"			  ]
[ 473@0,  "command",	  "batstr",	  "search",			  "(s:bat[:void,:str],c:bat[:void,:str]):bat[:void,:int] ",						  "STRbatstrSearch;"			  ]
[ 474@0,  "command",	  "batstr",	  "startsWith",			  "(s:bat[:void,:str],prefix:str):bat[:void,:bit] ",							  "STRbatPrefixcst;"			  ]
[ 475@0,  "command",	  "batstr",	  "startsWith",			  "(s:bat[:void,:str],prefix:bat[:void,:str]):bat[:void,:bit] ",					  "STRbatPrefix;"			  ]
[ 476@0,  "command",	  "batstr",	  "str",			  "(b:bat[:void,:str]):bat[:void,:str] ",								  "STRbattostr;"			  ]
[ 477@0,  "command",	  "batstr",	  "trim",			  "(s:bat[:void,:str]):bat[:void,:str] ",								  "STRbatStrip;"			  ]
[ 478@0,  "command",	  "batstr",	  "toUpper",			  "(s:bat[:void,:str]):bat[:void,:str] ",								  "STRbatUpper;"			  ]
[ 479@0,  "command",	  "batstr",	  "toLower",			  "(s:bat[:void,:str]):bat[:void,:str] ",								  "STRbatLower;"			  ]
[ 480@0,  "command",	  "batstr",	  "unicodeAt",			  "(s:bat[:void,:str],index:int):bat[:void,:int] ",							  "STRbatWChrAtcst;"			  ]
[ 481@0,  "command",	  "batstr",	  "unicodeAt",			  "(s:bat[:void,:str],index:bat[:void,:int]):bat[:void,:int] ",						  "STRbatWChrAt;"			  ]
[ 482@0,  "command",	  "batcalc",	  "!=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",					  "CMDcmpaccumNEQcst;"			  ]
[ 483@0,  "command",	  "batcalc",	  "!=",				  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",							  "CMDcmpNEQcst;"			  ]
[ 484@0,  "command",	  "batcalc",	  "!=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",			  "CMDcmpaccumNEQ;"			  ]
[ 485@0,  "command",	  "batcalc",	  "!=",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",						  "CMDcmpNEQ;"				  ]
[ 486@0,  "command",	  "batcalc",	  "!=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",					  "CMDcmpaccumNEQcst;"			  ]
[ 487@0,  "command",	  "batcalc",	  "!=",				  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",							  "CMDcmpNEQcst;"			  ]
[ 488@0,  "command",	  "batcalc",	  "!=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",			  "CMDcmpaccumNEQ;"			  ]
[ 489@0,  "command",	  "batcalc",	  "!=",				  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",						  "CMDcmpNEQ;"				  ]
[ 490@0,  "command",	  "batcalc",	  "!=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",					  "CMDcmpaccumNEQcst;"			  ]
[ 491@0,  "command",	  "batcalc",	  "!=",				  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",							  "CMDcmpNEQcst;"			  ]
[ 492@0,  "command",	  "batcalc",	  "!=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",			  "CMDcmpaccumNEQ;"			  ]
[ 493@0,  "command",	  "batcalc",	  "!=",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",						  "CMDcmpNEQ;"				  ]
[ 494@0,  "command",	  "batcalc",	  "!=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",					  "CMDcmpaccumNEQcst;"			  ]
[ 495@0,  "command",	  "batcalc",	  "!=",				  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",							  "CMDcmpNEQcst;"			  ]
[ 496@0,  "command",	  "batcalc",	  "!=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",			  "CMDcmpaccumNEQ;"			  ]
[ 497@0,  "command",	  "batcalc",	  "!=",				  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",						  "CMDcmpNEQ;"				  ]
[ 498@0,  "command",	  "batcalc",	  "!=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",					  "CMDcmpaccumNEQcst;"			  ]
[ 499@0,  "command",	  "batcalc",	  "!=",				  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",							  "CMDcmpNEQcst;"			  ]
[ 500@0,  "command",	  "batcalc",	  "!=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",			  "CMDcmpaccumNEQ;"			  ]
[ 501@0,  "command",	  "batcalc",	  "!=",				  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",						  "CMDcmpNEQ;"				  ]
[ 502@0,  "command",	  "batcalc",	  "!=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",					  "CMDcmpaccumNEQcst;"			  ]
[ 503@0,  "command",	  "batcalc",	  "!=",				  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",							  "CMDcmpNEQcst;"			  ]
[ 504@0,  "command",	  "batcalc",	  "!=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",			  "CMDcmpaccumNEQ;"			  ]
[ 505@0,  "command",	  "batcalc",	  "!=",				  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",						  "CMDcmpNEQ;"				  ]
[ 506@0,  "command",	  "batcalc",	  "!=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",					  "CMDcmpaccumNEQcst;"			  ]
[ 507@0,  "command",	  "batcalc",	  "!=",				  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",							  "CMDcmpNEQcst;"			  ]
[ 508@0,  "command",	  "batcalc",	  "!=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",			  "CMDcmpaccumNEQ;"			  ]
[ 509@0,  "command",	  "batcalc",	  "!=",				  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",						  "CMDcmpNEQ;"				  ]
[ 510@0,  "command",	  "batcalc",	  "%",				  "(b:bat[:void,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbatMOD_lng_lng_lng;"		  ]
[ 511@0,  "command",	  "batcalc",	  "%",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",						  "CMDbatMOD_lng_lng_lng;"		  ]
[ 512@0,  "command",	  "batcalc",	  "%",				  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",							  "CMDcstMODbat_lng_lng_lng;"		  ]
[ 513@0,  "command",	  "batcalc",	  "%",				  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:lng] ",							  "CMDbatMODcst_lng_lng_lng;"		  ]
[ 514@0,  "command",	  "batcalc",	  "%",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:lng):void ",						  "CMDbataccumMODcst_lng_lng_lng;"	  ]
[ 515@0,  "command",	  "batcalc",	  "%",				  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:lng]):void ",						  "CMDbataccumMODcst2_lng_lng_lng;"	  ]
[ 516@0,  "command",	  "batcalc",	  "%",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",					  "CMDbataccumMOD_lng_lng_lng;"		  ]
[ 517@0,  "command",	  "batcalc",	  "%",				  "(b:bat[:void,:int],c:bat[:oid,:int]):bat[:oid,:int] ",						  "CMDbatMOD_int_int_int;"		  ]
[ 518@0,  "command",	  "batcalc",	  "%",				  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:int] ",						  "CMDbatMOD_int_int_int;"		  ]
[ 519@0,  "command",	  "batcalc",	  "%",				  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:int] ",							  "CMDcstMODbat_int_int_int;"		  ]
[ 520@0,  "command",	  "batcalc",	  "%",				  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:int] ",							  "CMDbatMODcst_int_int_int;"		  ]
[ 521@0,  "command",	  "batcalc",	  "%",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:int):void ",						  "CMDbataccumMODcst_int_int_int;"	  ]
[ 522@0,  "command",	  "batcalc",	  "%",				  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:int]):void ",						  "CMDbataccumMODcst2_int_int_int;"	  ]
[ 523@0,  "command",	  "batcalc",	  "%",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",					  "CMDbataccumMOD_int_int_int;"		  ]
[ 524@0,  "command",	  "batcalc",	  "%",				  "(b:bat[:void,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",						  "CMDbatMOD_sht_sht_sht;"		  ]
[ 525@0,  "command",	  "batcalc",	  "%",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:sht] ",						  "CMDbatMOD_sht_sht_sht;"		  ]
[ 526@0,  "command",	  "batcalc",	  "%",				  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:sht] ",							  "CMDcstMODbat_sht_sht_sht;"		  ]
[ 527@0,  "command",	  "batcalc",	  "%",				  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:sht] ",							  "CMDbatMODcst_sht_sht_sht;"		  ]
[ 528@0,  "command",	  "batcalc",	  "%",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void ",						  "CMDbataccumMODcst_sht_sht_sht;"	  ]
[ 529@0,  "command",	  "batcalc",	  "%",				  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void ",						  "CMDbataccumMODcst2_sht_sht_sht;"	  ]
[ 530@0,  "command",	  "batcalc",	  "%",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void ",					  "CMDbataccumMOD_sht_sht_sht;"		  ]
[ 531@0,  "command",	  "batcalc",	  "%",				  "(b:bat[:void,:oid],c:bat[:oid,:oid]):bat[:oid,:oid] ",						  "CMDbatMOD_oid_oid_oid;"		  ]
[ 532@0,  "command",	  "batcalc",	  "%",				  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:oid] ",						  "CMDbatMOD_oid_oid_oid;"		  ]
[ 533@0,  "command",	  "batcalc",	  "%",				  "(cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:oid] ",							  "CMDcstMODbat_oid_oid_oid;"		  ]
[ 534@0,  "command",	  "batcalc",	  "%",				  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:oid] ",							  "CMDbatMODcst_oid_oid_oid;"		  ]
[ 535@0,  "command",	  "batcalc",	  "%",				  "(a:bat[:any_1,:oid],b:bat[:any_1,:oid],cst:oid):void ",						  "CMDbataccumMODcst_oid_oid_oid;"	  ]
[ 536@0,  "command",	  "batcalc",	  "%",				  "(a:bat[:any_1,:oid],cst:oid,b:bat[:any_1,:oid]):void ",						  "CMDbataccumMODcst2_oid_oid_oid;"	  ]
[ 537@0,  "command",	  "batcalc",	  "%",				  "(a:bat[:any_1,:oid],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):void ",					  "CMDbataccumMOD_oid_oid_oid;"		  ]
[ 538@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:void,:int],c:bat[:oid,:int]):bat[:oid,:int] ",						  "CMDbatMUL_int_int_int;"		  ]
[ 539@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:int] ",						  "CMDbatMUL_int_int_int;"		  ]
[ 540@0,  "command",	  "batcalc",	  "*",				  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:int] ",							  "CMDcstMULbat_int_int_int;"		  ]
[ 541@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:int] ",							  "CMDbatMULcst_int_int_int;"		  ]
[ 542@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:int):void ",						  "CMDbataccumMULcst_int_int_int;"	  ]
[ 543@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:int]):void ",						  "CMDbataccumMULcst2_int_int_int;"	  ]
[ 544@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",					  "CMDbataccumMUL_int_int_int;"		  ]
[ 545@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:void,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbatMUL_lng_lng_lng;"		  ]
[ 546@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",						  "CMDbatMUL_lng_lng_lng;"		  ]
[ 547@0,  "command",	  "batcalc",	  "*",				  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",							  "CMDcstMULbat_lng_lng_lng;"		  ]
[ 548@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:lng] ",							  "CMDbatMULcst_lng_lng_lng;"		  ]
[ 549@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:lng):void ",						  "CMDbataccumMULcst_lng_lng_lng;"	  ]
[ 550@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:lng]):void ",						  "CMDbataccumMULcst2_lng_lng_lng;"	  ]
[ 551@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",					  "CMDbataccumMUL_lng_lng_lng;"		  ]
[ 552@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:void,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",						  "CMDbatMUL_sht_sht_sht;"		  ]
[ 553@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:sht] ",						  "CMDbatMUL_sht_sht_sht;"		  ]
[ 554@0,  "command",	  "batcalc",	  "*",				  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:sht] ",							  "CMDcstMULbat_sht_sht_sht;"		  ]
[ 555@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:sht] ",							  "CMDbatMULcst_sht_sht_sht;"		  ]
[ 556@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void ",						  "CMDbataccumMULcst_sht_sht_sht;"	  ]
[ 557@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void ",						  "CMDbataccumMULcst2_sht_sht_sht;"	  ]
[ 558@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void ",					  "CMDbataccumMUL_sht_sht_sht;"		  ]
[ 559@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:void,:sht],c:bat[:oid,:int]):bat[:oid,:int] ",						  "CMDbatMUL_int_sht_int;"		  ]
[ 560@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:int]):bat[:any_1,:int] ",						  "CMDbatMUL_int_sht_int;"		  ]
[ 561@0,  "command",	  "batcalc",	  "*",				  "(cst:sht,b:bat[:any_1,:int]):bat[:any_1,:int] ",							  "CMDcstMULbat_int_sht_int;"		  ]
[ 562@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:sht],cst:int):bat[:any_1,:int] ",							  "CMDbatMULcst_int_sht_int;"		  ]
[ 563@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:int):void ",						  "CMDbataccumMULcst_int_sht_int;"	  ]
[ 564@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:int]):void ",						  "CMDbataccumMULcst2_int_sht_int;"	  ]
[ 565@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",					  "CMDbataccumMUL_int_sht_int;"		  ]
[ 566@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:void,:int],c:bat[:oid,:sht]):bat[:oid,:int] ",						  "CMDbatMUL_int_int_sht;"		  ]
[ 567@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:int],c:bat[:any_1,:sht]):bat[:any_1,:int] ",						  "CMDbatMUL_int_int_sht;"		  ]
[ 568@0,  "command",	  "batcalc",	  "*",				  "(cst:int,b:bat[:any_1,:sht]):bat[:any_1,:int] ",							  "CMDcstMULbat_int_int_sht;"		  ]
[ 569@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:int],cst:sht):bat[:any_1,:int] ",							  "CMDbatMULcst_int_int_sht;"		  ]
[ 570@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:sht):void ",						  "CMDbataccumMULcst_int_int_sht;"	  ]
[ 571@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:sht]):void ",						  "CMDbataccumMULcst2_int_int_sht;"	  ]
[ 572@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:int],b:bat[:any_1,:sht],c:bat[:any_1,:int]):void ",					  "CMDbataccumMUL_int_int_sht;"		  ]
[ 573@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:void,:sht],c:bat[:oid,:sht]):bat[:oid,:int] ",						  "CMDbatMUL_int_sht_sht;"		  ]
[ 574@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:int] ",						  "CMDbatMUL_int_sht_sht;"		  ]
[ 575@0,  "command",	  "batcalc",	  "*",				  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:int] ",							  "CMDcstMULbat_int_sht_sht;"		  ]
[ 576@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:int] ",							  "CMDbatMULcst_int_sht_sht;"		  ]
[ 577@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void ",						  "CMDbataccumMULcst_int_sht_sht;"	  ]
[ 578@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void ",						  "CMDbataccumMULcst2_int_sht_sht;"	  ]
[ 579@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:int]):void ",					  "CMDbataccumMUL_int_sht_sht;"		  ]
[ 580@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:void,:int],c:bat[:oid,:int]):bat[:oid,:lng] ",						  "CMDbatMUL_lng_int_int;"		  ]
[ 581@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:lng] ",						  "CMDbatMUL_lng_int_int;"		  ]
[ 582@0,  "command",	  "batcalc",	  "*",				  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:lng] ",							  "CMDcstMULbat_lng_int_int;"		  ]
[ 583@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:lng] ",							  "CMDbatMULcst_lng_int_int;"		  ]
[ 584@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:int):void ",						  "CMDbataccumMULcst_lng_int_int;"	  ]
[ 585@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:int]):void ",						  "CMDbataccumMULcst2_lng_int_int;"	  ]
[ 586@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],c:bat[:any_1,:lng]):void ",					  "CMDbataccumMUL_lng_int_int;"		  ]
[ 587@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:void,:int],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbatMUL_lng_int_lng;"		  ]
[ 588@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:int],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",						  "CMDbatMUL_lng_int_lng;"		  ]
[ 589@0,  "command",	  "batcalc",	  "*",				  "(cst:int,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",							  "CMDcstMULbat_lng_int_lng;"		  ]
[ 590@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:int],cst:lng):bat[:any_1,:lng] ",							  "CMDbatMULcst_lng_int_lng;"		  ]
[ 591@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:lng):void ",						  "CMDbataccumMULcst_lng_int_lng;"	  ]
[ 592@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:lng]):void ",						  "CMDbataccumMULcst2_lng_int_lng;"	  ]
[ 593@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:int],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",					  "CMDbataccumMUL_lng_int_lng;"		  ]
[ 594@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:void,:lng],c:bat[:oid,:int]):bat[:oid,:lng] ",						  "CMDbatMUL_lng_lng_int;"		  ]
[ 595@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:int]):bat[:any_1,:lng] ",						  "CMDbatMUL_lng_lng_int;"		  ]
[ 596@0,  "command",	  "batcalc",	  "*",				  "(cst:lng,b:bat[:any_1,:int]):bat[:any_1,:lng] ",							  "CMDcstMULbat_lng_lng_int;"		  ]
[ 597@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:lng],cst:int):bat[:any_1,:lng] ",							  "CMDbatMULcst_lng_lng_int;"		  ]
[ 598@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:int):void ",						  "CMDbataccumMULcst_lng_lng_int;"	  ]
[ 599@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:int]):void ",						  "CMDbataccumMULcst2_lng_lng_int;"	  ]
[ 600@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:int],c:bat[:any_1,:lng]):void ",					  "CMDbataccumMUL_lng_lng_int;"		  ]
[ 601@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:void,:sht],c:bat[:oid,:sht]):bat[:oid,:lng] ",						  "CMDbatMUL_lng_sht_sht;"		  ]
[ 602@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:lng] ",						  "CMDbatMUL_lng_sht_sht;"		  ]
[ 603@0,  "command",	  "batcalc",	  "*",				  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:lng] ",							  "CMDcstMULbat_lng_sht_sht;"		  ]
[ 604@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:lng] ",							  "CMDbatMULcst_lng_sht_sht;"		  ]
[ 605@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void ",						  "CMDbataccumMULcst_lng_sht_sht;"	  ]
[ 606@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void ",						  "CMDbataccumMULcst2_lng_sht_sht;"	  ]
[ 607@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:lng]):void ",					  "CMDbataccumMUL_lng_sht_sht;"		  ]
[ 608@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:void,:sht],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbatMUL_lng_sht_lng;"		  ]
[ 609@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",						  "CMDbatMUL_lng_sht_lng;"		  ]
[ 610@0,  "command",	  "batcalc",	  "*",				  "(cst:sht,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",							  "CMDcstMULbat_lng_sht_lng;"		  ]
[ 611@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:sht],cst:lng):bat[:any_1,:lng] ",							  "CMDbatMULcst_lng_sht_lng;"		  ]
[ 612@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:lng):void ",						  "CMDbataccumMULcst_lng_sht_lng;"	  ]
[ 613@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:lng]):void ",						  "CMDbataccumMULcst2_lng_sht_lng;"	  ]
[ 614@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",					  "CMDbataccumMUL_lng_sht_lng;"		  ]
[ 615@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:void,:lng],c:bat[:oid,:sht]):bat[:oid,:lng] ",						  "CMDbatMUL_lng_lng_sht;"		  ]
[ 616@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:sht]):bat[:any_1,:lng] ",						  "CMDbatMUL_lng_lng_sht;"		  ]
[ 617@0,  "command",	  "batcalc",	  "*",				  "(cst:lng,b:bat[:any_1,:sht]):bat[:any_1,:lng] ",							  "CMDcstMULbat_lng_lng_sht;"		  ]
[ 618@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:lng],cst:sht):bat[:any_1,:lng] ",							  "CMDbatMULcst_lng_lng_sht;"		  ]
[ 619@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:sht):void ",						  "CMDbataccumMULcst_lng_lng_sht;"	  ]
[ 620@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:sht]):void ",						  "CMDbataccumMULcst2_lng_lng_sht;"	  ]
[ 621@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:sht],c:bat[:any_1,:lng]):void ",					  "CMDbataccumMUL_lng_lng_sht;"		  ]
[ 622@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:void,:sht],c:bat[:oid,:int]):bat[:oid,:lng] ",						  "CMDbatMUL_lng_sht_int;"		  ]
[ 623@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:int]):bat[:any_1,:lng] ",						  "CMDbatMUL_lng_sht_int;"		  ]
[ 624@0,  "command",	  "batcalc",	  "*",				  "(cst:sht,b:bat[:any_1,:int]):bat[:any_1,:lng] ",							  "CMDcstMULbat_lng_sht_int;"		  ]
[ 625@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:sht],cst:int):bat[:any_1,:lng] ",							  "CMDbatMULcst_lng_sht_int;"		  ]
[ 626@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:int):void ",						  "CMDbataccumMULcst_lng_sht_int;"	  ]
[ 627@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:int]):void ",						  "CMDbataccumMULcst2_lng_sht_int;"	  ]
[ 628@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:int],c:bat[:any_1,:lng]):void ",					  "CMDbataccumMUL_lng_sht_int;"		  ]
[ 629@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:void,:int],c:bat[:oid,:sht]):bat[:oid,:lng] ",						  "CMDbatMUL_lng_int_sht;"		  ]
[ 630@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:int],c:bat[:any_1,:sht]):bat[:any_1,:lng] ",						  "CMDbatMUL_lng_int_sht;"		  ]
[ 631@0,  "command",	  "batcalc",	  "*",				  "(cst:int,b:bat[:any_1,:sht]):bat[:any_1,:lng] ",							  "CMDcstMULbat_lng_int_sht;"		  ]
[ 632@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:int],cst:sht):bat[:any_1,:lng] ",							  "CMDbatMULcst_lng_int_sht;"		  ]
[ 633@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:sht):void ",						  "CMDbataccumMULcst_lng_int_sht;"	  ]
[ 634@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:sht]):void ",						  "CMDbataccumMULcst2_lng_int_sht;"	  ]
[ 635@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:int],b:bat[:any_1,:sht],c:bat[:any_1,:lng]):void ",					  "CMDbataccumMUL_lng_int_sht;"		  ]
[ 636@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:void,:flt],c:bat[:oid,:flt]):bat[:oid,:flt] ",						  "CMDbatMUL_flt_flt_flt;"		  ]
[ 637@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:flt] ",						  "CMDbatMUL_flt_flt_flt;"		  ]
[ 638@0,  "command",	  "batcalc",	  "*",				  "(cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:flt] ",							  "CMDcstMULbat_flt_flt_flt;"		  ]
[ 639@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:flt] ",							  "CMDbatMULcst_flt_flt_flt;"		  ]
[ 640@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:flt],b:bat[:any_1,:flt],cst:flt):void ",						  "CMDbataccumMULcst_flt_flt_flt;"	  ]
[ 641@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:flt],cst:flt,b:bat[:any_1,:flt]):void ",						  "CMDbataccumMULcst2_flt_flt_flt;"	  ]
[ 642@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:flt],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):void ",					  "CMDbataccumMUL_flt_flt_flt;"		  ]
[ 643@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:void,:dbl],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",						  "CMDbatMUL_dbl_dbl_dbl;"		  ]
[ 644@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",						  "CMDbatMUL_dbl_dbl_dbl;"		  ]
[ 645@0,  "command",	  "batcalc",	  "*",				  "(cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",							  "CMDcstMULbat_dbl_dbl_dbl;"		  ]
[ 646@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:dbl] ",							  "CMDbatMULcst_dbl_dbl_dbl;"		  ]
[ 647@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:dbl],b:bat[:any_1,:dbl],cst:dbl):void ",						  "CMDbataccumMULcst_dbl_dbl_dbl;"	  ]
[ 648@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:dbl],cst:dbl,b:bat[:any_1,:dbl]):void ",						  "CMDbataccumMULcst2_dbl_dbl_dbl;"	  ]
[ 649@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:dbl],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):void ",					  "CMDbataccumMUL_dbl_dbl_dbl;"		  ]
[ 650@0,  "command",	  "batcalc",	  "++",				  "(b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",								  "CMDunaryPLUSPLUS;"			  ]
[ 651@0,  "command",	  "batcalc",	  "++",				  "(b:bat[:any_1,:flt]):bat[:any_1,:flt] ",								  "CMDunaryPLUSPLUS;"			  ]
[ 652@0,  "command",	  "batcalc",	  "++",				  "(b:bat[:any_1,:sht]):bat[:any_1,:sht] ",								  "CMDunaryPLUSPLUS;"			  ]
[ 653@0,  "command",	  "batcalc",	  "++",				  "(b:bat[:any_1,:lng]):bat[:any_1,:lng] ",								  "CMDunaryPLUSPLUS;"			  ]
[ 654@0,  "command",	  "batcalc",	  "++",				  "(b:bat[:any_1,:int]):bat[:any_1,:int] ",								  "CMDunaryPLUSPLUS;"			  ]
[ 655@0,  "command",	  "batcalc",	  "++",				  "(b:bat[:any_1,:oid]):bat[:any_1,:oid] ",								  "CMDunaryPLUSPLUS;"			  ]
[ 656@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:void,:sht],c:bat[:oid,:int]):bat[:oid,:int] ",						  "CMDbatADD_int_sht_int;"		  ]
[ 657@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:int]):bat[:any_1,:int] ",						  "CMDbatADD_int_sht_int;"		  ]
[ 658@0,  "command",	  "batcalc",	  "+",				  "(cst:sht,b:bat[:any_1,:int]):bat[:any_1,:int] ",							  "CMDcstADDbat_int_sht_int;"		  ]
[ 659@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:sht],cst:int):bat[:any_1,:int] ",							  "CMDbatADDcst_int_sht_int;"		  ]
[ 660@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:int):void ",						  "CMDbataccumADDcst_int_sht_int;"	  ]
[ 661@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:int]):void ",						  "CMDbataccumADDcst2_int_sht_int;"	  ]
[ 662@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",					  "CMDbataccumADD_int_sht_int;"		  ]
[ 663@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:void,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbatADD_lng_lng_lng;"		  ]
[ 664@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",						  "CMDbatADD_lng_lng_lng;"		  ]
[ 665@0,  "command",	  "batcalc",	  "+",				  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",							  "CMDcstADDbat_lng_lng_lng;"		  ]
[ 666@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:lng] ",							  "CMDbatADDcst_lng_lng_lng;"		  ]
[ 667@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:lng):void ",						  "CMDbataccumADDcst_lng_lng_lng;"	  ]
[ 668@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:lng]):void ",						  "CMDbataccumADDcst2_lng_lng_lng;"	  ]
[ 669@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",					  "CMDbataccumADD_lng_lng_lng;"		  ]
[ 670@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:void,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",						  "CMDbatADD_sht_sht_sht;"		  ]
[ 671@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:sht] ",						  "CMDbatADD_sht_sht_sht;"		  ]
[ 672@0,  "command",	  "batcalc",	  "+",				  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:sht] ",							  "CMDcstADDbat_sht_sht_sht;"		  ]
[ 673@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:sht] ",							  "CMDbatADDcst_sht_sht_sht;"		  ]
[ 674@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void ",						  "CMDbataccumADDcst_sht_sht_sht;"	  ]
[ 675@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void ",						  "CMDbataccumADDcst2_sht_sht_sht;"	  ]
[ 676@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void ",					  "CMDbataccumADD_sht_sht_sht;"		  ]
[ 677@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:void,:int],c:bat[:oid,:sht]):bat[:oid,:int] ",						  "CMDbatADD_int_int_sht;"		  ]
[ 678@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:int],c:bat[:any_1,:sht]):bat[:any_1,:int] ",						  "CMDbatADD_int_int_sht;"		  ]
[ 679@0,  "command",	  "batcalc",	  "+",				  "(cst:int,b:bat[:any_1,:sht]):bat[:any_1,:int] ",							  "CMDcstADDbat_int_int_sht;"		  ]
[ 680@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:int],cst:sht):bat[:any_1,:int] ",							  "CMDbatADDcst_int_int_sht;"		  ]
[ 681@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:sht):void ",						  "CMDbataccumADDcst_int_int_sht;"	  ]
[ 682@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:sht]):void ",						  "CMDbataccumADDcst2_int_int_sht;"	  ]
[ 683@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:int],b:bat[:any_1,:sht],c:bat[:any_1,:int]):void ",					  "CMDbataccumADD_int_int_sht;"		  ]
[ 684@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:void,:sht],c:bat[:oid,:sht]):bat[:oid,:int] ",						  "CMDbatADD_int_sht_sht;"		  ]
[ 685@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:int] ",						  "CMDbatADD_int_sht_sht;"		  ]
[ 686@0,  "command",	  "batcalc",	  "+",				  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:int] ",							  "CMDcstADDbat_int_sht_sht;"		  ]
[ 687@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:int] ",							  "CMDbatADDcst_int_sht_sht;"		  ]
[ 688@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void ",						  "CMDbataccumADDcst_int_sht_sht;"	  ]
[ 689@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void ",						  "CMDbataccumADDcst2_int_sht_sht;"	  ]
[ 690@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:int]):void ",					  "CMDbataccumADD_int_sht_sht;"		  ]
[ 691@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:void,:int],c:bat[:oid,:int]):bat[:oid,:int] ",						  "CMDbatADD_int_int_int;"		  ]
[ 692@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:int] ",						  "CMDbatADD_int_int_int;"		  ]
[ 693@0,  "command",	  "batcalc",	  "+",				  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:int] ",							  "CMDcstADDbat_int_int_int;"		  ]
[ 694@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:int] ",							  "CMDbatADDcst_int_int_int;"		  ]
[ 695@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:int):void ",						  "CMDbataccumADDcst_int_int_int;"	  ]
[ 696@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:int]):void ",						  "CMDbataccumADDcst2_int_int_int;"	  ]
[ 697@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",					  "CMDbataccumADD_int_int_int;"		  ]
[ 698@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:void,:int],c:bat[:oid,:int]):bat[:oid,:lng] ",						  "CMDbatADD_lng_int_int;"		  ]
[ 699@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:lng] ",						  "CMDbatADD_lng_int_int;"		  ]
[ 700@0,  "command",	  "batcalc",	  "+",				  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:lng] ",							  "CMDcstADDbat_lng_int_int;"		  ]
[ 701@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:lng] ",							  "CMDbatADDcst_lng_int_int;"		  ]
[ 702@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:int):void ",						  "CMDbataccumADDcst_lng_int_int;"	  ]
[ 703@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:int]):void ",						  "CMDbataccumADDcst2_lng_int_int;"	  ]
[ 704@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],c:bat[:any_1,:lng]):void ",					  "CMDbataccumADD_lng_int_int;"		  ]
[ 705@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:void,:int],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbatADD_lng_int_lng;"		  ]
[ 706@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:int],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",						  "CMDbatADD_lng_int_lng;"		  ]
[ 707@0,  "command",	  "batcalc",	  "+",				  "(cst:int,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",							  "CMDcstADDbat_lng_int_lng;"		  ]
[ 708@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:int],cst:lng):bat[:any_1,:lng] ",							  "CMDbatADDcst_lng_int_lng;"		  ]
[ 709@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:lng):void ",						  "CMDbataccumADDcst_lng_int_lng;"	  ]
[ 710@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:lng]):void ",						  "CMDbataccumADDcst2_lng_int_lng;"	  ]
[ 711@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:int],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",					  "CMDbataccumADD_lng_int_lng;"		  ]
[ 712@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:void,:lng],c:bat[:oid,:int]):bat[:oid,:lng] ",						  "CMDbatADD_lng_lng_int;"		  ]
[ 713@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:int]):bat[:any_1,:lng] ",						  "CMDbatADD_lng_lng_int;"		  ]
[ 714@0,  "command",	  "batcalc",	  "+",				  "(cst:lng,b:bat[:any_1,:int]):bat[:any_1,:lng] ",							  "CMDcstADDbat_lng_lng_int;"		  ]
[ 715@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:lng],cst:int):bat[:any_1,:lng] ",							  "CMDbatADDcst_lng_lng_int;"		  ]
[ 716@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:int):void ",						  "CMDbataccumADDcst_lng_lng_int;"	  ]
[ 717@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:int]):void ",						  "CMDbataccumADDcst2_lng_lng_int;"	  ]
[ 718@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:int],c:bat[:any_1,:lng]):void ",					  "CMDbataccumADD_lng_lng_int;"		  ]
[ 719@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:void,:sht],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbatADD_lng_sht_lng;"		  ]
[ 720@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",						  "CMDbatADD_lng_sht_lng;"		  ]
[ 721@0,  "command",	  "batcalc",	  "+",				  "(cst:sht,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",							  "CMDcstADDbat_lng_sht_lng;"		  ]
[ 722@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:sht],cst:lng):bat[:any_1,:lng] ",							  "CMDbatADDcst_lng_sht_lng;"		  ]
[ 723@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:lng):void ",						  "CMDbataccumADDcst_lng_sht_lng;"	  ]
[ 724@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:lng]):void ",						  "CMDbataccumADDcst2_lng_sht_lng;"	  ]
[ 725@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",					  "CMDbataccumADD_lng_sht_lng;"		  ]
[ 726@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:void,:lng],c:bat[:oid,:sht]):bat[:oid,:lng] ",						  "CMDbatADD_lng_lng_sht;"		  ]
[ 727@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:sht]):bat[:any_1,:lng] ",						  "CMDbatADD_lng_lng_sht;"		  ]
[ 728@0,  "command",	  "batcalc",	  "+",				  "(cst:lng,b:bat[:any_1,:sht]):bat[:any_1,:lng] ",							  "CMDcstADDbat_lng_lng_sht;"		  ]
[ 729@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:lng],cst:sht):bat[:any_1,:lng] ",							  "CMDbatADDcst_lng_lng_sht;"		  ]
[ 730@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:sht):void ",						  "CMDbataccumADDcst_lng_lng_sht;"	  ]
[ 731@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:sht]):void ",						  "CMDbataccumADDcst2_lng_lng_sht;"	  ]
[ 732@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:sht],c:bat[:any_1,:lng]):void ",					  "CMDbataccumADD_lng_lng_sht;"		  ]
[ 733@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:void,:sht],c:bat[:oid,:int]):bat[:oid,:lng] ",						  "CMDbatADD_lng_sht_int;"		  ]
[ 734@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:int]):bat[:any_1,:lng] ",						  "CMDbatADD_lng_sht_int;"		  ]
[ 735@0,  "command",	  "batcalc",	  "+",				  "(cst:sht,b:bat[:any_1,:int]):bat[:any_1,:lng] ",							  "CMDcstADDbat_lng_sht_int;"		  ]
[ 736@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:sht],cst:int):bat[:any_1,:lng] ",							  "CMDbatADDcst_lng_sht_int;"		  ]
[ 737@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:int):void ",						  "CMDbataccumADDcst_lng_sht_int;"	  ]
[ 738@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:int]):void ",						  "CMDbataccumADDcst2_lng_sht_int;"	  ]
[ 739@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:int],c:bat[:any_1,:lng]):void ",					  "CMDbataccumADD_lng_sht_int;"		  ]
[ 740@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:void,:int],c:bat[:oid,:sht]):bat[:oid,:lng] ",						  "CMDbatADD_lng_int_sht;"		  ]
[ 741@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:int],c:bat[:any_1,:sht]):bat[:any_1,:lng] ",						  "CMDbatADD_lng_int_sht;"		  ]
[ 742@0,  "command",	  "batcalc",	  "+",				  "(cst:int,b:bat[:any_1,:sht]):bat[:any_1,:lng] ",							  "CMDcstADDbat_lng_int_sht;"		  ]
[ 743@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:int],cst:sht):bat[:any_1,:lng] ",							  "CMDbatADDcst_lng_int_sht;"		  ]
[ 744@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:sht):void ",						  "CMDbataccumADDcst_lng_int_sht;"	  ]
[ 745@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:sht]):void ",						  "CMDbataccumADDcst2_lng_int_sht;"	  ]
[ 746@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:int],b:bat[:any_1,:sht],c:bat[:any_1,:lng]):void ",					  "CMDbataccumADD_lng_int_sht;"		  ]
[ 747@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:void,:flt],c:bat[:oid,:flt]):bat[:oid,:flt] ",						  "CMDbatADD_flt_flt_flt;"		  ]
[ 748@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:flt] ",						  "CMDbatADD_flt_flt_flt;"		  ]
[ 749@0,  "command",	  "batcalc",	  "+",				  "(cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:flt] ",							  "CMDcstADDbat_flt_flt_flt;"		  ]
[ 750@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:flt] ",							  "CMDbatADDcst_flt_flt_flt;"		  ]
[ 751@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:flt],b:bat[:any_1,:flt],cst:flt):void ",						  "CMDbataccumADDcst_flt_flt_flt;"	  ]
[ 752@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:flt],cst:flt,b:bat[:any_1,:flt]):void ",						  "CMDbataccumADDcst2_flt_flt_flt;"	  ]
[ 753@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:flt],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):void ",					  "CMDbataccumADD_flt_flt_flt;"		  ]
[ 754@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:void,:dbl],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",						  "CMDbatADD_dbl_dbl_dbl;"		  ]
[ 755@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",						  "CMDbatADD_dbl_dbl_dbl;"		  ]
[ 756@0,  "command",	  "batcalc",	  "+",				  "(cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",							  "CMDcstADDbat_dbl_dbl_dbl;"		  ]
[ 757@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:dbl] ",							  "CMDbatADDcst_dbl_dbl_dbl;"		  ]
[ 758@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:dbl],b:bat[:any_1,:dbl],cst:dbl):void ",						  "CMDbataccumADDcst_dbl_dbl_dbl;"	  ]
[ 759@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:dbl],cst:dbl,b:bat[:any_1,:dbl]):void ",						  "CMDbataccumADDcst2_dbl_dbl_dbl;"	  ]
[ 760@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:dbl],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):void ",					  "CMDbataccumADD_dbl_dbl_dbl;"		  ]
[ 761@0,  "command",	  "batcalc",	  "--",				  "(b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",								  "CMDunaryMINMIN;"			  ]
[ 762@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",								  "CMDunaryMIN;"			  ]
[ 763@0,  "command",	  "batcalc",	  "--",				  "(b:bat[:any_1,:flt]):bat[:any_1,:flt] ",								  "CMDunaryMINMIN;"			  ]
[ 764@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:flt]):bat[:any_1,:flt] ",								  "CMDunaryMIN;"			  ]
[ 765@0,  "command",	  "batcalc",	  "--",				  "(b:bat[:any_1,:sht]):bat[:any_1,:sht] ",								  "CMDunaryMINMIN;"			  ]
[ 766@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:sht]):bat[:any_1,:sht] ",								  "CMDunaryMIN;"			  ]
[ 767@0,  "command",	  "batcalc",	  "--",				  "(b:bat[:any_1,:lng]):bat[:any_1,:lng] ",								  "CMDunaryMINMIN;"			  ]
[ 768@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:lng]):bat[:any_1,:lng] ",								  "CMDunaryMIN;"			  ]
[ 769@0,  "command",	  "batcalc",	  "--",				  "(b:bat[:any_1,:int]):bat[:any_1,:int] ",								  "CMDunaryMINMIN;"			  ]
[ 770@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:int]):bat[:any_1,:int] ",								  "CMDunaryMIN;"			  ]
[ 771@0,  "command",	  "batcalc",	  "--",				  "(b:bat[:any_1,:oid]):bat[:any_1,:oid] ",								  "CMDunaryMINMIN;"			  ]
[ 772@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:oid]):bat[:any_1,:oid] ",								  "CMDunaryMIN;"			  ]
[ 773@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:void,:int],c:bat[:oid,:int]):bat[:oid,:int] ",						  "CMDbatSUB_int_int_int;"		  ]
[ 774@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:int] ",						  "CMDbatSUB_int_int_int;"		  ]
[ 775@0,  "command",	  "batcalc",	  "-",				  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:int] ",							  "CMDcstSUBbat_int_int_int;"		  ]
[ 776@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:int] ",							  "CMDbatSUBcst_int_int_int;"		  ]
[ 777@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:int):void ",						  "CMDbataccumSUBcst_int_int_int;"	  ]
[ 778@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:int]):void ",						  "CMDbataccumSUBcst2_int_int_int;"	  ]
[ 779@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",					  "CMDbataccumSUB_int_int_int;"		  ]
[ 780@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:void,:lng],c:bat[:oid,:int]):bat[:oid,:lng] ",						  "CMDbatSUB_lng_lng_int;"		  ]
[ 781@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:int]):bat[:any_1,:lng] ",						  "CMDbatSUB_lng_lng_int;"		  ]
[ 782@0,  "command",	  "batcalc",	  "-",				  "(cst:lng,b:bat[:any_1,:int]):bat[:any_1,:lng] ",							  "CMDcstSUBbat_lng_lng_int;"		  ]
[ 783@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:lng],cst:int):bat[:any_1,:lng] ",							  "CMDbatSUBcst_lng_lng_int;"		  ]
[ 784@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:int):void ",						  "CMDbataccumSUBcst_lng_lng_int;"	  ]
[ 785@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:int]):void ",						  "CMDbataccumSUBcst2_lng_lng_int;"	  ]
[ 786@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:int],c:bat[:any_1,:lng]):void ",					  "CMDbataccumSUB_lng_lng_int;"		  ]
[ 787@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:void,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",						  "CMDbatSUB_sht_sht_sht;"		  ]
[ 788@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:sht] ",						  "CMDbatSUB_sht_sht_sht;"		  ]
[ 789@0,  "command",	  "batcalc",	  "-",				  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:sht] ",							  "CMDcstSUBbat_sht_sht_sht;"		  ]
[ 790@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:sht] ",							  "CMDbatSUBcst_sht_sht_sht;"		  ]
[ 791@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void ",						  "CMDbataccumSUBcst_sht_sht_sht;"	  ]
[ 792@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void ",						  "CMDbataccumSUBcst2_sht_sht_sht;"	  ]
[ 793@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void ",					  "CMDbataccumSUB_sht_sht_sht;"		  ]
[ 794@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:void,:sht],c:bat[:oid,:int]):bat[:oid,:int] ",						  "CMDbatSUB_int_sht_int;"		  ]
[ 795@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:int]):bat[:any_1,:int] ",						  "CMDbatSUB_int_sht_int;"		  ]
[ 796@0,  "command",	  "batcalc",	  "-",				  "(cst:sht,b:bat[:any_1,:int]):bat[:any_1,:int] ",							  "CMDcstSUBbat_int_sht_int;"		  ]
[ 797@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:sht],cst:int):bat[:any_1,:int] ",							  "CMDbatSUBcst_int_sht_int;"		  ]
[ 798@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:int):void ",						  "CMDbataccumSUBcst_int_sht_int;"	  ]
[ 799@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:int]):void ",						  "CMDbataccumSUBcst2_int_sht_int;"	  ]
[ 800@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",					  "CMDbataccumSUB_int_sht_int;"		  ]
[ 801@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:void,:int],c:bat[:oid,:sht]):bat[:oid,:int] ",						  "CMDbatSUB_int_int_sht;"		  ]
[ 802@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:int],c:bat[:any_1,:sht]):bat[:any_1,:int] ",						  "CMDbatSUB_int_int_sht;"		  ]
[ 803@0,  "command",	  "batcalc",	  "-",				  "(cst:int,b:bat[:any_1,:sht]):bat[:any_1,:int] ",							  "CMDcstSUBbat_int_int_sht;"		  ]
[ 804@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:int],cst:sht):bat[:any_1,:int] ",							  "CMDbatSUBcst_int_int_sht;"		  ]
[ 805@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:sht):void ",						  "CMDbataccumSUBcst_int_int_sht;"	  ]
[ 806@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:sht]):void ",						  "CMDbataccumSUBcst2_int_int_sht;"	  ]
[ 807@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:int],b:bat[:any_1,:sht],c:bat[:any_1,:int]):void ",					  "CMDbataccumSUB_int_int_sht;"		  ]
[ 808@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:void,:sht],c:bat[:oid,:sht]):bat[:oid,:int] ",						  "CMDbatSUB_int_sht_sht;"		  ]
[ 809@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:int] ",						  "CMDbatSUB_int_sht_sht;"		  ]
[ 810@0,  "command",	  "batcalc",	  "-",				  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:int] ",							  "CMDcstSUBbat_int_sht_sht;"		  ]
[ 811@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:int] ",							  "CMDbatSUBcst_int_sht_sht;"		  ]
[ 812@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void ",						  "CMDbataccumSUBcst_int_sht_sht;"	  ]
[ 813@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void ",						  "CMDbataccumSUBcst2_int_sht_sht;"	  ]
[ 814@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:int]):void ",					  "CMDbataccumSUB_int_sht_sht;"		  ]
[ 815@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:void,:int],c:bat[:oid,:int]):bat[:oid,:lng] ",						  "CMDbatSUB_lng_int_int;"		  ]
[ 816@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:lng] ",						  "CMDbatSUB_lng_int_int;"		  ]
[ 817@0,  "command",	  "batcalc",	  "-",				  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:lng] ",							  "CMDcstSUBbat_lng_int_int;"		  ]
[ 818@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:lng] ",							  "CMDbatSUBcst_lng_int_int;"		  ]
[ 819@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:int):void ",						  "CMDbataccumSUBcst_lng_int_int;"	  ]
[ 820@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:int]):void ",						  "CMDbataccumSUBcst2_lng_int_int;"	  ]
[ 821@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],c:bat[:any_1,:lng]):void ",					  "CMDbataccumSUB_lng_int_int;"		  ]
[ 822@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:void,:int],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbatSUB_lng_int_lng;"		  ]
[ 823@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:int],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",						  "CMDbatSUB_lng_int_lng;"		  ]
[ 824@0,  "command",	  "batcalc",	  "-",				  "(cst:int,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",							  "CMDcstSUBbat_lng_int_lng;"		  ]
[ 825@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:int],cst:lng):bat[:any_1,:lng] ",							  "CMDbatSUBcst_lng_int_lng;"		  ]
[ 826@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:lng):void ",						  "CMDbataccumSUBcst_lng_int_lng;"	  ]
[ 827@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:lng]):void ",						  "CMDbataccumSUBcst2_lng_int_lng;"	  ]
[ 828@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:int],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",					  "CMDbataccumSUB_lng_int_lng;"		  ]
[ 829@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:void,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbatSUB_lng_lng_lng;"		  ]
[ 830@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",						  "CMDbatSUB_lng_lng_lng;"		  ]
[ 831@0,  "command",	  "batcalc",	  "-",				  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",							  "CMDcstSUBbat_lng_lng_lng;"		  ]
[ 832@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:lng] ",							  "CMDbatSUBcst_lng_lng_lng;"		  ]
[ 833@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:lng):void ",						  "CMDbataccumSUBcst_lng_lng_lng;"	  ]
[ 834@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:lng]):void ",						  "CMDbataccumSUBcst2_lng_lng_lng;"	  ]
[ 835@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",					  "CMDbataccumSUB_lng_lng_lng;"		  ]
[ 836@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:void,:sht],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbatSUB_lng_sht_lng;"		  ]
[ 837@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",						  "CMDbatSUB_lng_sht_lng;"		  ]
[ 838@0,  "command",	  "batcalc",	  "-",				  "(cst:sht,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",							  "CMDcstSUBbat_lng_sht_lng;"		  ]
[ 839@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:sht],cst:lng):bat[:any_1,:lng] ",							  "CMDbatSUBcst_lng_sht_lng;"		  ]
[ 840@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:lng):void ",						  "CMDbataccumSUBcst_lng_sht_lng;"	  ]
[ 841@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:lng]):void ",						  "CMDbataccumSUBcst2_lng_sht_lng;"	  ]
[ 842@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",					  "CMDbataccumSUB_lng_sht_lng;"		  ]
[ 843@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:void,:lng],c:bat[:oid,:sht]):bat[:oid,:lng] ",						  "CMDbatSUB_lng_lng_sht;"		  ]
[ 844@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:sht]):bat[:any_1,:lng] ",						  "CMDbatSUB_lng_lng_sht;"		  ]
[ 845@0,  "command",	  "batcalc",	  "-",				  "(cst:lng,b:bat[:any_1,:sht]):bat[:any_1,:lng] ",							  "CMDcstSUBbat_lng_lng_sht;"		  ]
[ 846@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:lng],cst:sht):bat[:any_1,:lng] ",							  "CMDbatSUBcst_lng_lng_sht;"		  ]
[ 847@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:sht):void ",						  "CMDbataccumSUBcst_lng_lng_sht;"	  ]
[ 848@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:sht]):void ",						  "CMDbataccumSUBcst2_lng_lng_sht;"	  ]
[ 849@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:sht],c:bat[:any_1,:lng]):void ",					  "CMDbataccumSUB_lng_lng_sht;"		  ]
[ 850@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:void,:sht],c:bat[:oid,:int]):bat[:oid,:lng] ",						  "CMDbatSUB_lng_sht_int;"		  ]
[ 851@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:int]):bat[:any_1,:lng] ",						  "CMDbatSUB_lng_sht_int;"		  ]
[ 852@0,  "command",	  "batcalc",	  "-",				  "(cst:sht,b:bat[:any_1,:int]):bat[:any_1,:lng] ",							  "CMDcstSUBbat_lng_sht_int;"		  ]
[ 853@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:sht],cst:int):bat[:any_1,:lng] ",							  "CMDbatSUBcst_lng_sht_int;"		  ]
[ 854@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:int):void ",						  "CMDbataccumSUBcst_lng_sht_int;"	  ]
[ 855@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:int]):void ",						  "CMDbataccumSUBcst2_lng_sht_int;"	  ]
[ 856@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:int],c:bat[:any_1,:lng]):void ",					  "CMDbataccumSUB_lng_sht_int;"		  ]
[ 857@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:void,:int],c:bat[:oid,:sht]):bat[:oid,:lng] ",						  "CMDbatSUB_lng_int_sht;"		  ]
[ 858@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:int],c:bat[:any_1,:sht]):bat[:any_1,:lng] ",						  "CMDbatSUB_lng_int_sht;"		  ]
[ 859@0,  "command",	  "batcalc",	  "-",				  "(cst:int,b:bat[:any_1,:sht]):bat[:any_1,:lng] ",							  "CMDcstSUBbat_lng_int_sht;"		  ]
[ 860@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:int],cst:sht):bat[:any_1,:lng] ",							  "CMDbatSUBcst_lng_int_sht;"		  ]
[ 861@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:sht):void ",						  "CMDbataccumSUBcst_lng_int_sht;"	  ]
[ 862@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:sht]):void ",						  "CMDbataccumSUBcst2_lng_int_sht;"	  ]
[ 863@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:int],b:bat[:any_1,:sht],c:bat[:any_1,:lng]):void ",					  "CMDbataccumSUB_lng_int_sht;"		  ]
[ 864@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:void,:flt],c:bat[:oid,:flt]):bat[:oid,:flt] ",						  "CMDbatSUB_flt_flt_flt;"		  ]
[ 865@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:flt] ",						  "CMDbatSUB_flt_flt_flt;"		  ]
[ 866@0,  "command",	  "batcalc",	  "-",				  "(cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:flt] ",							  "CMDcstSUBbat_flt_flt_flt;"		  ]
[ 867@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:flt] ",							  "CMDbatSUBcst_flt_flt_flt;"		  ]
[ 868@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:flt],b:bat[:any_1,:flt],cst:flt):void ",						  "CMDbataccumSUBcst_flt_flt_flt;"	  ]
[ 869@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:flt],cst:flt,b:bat[:any_1,:flt]):void ",						  "CMDbataccumSUBcst2_flt_flt_flt;"	  ]
[ 870@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:flt],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):void ",					  "CMDbataccumSUB_flt_flt_flt;"		  ]
[ 871@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:void,:dbl],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",						  "CMDbatSUB_dbl_dbl_dbl;"		  ]
[ 872@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",						  "CMDbatSUB_dbl_dbl_dbl;"		  ]
[ 873@0,  "command",	  "batcalc",	  "-",				  "(cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",							  "CMDcstSUBbat_dbl_dbl_dbl;"		  ]
[ 874@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:dbl] ",							  "CMDbatSUBcst_dbl_dbl_dbl;"		  ]
[ 875@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:dbl],b:bat[:any_1,:dbl],cst:dbl):void ",						  "CMDbataccumSUBcst_dbl_dbl_dbl;"	  ]
[ 876@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:dbl],cst:dbl,b:bat[:any_1,:dbl]):void ",						  "CMDbataccumSUBcst2_dbl_dbl_dbl;"	  ]
[ 877@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:dbl],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):void ",					  "CMDbataccumSUB_dbl_dbl_dbl;"		  ]
[ 878@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:void,:int],c:bat[:oid,:int]):bat[:oid,:int] ",						  "CMDbatDIV_int_int_int;"		  ]
[ 879@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:int] ",						  "CMDbatDIV_int_int_int;"		  ]
[ 880@0,  "command",	  "batcalc",	  "/",				  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:int] ",							  "CMDcstDIVbat_int_int_int;"		  ]
[ 881@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:int] ",							  "CMDbatDIVcst_int_int_int;"		  ]
[ 882@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:int):void ",						  "CMDbataccumDIVcst_int_int_int;"	  ]
[ 883@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:int]):void ",						  "CMDbataccumDIVcst2_int_int_int;"	  ]
[ 884@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",					  "CMDbataccumDIV_int_int_int;"		  ]
[ 885@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:void,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbatDIV_lng_lng_lng;"		  ]
[ 886@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",						  "CMDbatDIV_lng_lng_lng;"		  ]
[ 887@0,  "command",	  "batcalc",	  "/",				  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",							  "CMDcstDIVbat_lng_lng_lng;"		  ]
[ 888@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:lng] ",							  "CMDbatDIVcst_lng_lng_lng;"		  ]
[ 889@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:lng):void ",						  "CMDbataccumDIVcst_lng_lng_lng;"	  ]
[ 890@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:lng]):void ",						  "CMDbataccumDIVcst2_lng_lng_lng;"	  ]
[ 891@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",					  "CMDbataccumDIV_lng_lng_lng;"		  ]
[ 892@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:void,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",						  "CMDbatDIV_sht_sht_sht;"		  ]
[ 893@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:sht] ",						  "CMDbatDIV_sht_sht_sht;"		  ]
[ 894@0,  "command",	  "batcalc",	  "/",				  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:sht] ",							  "CMDcstDIVbat_sht_sht_sht;"		  ]
[ 895@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:sht] ",							  "CMDbatDIVcst_sht_sht_sht;"		  ]
[ 896@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void ",						  "CMDbataccumDIVcst_sht_sht_sht;"	  ]
[ 897@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void ",						  "CMDbataccumDIVcst2_sht_sht_sht;"	  ]
[ 898@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void ",					  "CMDbataccumDIV_sht_sht_sht;"		  ]
[ 899@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:void,:sht],c:bat[:oid,:int]):bat[:oid,:int] ",						  "CMDbatDIV_int_sht_int;"		  ]
[ 900@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:int]):bat[:any_1,:int] ",						  "CMDbatDIV_int_sht_int;"		  ]
[ 901@0,  "command",	  "batcalc",	  "/",				  "(cst:sht,b:bat[:any_1,:int]):bat[:any_1,:int] ",							  "CMDcstDIVbat_int_sht_int;"		  ]
[ 902@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:sht],cst:int):bat[:any_1,:int] ",							  "CMDbatDIVcst_int_sht_int;"		  ]
[ 903@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:int):void ",						  "CMDbataccumDIVcst_int_sht_int;"	  ]
[ 904@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:int]):void ",						  "CMDbataccumDIVcst2_int_sht_int;"	  ]
[ 905@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",					  "CMDbataccumDIV_int_sht_int;"		  ]
[ 906@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:void,:int],c:bat[:oid,:sht]):bat[:oid,:int] ",						  "CMDbatDIV_int_int_sht;"		  ]
[ 907@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:int],c:bat[:any_1,:sht]):bat[:any_1,:int] ",						  "CMDbatDIV_int_int_sht;"		  ]
[ 908@0,  "command",	  "batcalc",	  "/",				  "(cst:int,b:bat[:any_1,:sht]):bat[:any_1,:int] ",							  "CMDcstDIVbat_int_int_sht;"		  ]
[ 909@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:int],cst:sht):bat[:any_1,:int] ",							  "CMDbatDIVcst_int_int_sht;"		  ]
[ 910@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:sht):void ",						  "CMDbataccumDIVcst_int_int_sht;"	  ]
[ 911@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:sht]):void ",						  "CMDbataccumDIVcst2_int_int_sht;"	  ]
[ 912@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:int],b:bat[:any_1,:sht],c:bat[:any_1,:int]):void ",					  "CMDbataccumDIV_int_int_sht;"		  ]
[ 913@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:void,:sht],c:bat[:oid,:sht]):bat[:oid,:int] ",						  "CMDbatDIV_int_sht_sht;"		  ]
[ 914@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:int] ",						  "CMDbatDIV_int_sht_sht;"		  ]
[ 915@0,  "command",	  "batcalc",	  "/",				  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:int] ",							  "CMDcstDIVbat_int_sht_sht;"		  ]
[ 916@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:int] ",							  "CMDbatDIVcst_int_sht_sht;"		  ]
[ 917@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void ",						  "CMDbataccumDIVcst_int_sht_sht;"	  ]
[ 918@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void ",						  "CMDbataccumDIVcst2_int_sht_sht;"	  ]
[ 919@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:int]):void ",					  "CMDbataccumDIV_int_sht_sht;"		  ]
[ 920@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:void,:int],c:bat[:oid,:int]):bat[:oid,:lng] ",						  "CMDbatDIV_lng_int_int;"		  ]
[ 921@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:lng] ",						  "CMDbatDIV_lng_int_int;"		  ]
[ 922@0,  "command",	  "batcalc",	  "/",				  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:lng] ",							  "CMDcstDIVbat_lng_int_int;"		  ]
[ 923@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:lng] ",							  "CMDbatDIVcst_lng_int_int;"		  ]
[ 924@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:int):void ",						  "CMDbataccumDIVcst_lng_int_int;"	  ]
[ 925@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:int]):void ",						  "CMDbataccumDIVcst2_lng_int_int;"	  ]
[ 926@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],c:bat[:any_1,:lng]):void ",					  "CMDbataccumDIV_lng_int_int;"		  ]
[ 927@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:void,:int],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbatDIV_lng_int_lng;"		  ]
[ 928@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:int],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",						  "CMDbatDIV_lng_int_lng;"		  ]
[ 929@0,  "command",	  "batcalc",	  "/",				  "(cst:int,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",							  "CMDcstDIVbat_lng_int_lng;"		  ]
[ 930@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:int],cst:lng):bat[:any_1,:lng] ",							  "CMDbatDIVcst_lng_int_lng;"		  ]
[ 931@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:lng):void ",						  "CMDbataccumDIVcst_lng_int_lng;"	  ]
[ 932@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:lng]):void ",						  "CMDbataccumDIVcst2_lng_int_lng;"	  ]
[ 933@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:int],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",					  "CMDbataccumDIV_lng_int_lng;"		  ]
[ 934@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:void,:lng],c:bat[:oid,:int]):bat[:oid,:lng] ",						  "CMDbatDIV_lng_lng_int;"		  ]
[ 935@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:int]):bat[:any_1,:lng] ",						  "CMDbatDIV_lng_lng_int;"		  ]
[ 936@0,  "command",	  "batcalc",	  "/",				  "(cst:lng,b:bat[:any_1,:int]):bat[:any_1,:lng] ",							  "CMDcstDIVbat_lng_lng_int;"		  ]
[ 937@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:lng],cst:int):bat[:any_1,:lng] ",							  "CMDbatDIVcst_lng_lng_int;"		  ]
[ 938@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:int):void ",						  "CMDbataccumDIVcst_lng_lng_int;"	  ]
[ 939@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:int]):void ",						  "CMDbataccumDIVcst2_lng_lng_int;"	  ]
[ 940@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:int],c:bat[:any_1,:lng]):void ",					  "CMDbataccumDIV_lng_lng_int;"		  ]
[ 941@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:void,:sht],c:bat[:oid,:sht]):bat[:oid,:lng] ",						  "CMDbatDIV_lng_sht_sht;"		  ]
[ 942@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:lng] ",						  "CMDbatDIV_lng_sht_sht;"		  ]
[ 943@0,  "command",	  "batcalc",	  "/",				  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:lng] ",							  "CMDcstDIVbat_lng_sht_sht;"		  ]
[ 944@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:lng] ",							  "CMDbatDIVcst_lng_sht_sht;"		  ]
[ 945@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void ",						  "CMDbataccumDIVcst_lng_sht_sht;"	  ]
[ 946@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void ",						  "CMDbataccumDIVcst2_lng_sht_sht;"	  ]
[ 947@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:lng]):void ",					  "CMDbataccumDIV_lng_sht_sht;"		  ]
[ 948@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:void,:sht],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbatDIV_lng_sht_lng;"		  ]
[ 949@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",						  "CMDbatDIV_lng_sht_lng;"		  ]
[ 950@0,  "command",	  "batcalc",	  "/",				  "(cst:sht,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",							  "CMDcstDIVbat_lng_sht_lng;"		  ]
[ 951@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:sht],cst:lng):bat[:any_1,:lng] ",							  "CMDbatDIVcst_lng_sht_lng;"		  ]
[ 952@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:lng):void ",						  "CMDbataccumDIVcst_lng_sht_lng;"	  ]
[ 953@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:lng]):void ",						  "CMDbataccumDIVcst2_lng_sht_lng;"	  ]
[ 954@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",					  "CMDbataccumDIV_lng_sht_lng;"		  ]
[ 955@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:void,:lng],c:bat[:oid,:sht]):bat[:oid,:lng] ",						  "CMDbatDIV_lng_lng_sht;"		  ]
[ 956@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:sht]):bat[:any_1,:lng] ",						  "CMDbatDIV_lng_lng_sht;"		  ]
[ 957@0,  "command",	  "batcalc",	  "/",				  "(cst:lng,b:bat[:any_1,:sht]):bat[:any_1,:lng] ",							  "CMDcstDIVbat_lng_lng_sht;"		  ]
[ 958@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:lng],cst:sht):bat[:any_1,:lng] ",							  "CMDbatDIVcst_lng_lng_sht;"		  ]
[ 959@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:sht):void ",						  "CMDbataccumDIVcst_lng_lng_sht;"	  ]
[ 960@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:sht]):void ",						  "CMDbataccumDIVcst2_lng_lng_sht;"	  ]
[ 961@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:sht],c:bat[:any_1,:lng]):void ",					  "CMDbataccumDIV_lng_lng_sht;"		  ]
[ 962@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:void,:sht],c:bat[:oid,:int]):bat[:oid,:lng] ",						  "CMDbatDIV_lng_sht_int;"		  ]
[ 963@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:int]):bat[:any_1,:lng] ",						  "CMDbatDIV_lng_sht_int;"		  ]
[ 964@0,  "command",	  "batcalc",	  "/",				  "(cst:sht,b:bat[:any_1,:int]):bat[:any_1,:lng] ",							  "CMDcstDIVbat_lng_sht_int;"		  ]
[ 965@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:sht],cst:int):bat[:any_1,:lng] ",							  "CMDbatDIVcst_lng_sht_int;"		  ]
[ 966@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:int):void ",						  "CMDbataccumDIVcst_lng_sht_int;"	  ]
[ 967@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:int]):void ",						  "CMDbataccumDIVcst2_lng_sht_int;"	  ]
[ 968@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:int],c:bat[:any_1,:lng]):void ",					  "CMDbataccumDIV_lng_sht_int;"		  ]
[ 969@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:void,:int],c:bat[:oid,:sht]):bat[:oid,:lng] ",						  "CMDbatDIV_lng_int_sht;"		  ]
[ 970@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:int],c:bat[:any_1,:sht]):bat[:any_1,:lng] ",						  "CMDbatDIV_lng_int_sht;"		  ]
[ 971@0,  "command",	  "batcalc",	  "/",				  "(cst:int,b:bat[:any_1,:sht]):bat[:any_1,:lng] ",							  "CMDcstDIVbat_lng_int_sht;"		  ]
[ 972@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:int],cst:sht):bat[:any_1,:lng] ",							  "CMDbatDIVcst_lng_int_sht;"		  ]
[ 973@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:sht):void ",						  "CMDbataccumDIVcst_lng_int_sht;"	  ]
[ 974@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:sht]):void ",						  "CMDbataccumDIVcst2_lng_int_sht;"	  ]
[ 975@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:int],b:bat[:any_1,:sht],c:bat[:any_1,:lng]):void ",					  "CMDbataccumDIV_lng_int_sht;"		  ]
[ 976@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:void,:flt],c:bat[:oid,:flt]):bat[:oid,:flt] ",						  "CMDbatDIV_flt_flt_flt;"		  ]
[ 977@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:flt] ",						  "CMDbatDIV_flt_flt_flt;"		  ]
[ 978@0,  "command",	  "batcalc",	  "/",				  "(cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:flt] ",							  "CMDcstDIVbat_flt_flt_flt;"		  ]
[ 979@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:flt] ",							  "CMDbatDIVcst_flt_flt_flt;"		  ]
[ 980@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:flt],b:bat[:any_1,:flt],cst:flt):void ",						  "CMDbataccumDIVcst_flt_flt_flt;"	  ]
[ 981@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:flt],cst:flt,b:bat[:any_1,:flt]):void ",						  "CMDbataccumDIVcst2_flt_flt_flt;"	  ]
[ 982@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:flt],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):void ",					  "CMDbataccumDIV_flt_flt_flt;"		  ]
[ 983@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:void,:dbl],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",						  "CMDbatDIV_dbl_dbl_dbl;"		  ]
[ 984@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",						  "CMDbatDIV_dbl_dbl_dbl;"		  ]
[ 985@0,  "command",	  "batcalc",	  "/",				  "(cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",							  "CMDcstDIVbat_dbl_dbl_dbl;"		  ]
[ 986@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:dbl] ",							  "CMDbatDIVcst_dbl_dbl_dbl;"		  ]
[ 987@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:dbl],b:bat[:any_1,:dbl],cst:dbl):void ",						  "CMDbataccumDIVcst_dbl_dbl_dbl;"	  ]
[ 988@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:dbl],cst:dbl,b:bat[:any_1,:dbl]):void ",						  "CMDbataccumDIVcst2_dbl_dbl_dbl;"	  ]
[ 989@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:dbl],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):void ",					  "CMDbataccumDIV_dbl_dbl_dbl;"		  ]
[ 990@0,  "command",	  "batcalc",	  "<=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",					  "CMDcmpaccumLEcst;"			  ]
[ 991@0,  "command",	  "batcalc",	  "<=",				  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",							  "CMDcmpLEcst;"			  ]
[ 992@0,  "command",	  "batcalc",	  "<=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",			  "CMDcmpaccumLE;"			  ]
[ 993@0,  "command",	  "batcalc",	  "<=",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",						  "CMDcmpLE;"				  ]
[ 994@0,  "command",	  "batcalc",	  "<",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",					  "CMDcmpaccumLTcst;"			  ]
[ 995@0,  "command",	  "batcalc",	  "<",				  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",							  "CMDcmpLTcst;"			  ]
[ 996@0,  "command",	  "batcalc",	  "<",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",			  "CMDcmpaccumLT;"			  ]
[ 997@0,  "command",	  "batcalc",	  "<",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",						  "CMDcmpLT;"				  ]
[ 998@0,  "command",	  "batcalc",	  "<=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",					  "CMDcmpaccumLEcst;"			  ]
[ 999@0,  "command",	  "batcalc",	  "<=",				  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",							  "CMDcmpLEcst;"			  ]
[ 1000@0, "command",	  "batcalc",	  "<=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",			  "CMDcmpaccumLE;"			  ]
[ 1001@0, "command",	  "batcalc",	  "<=",				  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",						  "CMDcmpLE;"				  ]
[ 1002@0, "command",	  "batcalc",	  "<",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",					  "CMDcmpaccumLTcst;"			  ]
[ 1003@0, "command",	  "batcalc",	  "<",				  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",							  "CMDcmpLTcst;"			  ]
[ 1004@0, "command",	  "batcalc",	  "<",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",			  "CMDcmpaccumLT;"			  ]
[ 1005@0, "command",	  "batcalc",	  "<",				  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",						  "CMDcmpLT;"				  ]
[ 1006@0, "command",	  "batcalc",	  "<=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",					  "CMDcmpaccumLEcst;"			  ]
[ 1007@0, "command",	  "batcalc",	  "<=",				  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",							  "CMDcmpLEcst;"			  ]
[ 1008@0, "command",	  "batcalc",	  "<=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",			  "CMDcmpaccumLE;"			  ]
[ 1009@0, "command",	  "batcalc",	  "<=",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",						  "CMDcmpLE;"				  ]
[ 1010@0, "command",	  "batcalc",	  "<",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",					  "CMDcmpaccumLTcst;"			  ]
[ 1011@0, "command",	  "batcalc",	  "<",				  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",							  "CMDcmpLTcst;"			  ]
[ 1012@0, "command",	  "batcalc",	  "<",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",			  "CMDcmpaccumLT;"			  ]
[ 1013@0, "command",	  "batcalc",	  "<",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",						  "CMDcmpLT;"				  ]
[ 1014@0, "command",	  "batcalc",	  "<=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",					  "CMDcmpaccumLEcst;"			  ]
[ 1015@0, "command",	  "batcalc",	  "<=",				  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",							  "CMDcmpLEcst;"			  ]
[ 1016@0, "command",	  "batcalc",	  "<=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",			  "CMDcmpaccumLE;"			  ]
[ 1017@0, "command",	  "batcalc",	  "<=",				  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",						  "CMDcmpLE;"				  ]
[ 1018@0, "command",	  "batcalc",	  "<",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",					  "CMDcmpaccumLTcst;"			  ]
[ 1019@0, "command",	  "batcalc",	  "<",				  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",							  "CMDcmpLTcst;"			  ]
[ 1020@0, "command",	  "batcalc",	  "<",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",			  "CMDcmpaccumLT;"			  ]
[ 1021@0, "command",	  "batcalc",	  "<",				  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",						  "CMDcmpLT;"				  ]
[ 1022@0, "command",	  "batcalc",	  "<=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",					  "CMDcmpaccumLEcst;"			  ]
[ 1023@0, "command",	  "batcalc",	  "<=",				  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",							  "CMDcmpLEcst;"			  ]
[ 1024@0, "command",	  "batcalc",	  "<=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",			  "CMDcmpaccumLE;"			  ]
[ 1025@0, "command",	  "batcalc",	  "<=",				  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",						  "CMDcmpLE;"				  ]
[ 1026@0, "command",	  "batcalc",	  "<",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",					  "CMDcmpaccumLTcst;"			  ]
[ 1027@0, "command",	  "batcalc",	  "<",				  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",							  "CMDcmpLTcst;"			  ]
[ 1028@0, "command",	  "batcalc",	  "<",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",			  "CMDcmpaccumLT;"			  ]
[ 1029@0, "command",	  "batcalc",	  "<",				  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",						  "CMDcmpLT;"				  ]
[ 1030@0, "command",	  "batcalc",	  "<=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",					  "CMDcmpaccumLEcst;"			  ]
[ 1031@0, "command",	  "batcalc",	  "<=",				  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",							  "CMDcmpLEcst;"			  ]
[ 1032@0, "command",	  "batcalc",	  "<=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",			  "CMDcmpaccumLE;"			  ]
[ 1033@0, "command",	  "batcalc",	  "<=",				  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",						  "CMDcmpLE;"				  ]
[ 1034@0, "command",	  "batcalc",	  "<",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",					  "CMDcmpaccumLTcst;"			  ]
[ 1035@0, "command",	  "batcalc",	  "<",				  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",							  "CMDcmpLTcst;"			  ]
[ 1036@0, "command",	  "batcalc",	  "<",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",			  "CMDcmpaccumLT;"			  ]
[ 1037@0, "command",	  "batcalc",	  "<",				  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",						  "CMDcmpLT;"				  ]
[ 1038@0, "command",	  "batcalc",	  "<=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",					  "CMDcmpaccumLEcst;"			  ]
[ 1039@0, "command",	  "batcalc",	  "<=",				  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",							  "CMDcmpLEcst;"			  ]
[ 1040@0, "command",	  "batcalc",	  "<=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",			  "CMDcmpaccumLE;"			  ]
[ 1041@0, "command",	  "batcalc",	  "<=",				  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",						  "CMDcmpLE;"				  ]
[ 1042@0, "command",	  "batcalc",	  "<",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",					  "CMDcmpaccumLTcst;"			  ]
[ 1043@0, "command",	  "batcalc",	  "<",				  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",							  "CMDcmpLTcst;"			  ]
[ 1044@0, "command",	  "batcalc",	  "<",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",			  "CMDcmpaccumLT;"			  ]
[ 1045@0, "command",	  "batcalc",	  "<",				  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",						  "CMDcmpLT;"				  ]
[ 1046@0, "command",	  "batcalc",	  "==",				  "(left:bat[:void,:any_1],right:bat[:void,:any_1]):bat[:void,:bit] ",					  "CMDcmpEQ;"				  ]
[ 1047@0, "command",	  "batcalc",	  "==",				  "(left:bat[:oid,:any_1],right:bat[:void,:any_1]):bat[:void,:bit] ",					  "CMDcmpEQ;"				  ]
[ 1048@0, "command",	  "batcalc",	  "==",				  "(left:bat[:void,:any_1],right:bat[:oid,:any_1]):bat[:void,:bit] ",					  "CMDcmpEQ;"				  ]
[ 1049@0, "command",	  "batcalc",	  "==",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",					  "CMDcmpaccumEQcst;"			  ]
[ 1050@0, "command",	  "batcalc",	  "==",				  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",							  "CMDcmpEQcst;"			  ]
[ 1051@0, "command",	  "batcalc",	  "==",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",			  "CMDcmpaccumEQ;"			  ]
[ 1052@0, "command",	  "batcalc",	  "==",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",						  "CMDcmpEQ;"				  ]
[ 1053@0, "command",	  "batcalc",	  "==",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",					  "CMDcmpaccumEQcst;"			  ]
[ 1054@0, "command",	  "batcalc",	  "==",				  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",							  "CMDcmpEQcst;"			  ]
[ 1055@0, "command",	  "batcalc",	  "==",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",			  "CMDcmpaccumEQ;"			  ]
[ 1056@0, "command",	  "batcalc",	  "==",				  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",						  "CMDcmpEQ;"				  ]
[ 1057@0, "command",	  "batcalc",	  "==",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",					  "CMDcmpaccumEQcst;"			  ]
[ 1058@0, "command",	  "batcalc",	  "==",				  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",							  "CMDcmpEQcst;"			  ]
[ 1059@0, "command",	  "batcalc",	  "==",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",			  "CMDcmpaccumEQ;"			  ]
[ 1060@0, "command",	  "batcalc",	  "==",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",						  "CMDcmpEQ;"				  ]
[ 1061@0, "command",	  "batcalc",	  "==",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",					  "CMDcmpaccumEQcst;"			  ]
[ 1062@0, "command",	  "batcalc",	  "==",				  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",							  "CMDcmpEQcst;"			  ]
[ 1063@0, "command",	  "batcalc",	  "==",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",			  "CMDcmpaccumEQ;"			  ]
[ 1064@0, "command",	  "batcalc",	  "==",				  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",						  "CMDcmpEQ;"				  ]
[ 1065@0, "command",	  "batcalc",	  "==",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",					  "CMDcmpaccumEQcst;"			  ]
[ 1066@0, "command",	  "batcalc",	  "==",				  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",							  "CMDcmpEQcst;"			  ]
[ 1067@0, "command",	  "batcalc",	  "==",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",			  "CMDcmpaccumEQ;"			  ]
[ 1068@0, "command",	  "batcalc",	  "==",				  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",						  "CMDcmpEQ;"				  ]
[ 1069@0, "command",	  "batcalc",	  "==",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",					  "CMDcmpaccumEQcst;"			  ]
[ 1070@0, "command",	  "batcalc",	  "==",				  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",							  "CMDcmpEQcst;"			  ]
[ 1071@0, "command",	  "batcalc",	  "==",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",			  "CMDcmpaccumEQ;"			  ]
[ 1072@0, "command",	  "batcalc",	  "==",				  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",						  "CMDcmpEQ;"				  ]
[ 1073@0, "command",	  "batcalc",	  "==",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",					  "CMDcmpaccumEQcst;"			  ]
[ 1074@0, "command",	  "batcalc",	  "==",				  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",							  "CMDcmpEQcst;"			  ]
[ 1075@0, "command",	  "batcalc",	  "==",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",			  "CMDcmpaccumEQ;"			  ]
[ 1076@0, "command",	  "batcalc",	  "==",				  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",						  "CMDcmpEQ;"				  ]
[ 1077@0, "command",	  "batcalc",	  ">=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",					  "CMDcmpaccumGEcst;"			  ]
[ 1078@0, "command",	  "batcalc",	  ">=",				  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",							  "CMDcmpGEcst;"			  ]
[ 1079@0, "command",	  "batcalc",	  ">=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",			  "CMDcmpaccumGE;"			  ]
[ 1080@0, "command",	  "batcalc",	  ">=",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",						  "CMDcmpGE;"				  ]
[ 1081@0, "command",	  "batcalc",	  ">",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",					  "CMDcmpaccumGTcst;"			  ]
[ 1082@0, "command",	  "batcalc",	  ">",				  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",							  "CMDcmpGTcst;"			  ]
[ 1083@0, "command",	  "batcalc",	  ">",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",			  "CMDcmpaccumGT;"			  ]
[ 1084@0, "command",	  "batcalc",	  ">",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",						  "CMDcmpGT;"				  ]
[ 1085@0, "command",	  "batcalc",	  ">=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",					  "CMDcmpaccumGEcst;"			  ]
[ 1086@0, "command",	  "batcalc",	  ">=",				  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",							  "CMDcmpGEcst;"			  ]
[ 1087@0, "command",	  "batcalc",	  ">=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",			  "CMDcmpaccumGE;"			  ]
[ 1088@0, "command",	  "batcalc",	  ">=",				  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",						  "CMDcmpGE;"				  ]
[ 1089@0, "command",	  "batcalc",	  ">",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",					  "CMDcmpaccumGTcst;"			  ]
[ 1090@0, "command",	  "batcalc",	  ">",				  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",							  "CMDcmpGTcst;"			  ]
[ 1091@0, "command",	  "batcalc",	  ">",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",			  "CMDcmpaccumGT;"			  ]
[ 1092@0, "command",	  "batcalc",	  ">",				  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",						  "CMDcmpGT;"				  ]
[ 1093@0, "command",	  "batcalc",	  ">=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",					  "CMDcmpaccumGEcst;"			  ]
[ 1094@0, "command",	  "batcalc",	  ">=",				  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",							  "CMDcmpGEcst;"			  ]
[ 1095@0, "command",	  "batcalc",	  ">=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",			  "CMDcmpaccumGE;"			  ]
[ 1096@0, "command",	  "batcalc",	  ">=",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",						  "CMDcmpGE;"				  ]
[ 1097@0, "command",	  "batcalc",	  ">",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",					  "CMDcmpaccumGTcst;"			  ]
[ 1098@0, "command",	  "batcalc",	  ">",				  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",							  "CMDcmpGTcst;"			  ]
[ 1099@0, "command",	  "batcalc",	  ">",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",			  "CMDcmpaccumGT;"			  ]
[ 1100@0, "command",	  "batcalc",	  ">",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",						  "CMDcmpGT;"				  ]
[ 1101@0, "command",	  "batcalc",	  ">=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",					  "CMDcmpaccumGEcst;"			  ]
[ 1102@0, "command",	  "batcalc",	  ">=",				  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",							  "CMDcmpGEcst;"			  ]
[ 1103@0, "command",	  "batcalc",	  ">=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",			  "CMDcmpaccumGE;"			  ]
[ 1104@0, "command",	  "batcalc",	  ">=",				  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",						  "CMDcmpGE;"				  ]
[ 1105@0, "command",	  "batcalc",	  ">",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",					  "CMDcmpaccumGTcst;"			  ]
[ 1106@0, "command",	  "batcalc",	  ">",				  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",							  "CMDcmpGTcst;"			  ]
[ 1107@0, "command",	  "batcalc",	  ">",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",			  "CMDcmpaccumGT;"			  ]
[ 1108@0, "command",	  "batcalc",	  ">",				  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",						  "CMDcmpGT;"				  ]
[ 1109@0, "command",	  "batcalc",	  ">=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",					  "CMDcmpaccumGEcst;"			  ]
[ 1110@0, "command",	  "batcalc",	  ">=",				  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",							  "CMDcmpGEcst;"			  ]
[ 1111@0, "command",	  "batcalc",	  ">=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",			  "CMDcmpaccumGE;"			  ]
[ 1112@0, "command",	  "batcalc",	  ">=",				  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",						  "CMDcmpGE;"				  ]
[ 1113@0, "command",	  "batcalc",	  ">",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",					  "CMDcmpaccumGTcst;"			  ]
[ 1114@0, "command",	  "batcalc",	  ">",				  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",							  "CMDcmpGTcst;"			  ]
[ 1115@0, "command",	  "batcalc",	  ">",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",			  "CMDcmpaccumGT;"			  ]
[ 1116@0, "command",	  "batcalc",	  ">",				  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",						  "CMDcmpGT;"				  ]
[ 1117@0, "command",	  "batcalc",	  ">=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",					  "CMDcmpaccumGEcst;"			  ]
[ 1118@0, "command",	  "batcalc",	  ">=",				  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",							  "CMDcmpGEcst;"			  ]
[ 1119@0, "command",	  "batcalc",	  ">=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",			  "CMDcmpaccumGE;"			  ]
[ 1120@0, "command",	  "batcalc",	  ">=",				  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",						  "CMDcmpGE;"				  ]
[ 1121@0, "command",	  "batcalc",	  ">",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",					  "CMDcmpaccumGTcst;"			  ]
[ 1122@0, "command",	  "batcalc",	  ">",				  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",							  "CMDcmpGTcst;"			  ]
[ 1123@0, "command",	  "batcalc",	  ">",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",			  "CMDcmpaccumGT;"			  ]
[ 1124@0, "command",	  "batcalc",	  ">",				  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",						  "CMDcmpGT;"				  ]
[ 1125@0, "command",	  "batcalc",	  ">=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",					  "CMDcmpaccumGEcst;"			  ]
[ 1126@0, "command",	  "batcalc",	  ">=",				  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",							  "CMDcmpGEcst;"			  ]
[ 1127@0, "command",	  "batcalc",	  ">=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",			  "CMDcmpaccumGE;"			  ]
[ 1128@0, "command",	  "batcalc",	  ">=",				  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",						  "CMDcmpGE;"				  ]
[ 1129@0, "command",	  "batcalc",	  ">",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",					  "CMDcmpaccumGTcst;"			  ]
[ 1130@0, "command",	  "batcalc",	  ">",				  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",							  "CMDcmpGTcst;"			  ]
[ 1131@0, "command",	  "batcalc",	  ">",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",			  "CMDcmpaccumGT;"			  ]
[ 1132@0, "command",	  "batcalc",	  ">",				  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",						  "CMDcmpGT;"				  ]
[ 1133@0, "command",	  "batcalc",	  "and",			  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",					  "CMDcmpaccumANDcst;"			  ]
[ 1134@0, "command",	  "batcalc",	  "and",			  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",							  "CMDcmpANDcst;"			  ]
[ 1135@0, "command",	  "batcalc",	  "and",			  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",			  "CMDcmpaccumAND;"			  ]
[ 1136@0, "command",	  "batcalc",	  "and",			  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",						  "CMDcmpAND;"				  ]
[ 1137@0, "command",	  "batcalc",	  "dbl",			  "(b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",								  "CMDconvertdbl_dbl;"			  ]
[ 1138@0, "command",	  "batcalc",	  "dbl",			  "(b:bat[:any_1,:flt]):bat[:any_1,:dbl] ",								  "CMDconvertflt_dbl;"			  ]
[ 1139@0, "command",	  "batcalc",	  "dbl",			  "(b:bat[:any_1,:lng]):bat[:any_1,:dbl] ",								  "CMDconvertlng_dbl;"			  ]
[ 1140@0, "command",	  "batcalc",	  "dbl",			  "(b:bat[:any_1,:int]):bat[:any_1,:dbl] ",								  "CMDconvertint_dbl;"			  ]
[ 1141@0, "command",	  "batcalc",	  "dbl",			  "(b:bat[:any_1,:sht]):bat[:any_1,:dbl] ",								  "CMDconvertsht_dbl;"			  ]
[ 1142@0, "command",	  "batcalc",	  "flt",			  "(b:bat[:any_1,:dbl]):bat[:any_1,:flt] ",								  "CMDconvertdbl_flt;"			  ]
[ 1143@0, "command",	  "batcalc",	  "flt",			  "(b:bat[:any_1,:flt]):bat[:any_1,:flt] ",								  "CMDconvertflt_flt;"			  ]
[ 1144@0, "command",	  "batcalc",	  "flt",			  "(b:bat[:any_1,:lng]):bat[:any_1,:flt] ",								  "CMDconvertlng_flt;"			  ]
[ 1145@0, "command",	  "batcalc",	  "flt",			  "(b:bat[:any_1,:int]):bat[:any_1,:flt] ",								  "CMDconvertint_flt;"			  ]
[ 1146@0, "command",	  "batcalc",	  "flt",			  "(b:bat[:any_1,:sht]):bat[:any_1,:flt] ",								  "CMDconvertsht_flt;"			  ]
[ 1147@0, "command",	  "batcalc",	  "int",			  "(b:bat[:any_1,:oid]):bat[:any_1,:int] ",								  "CMDconvertoid_int;"			  ]
[ 1148@0, "command",	  "batcalc",	  "int",			  "(b:bat[:any_1,:str]):bat[:any_1,:int] ",								  "CMDconvertstr_int;"			  ]
[ 1149@0, "command",	  "batcalc",	  "int",			  "(b:bat[:any_1,:bit]):bat[:any_1,:int] ",								  "CMDconvertbit_int;"			  ]
[ 1150@0, "command",	  "batcalc",	  "int",			  "(b:bat[:any_1,:dbl]):bat[:any_1,:int] ",								  "CMDconvertdbl_int;"			  ]
[ 1151@0, "command",	  "batcalc",	  "int",			  "(b:bat[:any_1,:flt]):bat[:any_1,:int] ",								  "CMDconvertflt_int;"			  ]
[ 1152@0, "command",	  "batcalc",	  "int",			  "(b:bat[:any_1,:lng]):bat[:any_1,:int] ",								  "CMDconvertlng_int;"			  ]
[ 1153@0, "command",	  "batcalc",	  "int",			  "(b:bat[:any_1,:int]):bat[:any_1,:int] ",								  "CMDconvertint_int;"			  ]
[ 1154@0, "command",	  "batcalc",	  "int",			  "(b:bat[:any_1,:sht]):bat[:any_1,:int] ",								  "CMDconvertsht_int;"			  ]
[ 1155@0, "command",	  "batcalc",	  "ifthenelse",			  "(b:bat[:any_1,:bit],v:dbl,w:dbl):bat[:any_1,:dbl] ",							  "CMDifThenElseCst_dbl;"		  ]
[ 1156@0, "command",	  "batcalc",	  "ifthen",			  "(b:bat[:any_1,:bit],v:dbl):bat[:any_1,:dbl] ",							  "CMDifThenCst_dbl;"			  ]
[ 1157@0, "command",	  "batcalc",	  "ifthenelse",			  "(b:bat[:any_1,:bit],v:flt,w:flt):bat[:any_1,:flt] ",							  "CMDifThenElseCst_flt;"		  ]
[ 1158@0, "command",	  "batcalc",	  "ifthen",			  "(b:bat[:any_1,:bit],v:flt):bat[:any_1,:flt] ",							  "CMDifThenCst_flt;"			  ]
[ 1159@0, "command",	  "batcalc",	  "ifthenelse",			  "(b:bat[:any_1,:bit],v:lng,w:lng):bat[:any_1,:lng] ",							  "CMDifThenElseCst_lng;"		  ]
[ 1160@0, "command",	  "batcalc",	  "ifthen",			  "(b:bat[:any_1,:bit],v:lng):bat[:any_1,:lng] ",							  "CMDifThenCst_lng;"			  ]
[ 1161@0, "command",	  "batcalc",	  "ifthenelse",			  "(b:bat[:any_1,:bit],v:sht,w:sht):bat[:any_1,:sht] ",							  "CMDifThenElseCst_sht;"		  ]
[ 1162@0, "command",	  "batcalc",	  "ifthen",			  "(b:bat[:any_1,:bit],v:sht):bat[:any_1,:sht] ",							  "CMDifThenCst_sht;"			  ]
[ 1163@0, "command",	  "batcalc",	  "ifthenelse",			  "(b:bat[:any_1,:bit],v:int,w:int):bat[:any_1,:int] ",							  "CMDifThenElseCst_int;"		  ]
[ 1164@0, "command",	  "batcalc",	  "ifthen",			  "(b:bat[:any_1,:bit],v:int):bat[:any_1,:int] ",							  "CMDifThenCst_int;"			  ]
[ 1165@0, "command",	  "batcalc",	  "ifthenelse",			  "(b:bat[:any_1,:bit],v:oid,w:oid):bat[:any_1,:oid] ",							  "CMDifThenElseCst_oid;"		  ]
[ 1166@0, "command",	  "batcalc",	  "ifthen",			  "(b:bat[:any_1,:bit],v:oid):bat[:any_1,:oid] ",							  "CMDifThenCst_oid;"			  ]
[ 1167@0, "command",	  "batcalc",	  "ifthenelse",			  "(b:bat[:any_1,:bit],v:str,w:str):bat[:any_1,:str] ",							  "CMDifThenElseCst_str;"		  ]
[ 1168@0, "command",	  "batcalc",	  "ifthen",			  "(b:bat[:any_1,:bit],v:str):bat[:any_1,:str] ",							  "CMDifThenCst_str;"			  ]
[ 1169@0, "command",	  "batcalc",	  "ifthenelse",			  "(b:bat[:any_1,:bit],v:chr,w:chr):bat[:any_1,:chr] ",							  "CMDifThenElseCst_chr;"		  ]
[ 1170@0, "command",	  "batcalc",	  "ifthen",			  "(b:bat[:any_1,:bit],v:chr):bat[:any_1,:chr] ",							  "CMDifThenCst_chr;"			  ]
[ 1171@0, "command",	  "batcalc",	  "ifthenelse",			  "(b:bat[:any_1,:bit],v:bit,w:bit):bat[:any_1,:bit] ",							  "CMDifThenElseCst_bit;"		  ]
[ 1172@0, "command",	  "batcalc",	  "ifthen",			  "(b:bat[:any_1,:bit],v:bit):bat[:any_1,:bit] ",							  "CMDifThenCst_bit;"			  ]
[ 1173@0, "command",	  "batcalc",	  "ifthenelse",			  "(b:bat[:any_3,:bit],t:bat[:any_1,:any_2],e:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",			  "CMDifThenElse;"			  ]
[ 1174@0, "command",	  "batcalc",	  "ifthen",			  "(b:bat[:any_1,:bit],t:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",					  "CMDifThen;"				  ]
[ 1175@0, "command",	  "batcalc",	  "ifthenelse",			  "(b:bat[:any_1,:bit],t:bat[:any_1,:any_2],e:any_2):bat[:any_1,:any_2] ",				  "CMDifThenElseCst2;"			  ]
[ 1176@0, "command",	  "batcalc",	  "ifthenelse",			  "(b:bat[:any_1,:bit],e:any_2,t:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",				  "CMDifThenElseCst1;"			  ]
[ 1177@0, "command",	  "batcalc",	  "init",			  "(b:bat[:any_1,:any],v:bit):bat[:any_1,:bit] ",							  "CMDbatbitinit;"			  ]
[ 1178@0, "command",	  "batcalc",	  "init",			  "(bsize:lng,v:bit):bat[:void,:bit] ",									  "CMDbitinit_lng;"			  ]
[ 1179@0, "command",	  "batcalc",	  "init",			  "(bsize:int,v:bit):bat[:void,:bit] ",									  "CMDbitinit_int;"			  ]
[ 1180@0, "command",	  "batcalc",	  "init",			  "(bsize:sht,v:bit):bat[:void,:bit] ",									  "CMDbitinit_sht;"			  ]
[ 1181@0, "command",	  "batcalc",	  "init",			  "(b:bat[:any_1,:any],v:flt):bat[:any_1,:flt] ",							  "CMDbatfltinit;"			  ]
[ 1182@0, "command",	  "batcalc",	  "init",			  "(bsize:lng,v:flt):bat[:void,:flt] ",									  "CMDfltinit_lng;"			  ]
[ 1183@0, "command",	  "batcalc",	  "init",			  "(bsize:int,v:flt):bat[:void,:flt] ",									  "CMDfltinit_int;"			  ]
[ 1184@0, "command",	  "batcalc",	  "init",			  "(bsize:sht,v:flt):bat[:void,:flt] ",									  "CMDfltinit_sht;"			  ]
[ 1185@0, "command",	  "batcalc",	  "init",			  "(b:bat[:any_1,:any],v:dbl):bat[:any_1,:dbl] ",							  "CMDbatdblinit;"			  ]
[ 1186@0, "command",	  "batcalc",	  "init",			  "(bsize:lng,v:dbl):bat[:void,:dbl] ",									  "CMDdblinit_lng;"			  ]
[ 1187@0, "command",	  "batcalc",	  "init",			  "(bsize:int,v:dbl):bat[:void,:dbl] ",									  "CMDdblinit_int;"			  ]
[ 1188@0, "command",	  "batcalc",	  "init",			  "(bsize:sht,v:dbl):bat[:void,:dbl] ",									  "CMDdblinit_sht;"			  ]
[ 1189@0, "command",	  "batcalc",	  "init",			  "(b:bat[:any_1,:any],v:lng):bat[:any_1,:lng] ",							  "CMDbatlnginit;"			  ]
[ 1190@0, "command",	  "batcalc",	  "init",			  "(bsize:lng,v:lng):bat[:void,:lng] ",									  "CMDlnginit_lng;"			  ]
[ 1191@0, "command",	  "batcalc",	  "init",			  "(bsize:int,v:lng):bat[:void,:lng] ",									  "CMDlnginit_int;"			  ]
[ 1192@0, "command",	  "batcalc",	  "init",			  "(bsize:sht,v:lng):bat[:void,:lng] ",									  "CMDlnginit_sht;"			  ]
[ 1193@0, "command",	  "batcalc",	  "init",			  "(b:bat[:any_1,:any],v:sht):bat[:any_1,:sht] ",							  "CMDbatshtinit;"			  ]
[ 1194@0, "command",	  "batcalc",	  "init",			  "(bsize:lng,v:sht):bat[:void,:sht] ",									  "CMDshtinit_lng;"			  ]
[ 1195@0, "command",	  "batcalc",	  "init",			  "(bsize:int,v:sht):bat[:void,:sht] ",									  "CMDshtinit_int;"			  ]
[ 1196@0, "command",	  "batcalc",	  "init",			  "(bsize:sht,v:sht):bat[:void,:sht] ",									  "CMDshtinit_sht;"			  ]
[ 1197@0, "command",	  "batcalc",	  "init",			  "(b:bat[:any_1,:any],v:int):bat[:any_1,:int] ",							  "CMDbatintinit;"			  ]
[ 1198@0, "command",	  "batcalc",	  "init",			  "(bsize:lng,v:int):bat[:void,:int] ",									  "CMDintinit_lng;"			  ]
[ 1199@0, "command",	  "batcalc",	  "init",			  "(bsize:int,v:int):bat[:void,:int] ",									  "CMDintinit_int;"			  ]
[ 1200@0, "command",	  "batcalc",	  "init",			  "(bsize:sht,v:int):bat[:void,:int] ",									  "CMDintinit_sht;"			  ]
[ 1201@0, "command",	  "batcalc",	  "init",			  "(b:bat[:any_1,:any],v:oid):bat[:any_1,:oid] ",							  "CMDbatoidinit;"			  ]
[ 1202@0, "command",	  "batcalc",	  "init",			  "(bsize:lng,v:oid):bat[:void,:oid] ",									  "CMDoidinit_lng;"			  ]
[ 1203@0, "command",	  "batcalc",	  "init",			  "(bsize:int,v:oid):bat[:void,:oid] ",									  "CMDoidinit_int;"			  ]
[ 1204@0, "command",	  "batcalc",	  "init",			  "(bsize:sht,v:oid):bat[:void,:oid] ",									  "CMDoidinit_sht;"			  ]
[ 1205@0, "command",	  "batcalc",	  "lng",			  "(b:bat[:any_1,:oid]):bat[:any_1,:lng] ",								  "CMDconvertlng_int;"			  ]
[ 1206@0, "command",	  "batcalc",	  "lng",			  "(b:bat[:any_1,:bit]):bat[:any_1,:lng] ",								  "CMDconvertbit_lng;"			  ]
[ 1207@0, "command",	  "batcalc",	  "lng",			  "(b:bat[:any_1,:dbl]):bat[:any_1,:lng] ",								  "CMDconvertdbl_lng;"			  ]
[ 1208@0, "command",	  "batcalc",	  "lng",			  "(b:bat[:any_1,:flt]):bat[:any_1,:lng] ",								  "CMDconvertflt_lng;"			  ]
[ 1209@0, "command",	  "batcalc",	  "lng",			  "(b:bat[:any_1,:lng]):bat[:any_1,:lng] ",								  "CMDconvertlng_lng;"			  ]
[ 1210@0, "command",	  "batcalc",	  "lng",			  "(b:bat[:any_1,:int]):bat[:any_1,:lng] ",								  "CMDconvertint_lng;"			  ]
[ 1211@0, "command",	  "batcalc",	  "lng",			  "(b:bat[:any_1,:sht]):bat[:any_1,:lng] ",								  "CMDconvertsht_lng;"			  ]
[ 1212@0, "command",	  "batcalc",	  "not",			  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit]):bat[:any_1,:bit] ",						  "CMDbitbataccumNOT;"			  ]
[ 1213@0, "command",	  "batcalc",	  "not",			  "(b:bat[:any_1,:bit]):bat[:any_1,:bit] ",								  "CMDbitbatNOT;"			  ]
[ 1214@0, "command",	  "batcalc",	  "oid",			  "(b:bat[:void,:oid]):bat[:void,:oid] ",								  "CMDconvertvoid_oid_oid;"		  ]
[ 1215@0, "command",	  "batcalc",	  "oid",			  "(b:bat[:void,:int]):bat[:void,:oid] ",								  "CMDconvertvoid_int_oid;"		  ]
[ 1216@0, "command",	  "batcalc",	  "oid",			  "(b:bat[:any_1,:int]):bat[:any_1,:oid] ",								  "CMDconvertint_oid;"			  ]
[ 1217@0, "command",	  "batcalc",	  "oid",			  "(b:bat[:oid,:oid]):bat[:oid,:oid] ",									  "CMDconvertOIDclass;"			  ]
[ 1218@0, "command",	  "batcalc",	  "oid",			  "(b:bat[:any_1,:dbl]):bat[:any_1,:oid] ",								  "CMDconvertdbl_oid;"			  ]
[ 1219@0, "command",	  "batcalc",	  "oid",			  "(b:bat[:any_1,:flt]):bat[:any_1,:oid] ",								  "CMDconvertflt_oid;"			  ]
[ 1220@0, "command",	  "batcalc",	  "oid",			  "(b:bat[:any_1,:lng]):bat[:any_1,:oid] ",								  "CMDconvertlng_oid;"			  ]
[ 1221@0, "command",	  "batcalc",	  "oid",			  "(b:bat[:any_1,:int]):bat[:any_1,:oid] ",								  "CMDconvertint_oid;"			  ]
[ 1222@0, "command",	  "batcalc",	  "oid",			  "(b:bat[:any_1,:sht]):bat[:any_1,:oid] ",								  "CMDconvertsht_oid;"			  ]
[ 1223@0, "command",	  "batcalc",	  "or",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",					  "CMDcmpaccumORcst;"			  ]
[ 1224@0, "command",	  "batcalc",	  "or",				  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",							  "CMDcmpORcst;"			  ]
[ 1225@0, "command",	  "batcalc",	  "or",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",			  "CMDcmpaccumOR;"			  ]
[ 1226@0, "command",	  "batcalc",	  "or",				  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",						  "CMDcmpOR;"				  ]
[ 1227@0, "command",	  "batcalc",	  "project",			  "(b:bat[:any_2,:any_1],v:dbl):bat[:any_2,:dbl] ",							  "CMDprojecttail_dbl;"			  ]
[ 1228@0, "command",	  "batcalc",	  "project",			  "(v:dbl,b:bat[:any_2,:any_1]):bat[:dbl,:any_1] ",							  "CMDprojecthead_dbl;"			  ]
[ 1229@0, "command",	  "batcalc",	  "project",			  "(b:bat[:any_2,:any_1],v:flt):bat[:any_2,:flt] ",							  "CMDprojecttail_flt;"			  ]
[ 1230@0, "command",	  "batcalc",	  "project",			  "(v:flt,b:bat[:any_2,:any_1]):bat[:flt,:any_1] ",							  "CMDprojecthead_flt;"			  ]
[ 1231@0, "command",	  "batcalc",	  "project",			  "(b:bat[:any_2,:any_1],v:lng):bat[:any_2,:lng] ",							  "CMDprojecttail_lng;"			  ]
[ 1232@0, "command",	  "batcalc",	  "project",			  "(v:lng,b:bat[:any_2,:any_1]):bat[:lng,:any_1] ",							  "CMDprojecthead_lng;"			  ]
[ 1233@0, "command",	  "batcalc",	  "project",			  "(b:bat[:any_2,:any_1],v:sht):bat[:any_2,:sht] ",							  "CMDprojecttail_sht;"			  ]
[ 1234@0, "command",	  "batcalc",	  "project",			  "(v:sht,b:bat[:any_2,:any_1]):bat[:sht,:any_1] ",							  "CMDprojecthead_sht;"			  ]
[ 1235@0, "command",	  "batcalc",	  "project",			  "(b:bat[:any_2,:any_1],v:int):bat[:any_2,:int] ",							  "CMDprojecttail_int;"			  ]
[ 1236@0, "command",	  "batcalc",	  "project",			  "(v:int,b:bat[:any_2,:any_1]):bat[:int,:any_1] ",							  "CMDprojecthead_int;"			  ]
[ 1237@0, "command",	  "batcalc",	  "project",			  "(b:bat[:any_2,:any_1],v:oid):bat[:any_2,:oid] ",							  "CMDprojecttail_oid;"			  ]
[ 1238@0, "command",	  "batcalc",	  "project",			  "(v:oid,b:bat[:any_2,:any_1]):bat[:oid,:any_1] ",							  "CMDprojecthead_oid;"			  ]
[ 1239@0, "command",	  "batcalc",	  "project",			  "(b:bat[:any_2,:any_1],v:str):bat[:any_2,:str] ",							  "CMDprojecttail_str;"			  ]
[ 1240@0, "command",	  "batcalc",	  "project",			  "(v:str,b:bat[:any_2,:any_1]):bat[:str,:any_1] ",							  "CMDprojecthead_str;"			  ]
[ 1241@0, "command",	  "batcalc",	  "project",			  "(b:bat[:any_2,:any_1],v:chr):bat[:any_2,:chr] ",							  "CMDprojecttail_chr;"			  ]
[ 1242@0, "command",	  "batcalc",	  "project",			  "(v:chr,b:bat[:any_2,:any_1]):bat[:chr,:any_1] ",							  "CMDprojecthead_chr;"			  ]
[ 1243@0, "command",	  "batcalc",	  "project",			  "(b:bat[:any_2,:any_1],v:bit):bat[:any_2,:bit] ",							  "CMDprojecttail_bit;"			  ]
[ 1244@0, "command",	  "batcalc",	  "project",			  "(v:bit,b:bat[:any_2,:any_1]):bat[:bit,:any_1] ",							  "CMDprojecthead_bit;"			  ]
[ 1245@0, "command",	  "batcalc",	  "str",			  "(b:bat[:any_1,:str]):bat[:any_1,:str] ",								  "CMDconvertstr_str;"			  ]
[ 1246@0, "command",	  "batcalc",	  "sht",			  "(b:bat[:any_1,:oid]):bat[:any_1,:sht] ",								  "CMDconvertsht_int;"			  ]
[ 1247@0, "command",	  "batcalc",	  "sht",			  "(b:bat[:any_1,:bit]):bat[:any_1,:sht] ",								  "CMDconvertbit_sht;"			  ]
[ 1248@0, "command",	  "batcalc",	  "sht",			  "(b:bat[:any_1,:dbl]):bat[:any_1,:sht] ",								  "CMDconvertdbl_sht;"			  ]
[ 1249@0, "command",	  "batcalc",	  "sht",			  "(b:bat[:any_1,:flt]):bat[:any_1,:sht] ",								  "CMDconvertflt_sht;"			  ]
[ 1250@0, "command",	  "batcalc",	  "sht",			  "(b:bat[:any_1,:lng]):bat[:any_1,:sht] ",								  "CMDconvertlng_sht;"			  ]
[ 1251@0, "command",	  "batcalc",	  "sht",			  "(b:bat[:any_1,:int]):bat[:any_1,:sht] ",								  "CMDconvertint_sht;"			  ]
[ 1252@0, "command",	  "batcalc",	  "sht",			  "(b:bat[:any_1,:sht]):bat[:any_1,:sht] ",								  "CMDconvertsht_sht;"			  ]
[ 1253@0, "command",	  "batcalc",	  "xor",			  "(b:bat[:void,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbatXOR_lng_lng_lng;"		  ]
[ 1254@0, "command",	  "batcalc",	  "xor",			  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",						  "CMDbatXOR_lng_lng_lng;"		  ]
[ 1255@0, "command",	  "batcalc",	  "xor",			  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",							  "CMDcstXORbat_lng_lng_lng;"		  ]
[ 1256@0, "command",	  "batcalc",	  "xor",			  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:lng] ",							  "CMDbatXORcst_lng_lng_lng;"		  ]
[ 1257@0, "command",	  "batcalc",	  "xor",			  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:lng):void ",						  "CMDbataccumXORcst_lng_lng_lng;"	  ]
[ 1258@0, "command",	  "batcalc",	  "xor",			  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:lng]):void ",						  "CMDbataccumXORcst2_lng_lng_lng;"	  ]
[ 1259@0, "command",	  "batcalc",	  "xor",			  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",					  "CMDbataccumXOR_lng_lng_lng;"		  ]
[ 1260@0, "command",	  "batcalc",	  "xor",			  "(b:bat[:void,:int],c:bat[:oid,:int]):bat[:oid,:int] ",						  "CMDbatXOR_int_int_int;"		  ]
[ 1261@0, "command",	  "batcalc",	  "xor",			  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:int] ",						  "CMDbatXOR_int_int_int;"		  ]
[ 1262@0, "command",	  "batcalc",	  "xor",			  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:int] ",							  "CMDcstXORbat_int_int_int;"		  ]
[ 1263@0, "command",	  "batcalc",	  "xor",			  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:int] ",							  "CMDbatXORcst_int_int_int;"		  ]
[ 1264@0, "command",	  "batcalc",	  "xor",			  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:int):void ",						  "CMDbataccumXORcst_int_int_int;"	  ]
[ 1265@0, "command",	  "batcalc",	  "xor",			  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:int]):void ",						  "CMDbataccumXORcst2_int_int_int;"	  ]
[ 1266@0, "command",	  "batcalc",	  "xor",			  "(a:bat[:any_1,:int],b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",					  "CMDbataccumXOR_int_int_int;"		  ]
[ 1267@0, "command",	  "batcalc",	  "xor",			  "(b:bat[:void,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",						  "CMDbatXOR_sht_sht_sht;"		  ]
[ 1268@0, "command",	  "batcalc",	  "xor",			  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:sht] ",						  "CMDbatXOR_sht_sht_sht;"		  ]
[ 1269@0, "command",	  "batcalc",	  "xor",			  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:sht] ",							  "CMDcstXORbat_sht_sht_sht;"		  ]
[ 1270@0, "command",	  "batcalc",	  "xor",			  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:sht] ",							  "CMDbatXORcst_sht_sht_sht;"		  ]
[ 1271@0, "command",	  "batcalc",	  "xor",			  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void ",						  "CMDbataccumXORcst_sht_sht_sht;"	  ]
[ 1272@0, "command",	  "batcalc",	  "xor",			  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void ",						  "CMDbataccumXORcst2_sht_sht_sht;"	  ]
[ 1273@0, "command",	  "batcalc",	  "xor",			  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void ",					  "CMDbataccumXOR_sht_sht_sht;"		  ]
[ 1274@0, "command",	  "batcalc",	  "xor",			  "(b:bat[:void,:oid],c:bat[:oid,:oid]):bat[:oid,:oid] ",						  "CMDbatXOR_oid_oid_oid;"		  ]
[ 1275@0, "command",	  "batcalc",	  "xor",			  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:oid] ",						  "CMDbatXOR_oid_oid_oid;"		  ]
[ 1276@0, "command",	  "batcalc",	  "xor",			  "(cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:oid] ",							  "CMDcstXORbat_oid_oid_oid;"		  ]
[ 1277@0, "command",	  "batcalc",	  "xor",			  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:oid] ",							  "CMDbatXORcst_oid_oid_oid;"		  ]
[ 1278@0, "command",	  "batcalc",	  "xor",			  "(a:bat[:any_1,:oid],b:bat[:any_1,:oid],cst:oid):void ",						  "CMDbataccumXORcst_oid_oid_oid;"	  ]
[ 1279@0, "command",	  "batcalc",	  "xor",			  "(a:bat[:any_1,:oid],cst:oid,b:bat[:any_1,:oid]):void ",						  "CMDbataccumXORcst2_oid_oid_oid;"	  ]
[ 1280@0, "command",	  "batcalc",	  "xor",			  "(a:bat[:any_1,:oid],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):void ",					  "CMDbataccumXOR_oid_oid_oid;"		  ]
[ 1281@0, "command",	  "batmath",	  "atan2",			  "(x:bat[:any_1,:dbl],y:dbl):bat[:any_1,:dbl] ",							  "CMDscience_atan2;"			  ]
[ 1282@0, "command",	  "batmath",	  "atan",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",								  "CMDsciencevoid_atan;"		  ]
[ 1283@0, "command",	  "batmath",	  "atan",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",								  "CMDscience_atan;"			  ]
[ 1284@0, "command",	  "batmath",	  "acos",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",								  "CMDsciencevoid_acos;"		  ]
[ 1285@0, "command",	  "batmath",	  "acos",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",								  "CMDscience_acos;"			  ]
[ 1286@0, "command",	  "batmath",	  "asin",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",								  "CMDsciencevoid_asin;"		  ]
[ 1287@0, "command",	  "batmath",	  "asin",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",								  "CMDscience_asin;"			  ]
[ 1288@0, "command",	  "batmath",	  "ceil",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",								  "CMDsciencevoid_ceil;"		  ]
[ 1289@0, "command",	  "batmath",	  "ceil",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",								  "CMDscience_ceil;"			  ]
[ 1290@0, "command",	  "batmath",	  "cosh",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",								  "CMDsciencevoid_cosh;"		  ]
[ 1291@0, "command",	  "batmath",	  "cosh",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",								  "CMDscience_cosh;"			  ]
[ 1292@0, "command",	  "batmath",	  "cos",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",								  "CMDsciencevoid_cos;"			  ]
[ 1293@0, "command",	  "batmath",	  "cos",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",								  "CMDscience_cos;"			  ]
[ 1294@0, "command",	  "batmath",	  "exp",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",								  "CMDsciencevoid_exp;"			  ]
[ 1295@0, "command",	  "batmath",	  "exp",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",								  "CMDscience_exp;"			  ]
[ 1296@0, "command",	  "batmath",	  "fmod",			  "(x:bat[:any_1,:dbl],y:dbl):bat[:any_1,:dbl] ",							  "CMDscience_fmod;"			  ]
[ 1297@0, "command",	  "batmath",	  "floor",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",								  "CMDsciencevoid_floor;"		  ]
[ 1298@0, "command",	  "batmath",	  "floor",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",								  "CMDscience_floor;"			  ]
[ 1299@0, "command",	  "batmath",	  "fabs",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",								  "CMDsciencevoid_fabs;"		  ]
[ 1300@0, "command",	  "batmath",	  "fabs",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",								  "CMDscience_fabs;"			  ]
[ 1301@0, "command",	  "batmath",	  "log10",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",								  "CMDsciencevoid_log10;"		  ]
[ 1302@0, "command",	  "batmath",	  "log10",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",								  "CMDscience_log10;"			  ]
[ 1303@0, "command",	  "batmath",	  "log",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",								  "CMDsciencevoid_log;"			  ]
[ 1304@0, "command",	  "batmath",	  "log",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",								  "CMDscience_log;"			  ]
[ 1305@0, "command",	  "batmath",	  "pow",			  "(x:bat[:any_1,:dbl],y:dbl):bat[:any_1,:dbl] ",							  "CMDscience_pow;"			  ]
[ 1306@0, "command",	  "batmath",	  "sqrt",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",								  "CMDsciencevoid_sqrt;"		  ]
[ 1307@0, "command",	  "batmath",	  "sqrt",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",								  "CMDscience_sqrt;"			  ]
[ 1308@0, "command",	  "batmath",	  "sinh",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",								  "CMDsciencevoid_sinh;"		  ]
[ 1309@0, "command",	  "batmath",	  "sinh",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",								  "CMDscience_sinh;"			  ]
[ 1310@0, "command",	  "batmath",	  "sin",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",								  "CMDsciencevoid_sin;"			  ]
[ 1311@0, "command",	  "batmath",	  "sin",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",								  "CMDscience_sin;"			  ]
[ 1312@0, "command",	  "batmath",	  "tanh",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",								  "CMDsciencevoid_tanh;"		  ]
[ 1313@0, "command",	  "batmath",	  "tanh",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",								  "CMDscience_tanh;"			  ]
[ 1314@0, "command",	  "batmath",	  "tan",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",								  "CMDsciencevoid_tan;"			  ]
[ 1315@0, "command",	  "batmath",	  "tan",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",								  "CMDscience_tan;"			  ]
[ 1316@0, "command",	  "mkey",	  "bulk_rotate_xor_hash",	  "(h:bat[:oid,:int],nbits:int,b:bat[:oid,:any_1]):bat[:oid,:int] ",					  "MKEYbulk_rotate_xor_hash;"		  ]
[ 1317@0, "pattern",	  "mkey",	  "bulk_rotate_xor_hash",	  "(h:int,nbits:int,v:any):int ",									  "MKEYrotate_xor_hash;"		  ]
[ 1318@0, "command",	  "mkey",	  "hash",			  "(v:str):int ",											  "MKEYhash_str;"			  ]
[ 1319@0, "command",	  "mkey",	  "hash",			  "(v:lng):int ",											  "MKEYhash_lng;"			  ]
[ 1320@0, "command",	  "mkey",	  "hash",			  "(v:dbl):int ",											  "MKEYhash_dbl;"			  ]
[ 1321@0, "command",	  "mkey",	  "hash",			  "(v:flt):int ",											  "MKEYhash_flt;"			  ]
[ 1322@0, "command",	  "mkey",	  "hash",			  "(v:int):int ",											  "MKEYhash_int;"			  ]
[ 1323@0, "command",	  "mkey",	  "hash",			  "(v:sht):int ",											  "MKEYhash_sht;"			  ]
[ 1324@0, "command",	  "mkey",	  "hash",			  "(v:chr):int ",											  "MKEYhash_chr;"			  ]
[ 1325@0, "pattern",	  "mkey",	  "hash",			  "(v:any):int ",											  "MKEYhash;"				  ]
[ 1326@0, "command",	  "mkey",	  "rotate",			  "(v:int,nbits:int):int ",										  "MKEYrotate;"				  ]
[ 1327@0, "command",	  "pqueue",	  "dequeue_max",		  "(h:bat[:oid,:dbl]):void ",										  "PQdequeue_dblmax;"			  ]
[ 1328@0, "command",	  "pqueue",	  "dequeue_min",		  "(h:bat[:oid,:dbl]):void ",										  "PQdequeue_dblmin;"			  ]
[ 1329@0, "command",	  "pqueue",	  "dequeue_max",		  "(h:bat[:oid,:flt]):void ",										  "PQdequeue_fltmax;"			  ]
[ 1330@0, "command",	  "pqueue",	  "dequeue_min",		  "(h:bat[:oid,:flt]):void ",										  "PQdequeue_fltmin;"			  ]
[ 1331@0, "command",	  "pqueue",	  "dequeue_max",		  "(h:bat[:oid,:lng]):void ",										  "PQdequeue_lngmax;"			  ]
[ 1332@0, "command",	  "pqueue",	  "dequeue_min",		  "(h:bat[:oid,:lng]):void ",										  "PQdequeue_lngmin;"			  ]
[ 1333@0, "command",	  "pqueue",	  "dequeue_max",		  "(h:bat[:oid,:ptr]):void ",										  "PQdequeue_ptrmax;"			  ]
[ 1334@0, "command",	  "pqueue",	  "dequeue_min",		  "(h:bat[:oid,:ptr]):void ",										  "PQdequeue_ptrmin;"			  ]
[ 1335@0, "command",	  "pqueue",	  "dequeue_max",		  "(h:bat[:oid,:oid]):void ",										  "PQdequeue_oidmax;"			  ]
[ 1336@0, "command",	  "pqueue",	  "dequeue_min",		  "(h:bat[:oid,:oid]):void ",										  "PQdequeue_oidmin;"			  ]
[ 1337@0, "command",	  "pqueue",	  "dequeue_max",		  "(h:bat[:oid,:int]):void ",										  "PQdequeue_intmax;"			  ]
[ 1338@0, "command",	  "pqueue",	  "dequeue_min",		  "(h:bat[:oid,:int]):void ",										  "PQdequeue_intmin;"			  ]
[ 1339@0, "command",	  "pqueue",	  "dequeue_max",		  "(h:bat[:oid,:sht]):void ",										  "PQdequeue_shtmax;"			  ]
[ 1340@0, "command",	  "pqueue",	  "dequeue_min",		  "(h:bat[:oid,:sht]):void ",										  "PQdequeue_shtmin;"			  ]
[ 1341@0, "command",	  "pqueue",	  "dequeue_max",		  "(h:bat[:oid,:chr]):void ",										  "PQdequeue_chrmax;"			  ]
[ 1342@0, "command",	  "pqueue",	  "dequeue_min",		  "(h:bat[:oid,:chr]):void ",										  "PQdequeue_chrmin;"			  ]
[ 1343@0, "command",	  "pqueue",	  "enqueue_max",		  "(h:bat[:oid,:dbl],id:oid,value:dbl):void ",								  "PQenqueue_dblmax;"			  ]
[ 1344@0, "command",	  "pqueue",	  "enqueue_min",		  "(h:bat[:oid,:dbl],id:oid,value:dbl):void ",								  "PQenqueue_dblmin;"			  ]
[ 1345@0, "command",	  "pqueue",	  "enqueue_max",		  "(h:bat[:oid,:flt],id:oid,value:flt):void ",								  "PQenqueue_fltmax;"			  ]
[ 1346@0, "command",	  "pqueue",	  "enqueue_min",		  "(h:bat[:oid,:flt],id:oid,value:flt):void ",								  "PQenqueue_fltmin;"			  ]
[ 1347@0, "command",	  "pqueue",	  "enqueue_max",		  "(h:bat[:oid,:lng],id:oid,value:lng):void ",								  "PQenqueue_lngmax;"			  ]
[ 1348@0, "command",	  "pqueue",	  "enqueue_min",		  "(h:bat[:oid,:lng],id:oid,value:lng):void ",								  "PQenqueue_lngmin;"			  ]
[ 1349@0, "command",	  "pqueue",	  "enqueue_max",		  "(h:bat[:oid,:ptr],id:oid,value:ptr):void ",								  "PQenqueue_ptrmax;"			  ]
[ 1350@0, "command",	  "pqueue",	  "enqueue_min",		  "(h:bat[:oid,:ptr],id:oid,value:ptr):void ",								  "PQenqueue_ptrmin;"			  ]
[ 1351@0, "command",	  "pqueue",	  "enqueue_max",		  "(h:bat[:oid,:oid],id:oid,value:oid):void ",								  "PQenqueue_oidmax;"			  ]
[ 1352@0, "command",	  "pqueue",	  "enqueue_min",		  "(h:bat[:oid,:oid],id:oid,value:oid):void ",								  "PQenqueue_oidmin;"			  ]
[ 1353@0, "command",	  "pqueue",	  "enqueue_max",		  "(h:bat[:oid,:int],id:oid,value:int):void ",								  "PQenqueue_intmax;"			  ]
[ 1354@0, "command",	  "pqueue",	  "enqueue_min",		  "(h:bat[:oid,:int],id:oid,value:int):void ",								  "PQenqueue_intmin;"			  ]
[ 1355@0, "command",	  "pqueue",	  "enqueue_max",		  "(h:bat[:oid,:sht],id:oid,value:sht):void ",								  "PQenqueue_shtmax;"			  ]
[ 1356@0, "command",	  "pqueue",	  "enqueue_min",		  "(h:bat[:oid,:sht],id:oid,value:sht):void ",								  "PQenqueue_shtmin;"			  ]
[ 1357@0, "command",	  "pqueue",	  "enqueue_max",		  "(h:bat[:oid,:chr],id:oid,value:chr):void ",								  "PQenqueue_chrmax;"			  ]
[ 1358@0, "command",	  "pqueue",	  "enqueue_min",		  "(h:bat[:oid,:chr],id:oid,value:chr):void ",								  "PQenqueue_chrmin;"			  ]
[ 1359@0, "command",	  "pqueue",	  "init",			  "(a:bat[:void,:any_1],maxsize:int):bat[:oid,:any_1] ",						  "PQinit;"				  ]
[ 1360@0, "command",	  "pqueue",	  "topn_max",			  "(t:bat[:void,:dbl],n:int):bat[:oid,:dbl] ",								  "PQtopn_voiddblmax;"			  ]
[ 1361@0, "command",	  "pqueue",	  "topn_max",			  "(t:bat[:oid,:dbl],n:int):bat[:oid,:dbl] ",								  "PQtopn_dblmax;"			  ]
[ 1362@0, "command",	  "pqueue",	  "topreplace_max",		  "(h:bat[:oid,:dbl],id:oid,value:dbl):void ",								  "PQtopreplace_dblmax;"		  ]
[ 1363@0, "command",	  "pqueue",	  "topn_min",			  "(t:bat[:void,:dbl],n:int):bat[:oid,:dbl] ",								  "PQtopn_voiddblmin;"			  ]
[ 1364@0, "command",	  "pqueue",	  "topn_min",			  "(t:bat[:oid,:dbl],n:int):bat[:oid,:dbl] ",								  "PQtopn_dblmin;"			  ]
[ 1365@0, "command",	  "pqueue",	  "topreplace_min",		  "(h:bat[:oid,:dbl],id:oid,value:dbl):void ",								  "PQtopreplace_dblmin;"		  ]
[ 1366@0, "command",	  "pqueue",	  "topn_max",			  "(t:bat[:void,:flt],n:int):bat[:oid,:flt] ",								  "PQtopn_voidfltmax;"			  ]
[ 1367@0, "command",	  "pqueue",	  "topn_max",			  "(t:bat[:oid,:flt],n:int):bat[:oid,:flt] ",								  "PQtopn_fltmax;"			  ]
[ 1368@0, "command",	  "pqueue",	  "topreplace_max",		  "(h:bat[:oid,:flt],id:oid,value:flt):void ",								  "PQtopreplace_fltmax;"		  ]
[ 1369@0, "command",	  "pqueue",	  "topn_min",			  "(t:bat[:void,:flt],n:int):bat[:oid,:flt] ",								  "PQtopn_voidfltmin;"			  ]
[ 1370@0, "command",	  "pqueue",	  "topn_min",			  "(t:bat[:oid,:flt],n:int):bat[:oid,:flt] ",								  "PQtopn_fltmin;"			  ]
[ 1371@0, "command",	  "pqueue",	  "topreplace_min",		  "(h:bat[:oid,:flt],id:oid,value:flt):void ",								  "PQtopreplace_fltmin;"		  ]
[ 1372@0, "command",	  "pqueue",	  "topn_max",			  "(t:bat[:void,:lng],n:int):bat[:oid,:lng] ",								  "PQtopn_voidlngmax;"			  ]
[ 1373@0, "command",	  "pqueue",	  "topn_max",			  "(t:bat[:oid,:lng],n:int):bat[:oid,:lng] ",								  "PQtopn_lngmax;"			  ]
[ 1374@0, "command",	  "pqueue",	  "topreplace_max",		  "(h:bat[:oid,:lng],id:oid,value:lng):void ",								  "PQtopreplace_lngmax;"		  ]
[ 1375@0, "command",	  "pqueue",	  "topn_min",			  "(t:bat[:void,:lng],n:int):bat[:oid,:lng] ",								  "PQtopn_voidlngmin;"			  ]
[ 1376@0, "command",	  "pqueue",	  "topn_min",			  "(t:bat[:oid,:lng],n:int):bat[:oid,:lng] ",								  "PQtopn_lngmin;"			  ]
[ 1377@0, "command",	  "pqueue",	  "topreplace_min",		  "(h:bat[:oid,:lng],id:oid,value:lng):void ",								  "PQtopreplace_lngmin;"		  ]
[ 1378@0, "command",	  "pqueue",	  "topn_max",			  "(t:bat[:void,:ptr],n:int):bat[:oid,:ptr] ",								  "PQtopn_voidptrmax;"			  ]
[ 1379@0, "command",	  "pqueue",	  "topn_max",			  "(t:bat[:oid,:ptr],n:int):bat[:oid,:ptr] ",								  "PQtopn_ptrmax;"			  ]
[ 1380@0, "command",	  "pqueue",	  "topreplace_max",		  "(h:bat[:oid,:ptr],id:oid,value:ptr):void ",								  "PQtopreplace_ptrmax;"		  ]
[ 1381@0, "command",	  "pqueue",	  "topn_min",			  "(t:bat[:void,:ptr],n:int):bat[:oid,:ptr] ",								  "PQtopn_voidptrmin;"			  ]
[ 1382@0, "command",	  "pqueue",	  "topn_min",			  "(t:bat[:oid,:ptr],n:int):bat[:oid,:ptr] ",								  "PQtopn_ptrmin;"			  ]
[ 1383@0, "command",	  "pqueue",	  "topreplace_min",		  "(h:bat[:oid,:ptr],id:oid,value:ptr):void ",								  "PQtopreplace_ptrmin;"		  ]
[ 1384@0, "command",	  "pqueue",	  "topn_max",			  "(t:bat[:void,:oid],n:int):bat[:oid,:oid] ",								  "PQtopn_voidoidmax;"			  ]
[ 1385@0, "command",	  "pqueue",	  "topn_max",			  "(t:bat[:oid,:oid],n:int):bat[:oid,:oid] ",								  "PQtopn_oidmax;"			  ]
[ 1386@0, "command",	  "pqueue",	  "topreplace_max",		  "(h:bat[:oid,:oid],id:oid,value:oid):void ",								  "PQtopreplace_oidmax;"		  ]
[ 1387@0, "command",	  "pqueue",	  "topn_min",			  "(t:bat[:void,:oid],n:int):bat[:oid,:oid] ",								  "PQtopn_voidoidmin;"			  ]
[ 1388@0, "command",	  "pqueue",	  "topn_min",			  "(t:bat[:oid,:oid],n:int):bat[:oid,:oid] ",								  "PQtopn_oidmin;"			  ]
[ 1389@0, "command",	  "pqueue",	  "topreplace_min",		  "(h:bat[:oid,:oid],id:oid,value:oid):void ",								  "PQtopreplace_oidmin;"		  ]
[ 1390@0, "command",	  "pqueue",	  "topn_max",			  "(t:bat[:void,:int],n:int):bat[:oid,:int] ",								  "PQtopn_voidintmax;"			  ]
[ 1391@0, "command",	  "pqueue",	  "topn_max",			  "(t:bat[:oid,:int],n:int):bat[:oid,:int] ",								  "PQtopn_intmax;"			  ]
[ 1392@0, "command",	  "pqueue",	  "topreplace_max",		  "(h:bat[:oid,:int],id:oid,value:int):void ",								  "PQtopreplace_intmax;"		  ]
[ 1393@0, "command",	  "pqueue",	  "topn_min",			  "(t:bat[:void,:int],n:int):bat[:oid,:int] ",								  "PQtopn_voidintmin;"			  ]
[ 1394@0, "command",	  "pqueue",	  "topn_min",			  "(t:bat[:oid,:int],n:int):bat[:oid,:int] ",								  "PQtopn_intmin;"			  ]
[ 1395@0, "command",	  "pqueue",	  "topreplace_min",		  "(h:bat[:oid,:int],id:oid,value:int):void ",								  "PQtopreplace_intmin;"		  ]
[ 1396@0, "command",	  "pqueue",	  "topn_max",			  "(t:bat[:void,:sht],n:int):bat[:oid,:sht] ",								  "PQtopn_voidshtmax;"			  ]
[ 1397@0, "command",	  "pqueue",	  "topn_max",			  "(t:bat[:oid,:sht],n:int):bat[:oid,:sht] ",								  "PQtopn_shtmax;"			  ]
[ 1398@0, "command",	  "pqueue",	  "topreplace_max",		  "(h:bat[:oid,:sht],id:oid,value:sht):void ",								  "PQtopreplace_shtmax;"		  ]
[ 1399@0, "command",	  "pqueue",	  "topn_min",			  "(t:bat[:void,:sht],n:int):bat[:oid,:sht] ",								  "PQtopn_voidshtmin;"			  ]
[ 1400@0, "command",	  "pqueue",	  "topn_min",			  "(t:bat[:oid,:sht],n:int):bat[:oid,:sht] ",								  "PQtopn_shtmin;"			  ]
[ 1401@0, "command",	  "pqueue",	  "topreplace_min",		  "(h:bat[:oid,:sht],id:oid,value:sht):void ",								  "PQtopreplace_shtmin;"		  ]
[ 1402@0, "command",	  "pqueue",	  "topn_max",			  "(t:bat[:void,:chr],n:int):bat[:oid,:chr] ",								  "PQtopn_voidchrmax;"			  ]
[ 1403@0, "command",	  "pqueue",	  "topn_max",			  "(t:bat[:oid,:chr],n:int):bat[:oid,:chr] ",								  "PQtopn_chrmax;"			  ]
[ 1404@0, "command",	  "pqueue",	  "topreplace_max",		  "(h:bat[:oid,:chr],id:oid,value:chr):void ",								  "PQtopreplace_chrmax;"		  ]
[ 1405@0, "command",	  "pqueue",	  "topn_min",			  "(t:bat[:void,:chr],n:int):bat[:oid,:chr] ",								  "PQtopn_voidchrmin;"			  ]
[ 1406@0, "command",	  "pqueue",	  "topn_min",			  "(t:bat[:oid,:chr],n:int):bat[:oid,:chr] ",								  "PQtopn_chrmin;"			  ]
[ 1407@0, "command",	  "pqueue",	  "topreplace_min",		  "(h:bat[:oid,:chr],id:oid,value:chr):void ",								  "PQtopreplace_chrmin;"		  ]
[ 1408@0, "command",	  "array",	  "grid",			  "(b:bat[:void,:lng],i:lng,j:lng,k:lng,l:lng,s:lng):bat[:void,:lng] ",					  "ARRAYgridBAT_lng;"			  ]
[ 1409@0, "command",	  "array",	  "grid",			  "(b:bat[:void,:lng],i:lng,j:lng,k:lng,l:lng):bat[:void,:lng] ",					  "ARRAYgridBAT_lng;"			  ]
[ 1410@0, "command",	  "array",	  "grid",			  "(i:lng,j:lng,k:lng,l:lng,s:lng):bat[:void,:lng] ",							  "ARRAYgridShift_lng;"			  ]
[ 1411@0, "command",	  "array",	  "grid",			  "(i:lng,j:lng,k:lng,l:lng):bat[:void,:lng] ",								  "ARRAYgrid_lng;"			  ]
[ 1412@0, "command",	  "array",	  "grid",			  "(b:bat[:void,:int],i:int,j:int,k:int,l:int,s:int):bat[:void,:int] ",					  "ARRAYgridBAT_int;"			  ]
[ 1413@0, "command",	  "array",	  "grid",			  "(b:bat[:void,:int],i:int,j:int,k:int,l:int):bat[:void,:int] ",					  "ARRAYgridBAT_int;"			  ]
[ 1414@0, "command",	  "array",	  "grid",			  "(i:int,j:int,k:int,l:int,s:int):bat[:void,:int] ",							  "ARRAYgridShift_int;"			  ]
[ 1415@0, "command",	  "array",	  "grid",			  "(i:int,j:int,k:int,l:int):bat[:void,:int] ",								  "ARRAYgrid_int;"			  ]
[ 1416@0, "pattern",	  "array",	  "print",			  "(a:bat[:any_1,:any_2],b:bat[:any_1,:int]...):void ",							  "ARRAYprint;"				  ]
[ 1417@0, "command",	  "array",	  "project",			  "(b:bat[:void,:any_1],i:int):bat[:void,:int] ",							  "ARRAYproject;"			  ]
[ 1418@0, "command",	  "array",	  "product",			  "(b:bat[:void,:any_1],c:bat[:void,:any_2]):bat[:any_1,:any_2] ",					  "ARRAYproduct;"			  ]
[ 1419@0, "command",	  "group",	  "avg",			  "(b:bat[:any_2,:dbl],e:bat[:any_2,:any_1]):bat[:any_2,:dbl] ",					  "GRPavg_dbl;"				  ]
[ 1420@0, "command",	  "group",	  "avg",			  "(b:bat[:any_2,:flt],e:bat[:any_2,:any_1]):bat[:any_2,:flt] ",					  "GRPavg_flt;"				  ]
[ 1421@0, "command",	  "group",	  "avg",			  "(b:bat[:any_2,:lng],e:bat[:any_2,:any_1]):bat[:any_2,:lng] ",					  "GRPavg_lng;"				  ]
[ 1422@0, "command",	  "group",	  "avg",			  "(b:bat[:any_2,:int],e:bat[:any_2,:any_1]):bat[:any_2,:int] ",					  "GRPavg_int;"				  ]
[ 1423@0, "command",	  "group",	  "avg",			  "(b:bat[:any_2,:sht],e:bat[:any_2,:any_1]):bat[:any_2,:sht] ",					  "GRPavg_sht;"				  ]
[ 1424@0, "command",	  "group",	  "count",			  "(b:bat[:any_2,:any_1],e:bat[:any_2,:any_3],nonils:bit):bat[:any_2,:int] ",				  "GRPaggr_count;"			  ]
[ 1425@0, "command",	  "group",	  "derive",			  "(ct:bat[:any_1,:any_3],attr:bat[:any_1,:any_2]) (histo:bat[:any_1,:oid],grp:bat[:any_1,:oid]) ",	  "GRPderive;"				  ]
[ 1426@0, "command",	  "group",	  "max",			  "(b:bat[:any_2,:any_1],e:bat[:any_2,:any_3]):bat[:any_2,:any_1] ",					  "GRPmax;"				  ]
[ 1427@0, "command",	  "group",	  "min",			  "(b:bat[:any_2,:any_1],e:bat[:any_2,:any_3]):bat[:any_2,:any_1] ",					  "GRPmin;"				  ]
[ 1428@0, "command",	  "group",	  "new",			  "(attr:bat[:any_1,:any_2],N:int,rng:int) (histo:bat[:any_1,:int],grp:bat[:any_1,:oid]) ",		  "GRPgroup_custom;"			  ]
[ 1429@0, "command",	  "group",	  "new",			  "(attr:bat[:any_1,:any_2]) (histo:bat[:any_1,:int],grp:bat[:any_1,:oid]) ",				  "GRPgroup;"				  ]
[ 1430@0, "command",	  "group",	  "new",			  "(attr:bat[:any_1,:any_2]) (histo:bat[:any_1,:int],grp:bat[:any_1,:void]) ",				  "GRPgroup;"				  ]
[ 1431@0, "command",	  "group",	  "new",			  "(b:bat[:any_1,:any_2],start:int,incr:int,grpsize:int):bat[:any_1,:int] ",				  "GRPgroup0;"				  ]
[ 1432@0, "command",	  "group",	  "prelude",			  "():void ",												  "GRPprelude;"				  ]
[ 1433@0, "command",	  "group",	  "refine_reverse",		  "(b:bat[:any_2,:any_3],a:bat[:any_2,:any_1]):bat[:any_2,:oid] ",					  "GRPrefine_rev;"			  ]
[ 1434@0, "command",	  "group",	  "refine",			  "(b:bat[:void,:any_3],a:bat[:oid,:any_1]):bat[:oid,:oid] ",						  "GRPrefine;"				  ]
[ 1435@0, "command",	  "group",	  "refine",			  "(b:bat[:oid,:any_3],a:bat[:void,:any_1]):bat[:oid,:oid] ",						  "GRPrefine;"				  ]
[ 1436@0, "command",	  "group",	  "refine",			  "(b:bat[:any_2,:any_3],a:bat[:any_2,:any_1]):bat[:any_2,:oid] ",					  "GRPrefine;"				  ]
[ 1437@0, "command",	  "group",	  "size",			  "(b:bat[:any_2,:bit],e:bat[:any_2,:any_1]):bat[:any_2,:int] ",					  "GRPsize;"				  ]
[ 1438@0, "command",	  "group",	  "sum",			  "(b:bat[:any_2,:dbl],size:int,shift:int):bat[:any_2,:dbl] ",						  "GRPslidingsum_dbl;"			  ]
[ 1439@0, "command",	  "group",	  "sum",			  "(b:bat[:any_2,:dbl],size:int):bat[:any_2,:dbl] ",							  "GRPwindowsum_dbl;"			  ]
[ 1440@0, "command",	  "group",	  "sum",			  "(b:bat[:any_2,:dbl],e:bat[:any_2,:any_1]):bat[:any_2,:dbl] ",					  "GRPsum_dbl;"				  ]
[ 1441@0, "command",	  "group",	  "sum",			  "(b:bat[:any_2,:flt],size:int,shift:int):bat[:any_2,:flt] ",						  "GRPslidingsum_flt;"			  ]
[ 1442@0, "command",	  "group",	  "sum",			  "(b:bat[:any_2,:flt],size:int):bat[:any_2,:flt] ",							  "GRPwindowsum_flt;"			  ]
[ 1443@0, "command",	  "group",	  "sum",			  "(b:bat[:any_2,:flt],e:bat[:any_2,:any_1]):bat[:any_2,:flt] ",					  "GRPsum_flt;"				  ]
[ 1444@0, "command",	  "group",	  "sum",			  "(b:bat[:any_2,:lng],size:int,shift:int):bat[:any_2,:lng] ",						  "GRPslidingsum_lng;"			  ]
[ 1445@0, "command",	  "group",	  "sum",			  "(b:bat[:any_2,:lng],size:int):bat[:any_2,:lng] ",							  "GRPwindowsum_lng;"			  ]
[ 1446@0, "command",	  "group",	  "sum",			  "(b:bat[:any_2,:lng],e:bat[:any_2,:any_1]):bat[:any_2,:lng] ",					  "GRPsum_lng;"				  ]
[ 1447@0, "command",	  "group",	  "sum",			  "(b:bat[:any_2,:int],size:int,shift:int):bat[:any_2,:int] ",						  "GRPslidingsum_int;"			  ]
[ 1448@0, "command",	  "group",	  "sum",			  "(b:bat[:any_2,:int],size:int):bat[:any_2,:int] ",							  "GRPwindowsum_int;"			  ]
[ 1449@0, "command",	  "group",	  "sum",			  "(b:bat[:any_2,:int],e:bat[:any_2,:any_1]):bat[:any_2,:int] ",					  "GRPsum_int;"				  ]
[ 1450@0, "command",	  "group",	  "sum",			  "(b:bat[:any_2,:sht],size:int,shift:int):bat[:any_2,:sht] ",						  "GRPslidingsum_sht;"			  ]
[ 1451@0, "command",	  "group",	  "sum",			  "(b:bat[:any_2,:sht],size:int):bat[:any_2,:sht] ",							  "GRPwindowsum_sht;"			  ]
[ 1452@0, "command",	  "group",	  "sum",			  "(b:bat[:any_2,:sht],e:bat[:any_2,:any_1]):bat[:any_2,:sht] ",					  "GRPsum_sht;"				  ]
[ 1453@0, "command",	  "status",	  "batStatistics",		  "():bat[:str,:str] ",											  "SYSgdkEnv;"				  ]
[ 1454@0, "command",	  "status",	  "cpuStatistics",		  "():bat[:str,:int] ",											  "SYScpuStatistics;"			  ]
[ 1455@0, "command",	  "status",	  "getPorts",			  "(lang:str):bat[:str,:int] ",										  "SYSgetPorts;"			  ]
[ 1456@0, "command",	  "status",	  "getDatabases",		  "():bat[:str,:str] ",											  "SYSgetDatabases;"			  ]
[ 1457@0, "command",	  "status",	  "getThreads",			  "():bat[:int,:str] ",											  "SYSgdkThread;"			  ]
[ 1458@0, "command",	  "status",	  "ioStatistics",		  "():bat[:str,:int] ",											  "SYSioStatistics;"			  ]
[ 1459@0, "command",	  "status",	  "mem_maxsize",		  "(v:lng):void ",											  "set_mem_maxsize;"			  ]
[ 1460@0, "command",	  "status",	  "mem_maxsize",		  "():lng ",												  "SYSgetmem_maxsize;"			  ]
[ 1461@0, "command",	  "status",	  "mem_cursize",		  "():lng ",												  "SYSgetmem_cursize;"			  ]
[ 1462@0, "command",	  "status",	  "memUsage",			  "(minsize:lng):bat[:str,:lng] ",									  "SYSmem_usage;"			  ]
[ 1463@0, "command",	  "status",	  "memStatistics",		  "():bat[:str,:int] ",											  "SYSmemStatistics;"			  ]
[ 1464@0, "command",	  "status",	  "vm_maxsize",			  "(v:lng):void ",											  "SYSsetvm_maxsize;"			  ]
[ 1465@0, "command",	  "status",	  "vm_maxsize",			  "():lng ",												  "SYSgetvm_maxsize;"			  ]
[ 1466@0, "command",	  "status",	  "vm_cursize",			  "():lng ",												  "SYSgetvm_cursize;"			  ]
[ 1467@0, "command",	  "status",	  "vmStatistics",		  "(minsize:lng):bat[:str,:lng] ",									  "SYSvm_usage;"			  ]
[ 1468@0, "command",	  "calc",	  "!=",				  "(left:str,right:str):bit ",										  "CALCcompNEQstrstr;"			  ]
[ 1469@0, "command",	  "calc",	  "!=",				  "(left:lng,right:lng):bit ",										  "CALCcompNEQlnglng;"			  ]
[ 1470@0, "command",	  "calc",	  "!=",				  "(left:lng,right:int):bit ",										  "CALCcompNEQlngint;"			  ]
[ 1471@0, "command",	  "calc",	  "!=",				  "(left:lng,right:sht):bit ",										  "CALCcompNEQlngsht;"			  ]
[ 1472@0, "command",	  "calc",	  "!=",				  "(left:lng,right:chr):bit ",										  "CALCcompNEQlngchr;"			  ]
[ 1473@0, "command",	  "calc",	  "!=",				  "(left:int,right:lng):bit ",										  "CALCcompNEQintlng;"			  ]
[ 1474@0, "command",	  "calc",	  "!=",				  "(left:int,right:int):bit ",										  "CALCcompNEQintint;"			  ]
[ 1475@0, "command",	  "calc",	  "!=",				  "(left:int,right:sht):bit ",										  "CALCcompNEQintsht;"			  ]
[ 1476@0, "command",	  "calc",	  "!=",				  "(left:int,right:chr):bit ",										  "CALCcompNEQintchr;"			  ]
[ 1477@0, "command",	  "calc",	  "!=",				  "(left:sht,right:lng):bit ",										  "CALCcompNEQshtlng;"			  ]
[ 1478@0, "command",	  "calc",	  "!=",				  "(left:sht,right:int):bit ",										  "CALCcompNEQshtint;"			  ]
[ 1479@0, "command",	  "calc",	  "!=",				  "(left:sht,right:sht):bit ",										  "CALCcompNEQshtsht;"			  ]
[ 1480@0, "command",	  "calc",	  "!=",				  "(left:sht,right:chr):bit ",										  "CALCcompNEQshtchr;"			  ]
[ 1481@0, "command",	  "calc",	  "!=",				  "(left:bit,right:lng):bit ",										  "CALCcompNEQbitlng;"			  ]
[ 1482@0, "command",	  "calc",	  "!=",				  "(left:bit,right:int):bit ",										  "CALCcompNEQbitint;"			  ]
[ 1483@0, "command",	  "calc",	  "!=",				  "(left:bit,right:sht):bit ",										  "CALCcompNEQbitsht;"			  ]
[ 1484@0, "command",	  "calc",	  "!=",				  "(left:bit,right:chr):bit ",										  "CALCcompNEQbitchr;"			  ]
[ 1485@0, "command",	  "calc",	  "!=",				  "(left:bit,right:bit):bit ",										  "CALCcompNEQbitbit;"			  ]
[ 1486@0, "command",	  "calc",	  "!=",				  "(left:chr,right:lng):bit ",										  "CALCcompNEQchrlng;"			  ]
[ 1487@0, "command",	  "calc",	  "!=",				  "(left:chr,right:int):bit ",										  "CALCcompNEQchrint;"			  ]
[ 1488@0, "command",	  "calc",	  "!=",				  "(left:chr,right:sht):bit ",										  "CALCcompNEQchrsht;"			  ]
[ 1489@0, "command",	  "calc",	  "!=",				  "(left:chr,right:chr):bit ",										  "CALCcompNEQchrchr;"			  ]
[ 1490@0, "command",	  "calc",	  "!=",				  "(left:dbl,right:dbl):bit ",										  "CALCcompNEQdbldbl;"			  ]
[ 1491@0, "command",	  "calc",	  "!=",				  "(left:flt,right:dbl):bit ",										  "CALCcompNEQfltdbl;"			  ]
[ 1492@0, "command",	  "calc",	  "!=",				  "(left:flt,right:flt):bit ",										  "CALCcompNEQfltflt;"			  ]
[ 1493@0, "command",	  "calc",	  "!=",				  "(left:oid,right:oid):bit ",										  "CALCcompNEQoidoid;"			  ]
[ 1494@0, "command",	  "calc",	  "%",				  "(left:int,right:sht):sht ",										  "CALCbinaryMODintsht;"		  ]
[ 1495@0, "command",	  "calc",	  "%",				  "(left:int,right:chr):chr ",										  "CALCbinaryMODintchr;"		  ]
[ 1496@0, "command",	  "calc",	  "%",				  "(left:lng,right:lng):lng ",										  "CALCbinaryMODlnglng;"		  ]
[ 1497@0, "command",	  "calc",	  "%",				  "(left:lng,right:int):int ",										  "CALCbinaryMODlngint;"		  ]
[ 1498@0, "command",	  "calc",	  "%",				  "(left:int,right:int):int ",										  "CALCbinaryMODintint;"		  ]
[ 1499@0, "command",	  "calc",	  "%",				  "(left:sht,right:int):int ",										  "CALCbinaryMODshtint;"		  ]
[ 1500@0, "command",	  "calc",	  "%",				  "(left:chr,right:int):int ",										  "CALCbinaryMODchrint;"		  ]
[ 1501@0, "command",	  "calc",	  "*",				  "(left:lng,right:dbl):dbl ",										  "CALCbinaryMULlngdbl;"		  ]
[ 1502@0, "command",	  "calc",	  "*",				  "(left:lng,right:flt):flt ",										  "CALCbinaryMULlngflt;"		  ]
[ 1503@0, "command",	  "calc",	  "*",				  "(left:lng,right:lng):lng ",										  "CALCbinaryMULlnglng;"		  ]
[ 1504@0, "command",	  "calc",	  "*",				  "(left:lng,right:int):lng ",										  "CALCbinaryMULlngint;"		  ]
[ 1505@0, "command",	  "calc",	  "*",				  "(left:lng,right:sht):lng ",										  "CALCbinaryMULlngsht;"		  ]
[ 1506@0, "command",	  "calc",	  "*",				  "(left:lng,right:chr):lng ",										  "CALCbinaryMULlngchr;"		  ]
[ 1507@0, "command",	  "calc",	  "*",				  "(left:int,right:dbl):dbl ",										  "CALCbinaryMULintdbl;"		  ]
[ 1508@0, "command",	  "calc",	  "*",				  "(left:int,right:flt):flt ",										  "CALCbinaryMULintflt;"		  ]
[ 1509@0, "command",	  "calc",	  "*",				  "(left:int,right:lng):lng ",										  "CALCbinaryMULintlng;"		  ]
[ 1510@0, "command",	  "calc",	  "*",				  "(left:int,right:int):int ",										  "CALCbinaryMULintint;"		  ]
[ 1511@0, "command",	  "calc",	  "*",				  "(left:int,right:sht):int ",										  "CALCbinaryMULintsht;"		  ]
[ 1512@0, "command",	  "calc",	  "*",				  "(left:int,right:chr):int ",										  "CALCbinaryMULintchr;"		  ]
[ 1513@0, "command",	  "calc",	  "*",				  "(left:sht,right:dbl):dbl ",										  "CALCbinaryMULshtdbl;"		  ]
[ 1514@0, "command",	  "calc",	  "*",				  "(left:sht,right:flt):flt ",										  "CALCbinaryMULshtflt;"		  ]
[ 1515@0, "command",	  "calc",	  "*",				  "(left:sht,right:lng):lng ",										  "CALCbinaryMULshtlng;"		  ]
[ 1516@0, "command",	  "calc",	  "*",				  "(left:sht,right:int):int ",										  "CALCbinaryMULshtint;"		  ]
[ 1517@0, "command",	  "calc",	  "*",				  "(left:sht,right:sht):sht ",										  "CALCbinaryMULshtsht;"		  ]
[ 1518@0, "command",	  "calc",	  "*",				  "(left:sht,right:chr):sht ",										  "CALCbinaryMULshtchr;"		  ]
[ 1519@0, "command",	  "calc",	  "*",				  "(left:chr,right:dbl):dbl ",										  "CALCbinaryMULchrdbl;"		  ]
[ 1520@0, "command",	  "calc",	  "*",				  "(left:chr,right:flt):flt ",										  "CALCbinaryMULchrflt;"		  ]
[ 1521@0, "command",	  "calc",	  "*",				  "(left:chr,right:lng):lng ",										  "CALCbinaryMULchrlng;"		  ]
[ 1522@0, "command",	  "calc",	  "*",				  "(left:chr,right:int):int ",										  "CALCbinaryMULchrint;"		  ]
[ 1523@0, "command",	  "calc",	  "*",				  "(left:chr,right:sht):sht ",										  "CALCbinaryMULchrsht;"		  ]
[ 1524@0, "command",	  "calc",	  "*",				  "(left:chr,right:chr):chr ",										  "CALCbinaryMULchrchr;"		  ]
[ 1525@0, "command",	  "calc",	  "*",				  "(left:oid,right:oid):oid ",										  "CALCbinaryMULoidoid;"		  ]
[ 1526@0, "command",	  "calc",	  "*",				  "(left:dbl,right:dbl):dbl ",										  "CALCbinaryMULdbldbl;"		  ]
[ 1527@0, "command",	  "calc",	  "*",				  "(left:dbl,right:flt):dbl ",										  "CALCbinaryMULdblflt;"		  ]
[ 1528@0, "command",	  "calc",	  "*",				  "(left:dbl,right:lng):dbl ",										  "CALCbinaryMULdbllng;"		  ]
[ 1529@0, "command",	  "calc",	  "*",				  "(left:dbl,right:int):dbl ",										  "CALCbinaryMULdblint;"		  ]
[ 1530@0, "command",	  "calc",	  "*",				  "(left:dbl,right:sht):dbl ",										  "CALCbinaryMULdblsht;"		  ]
[ 1531@0, "command",	  "calc",	  "*",				  "(left:dbl,right:chr):dbl ",										  "CALCbinaryMULdblchr;"		  ]
[ 1532@0, "command",	  "calc",	  "*",				  "(left:flt,right:dbl):dbl ",										  "CALCbinaryMULfltdbl;"		  ]
[ 1533@0, "command",	  "calc",	  "*",				  "(left:flt,right:flt):flt ",										  "CALCbinaryMULfltflt;"		  ]
[ 1534@0, "command",	  "calc",	  "*",				  "(left:flt,right:lng):flt ",										  "CALCbinaryMULfltlng;"		  ]
[ 1535@0, "command",	  "calc",	  "*",				  "(left:flt,right:int):flt ",										  "CALCbinaryMULfltint;"		  ]
[ 1536@0, "command",	  "calc",	  "*",				  "(left:flt,right:sht):flt ",										  "CALCbinaryMULfltsht;"		  ]
[ 1537@0, "command",	  "calc",	  "*",				  "(left:flt,right:chr):flt ",										  "CALCbinaryMULfltchr;"		  ]
[ 1538@0, "command",	  "calc",	  "+",				  "(left:lng,right:dbl):dbl ",										  "CALCbinaryADDlngdbl;"		  ]
[ 1539@0, "command",	  "calc",	  "+",				  "(left:lng,right:flt):flt ",										  "CALCbinaryADDlngflt;"		  ]
[ 1540@0, "command",	  "calc",	  "+",				  "(left:lng,right:lng):lng ",										  "CALCbinaryADDlnglng;"		  ]
[ 1541@0, "command",	  "calc",	  "+",				  "(left:lng,right:int):lng ",										  "CALCbinaryADDlngint;"		  ]
[ 1542@0, "command",	  "calc",	  "+",				  "(left:lng,right:sht):lng ",										  "CALCbinaryADDlngsht;"		  ]
[ 1543@0, "command",	  "calc",	  "+",				  "(left:lng,right:chr):lng ",										  "CALCbinaryADDlngchr;"		  ]
[ 1544@0, "command",	  "calc",	  "+",				  "(left:int,right:dbl):dbl ",										  "CALCbinaryADDintdbl;"		  ]
[ 1545@0, "command",	  "calc",	  "+",				  "(left:int,right:flt):flt ",										  "CALCbinaryADDintflt;"		  ]
[ 1546@0, "command",	  "calc",	  "+",				  "(left:int,right:lng):lng ",										  "CALCbinaryADDintlng;"		  ]
[ 1547@0, "command",	  "calc",	  "+",				  "(left:int,right:int):int ",										  "CALCbinaryADDintint;"		  ]
[ 1548@0, "command",	  "calc",	  "+",				  "(left:int,right:sht):int ",										  "CALCbinaryADDintsht;"		  ]
[ 1549@0, "command",	  "calc",	  "+",				  "(left:int,right:chr):int ",										  "CALCbinaryADDintchr;"		  ]
[ 1550@0, "command",	  "calc",	  "+",				  "(left:sht,right:dbl):dbl ",										  "CALCbinaryADDshtdbl;"		  ]
[ 1551@0, "command",	  "calc",	  "+",				  "(left:sht,right:flt):flt ",										  "CALCbinaryADDshtflt;"		  ]
[ 1552@0, "command",	  "calc",	  "+",				  "(left:sht,right:lng):lng ",										  "CALCbinaryADDshtlng;"		  ]
[ 1553@0, "command",	  "calc",	  "+",				  "(left:sht,right:int):int ",										  "CALCbinaryADDshtint;"		  ]
[ 1554@0, "command",	  "calc",	  "+",				  "(left:sht,right:sht):sht ",										  "CALCbinaryADDshtsht;"		  ]
[ 1555@0, "command",	  "calc",	  "+",				  "(left:sht,right:chr):sht ",										  "CALCbinaryADDshtchr;"		  ]
[ 1556@0, "command",	  "calc",	  "+",				  "(left:chr,right:dbl):dbl ",										  "CALCbinaryADDchrdbl;"		  ]
[ 1557@0, "command",	  "calc",	  "+",				  "(left:chr,right:flt):flt ",										  "CALCbinaryADDchrflt;"		  ]
[ 1558@0, "command",	  "calc",	  "+",				  "(left:chr,right:lng):lng ",										  "CALCbinaryADDchrlng;"		  ]
[ 1559@0, "command",	  "calc",	  "+",				  "(left:chr,right:int):int ",										  "CALCbinaryADDchrint;"		  ]
[ 1560@0, "command",	  "calc",	  "+",				  "(left:chr,right:sht):sht ",										  "CALCbinaryADDchrsht;"		  ]
[ 1561@0, "command",	  "calc",	  "+",				  "(left:chr,right:chr):chr ",										  "CALCbinaryADDchrchr;"		  ]
[ 1562@0, "command",	  "calc",	  "+",				  "(left:oid,right:oid):oid ",										  "CALCbinaryADDoidoid;"		  ]
[ 1563@0, "command",	  "calc",	  "+",				  "(left:dbl,right:dbl):dbl ",										  "CALCbinaryADDdbldbl;"		  ]
[ 1564@0, "command",	  "calc",	  "+",				  "(left:dbl,right:flt):dbl ",										  "CALCbinaryADDdblflt;"		  ]
[ 1565@0, "command",	  "calc",	  "+",				  "(left:dbl,right:lng):dbl ",										  "CALCbinaryADDdbllng;"		  ]
[ 1566@0, "command",	  "calc",	  "+",				  "(left:dbl,right:int):dbl ",										  "CALCbinaryADDdblint;"		  ]
[ 1567@0, "command",	  "calc",	  "+",				  "(left:dbl,right:sht):dbl ",										  "CALCbinaryADDdblsht;"		  ]
[ 1568@0, "command",	  "calc",	  "+",				  "(left:dbl,right:chr):dbl ",										  "CALCbinaryADDdblchr;"		  ]
[ 1569@0, "command",	  "calc",	  "+",				  "(left:flt,right:dbl):dbl ",										  "CALCbinaryADDfltdbl;"		  ]
[ 1570@0, "command",	  "calc",	  "+",				  "(left:flt,right:flt):flt ",										  "CALCbinaryADDfltflt;"		  ]
[ 1571@0, "command",	  "calc",	  "+",				  "(left:flt,right:lng):flt ",										  "CALCbinaryADDfltlng;"		  ]
[ 1572@0, "command",	  "calc",	  "+",				  "(left:flt,right:int):flt ",										  "CALCbinaryADDfltint;"		  ]
[ 1573@0, "command",	  "calc",	  "+",				  "(left:flt,right:sht):flt ",										  "CALCbinaryADDfltsht;"		  ]
[ 1574@0, "command",	  "calc",	  "+",				  "(left:flt,right:chr):flt ",										  "CALCbinaryADDfltchr;"		  ]
[ 1575@0, "command",	  "calc",	  "+",				  "(l:str,r:int):str ",											  "CALCstrConcatInt;"			  ]
[ 1576@0, "command",	  "calc",	  "+",				  "(l:str,r:str):str ",											  "CALCstrConcat;"			  ]
[ 1577@0, "command",	  "calc",	  "-",				  "(x:lng):lng ",											  "CALCunarylngNEG;"			  ]
[ 1578@0, "command",	  "calc",	  "-",				  "(x:int):int ",											  "CALCunaryintNEG;"			  ]
[ 1579@0, "command",	  "calc",	  "-",				  "(x:sht):sht ",											  "CALCunaryshtNEG;"			  ]
[ 1580@0, "command",	  "calc",	  "-",				  "(x:chr):chr ",											  "CALCunarychrNEG;"			  ]
[ 1581@0, "command",	  "calc",	  "-",				  "(x:flt):flt ",											  "CALCunaryfltNEG;"			  ]
[ 1582@0, "command",	  "calc",	  "-",				  "(x:dbl):dbl ",											  "CALCunarydblNEG;"			  ]
[ 1583@0, "command",	  "calc",	  "-",				  "(left:lng,right:dbl):dbl ",										  "CALCbinarySUBlngdbl;"		  ]
[ 1584@0, "command",	  "calc",	  "-",				  "(left:lng,right:flt):flt ",										  "CALCbinarySUBlngflt;"		  ]
[ 1585@0, "command",	  "calc",	  "-",				  "(left:lng,right:lng):lng ",										  "CALCbinarySUBlnglng;"		  ]
[ 1586@0, "command",	  "calc",	  "-",				  "(left:lng,right:int):lng ",										  "CALCbinarySUBlngint;"		  ]
[ 1587@0, "command",	  "calc",	  "-",				  "(left:lng,right:sht):lng ",										  "CALCbinarySUBlngsht;"		  ]
[ 1588@0, "command",	  "calc",	  "-",				  "(left:lng,right:chr):lng ",										  "CALCbinarySUBlngchr;"		  ]
[ 1589@0, "command",	  "calc",	  "-",				  "(left:int,right:dbl):dbl ",										  "CALCbinarySUBintdbl;"		  ]
[ 1590@0, "command",	  "calc",	  "-",				  "(left:int,right:flt):flt ",										  "CALCbinarySUBintflt;"		  ]
[ 1591@0, "command",	  "calc",	  "-",				  "(left:int,right:lng):lng ",										  "CALCbinarySUBintlng;"		  ]
[ 1592@0, "command",	  "calc",	  "-",				  "(left:int,right:int):int ",										  "CALCbinarySUBintint;"		  ]
[ 1593@0, "command",	  "calc",	  "-",				  "(left:int,right:sht):int ",										  "CALCbinarySUBintsht;"		  ]
[ 1594@0, "command",	  "calc",	  "-",				  "(left:int,right:chr):int ",										  "CALCbinarySUBintchr;"		  ]
[ 1595@0, "command",	  "calc",	  "-",				  "(left:sht,right:dbl):dbl ",										  "CALCbinarySUBshtdbl;"		  ]
[ 1596@0, "command",	  "calc",	  "-",				  "(left:sht,right:flt):flt ",										  "CALCbinarySUBshtflt;"		  ]
[ 1597@0, "command",	  "calc",	  "-",				  "(left:sht,right:lng):lng ",										  "CALCbinarySUBshtlng;"		  ]
[ 1598@0, "command",	  "calc",	  "-",				  "(left:sht,right:int):int ",										  "CALCbinarySUBshtint;"		  ]
[ 1599@0, "command",	  "calc",	  "-",				  "(left:sht,right:sht):sht ",										  "CALCbinarySUBshtsht;"		  ]
[ 1600@0, "command",	  "calc",	  "-",				  "(left:sht,right:chr):sht ",										  "CALCbinarySUBshtchr;"		  ]
[ 1601@0, "command",	  "calc",	  "-",				  "(left:chr,right:dbl):dbl ",										  "CALCbinarySUBchrdbl;"		  ]
[ 1602@0, "command",	  "calc",	  "-",				  "(left:chr,right:flt):flt ",										  "CALCbinarySUBchrflt;"		  ]
[ 1603@0, "command",	  "calc",	  "-",				  "(left:chr,right:lng):lng ",										  "CALCbinarySUBchrlng;"		  ]
[ 1604@0, "command",	  "calc",	  "-",				  "(left:chr,right:int):int ",										  "CALCbinarySUBchrint;"		  ]
[ 1605@0, "command",	  "calc",	  "-",				  "(left:chr,right:sht):sht ",										  "CALCbinarySUBchrsht;"		  ]
[ 1606@0, "command",	  "calc",	  "-",				  "(left:chr,right:chr):chr ",										  "CALCbinarySUBchrchr;"		  ]
[ 1607@0, "command",	  "calc",	  "-",				  "(left:oid,right:oid):oid ",										  "CALCbinarySUBoidoid;"		  ]
[ 1608@0, "command",	  "calc",	  "-",				  "(left:dbl,right:dbl):dbl ",										  "CALCbinarySUBdbldbl;"		  ]
[ 1609@0, "command",	  "calc",	  "-",				  "(left:dbl,right:flt):dbl ",										  "CALCbinarySUBdblflt;"		  ]
[ 1610@0, "command",	  "calc",	  "-",				  "(left:dbl,right:lng):dbl ",										  "CALCbinarySUBdbllng;"		  ]
[ 1611@0, "command",	  "calc",	  "-",				  "(left:dbl,right:int):dbl ",										  "CALCbinarySUBdblint;"		  ]
[ 1612@0, "command",	  "calc",	  "-",				  "(left:dbl,right:sht):dbl ",										  "CALCbinarySUBdblsht;"		  ]
[ 1613@0, "command",	  "calc",	  "-",				  "(left:dbl,right:chr):dbl ",										  "CALCbinarySUBdblchr;"		  ]
[ 1614@0, "command",	  "calc",	  "-",				  "(left:flt,right:dbl):dbl ",										  "CALCbinarySUBfltdbl;"		  ]
[ 1615@0, "command",	  "calc",	  "-",				  "(left:flt,right:flt):flt ",										  "CALCbinarySUBfltflt;"		  ]
[ 1616@0, "command",	  "calc",	  "-",				  "(left:flt,right:lng):flt ",										  "CALCbinarySUBfltlng;"		  ]
[ 1617@0, "command",	  "calc",	  "-",				  "(left:flt,right:int):flt ",										  "CALCbinarySUBfltint;"		  ]
[ 1618@0, "command",	  "calc",	  "-",				  "(left:flt,right:sht):flt ",										  "CALCbinarySUBfltsht;"		  ]
[ 1619@0, "command",	  "calc",	  "-",				  "(left:flt,right:chr):flt ",										  "CALCbinarySUBfltchr;"		  ]
[ 1620@0, "command",	  "calc",	  "/",				  "(left:lng,right:dbl):dbl ",										  "CALCbinarycheckDIVlngdbl;"		  ]
[ 1621@0, "command",	  "calc",	  "/",				  "(left:lng,right:flt):flt ",										  "CALCbinarycheckDIVlngflt;"		  ]
[ 1622@0, "command",	  "calc",	  "/",				  "(left:lng,right:lng):lng ",										  "CALCbinarycheckDIVlnglng;"		  ]
[ 1623@0, "command",	  "calc",	  "/",				  "(left:lng,right:int):lng ",										  "CALCbinarycheckDIVlngint;"		  ]
[ 1624@0, "command",	  "calc",	  "/",				  "(left:lng,right:sht):lng ",										  "CALCbinarycheckDIVlngsht;"		  ]
[ 1625@0, "command",	  "calc",	  "/",				  "(left:lng,right:chr):lng ",										  "CALCbinarycheckDIVlngchr;"		  ]
[ 1626@0, "command",	  "calc",	  "/",				  "(left:int,right:dbl):dbl ",										  "CALCbinarycheckDIVintdbl;"		  ]
[ 1627@0, "command",	  "calc",	  "/",				  "(left:int,right:flt):flt ",										  "CALCbinarycheckDIVintflt;"		  ]
[ 1628@0, "command",	  "calc",	  "/",				  "(left:int,right:lng):lng ",										  "CALCbinarycheckDIVintlng;"		  ]
[ 1629@0, "command",	  "calc",	  "/",				  "(left:int,right:int):int ",										  "CALCbinarycheckDIVintint;"		  ]
[ 1630@0, "command",	  "calc",	  "/",				  "(left:int,right:sht):int ",										  "CALCbinarycheckDIVintsht;"		  ]
[ 1631@0, "command",	  "calc",	  "/",				  "(left:int,right:chr):int ",										  "CALCbinarycheckDIVintchr;"		  ]
[ 1632@0, "command",	  "calc",	  "/",				  "(left:sht,right:dbl):dbl ",										  "CALCbinarycheckDIVshtdbl;"		  ]
[ 1633@0, "command",	  "calc",	  "/",				  "(left:sht,right:flt):flt ",										  "CALCbinarycheckDIVshtflt;"		  ]
[ 1634@0, "command",	  "calc",	  "/",				  "(left:sht,right:lng):lng ",										  "CALCbinarycheckDIVshtlng;"		  ]
[ 1635@0, "command",	  "calc",	  "/",				  "(left:sht,right:int):int ",										  "CALCbinarycheckDIVshtint;"		  ]
[ 1636@0, "command",	  "calc",	  "/",				  "(left:sht,right:sht):sht ",										  "CALCbinarycheckDIVshtsht;"		  ]
[ 1637@0, "command",	  "calc",	  "/",				  "(left:sht,right:chr):sht ",										  "CALCbinarycheckDIVshtchr;"		  ]
[ 1638@0, "command",	  "calc",	  "/",				  "(left:chr,right:dbl):dbl ",										  "CALCbinarycheckDIVchrdbl;"		  ]
[ 1639@0, "command",	  "calc",	  "/",				  "(left:chr,right:flt):flt ",										  "CALCbinarycheckDIVchrflt;"		  ]
[ 1640@0, "command",	  "calc",	  "/",				  "(left:chr,right:lng):lng ",										  "CALCbinarycheckDIVchrlng;"		  ]
[ 1641@0, "command",	  "calc",	  "/",				  "(left:chr,right:int):int ",										  "CALCbinarycheckDIVchrint;"		  ]
[ 1642@0, "command",	  "calc",	  "/",				  "(left:chr,right:sht):sht ",										  "CALCbinarycheckDIVchrsht;"		  ]
[ 1643@0, "command",	  "calc",	  "/",				  "(left:chr,right:chr):chr ",										  "CALCbinarycheckDIVchrchr;"		  ]
[ 1644@0, "command",	  "calc",	  "/",				  "(left:oid,right:oid):oid ",										  "CALCbinarycheckDIVoidoid;"		  ]
[ 1645@0, "command",	  "calc",	  "/",				  "(left:dbl,right:dbl):dbl ",										  "CALCbinarycheckDIVdbldbl;"		  ]
[ 1646@0, "command",	  "calc",	  "/",				  "(left:dbl,right:flt):dbl ",										  "CALCbinarycheckDIVdblflt;"		  ]
[ 1647@0, "command",	  "calc",	  "/",				  "(left:dbl,right:lng):dbl ",										  "CALCbinarycheckDIVdbllng;"		  ]
[ 1648@0, "command",	  "calc",	  "/",				  "(left:dbl,right:int):dbl ",										  "CALCbinarycheckDIVdblint;"		  ]
[ 1649@0, "command",	  "calc",	  "/",				  "(left:dbl,right:sht):dbl ",										  "CALCbinarycheckDIVdblsht;"		  ]
[ 1650@0, "command",	  "calc",	  "/",				  "(left:dbl,right:chr):dbl ",										  "CALCbinarycheckDIVdblchr;"		  ]
[ 1651@0, "command",	  "calc",	  "/",				  "(left:flt,right:dbl):dbl ",										  "CALCbinarycheckDIVfltdbl;"		  ]
[ 1652@0, "command",	  "calc",	  "/",				  "(left:flt,right:flt):flt ",										  "CALCbinarycheckDIVfltflt;"		  ]
[ 1653@0, "command",	  "calc",	  "/",				  "(left:flt,right:lng):flt ",										  "CALCbinarycheckDIVfltlng;"		  ]
[ 1654@0, "command",	  "calc",	  "/",				  "(left:flt,right:int):flt ",										  "CALCbinarycheckDIVfltint;"		  ]
[ 1655@0, "command",	  "calc",	  "/",				  "(left:flt,right:sht):flt ",										  "CALCbinarycheckDIVfltsht;"		  ]
[ 1656@0, "command",	  "calc",	  "/",				  "(left:flt,right:chr):flt ",										  "CALCbinarycheckDIVfltchr;"		  ]
[ 1657@0, "command",	  "calc",	  "<<",				  "(left:lng,right:int):lng ",										  "CALCbinaryLSHlngint;"		  ]
[ 1658@0, "command",	  "calc",	  "<<",				  "(left:int,right:int):int ",										  "CALCbinaryLSHintint;"		  ]
[ 1659@0, "command",	  "calc",	  "<<",				  "(left:sht,right:int):sht ",										  "CALCbinaryLSHshtint;"		  ]
[ 1660@0, "command",	  "calc",	  "<<",				  "(left:chr,right:int):chr ",										  "CALCbinaryLSHchrint;"		  ]
[ 1661@0, "command",	  "calc",	  "<=",				  "(left:str,right:str):bit ",										  "CALCcompLEstrstr;"			  ]
[ 1662@0, "command",	  "calc",	  "<",				  "(left:str,right:str):bit ",										  "CALCcompLTstrstr;"			  ]
[ 1663@0, "command",	  "calc",	  "<=",				  "(left:lng,right:lng):bit ",										  "CALCcompLElnglng;"			  ]
[ 1664@0, "command",	  "calc",	  "<",				  "(left:lng,right:lng):bit ",										  "CALCcompLTlnglng;"			  ]
[ 1665@0, "command",	  "calc",	  "<=",				  "(left:lng,right:int):bit ",										  "CALCcompLElngint;"			  ]
[ 1666@0, "command",	  "calc",	  "<",				  "(left:lng,right:int):bit ",										  "CALCcompLTlngint;"			  ]
[ 1667@0, "command",	  "calc",	  "<=",				  "(left:lng,right:sht):bit ",										  "CALCcompLElngsht;"			  ]
[ 1668@0, "command",	  "calc",	  "<",				  "(left:lng,right:sht):bit ",										  "CALCcompLTlngsht;"			  ]
[ 1669@0, "command",	  "calc",	  "<=",				  "(left:lng,right:chr):bit ",										  "CALCcompLElngchr;"			  ]
[ 1670@0, "command",	  "calc",	  "<",				  "(left:lng,right:chr):bit ",										  "CALCcompLTlngchr;"			  ]
[ 1671@0, "command",	  "calc",	  "<=",				  "(left:int,right:lng):bit ",										  "CALCcompLEintlng;"			  ]
[ 1672@0, "command",	  "calc",	  "<",				  "(left:int,right:lng):bit ",										  "CALCcompLTintlng;"			  ]
[ 1673@0, "command",	  "calc",	  "<=",				  "(left:int,right:int):bit ",										  "CALCcompLEintint;"			  ]
[ 1674@0, "command",	  "calc",	  "<",				  "(left:int,right:int):bit ",										  "CALCcompLTintint;"			  ]
[ 1675@0, "command",	  "calc",	  "<=",				  "(left:int,right:sht):bit ",										  "CALCcompLEintsht;"			  ]
[ 1676@0, "command",	  "calc",	  "<",				  "(left:int,right:sht):bit ",										  "CALCcompLTintsht;"			  ]
[ 1677@0, "command",	  "calc",	  "<=",				  "(left:int,right:chr):bit ",										  "CALCcompLEintchr;"			  ]
[ 1678@0, "command",	  "calc",	  "<",				  "(left:int,right:chr):bit ",										  "CALCcompLTintchr;"			  ]
[ 1679@0, "command",	  "calc",	  "<=",				  "(left:sht,right:lng):bit ",										  "CALCcompLEshtlng;"			  ]
[ 1680@0, "command",	  "calc",	  "<",				  "(left:sht,right:lng):bit ",										  "CALCcompLTshtlng;"			  ]
[ 1681@0, "command",	  "calc",	  "<=",				  "(left:sht,right:int):bit ",										  "CALCcompLEshtint;"			  ]
[ 1682@0, "command",	  "calc",	  "<",				  "(left:sht,right:int):bit ",										  "CALCcompLTshtint;"			  ]
[ 1683@0, "command",	  "calc",	  "<=",				  "(left:sht,right:sht):bit ",										  "CALCcompLEshtsht;"			  ]
[ 1684@0, "command",	  "calc",	  "<",				  "(left:sht,right:sht):bit ",										  "CALCcompLTshtsht;"			  ]
[ 1685@0, "command",	  "calc",	  "<=",				  "(left:sht,right:chr):bit ",										  "CALCcompLEshtchr;"			  ]
[ 1686@0, "command",	  "calc",	  "<",				  "(left:sht,right:chr):bit ",										  "CALCcompLTshtchr;"			  ]
[ 1687@0, "command",	  "calc",	  "<=",				  "(left:chr,right:lng):bit ",										  "CALCcompLEchrlng;"			  ]
[ 1688@0, "command",	  "calc",	  "<",				  "(left:chr,right:lng):bit ",										  "CALCcompLTchrlng;"			  ]
[ 1689@0, "command",	  "calc",	  "<=",				  "(left:chr,right:int):bit ",										  "CALCcompLEchrint;"			  ]
[ 1690@0, "command",	  "calc",	  "<",				  "(left:chr,right:int):bit ",										  "CALCcompLTchrint;"			  ]
[ 1691@0, "command",	  "calc",	  "<=",				  "(left:chr,right:sht):bit ",										  "CALCcompLEchrsht;"			  ]
[ 1692@0, "command",	  "calc",	  "<",				  "(left:chr,right:sht):bit ",										  "CALCcompLTchrsht;"			  ]
[ 1693@0, "command",	  "calc",	  "<=",				  "(left:chr,right:chr):bit ",										  "CALCcompLEchrchr;"			  ]
[ 1694@0, "command",	  "calc",	  "<",				  "(left:chr,right:chr):bit ",										  "CALCcompLTchrchr;"			  ]
[ 1695@0, "command",	  "calc",	  "<=",				  "(left:dbl,right:dbl):bit ",										  "CALCcompLEdbldbl;"			  ]
[ 1696@0, "command",	  "calc",	  "<",				  "(left:dbl,right:dbl):bit ",										  "CALCcompLTdbldbl;"			  ]
[ 1697@0, "command",	  "calc",	  "<=",				  "(left:flt,right:dbl):bit ",										  "CALCcompLEfltdbl;"			  ]
[ 1698@0, "command",	  "calc",	  "<",				  "(left:flt,right:dbl):bit ",										  "CALCcompLTfltdbl;"			  ]
[ 1699@0, "command",	  "calc",	  "<=",				  "(left:flt,right:flt):bit ",										  "CALCcompLEfltflt;"			  ]
[ 1700@0, "command",	  "calc",	  "<",				  "(left:flt,right:flt):bit ",										  "CALCcompLTfltflt;"			  ]
[ 1701@0, "command",	  "calc",	  "<=",				  "(left:oid,right:oid):bit ",										  "CALCcompLEoidoid;"			  ]
[ 1702@0, "command",	  "calc",	  "<",				  "(left:oid,right:oid):bit ",										  "CALCcompLToidoid;"			  ]
[ 1703@0, "command",	  "calc",	  "==",				  "(left:str,right:str):bit ",										  "CALCcompEQstrstr;"			  ]
[ 1704@0, "command",	  "calc",	  "==",				  "(left:lng,right:lng):bit ",										  "CALCcompEQlnglng;"			  ]
[ 1705@0, "command",	  "calc",	  "==",				  "(left:lng,right:int):bit ",										  "CALCcompEQlngint;"			  ]
[ 1706@0, "command",	  "calc",	  "==",				  "(left:lng,right:sht):bit ",										  "CALCcompEQlngsht;"			  ]
[ 1707@0, "command",	  "calc",	  "==",				  "(left:lng,right:chr):bit ",										  "CALCcompEQlngchr;"			  ]
[ 1708@0, "command",	  "calc",	  "==",				  "(left:int,right:lng):bit ",										  "CALCcompEQintlng;"			  ]
[ 1709@0, "command",	  "calc",	  "==",				  "(left:int,right:int):bit ",										  "CALCcompEQintint;"			  ]
[ 1710@0, "command",	  "calc",	  "==",				  "(left:int,right:sht):bit ",										  "CALCcompEQintsht;"			  ]
[ 1711@0, "command",	  "calc",	  "==",				  "(left:int,right:chr):bit ",										  "CALCcompEQintchr;"			  ]
[ 1712@0, "command",	  "calc",	  "==",				  "(left:sht,right:lng):bit ",										  "CALCcompEQshtlng;"			  ]
[ 1713@0, "command",	  "calc",	  "==",				  "(left:sht,right:int):bit ",										  "CALCcompEQshtint;"			  ]
[ 1714@0, "command",	  "calc",	  "==",				  "(left:sht,right:sht):bit ",										  "CALCcompEQshtsht;"			  ]
[ 1715@0, "command",	  "calc",	  "==",				  "(left:sht,right:chr):bit ",										  "CALCcompEQshtchr;"			  ]
[ 1716@0, "command",	  "calc",	  "==",				  "(left:bit,right:lng):bit ",										  "CALCcompEQbitlng;"			  ]
[ 1717@0, "command",	  "calc",	  "==",				  "(left:bit,right:int):bit ",										  "CALCcompEQbitint;"			  ]
[ 1718@0, "command",	  "calc",	  "==",				  "(left:bit,right:sht):bit ",										  "CALCcompEQbitsht;"			  ]
[ 1719@0, "command",	  "calc",	  "==",				  "(left:bit,right:chr):bit ",										  "CALCcompEQbitchr;"			  ]
[ 1720@0, "command",	  "calc",	  "==",				  "(left:bit,right:bit):bit ",										  "CALCcompEQbitbit;"			  ]
[ 1721@0, "command",	  "calc",	  "==",				  "(left:chr,right:lng):bit ",										  "CALCcompEQchrlng;"			  ]
[ 1722@0, "command",	  "calc",	  "==",				  "(left:chr,right:int):bit ",										  "CALCcompEQchrint;"			  ]
[ 1723@0, "command",	  "calc",	  "==",				  "(left:chr,right:sht):bit ",										  "CALCcompEQchrsht;"			  ]
[ 1724@0, "command",	  "calc",	  "==",				  "(left:chr,right:chr):bit ",										  "CALCcompEQchrchr;"			  ]
[ 1725@0, "command",	  "calc",	  "==",				  "(left:dbl,right:dbl):bit ",										  "CALCcompEQdbldbl;"			  ]
[ 1726@0, "command",	  "calc",	  "==",				  "(left:flt,right:dbl):bit ",										  "CALCcompEQfltdbl;"			  ]
[ 1727@0, "command",	  "calc",	  "==",				  "(left:flt,right:flt):bit ",										  "CALCcompEQfltflt;"			  ]
[ 1728@0, "command",	  "calc",	  "==",				  "(left:oid,right:oid):bit ",										  "CALCcompEQoidoid;"			  ]
[ 1729@0, "command",	  "calc",	  ">>",				  "(left:lng,right:int):lng ",										  "CALCbinaryRSHlngint;"		  ]
[ 1730@0, "command",	  "calc",	  ">>",				  "(left:int,right:int):int ",										  "CALCbinaryRSHintint;"		  ]
[ 1731@0, "command",	  "calc",	  ">>",				  "(left:sht,right:int):sht ",										  "CALCbinaryRSHshtint;"		  ]
[ 1732@0, "command",	  "calc",	  ">>",				  "(left:chr,right:int):chr ",										  "CALCbinaryRSHchrint;"		  ]
[ 1733@0, "command",	  "calc",	  ">",				  "(left:str,right:str):bit ",										  "CALCcompGTstrstr;"			  ]
[ 1734@0, "command",	  "calc",	  ">=",				  "(left:str,right:str):bit ",										  "CALCcompGEstrstr;"			  ]
[ 1735@0, "command",	  "calc",	  ">",				  "(left:lng,right:lng):bit ",										  "CALCcompGTlnglng;"			  ]
[ 1736@0, "command",	  "calc",	  ">=",				  "(left:lng,right:lng):bit ",										  "CALCcompGElnglng;"			  ]
[ 1737@0, "command",	  "calc",	  ">",				  "(left:lng,right:int):bit ",										  "CALCcompGTlngint;"			  ]
[ 1738@0, "command",	  "calc",	  ">=",				  "(left:lng,right:int):bit ",										  "CALCcompGElngint;"			  ]
[ 1739@0, "command",	  "calc",	  ">",				  "(left:lng,right:sht):bit ",										  "CALCcompGTlngsht;"			  ]
[ 1740@0, "command",	  "calc",	  ">=",				  "(left:lng,right:sht):bit ",										  "CALCcompGElngsht;"			  ]
[ 1741@0, "command",	  "calc",	  ">",				  "(left:lng,right:chr):bit ",										  "CALCcompGTlngchr;"			  ]
[ 1742@0, "command",	  "calc",	  ">=",				  "(left:lng,right:chr):bit ",										  "CALCcompGElngchr;"			  ]
[ 1743@0, "command",	  "calc",	  ">",				  "(left:int,right:lng):bit ",										  "CALCcompGTintlng;"			  ]
[ 1744@0, "command",	  "calc",	  ">=",				  "(left:int,right:lng):bit ",										  "CALCcompGEintlng;"			  ]
[ 1745@0, "command",	  "calc",	  ">",				  "(left:int,right:int):bit ",										  "CALCcompGTintint;"			  ]
[ 1746@0, "command",	  "calc",	  ">=",				  "(left:int,right:int):bit ",										  "CALCcompGEintint;"			  ]
[ 1747@0, "command",	  "calc",	  ">",				  "(left:int,right:sht):bit ",										  "CALCcompGTintsht;"			  ]
[ 1748@0, "command",	  "calc",	  ">=",				  "(left:int,right:sht):bit ",										  "CALCcompGEintsht;"			  ]
[ 1749@0, "command",	  "calc",	  ">",				  "(left:int,right:chr):bit ",										  "CALCcompGTintchr;"			  ]
[ 1750@0, "command",	  "calc",	  ">=",				  "(left:int,right:chr):bit ",										  "CALCcompGEintchr;"			  ]
[ 1751@0, "command",	  "calc",	  ">",				  "(left:sht,right:lng):bit ",										  "CALCcompGTshtlng;"			  ]
[ 1752@0, "command",	  "calc",	  ">=",				  "(left:sht,right:lng):bit ",										  "CALCcompGEshtlng;"			  ]
[ 1753@0, "command",	  "calc",	  ">",				  "(left:sht,right:int):bit ",										  "CALCcompGTshtint;"			  ]
[ 1754@0, "command",	  "calc",	  ">=",				  "(left:sht,right:int):bit ",										  "CALCcompGEshtint;"			  ]
[ 1755@0, "command",	  "calc",	  ">",				  "(left:sht,right:sht):bit ",										  "CALCcompGTshtsht;"			  ]
[ 1756@0, "command",	  "calc",	  ">=",				  "(left:sht,right:sht):bit ",										  "CALCcompGEshtsht;"			  ]
[ 1757@0, "command",	  "calc",	  ">",				  "(left:sht,right:chr):bit ",										  "CALCcompGTshtchr;"			  ]
[ 1758@0, "command",	  "calc",	  ">=",				  "(left:sht,right:chr):bit ",										  "CALCcompGEshtchr;"			  ]
[ 1759@0, "command",	  "calc",	  ">",				  "(left:chr,right:lng):bit ",										  "CALCcompGTchrlng;"			  ]
[ 1760@0, "command",	  "calc",	  ">=",				  "(left:chr,right:lng):bit ",										  "CALCcompGEchrlng;"			  ]
[ 1761@0, "command",	  "calc",	  ">",				  "(left:chr,right:int):bit ",										  "CALCcompGTchrint;"			  ]
[ 1762@0, "command",	  "calc",	  ">=",				  "(left:chr,right:int):bit ",										  "CALCcompGEchrint;"			  ]
[ 1763@0, "command",	  "calc",	  ">",				  "(left:chr,right:sht):bit ",										  "CALCcompGTchrsht;"			  ]
[ 1764@0, "command",	  "calc",	  ">=",				  "(left:chr,right:sht):bit ",										  "CALCcompGEchrsht;"			  ]
[ 1765@0, "command",	  "calc",	  ">",				  "(left:chr,right:chr):bit ",										  "CALCcompGTchrchr;"			  ]
[ 1766@0, "command",	  "calc",	  ">=",				  "(left:chr,right:chr):bit ",										  "CALCcompGEchrchr;"			  ]
[ 1767@0, "command",	  "calc",	  ">",				  "(left:dbl,right:dbl):bit ",										  "CALCcompGTdbldbl;"			  ]
[ 1768@0, "command",	  "calc",	  ">=",				  "(left:dbl,right:dbl):bit ",										  "CALCcompGEdbldbl;"			  ]
[ 1769@0, "command",	  "calc",	  ">",				  "(left:flt,right:dbl):bit ",										  "CALCcompGTfltdbl;"			  ]
[ 1770@0, "command",	  "calc",	  ">=",				  "(left:flt,right:dbl):bit ",										  "CALCcompGEfltdbl;"			  ]
[ 1771@0, "command",	  "calc",	  ">",				  "(left:flt,right:flt):bit ",										  "CALCcompGTfltflt;"			  ]
[ 1772@0, "command",	  "calc",	  ">=",				  "(left:flt,right:flt):bit ",										  "CALCcompGEfltflt;"			  ]
[ 1773@0, "command",	  "calc",	  ">",				  "(left:oid,right:oid):bit ",										  "CALCcompGToidoid;"			  ]
[ 1774@0, "command",	  "calc",	  ">=",				  "(left:oid,right:oid):bit ",										  "CALCcompGEoidoid;"			  ]
[ 1775@0, "command",	  "calc",	  "and",			  "(left:lng,right:lng):lng ",										  "CALCbinaryANDlnglng;"		  ]
[ 1776@0, "command",	  "calc",	  "and",			  "(left:int,right:int):int ",										  "CALCbinaryANDintint;"		  ]
[ 1777@0, "command",	  "calc",	  "and",			  "(left:sht,right:sht):sht ",										  "CALCbinaryANDshtsht;"		  ]
[ 1778@0, "command",	  "calc",	  "and",			  "(left:chr,right:chr):chr ",										  "CALCbinaryANDchrchr;"		  ]
[ 1779@0, "command",	  "calc",	  "and",			  "(left:bit,right:bit):bit ",										  "CALCbinaryANDbit;"			  ]
[ 1780@0, "command",	  "calc",	  "abs",			  "(x:lng):lng ",											  "CALCunarylngABS;"			  ]
[ 1781@0, "command",	  "calc",	  "abs",			  "(x:int):int ",											  "CALCunaryintABS;"			  ]
[ 1782@0, "command",	  "calc",	  "abs",			  "(x:sht):sht ",											  "CALCunaryshtABS;"			  ]
[ 1783@0, "command",	  "calc",	  "abs",			  "(x:chr):chr ",											  "CALCunarychrABS;"			  ]
[ 1784@0, "command",	  "calc",	  "abs",			  "(x:flt):flt ",											  "CALCunaryfltABS;"			  ]
[ 1785@0, "command",	  "calc",	  "abs",			  "(x:dbl):dbl ",											  "CALCunarydblABS;"			  ]
[ 1786@0, "command",	  "calc",	  "bat",			  "(v:void):bat[:any_1,:any_2] ",									  "CALCnil2bat;"			  ]
[ 1787@0, "command",	  "calc",	  "bat",			  "(v:str):bat[:any_1,:any_2] ",									  "CALCstr2bat;"			  ]
[ 1788@0, "command",	  "calc",	  "bit",			  "(v:void):bit ",											  "CALCnil2bit;"			  ]
[ 1789@0, "command",	  "calc",	  "bit",			  "(v:str):bit ",											  "CALCstr2bit;"			  ]
[ 1790@0, "command",	  "calc",	  "bit",			  "(x:dbl):bit ",											  "CALCdbl2bit;"			  ]
[ 1791@0, "command",	  "calc",	  "bit",			  "(x:flt):bit ",											  "CALCflt2bit;"			  ]
[ 1792@0, "command",	  "calc",	  "bit",			  "(x:lng):bit ",											  "CALClng2bit;"			  ]
[ 1793@0, "command",	  "calc",	  "bit",			  "(x:int):bit ",											  "CALCint2bit;"			  ]
[ 1794@0, "command",	  "calc",	  "bit",			  "(x:sht):bit ",											  "CALCsht2bit;"			  ]
[ 1795@0, "command",	  "calc",	  "bit",			  "(x:bit):bit ",											  "CALCbit2bit;"			  ]
[ 1796@0, "command",	  "calc",	  "bit",			  "(x:oid):bit ",											  "CALCoid2bit;"			  ]
[ 1797@0, "command",	  "calc",	  "bit",			  "(x:dbl):bit ",											  "CALCdbl2bit;"			  ]
[ 1798@0, "command",	  "calc",	  "bit",			  "(x:flt):bit ",											  "CALCflt2bit;"			  ]
[ 1799@0, "command",	  "calc",	  "bit",			  "(x:lng):bit ",											  "CALClng2bit;"			  ]
[ 1800@0, "command",	  "calc",	  "bit",			  "(x:int):bit ",											  "CALCint2bit;"			  ]
[ 1801@0, "command",	  "calc",	  "bit",			  "(x:sht):bit ",											  "CALCsht2bit;"			  ]
[ 1802@0, "command",	  "calc",	  "bit",			  "(x:bit):bit ",											  "CALCbit2bit;"			  ]
[ 1803@0, "command",	  "calc",	  "between",			  "(val:str,low:str,high:str):bit ",									  "CALCcompBetweenstr;"			  ]
[ 1804@0, "command",	  "calc",	  "between",			  "(val:lng,low:lng,high:lng):bit ",						  "CALCcompBetweenlng;"			  ]
[ 1805@0, "command",	  "calc",	  "between",			  "(val:lng,low:lng,high:lng):bit ",						  "CALCcompBetweenlng;"			  ]
[ 1806@0, "command",	  "calc",	  "between",			  "(val:lng,low:lng,high:lng):bit ",									  "CALCcompBetweenlng;"			  ]
[ 1807@0, "command",	  "calc",	  "between",			  "(val:lng,low:lng,high:lng):bit ",									  "CALCcompBetweenlng;"			  ]
[ 1808@0, "command",	  "calc",	  "between",			  "(val:int,low:int,high:int):bit ",						  "CALCcompBetweenint;"			  ]
[ 1809@0, "command",	  "calc",	  "between",			  "(val:int,low:int,high:int):bit ",						  "CALCcompBetweenint;"			  ]
[ 1810@0, "command",	  "calc",	  "between",			  "(val:int,low:int,high:int):bit ",									  "CALCcompBetweenint;"			  ]
[ 1811@0, "command",	  "calc",	  "between",			  "(val:int,low:int,high:int):bit ",									  "CALCcompBetweenint;"			  ]
[ 1812@0, "command",	  "calc",	  "between",			  "(val:sht,low:sht,high:sht):bit ",						  "CALCcompBetweensht;"			  ]
[ 1813@0, "command",	  "calc",	  "between",			  "(val:sht,low:sht,high:sht):bit ",						  "CALCcompBetweensht;"			  ]
[ 1814@0, "command",	  "calc",	  "between",			  "(val:sht,low:sht,high:sht):bit ",									  "CALCcompBetweensht;"			  ]
[ 1815@0, "command",	  "calc",	  "between",			  "(val:sht,low:sht,high:sht):bit ",									  "CALCcompBetweensht;"			  ]
[ 1816@0, "command",	  "calc",	  "between",			  "(val:chr,low:chr,high:chr):bit ",						  "CALCcompBetweenchr;"			  ]
[ 1817@0, "command",	  "calc",	  "between",			  "(val:chr,low:chr,high:chr):bit ",						  "CALCcompBetweenchr;"			  ]
[ 1818@0, "command",	  "calc",	  "between",			  "(val:chr,low:chr,high:chr):bit ",									  "CALCcompBetweenchr;"			  ]
[ 1819@0, "command",	  "calc",	  "between",			  "(val:chr,low:chr,high:chr):bit ",									  "CALCcompBetweenchr;"			  ]
[ 1820@0, "command",	  "calc",	  "between",			  "(val:dbl,low:dbl,high:dbl):bit ",									  "CALCcompBetweendbl;"			  ]
[ 1821@0, "command",	  "calc",	  "between",			  "(val:flt,low:flt,high:flt):bit ",									  "CALCcompBetweenflt;"			  ]
[ 1822@0, "command",	  "calc",	  "between",			  "(val:flt,low:flt,high:flt):bit ",									  "CALCcompBetweenflt;"			  ]
[ 1823@0, "command",	  "calc",	  "between",			  "(val:oid,low:oid,high:oid):bit ",									  "CALCcompBetweenoid;"			  ]
[ 1824@0, "command",	  "calc",	  "chr",			  "(v:void):chr ",											  "CALCnil2chr;"			  ]
[ 1825@0, "command",	  "calc",	  "chr",			  "(v:str):chr ",											  "CALCstr2chr;"			  ]
[ 1826@0, "command",	  "calc",	  "chr",			  "(x:lng):chr ",											  "CALClng2chr;"			  ]
[ 1827@0, "command",	  "calc",	  "chr",			  "(x:int):chr ",											  "CALCint2chr;"			  ]
[ 1828@0, "command",	  "calc",	  "chr",			  "(x:sht):chr ",											  "CALCsht2chr;"			  ]
[ 1829@0, "command",	  "calc",	  "chr",			  "(x:chr):chr ",											  "CALCchr2chr;"			  ]
[ 1830@0, "command",	  "calc",	  "chr",			  "(x:dbl):chr ",											  "CALCdbl2chr;"			  ]
[ 1831@0, "command",	  "calc",	  "chr",			  "(x:flt):chr ",											  "CALCflt2chr;"			  ]
[ 1832@0, "command",	  "calc",	  "chr",			  "(x:lng):chr ",											  "CALClng2chr;"			  ]
[ 1833@0, "command",	  "calc",	  "chr",			  "(x:int):chr ",											  "CALCint2chr;"			  ]
[ 1834@0, "command",	  "calc",	  "chr",			  "(x:sht):chr ",											  "CALCsht2chr;"			  ]
[ 1835@0, "command",	  "calc",	  "chr",			  "(x:bit):chr ",											  "CALCbit2chr;"			  ]
[ 1836@0, "command",	  "calc",	  "chr",			  "(x:oid):chr ",											  "CALCoid2chr;"			  ]
[ 1837@0, "command",	  "calc",	  "dbl",			  "(v:void):dbl ",											  "CALCnil2dbl;"			  ]
[ 1838@0, "command",	  "calc",	  "dbl",			  "(v:str):dbl ",											  "CALCstr2dbl;"			  ]
[ 1839@0, "command",	  "calc",	  "dbl",			  "(x:lng):dbl ",											  "CALClng2dbl;"			  ]
[ 1840@0, "command",	  "calc",	  "dbl",			  "(x:int):dbl ",											  "CALCint2dbl;"			  ]
[ 1841@0, "command",	  "calc",	  "dbl",			  "(x:sht):dbl ",											  "CALCsht2dbl;"			  ]
[ 1842@0, "command",	  "calc",	  "dbl",			  "(x:flt):dbl ",											  "CALCflt2dbl;"			  ]
[ 1843@0, "command",	  "calc",	  "dbl",			  "(x:dbl):dbl ",											  "CALCdbl2dbl;"			  ]
[ 1844@0, "command",	  "calc",	  "flt",			  "(v:void):flt ",											  "CALCnil2flt;"			  ]
[ 1845@0, "command",	  "calc",	  "flt",			  "(v:str):flt ",											  "CALCstr2flt;"			  ]
[ 1846@0, "command",	  "calc",	  "flt",			  "(x:lng):flt ",											  "CALClng2flt;"			  ]
[ 1847@0, "command",	  "calc",	  "flt",			  "(x:int):flt ",											  "CALCint2flt;"			  ]
[ 1848@0, "command",	  "calc",	  "flt",			  "(x:sht):flt ",											  "CALCsht2flt;"			  ]
[ 1849@0, "command",	  "calc",	  "flt",			  "(x:dbl):flt ",											  "CALCdbl2flt;"			  ]
[ 1850@0, "command",	  "calc",	  "flt",			  "(x:flt):flt ",											  "CALCflt2flt;"			  ]
[ 1851@0, "command",	  "calc",	  "getBAT",			  "(b:BAT):bat[:any_1,:any_2] ",									  "CALCbatid2bat;"			  ]
[ 1852@0, "command",	  "calc",	  "getBATidentifier",		  "(b:bat[:any_1,:any_2]):BAT ",									  "CALCbat2batid;"			  ]
[ 1853@0, "command",	  "calc",	  "int",			  "(v:void):int ",											  "CALCnil2int;"			  ]
[ 1854@0, "command",	  "calc",	  "int",			  "(v:str):int ",											  "CALCstr2int;"			  ]
[ 1855@0, "pattern",	  "calc",	  "ifthenelse",			  "(b:bit,t:any_1,f:any_1):any_1 ",									  "CALCswitchbit;"			  ]
[ 1856@0, "command",	  "calc",	  "int",			  "(x:dbl):int ",											  "CALCdbl2int;"			  ]
[ 1857@0, "command",	  "calc",	  "int",			  "(x:flt):int ",											  "CALCflt2int;"			  ]
[ 1858@0, "command",	  "calc",	  "int",			  "(x:lng):int ",											  "CALClng2int;"			  ]
[ 1859@0, "command",	  "calc",	  "int",			  "(x:int):int ",											  "CALCint2int;"			  ]
[ 1860@0, "command",	  "calc",	  "int",			  "(x:sht):int ",											  "CALCsht2int;"			  ]
[ 1861@0, "command",	  "calc",	  "int",			  "(x:bit):int ",											  "CALCbit2int;"			  ]
[ 1862@0, "command",	  "calc",	  "int",			  "(x:oid):int ",											  "CALCoid2int;"			  ]
[ 1863@0, "command",	  "calc",	  "inv",			  "(x:lng):lng ",											  "CALCunarychecklngINV;"		  ]
[ 1864@0, "command",	  "calc",	  "inv",			  "(x:int):int ",											  "CALCunarycheckintINV;"		  ]
[ 1865@0, "command",	  "calc",	  "inv",			  "(x:sht):sht ",											  "CALCunarycheckshtINV;"		  ]
[ 1866@0, "command",	  "calc",	  "inv",			  "(x:chr):chr ",											  "CALCunarycheckchrINV;"		  ]
[ 1867@0, "command",	  "calc",	  "inv",			  "(x:flt):flt ",											  "CALCunarycheckfltINV;"		  ]
[ 1868@0, "command",	  "calc",	  "inv",			  "(x:dbl):dbl ",											  "CALCunarycheckdblINV;"		  ]
[ 1869@0, "command",	  "calc",	  "isnotnil",			  "(v:void):bit ",											  "CALCisnotnil_void;"			  ]
[ 1870@0, "command",	  "calc",	  "isnil",			  "(v:void):bit ",											  "CALCisnil_void;"			  ]
[ 1871@0, "command",	  "calc",	  "isnotnil",			  "(v:str):bit ",											  "CALCisnotnil_str;"			  ]
[ 1872@0, "command",	  "calc",	  "isnil",			  "(v:str):bit ",											  "CALCisnil_str;"			  ]
[ 1873@0, "command",	  "calc",	  "isnotnil",			  "(v:dbl):bit ",											  "CALCisnotnil_dbl;"			  ]
[ 1874@0, "command",	  "calc",	  "isnil",			  "(v:dbl):bit ",											  "CALCisnil_dbl;"			  ]
[ 1875@0, "command",	  "calc",	  "isnotnil",			  "(v:lng):bit ",											  "CALCisnotnil_lng;"			  ]
[ 1876@0, "command",	  "calc",	  "isnil",			  "(v:lng):bit ",											  "CALCisnil_lng;"			  ]
[ 1877@0, "command",	  "calc",	  "isnotnil",			  "(v:flt):bit ",											  "CALCisnotnil_flt;"			  ]
[ 1878@0, "command",	  "calc",	  "isnil",			  "(v:flt):bit ",											  "CALCisnil_flt;"			  ]
[ 1879@0, "command",	  "calc",	  "isnotnil",			  "(v:oid):bit ",											  "CALCisnotnil_oid;"			  ]
[ 1880@0, "command",	  "calc",	  "isnil",			  "(v:oid):bit ",											  "CALCisnil_oid;"			  ]
[ 1881@0, "command",	  "calc",	  "isnotnil",			  "(v:int):bit ",											  "CALCisnotnil_int;"			  ]
[ 1882@0, "command",	  "calc",	  "isnil",			  "(v:int):bit ",											  "CALCisnil_int;"			  ]
[ 1883@0, "command",	  "calc",	  "isnotnil",			  "(v:sht):bit ",											  "CALCisnotnil_sht;"			  ]
[ 1884@0, "command",	  "calc",	  "isnil",			  "(v:sht):bit ",											  "CALCisnil_sht;"			  ]
[ 1885@0, "command",	  "calc",	  "isnotnil",			  "(v:bit):bit ",											  "CALCisnotnil_bit;"			  ]
[ 1886@0, "command",	  "calc",	  "isnil",			  "(v:bit):bit ",											  "CALCisnil_bit;"			  ]
[ 1887@0, "command",	  "calc",	  "isnotnil",			  "(v:chr):bit ",											  "CALCisnotnil_chr;"			  ]
[ 1888@0, "command",	  "calc",	  "isnil",			  "(v:chr):bit ",											  "CALCisnil_chr;"			  ]
[ 1889@0, "command",	  "calc",	  "lng",			  "(v:void):lng ",											  "CALCnil2lng;"			  ]
[ 1890@0, "command",	  "calc",	  "lng",			  "(v:str):lng ",											  "CALCstr2lng;"			  ]
[ 1891@0, "command",	  "calc",	  "lng",			  "(x:dbl):lng ",											  "CALCdbl2lng;"			  ]
[ 1892@0, "command",	  "calc",	  "lng",			  "(x:flt):lng ",											  "CALCflt2lng;"			  ]
[ 1893@0, "command",	  "calc",	  "lng",			  "(x:lng):lng ",											  "CALClng2lng;"			  ]
[ 1894@0, "command",	  "calc",	  "lng",			  "(x:int):lng ",											  "CALCint2lng;"			  ]
[ 1895@0, "command",	  "calc",	  "lng",			  "(x:sht):lng ",											  "CALCsht2lng;"			  ]
[ 1896@0, "command",	  "calc",	  "lng",			  "(x:bit):lng ",											  "CALCbit2lng;"			  ]
[ 1897@0, "command",	  "calc",	  "lng",			  "(x:oid):lng ",											  "CALCoid2lng;"			  ]
[ 1898@0, "command",	  "calc",	  "length",			  "(x:str):int ",											  "CALClengthstr;"			  ]
[ 1899@0, "command",	  "calc",	  "length",			  "(x:lng):int ",											  "CALClengthlng;"			  ]
[ 1900@0, "command",	  "calc",	  "length",			  "(x:int):int ",											  "CALClengthint;"			  ]
[ 1901@0, "command",	  "calc",	  "length",			  "(x:sht):int ",											  "CALClengthsht;"			  ]
[ 1902@0, "command",	  "calc",	  "length",			  "(x:chr):int ",											  "CALClengthchr;"			  ]
[ 1903@0, "command",	  "calc",	  "length",			  "(x:flt):int ",											  "CALClengthflt;"			  ]
[ 1904@0, "command",	  "calc",	  "length",			  "(x:dbl):int ",											  "CALClengthdbl;"			  ]
[ 1905@0, "command",	  "calc",	  "min",			  "(l:dbl,r:dbl):dbl ",											  "CALCbinaryMINdbl;"			  ]
[ 1906@0, "command",	  "calc",	  "max",			  "(l:dbl,r:dbl):dbl ",											  "CALCbinaryMAXdbl;"			  ]
[ 1907@0, "command",	  "calc",	  "min",			  "(l:lng,r:lng):lng ",											  "CALCbinaryMINlng;"			  ]
[ 1908@0, "command",	  "calc",	  "max",			  "(l:lng,r:lng):lng ",											  "CALCbinaryMAXlng;"			  ]
[ 1909@0, "command",	  "calc",	  "min",			  "(l:flt,r:flt):flt ",											  "CALCbinaryMINflt;"			  ]
[ 1910@0, "command",	  "calc",	  "max",			  "(l:flt,r:flt):flt ",											  "CALCbinaryMAXflt;"			  ]
[ 1911@0, "command",	  "calc",	  "min",			  "(l:oid,r:oid):oid ",											  "CALCbinaryMINoid;"			  ]
[ 1912@0, "command",	  "calc",	  "max",			  "(l:oid,r:oid):oid ",											  "CALCbinaryMAXoid;"			  ]
[ 1913@0, "command",	  "calc",	  "min",			  "(l:int,r:int):int ",											  "CALCbinaryMINint;"			  ]
[ 1914@0, "command",	  "calc",	  "max",			  "(l:int,r:int):int ",											  "CALCbinaryMAXint;"			  ]
[ 1915@0, "command",	  "calc",	  "min",			  "(l:sht,r:sht):sht ",											  "CALCbinaryMINsht;"			  ]
[ 1916@0, "command",	  "calc",	  "max",			  "(l:sht,r:sht):sht ",											  "CALCbinaryMAXsht;"			  ]
[ 1917@0, "command",	  "calc",	  "min",			  "(l:chr,r:chr):chr ",											  "CALCbinaryMINchr;"			  ]
[ 1918@0, "command",	  "calc",	  "max",			  "(l:chr,r:chr):chr ",											  "CALCbinaryMAXchr;"			  ]
[ 1919@0, "command",	  "calc",	  "newoid",			  "(incr:int):oid ",											  "CALCnewoidInc;"			  ]
[ 1920@0, "command",	  "calc",	  "newoid",			  "(incr:lng):oid ",											  "CALCnewoidInclng;"			  ]
[ 1921@0, "command",	  "calc",	  "newoid",			  "():oid ",												  "CALCnewoidBase;"			  ]
[ 1922@0, "command",	  "calc",	  "not",			  "(left:lng):lng ",											  "CALCunarylngNOT;"			  ]
[ 1923@0, "command",	  "calc",	  "not",			  "(left:int):int ",											  "CALCunaryintNOT;"			  ]
[ 1924@0, "command",	  "calc",	  "not",			  "(left:sht):sht ",											  "CALCunaryshtNOT;"			  ]
[ 1925@0, "command",	  "calc",	  "not",			  "(left:chr):chr ",											  "CALCunarychrNOT;"			  ]
[ 1926@0, "command",	  "calc",	  "not",			  "(left:bit):bit ",											  "CALCunarybitNOT;"			  ]
[ 1927@0, "command",	  "calc",	  "oid",			  "(v:void):oid ",											  "CALCnil2oid;"			  ]
[ 1928@0, "command",	  "calc",	  "oid",			  "(v:str):oid ",											  "CALCstr2oid;"			  ]
[ 1929@0, "command",	  "calc",	  "or",				  "(left:lng,right:lng):lng ",										  "CALCbinaryORlnglng;"			  ]
[ 1930@0, "command",	  "calc",	  "or",				  "(left:int,right:int):int ",										  "CALCbinaryORintint;"			  ]
[ 1931@0, "command",	  "calc",	  "or",				  "(left:sht,right:sht):sht ",										  "CALCbinaryORshtsht;"			  ]
[ 1932@0, "command",	  "calc",	  "or",				  "(left:chr,right:chr):chr ",										  "CALCbinaryORchrchr;"			  ]
[ 1933@0, "command",	  "calc",	  "or",				  "(left:bit,right:bit):bit ",										  "CALCbinaryORbit;"			  ]
[ 1934@0, "command",	  "calc",	  "oid",			  "(x:int):oid ",											  "CALCint2oid;"			  ]
[ 1935@0, "command",	  "calc",	  "oid",			  "(x:sht):oid ",											  "CALCsht2oid;"			  ]
[ 1936@0, "command",	  "calc",	  "oid",			  "(x:lng):oid ",											  "CALClng2oid;"			  ]
[ 1937@0, "command",	  "calc",	  "oid",			  "(x:oid):oid ",											  "CALCoid2oid;"			  ]
[ 1938@0, "command",	  "calc",	  "ptr",			  "(v:void):ptr ",											  "CALCnil2ptr;"			  ]
[ 1939@0, "command",	  "calc",	  "ptr",			  "(v:str):ptr ",											  "CALCstr2ptr;"			  ]
[ 1940@0, "command",	  "calc",	  "ptr",			  "(x:lng):ptr ",											  "CALClng2ptr;"			  ]
[ 1941@0, "command",	  "calc",	  "setoid",			  "():oid ",												  "CALCsetoidBase;"			  ]
[ 1942@0, "command",	  "calc",	  "setoid",			  "(base:oid):oid ",											  "CALCsetoidInc;"			  ]
[ 1943@0, "command",	  "calc",	  "setoid",			  "(v:oid):void ",											  "oidSetoidImpl;"			  ]
[ 1944@0, "command",	  "calc",	  "setoid",			  "(v:lng):void ",											  "lngSetoidImpl;"			  ]
[ 1945@0, "command",	  "calc",	  "setoid",			  "(v:int):void ",											  "intSetoidImpl;"			  ]
[ 1946@0, "command",	  "calc",	  "str",			  "(v:str):str ",											  "CALCstr2str;"			  ]
[ 1947@0, "command",	  "calc",	  "str",			  "(v:void):str ",											  "CALCnil2str;"			  ]
[ 1948@0, "command",	  "calc",	  "str",			  "(v:bat[:any_1,:any_2]):str ",									  "CALCbat2str;"			  ]
[ 1949@0, "command",	  "calc",	  "str",			  "(v:chr):str ",											  "CALCchr2str;"			  ]
[ 1950@0, "command",	  "calc",	  "str",			  "(v:ptr):str ",											  "CALCptr2str;"			  ]
[ 1951@0, "command",	  "calc",	  "str",			  "(v:bit):str ",											  "CALCbit2str;"			  ]
[ 1952@0, "command",	  "calc",	  "str",			  "(v:dbl):str ",											  "CALCdbl2str;"			  ]
[ 1953@0, "command",	  "calc",	  "str",			  "(v:flt):str ",											  "CALCflt2str;"			  ]
[ 1954@0, "command",	  "calc",	  "str",			  "(v:lng):str ",											  "CALClng2str;"			  ]
[ 1955@0, "command",	  "calc",	  "str",			  "(v:int):str ",											  "CALCint2str;"			  ]
[ 1956@0, "command",	  "calc",	  "sht",			  "(v:void):sht ",											  "CALCnil2sht;"			  ]
[ 1957@0, "command",	  "calc",	  "str",			  "(v:sht):str ",											  "CALCsht2str;"			  ]
[ 1958@0, "command",	  "calc",	  "sht",			  "(v:str):sht ",											  "CALCstr2sht;"			  ]
[ 1959@0, "command",	  "calc",	  "str",			  "(v:oid):str ",											  "CALCoid2str;"			  ]
[ 1960@0, "command",	  "calc",	  "str",			  "(x:dbl):str ",											  "CALCdbl2str;"			  ]
[ 1961@0, "command",	  "calc",	  "str",			  "(x:flt):str ",											  "CALCflt2str;"			  ]
[ 1962@0, "command",	  "calc",	  "str",			  "(x:lng):str ",											  "CALClng2str;"			  ]
[ 1963@0, "command",	  "calc",	  "str",			  "(x:int):str ",											  "CALCint2str;"			  ]
[ 1964@0, "command",	  "calc",	  "str",			  "(x:sht):str ",											  "CALCsht2str;"			  ]
[ 1965@0, "command",	  "calc",	  "sht",			  "(x:dbl):sht ",											  "CALCdbl2sht;"			  ]
[ 1966@0, "command",	  "calc",	  "sht",			  "(x:flt):sht ",											  "CALCflt2sht;"			  ]
[ 1967@0, "command",	  "calc",	  "sht",			  "(x:lng):sht ",											  "CALClng2sht;"			  ]
[ 1968@0, "command",	  "calc",	  "sht",			  "(x:int):sht ",											  "CALCint2sht;"			  ]
[ 1969@0, "command",	  "calc",	  "sht",			  "(x:sht):sht ",											  "CALCsht2sht;"			  ]
[ 1970@0, "command",	  "calc",	  "sht",			  "(x:bit):sht ",											  "CALCbit2sht;"			  ]
[ 1971@0, "command",	  "calc",	  "sht",			  "(x:oid):sht ",											  "CALCoid2sht;"			  ]
[ 1972@0, "command",	  "calc",	  "void",			  "(v:lng):void ",											  "CALClng2void;"			  ]
[ 1973@0, "command",	  "calc",	  "void",			  "(v:sht):void ",											  "CALCsht2void;"			  ]
[ 1974@0, "command",	  "calc",	  "void",			  "(v:int):void ",											  "CALCint2void;"			  ]
[ 1975@0, "command",	  "calc",	  "void",			  "(v:void):void ",											  "CALCnil2void;"			  ]
[ 1976@0, "command",	  "calc",	  "xor",			  "(left:lng,right:lng):lng ",										  "CALCbinaryXORlnglng;"		  ]
[ 1977@0, "command",	  "calc",	  "xor",			  "(left:int,right:int):int ",										  "CALCbinaryXORintint;"		  ]
[ 1978@0, "command",	  "calc",	  "xor",			  "(left:sht,right:sht):sht ",										  "CALCbinaryXORshtsht;"		  ]
[ 1979@0, "command",	  "calc",	  "xor",			  "(left:chr,right:chr):chr ",										  "CALCbinaryXORchrchr;"		  ]
[ 1980@0, "command",	  "calc",	  "xor",			  "(left:bit,right:bit):bit ",										  "CALCbinaryXORbit;"			  ]
[ 1981@0, "command",	  "algebra",	  "antijoin",			  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_4]):bat[:any_1,:any_4] ",				  "ALGantijoin;"			  ]
[ 1982@0, "function",	  "algebra",	  "betweenOO",			  "(b:bat[:any_1,:any_2],l:any_2,h:any_2):bat[:any_1,:any_2];",						  "nil"					  ]
[ 1983@0, "function",	  "algebra",	  "betweenOC",			  "(b:bat[:any_1,:any_2],l:any_2,h:any_2):bat[:any_1,:any_2];",						  "nil"					  ]
[ 1984@0, "function",	  "algebra",	  "betweenCO",			  "(b:bat[:any_1,:any_2],l:any_2,h:any_2):bat[:any_1,:any_2];",						  "nil"					  ]
[ 1985@0, "function",	  "algebra",	  "between",			  "(b:bat[:any_1,:any_2],l:any_2,h:any_2):bat[:any_1,:any_2];",						  "nil"					  ]
[ 1986@0, "command",	  "algebra",	  "bandjoin",			  "(outer:bat[:any_1,:any_2],inner:bat[:any_2,:any_3],minus:any_2,plus:any_2):bat[:any_1,:any_3] ",	  "ALGbandjoin;"			  ]
[ 1987@0, "command",	  "algebra",	  "crossproduct",		  "(left:bat[:any_1,:any_2],right:bat[:any_3,:any_4]):bat[:any_1,:any_4] ",				  "ALGcross;"				  ]
[ 1988@0, "command",	  "algebra",	  "copy",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",								  "ALGcopy;"				  ]
[ 1989@0, "command",	  "algebra",	  "difference",			  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",				  "ALGsdiff;"				  ]
[ 1990@0, "command",	  "algebra",	  "exist",			  "(b:bat[:any_1,:any_2],h:any_1,t:any_2):bit ",							  "ALGexistBUN;"			  ]
[ 1991@0, "command",	  "algebra",	  "exist",			  "(b:bat[:any_1,:any_2],h:any_1):bit ",								  "ALGexist;"				  ]
[ 1992@0, "command",	  "algebra",	  "fetchjoin",			  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",				  "ALGfetchjoin;"			  ]
[ 1993@0, "command",	  "algebra",	  "fragment",			  "(b:bat[:any_1,:any_2],hlow:any_1,hhigh:any_1,tlow:any_2,thigh:any_2):bat[:any_1,:any_2] ",		  "ALGfragment;"			  ]
[ 1994@0, "command",	  "algebra",	  "fetch",			  "(b:bat[:any_1,:any_2],s:bat[:oid,:any_3]):bat[:any_1,:any_2] ",					  "ALGfetchbat;"			  ]
[ 1995@0, "command",	  "algebra",	  "fetch",			  "(b:bat[:any_1,:any_2],s:bat[:lng,:any_3]):bat[:any_1,:any_2] ",					  "ALGfetchbat;"			  ]
[ 1996@0, "command",	  "algebra",	  "fetch",			  "(b:bat[:any_1,:any_2],s:bat[:int,:any_3]):bat[:any_1,:any_2] ",					  "ALGfetchbat;"			  ]
[ 1997@0, "command",	  "algebra",	  "fetch",			  "(b:bat[:any_2,:any_1],x:int):any_1 ",								  "ALGfetchint;"			  ]
[ 1998@0, "command",	  "algebra",	  "fetch",			  "(b:bat[:any_2,:any_1],x:lng):any_1 ",								  "ALGfetch;"				  ]
[ 1999@0, "command",	  "algebra",	  "fetch",			  "(b:bat[:any_2,:any_1],x:oid):any_1 ",								  "ALGfetchoid;"			  ]
[ 2000@0, "command",	  "algebra",	  "find",			  "(b:bat[:void,:any_2],h:oid):any_2 ",									  "ALGfind;"				  ]
[ 2001@0, "command",	  "algebra",	  "find",			  "(b:bat[:oid,:any_2],h:void):any_2 ",									  "ALGfind;"				  ]
[ 2002@0, "command",	  "algebra",	  "find",			  "(b:bat[:any_1,:any_2],h:any_1):any_2 ",								  "ALGfind;"				  ]
[ 2003@0, "command",	  "algebra",	  "groupby",			  "(b:bat[:any_1,:int]):bat[:any_1,:void] ",								  "ALGgroupby;"				  ]
[ 2004@0, "command",	  "algebra",	  "hashsplit",			  "(b:bat[:any_1,:any_2],buckects:int):bat[:int,:BAT] ",						  "ALGhashsplit;"			  ]
[ 2005@0, "command",	  "algebra",	  "hashjoin",			  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",				  "ALGhashjoin;"			  ]
[ 2006@0, "command",	  "algebra",	  "indexjoin",			  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",				  "ALGindexjoin;"			  ]
[ 2007@0, "command",	  "algebra",	  "intersect",			  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",				  "ALGsintersect;"			  ]
[ 2008@0, "pattern",	  "algebra",	  "joinPath",			  "(b:bat[:any_1,:any_2],aliasRemoval:bat[:any_2,:any_3]...):bat[:any_1,:any_3] ",			  "QOTjoinPath;"			  ]
[ 2009@0, "command",	  "algebra",	  "join",			  "(left:bat[:any_1,:oid],right:bat[:void,:any_3],estimate:lng):bat[:any_1,:any_3] ",			  "ALGjoinestimate;"			  ]
[ 2010@0, "command",	  "algebra",	  "join",			  "(left:bat[:any_1,:void],right:bat[:oid,:any_3],estimate:lng):bat[:any_1,:any_3] ",			  "ALGjoinestimate;"			  ]
[ 2011@0, "command",	  "algebra",	  "join",			  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3],estimate:lng):bat[:any_1,:any_3] ",		  "ALGjoinestimate;"			  ]
[ 2012@0, "command",	  "algebra",	  "join",			  "(left:bat[:any_1,:oid],right:bat[:void,:any_3]):bat[:any_1,:any_3] ",				  "ALGjoin;"				  ]
[ 2013@0, "command",	  "algebra",	  "join",			  "(left:bat[:any_1,:void],right:bat[:oid,:any_3]):bat[:any_1,:any_3] ",				  "ALGjoin;"				  ]
[ 2014@0, "command",	  "algebra",	  "join",			  "(left:bat[:void,:any_1],right:bat[:any_1,:void]):bat[:void,:oid] ",					  "ALGjoin;"				  ]
[ 2015@0, "command",	  "algebra",	  "join",			  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",				  "ALGjoin;"				  ]
[ 2016@0, "command",	  "algebra",	  "kunion",			  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",				  "ALGkunion;"				  ]
[ 2017@0, "command",	  "algebra",	  "kunion",			  "(left:bat[:void,:any_2],right:bat[:oid,:any_2]):bat[:oid,:any_2] ",					  "ALGkunion;"				  ]
[ 2018@0, "command",	  "algebra",	  "kunion",			  "(left:bat[:oid,:any_2],right:bat[:void,:any_2]):bat[:oid,:any_2] ",					  "ALGkunion;"				  ]
[ 2019@0, "command",	  "algebra",	  "kdifference",		  "(left:bat[:oid,:any_2],right:bat[:void,:any]):bat[:oid,:any_2] ",					  "ALGkdiff;"				  ]
[ 2020@0, "command",	  "algebra",	  "kdifference",		  "(left:bat[:void,:any_2],right:bat[:oid,:any]):bat[:oid,:any_2] ",					  "ALGkdiff;"				  ]
[ 2021@0, "command",	  "algebra",	  "kdifference",		  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any]):bat[:any_1,:any_2] ",				  "ALGkdiff;"				  ]
[ 2022@0, "command",	  "algebra",	  "kintersect",			  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any]):bat[:any_1,:any_2] ",				  "ALGsemijoin;"			  ]
[ 2023@0, "command",	  "algebra",	  "kunique",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",								  "ALGkunique;"				  ]
[ 2024@0, "command",	  "algebra",	  "like",			  "(b:bat[:any_1,:str],substr:str):bat[:any_1,:str] ",							  "ALGlike;"				  ]
[ 2025@0, "command",	  "algebra",	  "merge",			  "(b:bat[:oid,:oid]):bat[:lng,:oid] ",									  "ALGmerge;"				  ]
[ 2026@0, "command",	  "algebra",	  "markH",			  "(b:bat[:void,:any_2],base:oid):bat[:void,:oid] ",							  "ALGmarkHead;"			  ]
[ 2027@0, "command",	  "algebra",	  "markH",			  "(b:bat[:any_1,:any_2],base:oid):bat[:void,:any_2] ",							  "ALGmarkHead;"			  ]
[ 2028@0, "command",	  "algebra",	  "markH",			  "(b:bat[:void,:any_2]):bat[:void,:oid] ",								  "ALGmarkHead_default;"		  ]
[ 2029@0, "command",	  "algebra",	  "markH",			  "(b:bat[:any_1,:any_2]):bat[:void,:any_2] ",								  "ALGmarkHead_default;"		  ]
[ 2030@0, "command",	  "algebra",	  "markT",			  "(b:bat[:void,:any_1]):bat[:oid,:void] ",								  "ALGtmark_default;"			  ]
[ 2031@0, "command",	  "algebra",	  "markT",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:void] ",								  "ALGtmark_default;"			  ]
[ 2032@0, "command",	  "algebra",	  "markT",			  "(b:bat[:void,:any_2],base:oid):bat[:oid,:void] ",							  "ALGtmark;"				  ]
[ 2033@0, "command",	  "algebra",	  "markT",			  "(b:bat[:any_1,:any_2],base:oid):bat[:any_1,:void] ",							  "ALGtmark;"				  ]
[ 2034@0, "command",	  "algebra",	  "mergejoin",			  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",				  "ALGmergejoin;"			  ]
[ 2035@0, "command",	  "algebra",	  "number",			  "(b:bat[:any_1,:any]):bat[:any_1,:int] ",								  "ALGnumber;"				  ]
[ 2036@0, "command",	  "algebra",	  "outerjoin",			  "(outer:bat[:any_1,:any_2],inner:bat[:any_2,:any_3],estimate:lng):bat[:any_1,:any_3] ",		  "ALGouterjoinestimate;"		  ]
[ 2037@0, "command",	  "algebra",	  "outerjoin",			  "(outer:bat[:any_1,:void],inner:bat[:oid,:any_3]):bat[:any_1,:any_3] ",				  "ALGouterjoin;"			  ]
[ 2038@0, "command",	  "algebra",	  "outerjoin",			  "(outer:bat[:any_1,:oid],inner:bat[:void,:any_3]):bat[:any_1,:any_3] ",				  "ALGouterjoin;"			  ]
[ 2039@0, "command",	  "algebra",	  "outerjoin",			  "(outer:bat[:any_1,:any_2],inner:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",				  "ALGouterjoin;"			  ]
[ 2040@0, "pattern",	  "algebra",	  "project",			  "(b:bat[:any_1,:any_3],val:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",					  "CMDBBPproject;"			  ]
[ 2041@0, "pattern",	  "algebra",	  "project",			  "(b:bat[:any_1,:any_3],val:any_2):bat[:any_1,:any_2] ",						  "CMDBBPproject;"			  ]
[ 2042@0, "command",	  "algebra",	  "project",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:void] ",								  "CMDBBPprojectNil;"			  ]
[ 2043@0, "command",	  "algebra",	  "position",			  "(b:bat[:any_1,:any_2],val:any_1,tval:any_2):int ",							  "ALGpositionBUN;"			  ]
[ 2044@0, "command",	  "algebra",	  "position",			  "(b:bat[:any_1,:any_2],v:any_1):int ",								  "ALGposition;"			  ]
[ 2045@0, "command",	  "algebra",	  "revert",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",								  "ALGrevert;"				  ]
[ 2046@0, "command",	  "algebra",	  "split",			  "(b:bat[:lng,:oid]):bat[:oid,:oid] ",									  "ALGsplit;"				  ]
[ 2047@0, "command",	  "algebra",	  "sunion",			  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",				  "ALGsunion;"				  ]
[ 2048@0, "command",	  "algebra",	  "sdifference",		  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",				  "ALGsdiff;"				  ]
[ 2049@0, "command",	  "algebra",	  "semijoin",			  "(left:bat[:oid,:any_2],right:bat[:void,:any]):bat[:oid,:any_2] ",					  "ALGsemijoin;"			  ]
[ 2050@0, "command",	  "algebra",	  "semijoin",			  "(left:bat[:void,:any_2],right:bat[:oid,:any]):bat[:oid,:any_2] ",					  "ALGsemijoin;"			  ]
[ 2051@0, "command",	  "algebra",	  "semijoin",			  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any]):bat[:any_1,:any_2] ",				  "ALGsemijoin;"			  ]
[ 2052@0, "command",	  "algebra",	  "sintersect",			  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",				  "ALGsintersect;"			  ]
[ 2053@0, "command",	  "algebra",	  "sunique",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",								  "ALGsunique;"				  ]
[ 2054@0, "command",	  "algebra",	  "sortTH",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",								  "ALGthsort;"				  ]
[ 2055@0, "command",	  "algebra",	  "sortHT",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",								  "ALGhtsort;"				  ]
[ 2056@0, "command",	  "algebra",	  "sort",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",								  "ALGtsort;"				  ]
[ 2057@0, "command",	  "algebra",	  "sortHead",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",								  "ALGhsort;"				  ]
[ 2058@0, "command",	  "algebra",	  "sample",			  "(b:bat[:any_1,:any_2],num:int):bat[:any_1,:any_2] ",							  "ALGsample;"				  ]
[ 2059@0, "command",	  "algebra",	  "slice",			  "(b:bat[:any_1,:any_2],x:int,y:int):bat[:any_1,:any_2] ",						  "ALGslice_int;"			  ]
[ 2060@0, "command",	  "algebra",	  "slice",			  "(b:bat[:any_1,:any_2],x:lng,y:lng):bat[:any_1,:any_2] ",						  "ALGslice;"				  ]
[ 2061@0, "command",	  "algebra",	  "selectH",			  "(b:bat[:any_1,:any_2],value:any_1):bat[:any_1,:any_2] ",						  "ALGselect1Head;"			  ]
[ 2062@0, "command",	  "algebra",	  "selectH",			  "(b:bat[:any_1,:any_2],low:any_1,high:any_1,li:bit,hi:bit):bat[:any_1,:any_2] ",			  "ALGselectInclusiveHead;"		  ]
[ 2063@0, "command",	  "algebra",	  "selectH",			  "(b:bat[:any_1,:any_2],low:any_1,high:any_1):bat[:any_1,:any_2] ",					  "ALGselectHead;"			  ]
[ 2064@0, "command",	  "algebra",	  "select",			  "(b:bat[:any_1,:any_2],value:any_2):bat[:any_1,:any_2] ",						  "ALGselect1;"				  ]
[ 2065@0, "command",	  "algebra",	  "select",			  "(b:bat[:any_1,:any_2],low:any_2,high:any_2,li:bit,hi:bit):bat[:any_1,:any_2] ",			  "ALGselectInclusive;"			  ]
[ 2066@0, "command",	  "algebra",	  "select",			  "(b:bat[:any_1,:any_2],low:any_2,high:any_2):bat[:any_1,:any_2] ",					  "ALGselect;"				  ]
[ 2067@0, "command",	  "algebra",	  "thetajoin",			  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3],opname:int,estimate:lng):bat[:any_1,:any_3] ",	  "ALGthetajoinEstimate;"		  ]
[ 2068@0, "command",	  "algebra",	  "thetajoin",			  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3],opname:int):bat[:any_1,:any_3] ",			  "ALGthetajoin;"			  ]
[ 2069@0, "command",	  "algebra",	  "tunique",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",								  "ALGtunique;"				  ]
[ 2070@0, "command",	  "algebra",	  "topN",			  "(b:bat[:any_1,:any_2],top:lng):bat[:any_1,:any_2] ",							  "ALGtopN;"				  ]
[ 2071@0, "command",	  "algebra",	  "uhashsplit",			  "(b:bat[:any_1,:any_2],buckets:int):bat[:int,:BAT] ",							  "ALGuhashsplit;"			  ]
[ 2072@0, "command",	  "algebra",	  "union",			  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",				  "ALGsunion;"				  ]
[ 2073@0, "command",	  "algebra",	  "unique",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",								  "ALGsunique;"				  ]
[ 2074@0, "command",	  "algebra",	  "uselect",			  "(b:bat[:any_1,:any_2],value:any_2):bat[:any_1,:void] ",						  "ALGuselect1;"			  ]
[ 2075@0, "command",	  "algebra",	  "uselect",			  "(b:bat[:any_1,:any_2],low:any_2,high:any_2):bat[:any_1,:void] ",					  "ALGuselect;"				  ]
[ 2076@0, "command",	  "algebra",	  "uselect",			  "(b:bat[:any_1,:any_2],low:any_2,high:any_2,li:bit,hi:bit):bat[:any_1,:void] ",			  "ALGuselectInclusive;"		  ]
[ 2077@0, "command",	  "aggr",	  "avg",			  "(b:bat[:void,:dbl],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:oid,:dbl] ",				  "AX3aggrX3_avg3_dbl;"			  ]
[ 2078@0, "command",	  "aggr",	  "avg",			  "(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",				  "AX3aggrX3_avg3_dbl;"			  ]
[ 2079@0, "command",	  "aggr",	  "avg",			  "(b:bat[:void,:dbl],e:bat[:void,:any_1]):bat[:oid,:dbl] ",						  "AX3aggrX3_avg_dbl;"			  ]
[ 2080@0, "command",	  "aggr",	  "avg",			  "(b:bat[:oid,:dbl],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",						  "AX3aggrX3_avg_dbl;"			  ]
[ 2081@0, "command",	  "aggr",	  "avg",			  "(b:bat[:void,:flt],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:oid,:dbl] ",				  "AX3aggrX3_avg3_flt;"			  ]
[ 2082@0, "command",	  "aggr",	  "avg",			  "(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",				  "AX3aggrX3_avg3_flt;"			  ]
[ 2083@0, "command",	  "aggr",	  "avg",			  "(b:bat[:void,:flt],e:bat[:void,:any_1]):bat[:oid,:dbl] ",						  "AX3aggrX3_avg_flt;"			  ]
[ 2084@0, "command",	  "aggr",	  "avg",			  "(b:bat[:oid,:flt],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",						  "AX3aggrX3_avg_flt;"			  ]
[ 2085@0, "command",	  "aggr",	  "avg",			  "(b:bat[:void,:lng],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:oid,:dbl] ",				  "AX3aggrX3_avg3_lng;"			  ]
[ 2086@0, "command",	  "aggr",	  "avg",			  "(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",				  "AX3aggrX3_avg3_lng;"			  ]
[ 2087@0, "command",	  "aggr",	  "avg",			  "(b:bat[:void,:lng],e:bat[:void,:any_1]):bat[:oid,:dbl] ",						  "AX3aggrX3_avg_lng;"			  ]
[ 2088@0, "command",	  "aggr",	  "avg",			  "(b:bat[:oid,:lng],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",						  "AX3aggrX3_avg_lng;"			  ]
[ 2089@0, "command",	  "aggr",	  "avg",			  "(b:bat[:void,:int],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:oid,:dbl] ",				  "AX3aggrX3_avg3_int;"			  ]
[ 2090@0, "command",	  "aggr",	  "avg",			  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",				  "AX3aggrX3_avg3_int;"			  ]
[ 2091@0, "command",	  "aggr",	  "avg",			  "(b:bat[:void,:int],e:bat[:void,:any_1]):bat[:oid,:dbl] ",						  "AX3aggrX3_avg_int;"			  ]
[ 2092@0, "command",	  "aggr",	  "avg",			  "(b:bat[:oid,:int],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",						  "AX3aggrX3_avg_int;"			  ]
[ 2093@0, "command",	  "aggr",	  "avg",			  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:oid,:dbl] ",				  "AX3aggrX3_avg3_sht;"			  ]
[ 2094@0, "command",	  "aggr",	  "avg",			  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",				  "AX3aggrX3_avg3_sht;"			  ]
[ 2095@0, "command",	  "aggr",	  "avg",			  "(b:bat[:void,:sht],e:bat[:void,:any_1]):bat[:oid,:dbl] ",						  "AX3aggrX3_avg_sht;"			  ]
[ 2096@0, "command",	  "aggr",	  "avg",			  "(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",						  "AX3aggrX3_avg_sht;"			  ]
[ 2097@0, "command",	  "aggr",	  "avg",			  "(b:bat[:any_1,:dbl]):dbl ",										  "ALGavg_dbl;"				  ]
[ 2098@0, "command",	  "aggr",	  "avg",			  "(b:bat[:any_1,:flt]):dbl ",										  "ALGavg_flt;"				  ]
[ 2099@0, "command",	  "aggr",	  "avg",			  "(b:bat[:any_1,:lng]):dbl ",										  "ALGavg_lng;"				  ]
[ 2100@0, "command",	  "aggr",	  "avg",			  "(b:bat[:any_1,:int]):dbl ",										  "ALGavg_int;"				  ]
[ 2101@0, "command",	  "aggr",	  "avg",			  "(b:bat[:any_1,:sht]):dbl ",										  "ALGavg_sht;"				  ]
[ 2102@0, "command",	  "aggr",	  "count_no_nil",		  "(b:bat[:void,:any_1],g:bat[:void,:oid],e:bat[:void,:any_2]):bat[:oid,:int] ",			  "AX3count_no_nil3;"			  ]
[ 2103@0, "command",	  "aggr",	  "count_no_nil",		  "(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:int] ",				  "AX3count_no_nil3;"			  ]
[ 2104@0, "command",	  "aggr",	  "count",			  "(b:bat[:void,:any_1],g:bat[:void,:oid],e:bat[:void,:any_2]):bat[:void,:int] ",			  "AX3aggrX3_count3Nils;"		  ]
[ 2105@0, "command",	  "aggr",	  "count",			  "(b:bat[:void,:any_1],g:bat[:oid,:oid],e:bat[:void,:any_2]):bat[:void,:int] ",			  "AX3aggrX3_count3Nils;"		  ]
[ 2106@0, "command",	  "aggr",	  "count",			  "(b:bat[:void,:any_1],g:bat[:void,:oid],e:bat[:oid,:any_2]):bat[:void,:int] ",			  "AX3aggrX3_count3Nils;"		  ]
[ 2107@0, "command",	  "aggr",	  "count",			  "(b:bat[:void,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:void,:int] ",				  "AX3aggrX3_count3Nils;"		  ]
[ 2108@0, "command",	  "aggr",	  "count",			  "(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:int] ",				  "AX3aggrX3_count3Nils;"		  ]
[ 2109@0, "command",	  "aggr",	  "count_no_nil",		  "(b:bat[:void,:any_1],e:bat[:void,:any_1]):bat[:oid,:int] ",						  "AX3count_no_nil2;"			  ]
[ 2110@0, "command",	  "aggr",	  "count_no_nil",		  "(b:bat[:oid,:any_1],e:bat[:oid,:any_1]):bat[:oid,:int] ",						  "AX3count_no_nil2;"			  ]
[ 2111@0, "command",	  "aggr",	  "count",			  "(b:bat[:void,:any_1],e:bat[:void,:any_2]):bat[:void,:int] ",						  "AX3aggrX3_count2Nils;"		  ]
[ 2112@0, "command",	  "aggr",	  "count",			  "(b:bat[:void,:any_1],e:bat[:oid,:any_2]):bat[:void,:int] ",						  "AX3aggrX3_count2Nils;"		  ]
[ 2113@0, "command",	  "aggr",	  "count",			  "(b:bat[:void,:any_1],g:bat[:void,:oid],e:bat[:void,:any_2],nonils:bit):bat[:void,:int] ", "AX3aggrX3_count3;"			  ]
[ 2114@0, "command",	  "aggr",	  "count",			  "(b:bat[:void,:any_1],g:bat[:void,:oid],e:bat[:oid,:any_2],nonils:bit):bat[:void,:int] ",		  "AX3aggrX3_count3;"			  ]
[ 2115@0, "command",	  "aggr",	  "count",			  "(b:bat[:void,:any_1],g:bat[:void,:oid],e:bat[:void,:any_2],nonils:bit):bat[:void,:int] ",		  "AX3aggrX3_count3;"			  ]
[ 2116@0, "command",	  "aggr",	  "count",			  "(b:bat[:oid,:any_1],e:bat[:oid,:any_2],ignorenils:bit):bat[:oid,:int] ",				  "AX3aggrX3_count;"			  ]
[ 2117@0, "command",	  "aggr",	  "count",			  "(b:bat[:void,:any_1],e:bat[:void,:any_2],ignorenils:bit):bat[:void,:int] ",				  "AX3aggrX3_count;"			  ]
[ 2118@0, "command",	  "aggr",	  "cardinality",		  "(b:bat[:any_1,:any_2]):lng ",									  "ALGcard;"				  ]
[ 2119@0, "command",	  "aggr",	  "count_no_nil",		  "(b:bat[:any_1,:any_2]):int ",									  "ALGcount_no_nil;"			  ]
[ 2120@0, "command",	  "aggr",	  "count",			  "(b:bat[:any_1,:any],ignore_nils:bit):int ",								  "ALGcount_nil;"			  ]
[ 2121@0, "command",	  "aggr",	  "count",			  "(b:bat[:any_1,:any]):int ",										  "ALGcount_bat;"			  ]
[ 2122@0, "command",	  "aggr",	  "histogram",			  "(b:bat[:any_1,:any_2]):bat[:any_2,:int] ",								  "ALGhistogram;"			  ]
[ 2123@0, "command",	  "aggr",	  "max",			  "(b:bat[:void,:any_1],g:bat[:void,:oid],e:bat[:void,:any_2]):bat[:void,:any_1] ",			  "AX3aggrX3_max3;"			  ]
[ 2124@0, "command",	  "aggr",	  "max",			  "(b:bat[:void,:any_1],g:bat[:void,:oid],e:bat[:oid,:any_2]):bat[:void,:any_1] ",			  "AX3aggrX3_max3;"			  ]
[ 2125@0, "command",	  "aggr",	  "min",			  "(b:bat[:void,:any_1],g:bat[:void,:oid],e:bat[:void,:any_2]):bat[:void,:any_1] ",			  "AX3aggrX3_min3;"			  ]
[ 2126@0, "command",	  "aggr",	  "min",			  "(b:bat[:void,:any_1],g:bat[:void,:oid],e:bat[:oid,:any_2]):bat[:void,:any_1] ",			  "AX3aggrX3_min3;"			  ]
[ 2127@0, "command",	  "aggr",	  "max",			  "(b:bat[:oid,:any_1],e:bat[:oid,:any_2]):bat[:oid,:any_1] ",						  "AX3aggrX3_max;"			  ]
[ 2128@0, "command",	  "aggr",	  "max",			  "(b:bat[:void,:any_1],e:bat[:void,:any_2]):bat[:void,:any_1] ",					  "AX3aggrX3_max;"			  ]
[ 2129@0, "command",	  "aggr",	  "min",			  "(b:bat[:oid,:any_1],e:bat[:oid,:any_2]):bat[:oid,:any_1] ",						  "AX3aggrX3_min;"			  ]
[ 2130@0, "command",	  "aggr",	  "min",			  "(b:bat[:void,:any_1],e:bat[:void,:any_2]):bat[:void,:any_1] ",					  "AX3aggrX3_min;"			  ]
[ 2131@0, "command",	  "aggr",	  "min",			  "(b:bat[:any_1,:lng]):lng ",										  "ALGmin_lng;"				  ]
[ 2132@0, "command",	  "aggr",	  "min",			  "(b:bat[:any_1,:dbl]):dbl ",										  "ALGmin_dbl;"				  ]
[ 2133@0, "command",	  "aggr",	  "min",			  "(b:bat[:any_1,:flt]):flt ",										  "ALGmin_flt;"				  ]
[ 2134@0, "command",	  "aggr",	  "min",			  "(b:bat[:any_1,:int]):int ",										  "ALGmin_int;"				  ]
[ 2135@0, "command",	  "aggr",	  "min",			  "(b:bat[:any_1,:sht]):sht ",										  "ALGmin_sht;"				  ]
[ 2136@0, "command",	  "aggr",	  "max",			  "(b:bat[:any_1,:lng]):lng ",										  "ALGmax_lng;"				  ]
[ 2137@0, "command",	  "aggr",	  "max",			  "(b:bat[:any_1,:dbl]):dbl ",										  "ALGmax_dbl;"				  ]
[ 2138@0, "command",	  "aggr",	  "max",			  "(b:bat[:any_1,:flt]):flt ",										  "ALGmax_flt;"				  ]
[ 2139@0, "command",	  "aggr",	  "max",			  "(b:bat[:any_1,:int]):int ",										  "ALGmax_int;"				  ]
[ 2140@0, "command",	  "aggr",	  "max",			  "(b:bat[:any_1,:sht]):sht ",										  "ALGmax_sht;"				  ]
[ 2141@0, "command",	  "aggr",	  "max",			  "(b:bat[:any_1,:any_2]):any_2 ",									  "ALGmaxany;"				  ]
[ 2142@0, "command",	  "aggr",	  "min",			  "(b:bat[:any_1,:any_2]):any_2 ",									  "ALGminany;"				  ]
[ 2143@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:dbl],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:dbl] ",				  "AX3aggrX3_prod3_dbl_dbl;"		  ]
[ 2144@0, "command",	  "aggr",	  "product",			  "(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",				  "AX3aggrX3_prod3_dbl_dbl;"		  ]
[ 2145@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:dbl],e:bat[:oid,:any_1]):bat[:void,:dbl] ",						  "AX3aggrX3_prod3_dbl_dbl;"		  ]
[ 2146@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:flt],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:dbl] ",				  "AX3aggrX3_prod3_flt_dbl;"		  ]
[ 2147@0, "command",	  "aggr",	  "product",			  "(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",				  "AX3aggrX3_prod3_flt_dbl;"		  ]
[ 2148@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:flt],e:bat[:oid,:any_1]):bat[:void,:dbl] ",						  "AX3aggrX3_prod3_flt_dbl;"		  ]
[ 2149@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:flt],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:flt] ",				  "AX3aggrX3_prod3_flt_flt;"		  ]
[ 2150@0, "command",	  "aggr",	  "product",			  "(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:flt] ",				  "AX3aggrX3_prod3_flt_flt;"		  ]
[ 2151@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:flt],e:bat[:oid,:any_1]):bat[:void,:flt] ",						  "AX3aggrX3_prod3_flt_flt;"		  ]
[ 2152@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:lng],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:lng] ",				  "AX3aggrX3_prod3_lng_lng;"		  ]
[ 2153@0, "command",	  "aggr",	  "product",			  "(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",				  "AX3aggrX3_prod3_lng_lng;"		  ]
[ 2154@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:lng],e:bat[:oid,:any_1]):bat[:void,:lng] ",						  "AX3aggrX3_prod3_lng_lng;"		  ]
[ 2155@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:int],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:lng] ",				  "AX3aggrX3_prod3_int_lng;"		  ]
[ 2156@0, "command",	  "aggr",	  "product",			  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",				  "AX3aggrX3_prod3_int_lng;"		  ]
[ 2157@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:int],e:bat[:oid,:any_1]):bat[:void,:lng] ",						  "AX3aggrX3_prod3_int_lng;"		  ]
[ 2158@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:oid],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:int] ",				  "AX3aggrX3_prod3_oid_int;"		  ]
[ 2159@0, "command",	  "aggr",	  "product",			  "(b:bat[:oid,:oid],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] ",				  "AX3aggrX3_prod3_oid_int;"		  ]
[ 2160@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:int] ",						  "AX3aggrX3_prod3_oid_int;"		  ]
[ 2161@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:int],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:int] ",				  "AX3aggrX3_prod3_int_int;"		  ]
[ 2162@0, "command",	  "aggr",	  "product",			  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] ",				  "AX3aggrX3_prod3_int_int;"		  ]
[ 2163@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:int],e:bat[:oid,:any_1]):bat[:void,:int] ",						  "AX3aggrX3_prod3_int_int;"		  ]
[ 2164@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:lng] ",				  "AX3aggrX3_prod3_sht_lng;"		  ]
[ 2165@0, "command",	  "aggr",	  "product",			  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",				  "AX3aggrX3_prod3_sht_lng;"		  ]
[ 2166@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:sht],e:bat[:oid,:any_1]):bat[:void,:lng] ",						  "AX3aggrX3_prod3_sht_lng;"		  ]
[ 2167@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:int] ",				  "AX3aggrX3_prod3_sht_int;"		  ]
[ 2168@0, "command",	  "aggr",	  "product",			  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] ",				  "AX3aggrX3_prod3_sht_int;"		  ]
[ 2169@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:sht],e:bat[:oid,:any_1]):bat[:void,:int] ",						  "AX3aggrX3_prod3_sht_int;"		  ]
[ 2170@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:sht] ",				  "AX3aggrX3_prod3_sht_sht;"		  ]
[ 2171@0, "command",	  "aggr",	  "product",			  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:sht] ",				  "AX3aggrX3_prod3_sht_sht;"		  ]
[ 2172@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:sht],e:bat[:oid,:any_1]):bat[:void,:sht] ",						  "AX3aggrX3_prod3_sht_sht;"		  ]
[ 2173@0, "command",	  "aggr",	  "product",			  "(b:bat[:any_1,:dbl]):dbl ",										  "ALGprod_dbl_dbl;"			  ]
[ 2174@0, "command",	  "aggr",	  "product",			  "(b:bat[:any_1,:flt]):dbl ",										  "ALGprod_flt_dbl;"			  ]
[ 2175@0, "command",	  "aggr",	  "product",			  "(b:bat[:any_1,:flt]):flt ",										  "ALGprod_flt_flt;"			  ]
[ 2176@0, "command",	  "aggr",	  "product",			  "(b:bat[:any_1,:lng]):lng ",										  "ALGprod_lng_lng;"			  ]
[ 2177@0, "command",	  "aggr",	  "product",			  "(b:bat[:any_1,:int]):lng ",										  "ALGprod_int_lng;"			  ]
[ 2178@0, "command",	  "aggr",	  "product",			  "(b:bat[:any_1,:int]):int ",										  "ALGprod_int_int;"			  ]
[ 2179@0, "command",	  "aggr",	  "product",			  "(b:bat[:any_1,:sht]):lng ",										  "ALGprod_sht_lng;"			  ]
[ 2180@0, "command",	  "aggr",	  "product",			  "(b:bat[:any_1,:sht]):int ",										  "ALGprod_sht_int;"			  ]
[ 2181@0, "command",	  "aggr",	  "product",			  "(b:bat[:any_1,:sht]):sht ",										  "ALGprod_sht_sht;"			  ]
[ 2182@0, "command",	  "aggr",	  "size",			  "(b:bat[:void,:bit],e:bat[:void,:any_1]):bat[:void,:int] ",						  "AX3aggrX3_size;"			  ]
[ 2183@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:dbl],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:dbl] ",				  "AX3aggrX3_sum3_dbl_dbl;"		  ]
[ 2184@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:dbl],g:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:dbl] ",				  "AX3aggrX3_sum3_dbl_dbl;"		  ]
[ 2185@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:dbl],e:bat[:void,:any_1]):bat[:void,:dbl] ",						  "AX3aggrX3_sum_dbl_dbl;"		  ]
[ 2186@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:flt],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:dbl] ",				  "AX3aggrX3_sum3_flt_dbl;"		  ]
[ 2187@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:flt],g:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:dbl] ",				  "AX3aggrX3_sum3_flt_dbl;"		  ]
[ 2188@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:flt],e:bat[:void,:any_1]):bat[:void,:dbl] ",						  "AX3aggrX3_sum_flt_dbl;"		  ]
[ 2189@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:flt],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:flt] ",				  "AX3aggrX3_sum3_flt_flt;"		  ]
[ 2190@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:flt],g:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:flt] ",				  "AX3aggrX3_sum3_flt_flt;"		  ]
[ 2191@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:flt],e:bat[:void,:any_1]):bat[:void,:flt] ",						  "AX3aggrX3_sum_flt_flt;"		  ]
[ 2192@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:lng],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:lng] ",				  "AX3aggrX3_sum3_lng_lng;"		  ]
[ 2193@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:lng],g:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:lng] ",				  "AX3aggrX3_sum3_lng_lng;"		  ]
[ 2194@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:lng],e:bat[:void,:any_1]):bat[:void,:lng] ",						  "AX3aggrX3_sum_lng_lng;"		  ]
[ 2195@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:int],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:lng] ",				  "AX3aggrX3_sum3_int_lng;"		  ]
[ 2196@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:int],g:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:lng] ",				  "AX3aggrX3_sum3_int_lng;"		  ]
[ 2197@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:int],e:bat[:void,:any_1]):bat[:void,:lng] ",						  "AX3aggrX3_sum_int_lng;"		  ]
[ 2198@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:oid],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:int] ",				  "AX3aggrX3_sum3_oid_int;"		  ]
[ 2199@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:oid],g:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:int] ",				  "AX3aggrX3_sum3_oid_int;"		  ]
[ 2200@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:int] ",						  "AX3aggrX3_sum_oid_int;"		  ]
[ 2201@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:int],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:int] ",				  "AX3aggrX3_sum3_int_int;"		  ]
[ 2202@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:int],g:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:int] ",				  "AX3aggrX3_sum3_int_int;"		  ]
[ 2203@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:int],e:bat[:void,:any_1]):bat[:void,:int] ",						  "AX3aggrX3_sum_int_int;"		  ]
[ 2204@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:lng] ",				  "AX3aggrX3_sum3_sht_lng;"		  ]
[ 2205@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:lng] ",				  "AX3aggrX3_sum3_sht_lng;"		  ]
[ 2206@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:sht],e:bat[:void,:any_1]):bat[:void,:lng] ",						  "AX3aggrX3_sum_sht_lng;"		  ]
[ 2207@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:int] ",				  "AX3aggrX3_sum3_sht_int;"		  ]
[ 2208@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:int] ",				  "AX3aggrX3_sum3_sht_int;"		  ]
[ 2209@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:sht],e:bat[:void,:any_1]):bat[:void,:int] ",						  "AX3aggrX3_sum_sht_int;"		  ]
[ 2210@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:sht] ",				  "AX3aggrX3_sum3_sht_sht;"		  ]
[ 2211@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:sht] ",				  "AX3aggrX3_sum3_sht_sht;"		  ]
[ 2212@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:sht],e:bat[:void,:any_1]):bat[:void,:sht] ",						  "AX3aggrX3_sum_sht_sht;"		  ]
[ 2213@0, "command",	  "aggr",	  "sum",			  "(b:bat[:any_1,:dbl]):dbl ",										  "ALGsum_dbl_dbl;"			  ]
[ 2214@0, "command",	  "aggr",	  "sum",			  "(b:bat[:any_1,:flt]):dbl ",										  "ALGsum_flt_dbl;"			  ]
[ 2215@0, "command",	  "aggr",	  "sum",			  "(b:bat[:any_1,:flt]):flt ",										  "ALGsum_flt_flt;"			  ]
[ 2216@0, "command",	  "aggr",	  "sum",			  "(b:bat[:any_1,:lng]):lng ",										  "ALGsum_lng_lng;"			  ]
[ 2217@0, "command",	  "aggr",	  "sum",			  "(b:bat[:any_1,:int]):lng ",										  "ALGsum_int_lng;"			  ]
[ 2218@0, "command",	  "aggr",	  "sum",			  "(b:bat[:any_1,:int]):int ",										  "ALGsum_int_int;"			  ]
[ 2219@0, "command",	  "aggr",	  "sum",			  "(b:bat[:any_1,:sht]):lng ",										  "ALGsum_sht_lng;"			  ]
[ 2220@0, "command",	  "aggr",	  "sum",			  "(b:bat[:any_1,:sht]):int ",										  "ALGsum_sht_int;"			  ]
[ 2221@0, "command",	  "aggr",	  "sum",			  "(b:bat[:any_1,:sht]):sht ",										  "ALGsum_sht_sht;"			  ]
[ 2222@0, "command",	  "pcre",	  "compile",			  "(pat:str):pcre ",											  "PCREcompile_wrap;"			  ]
[ 2223@0, "command",	  "pcre",	  "#del",			  "():void ",												  "pcre_del;"				  ]
[ 2224@0, "command",	  "pcre",	  "#fromstr",			  "():void ",												  "pcre_fromstr;"			  ]
[ 2225@0, "command",	  "pcre",	  "#heap",			  "():void ",												  "pcre_heap;"				  ]
[ 2226@0, "command",	  "pcre",	  "#hash",			  "():void ",												  "pcre_hash;"				  ]
[ 2227@0, "command",	  "pcre",	  "like",			  "(s:bat[:any_1,:str],pat:str,esc:str):bat[:any_1,:bit] ",						  "PCRElike_uselect_pcre;"		  ]
[ 2228@0, "command",	  "pcre",	  "like",			  "(s:str,pat:str):bit ",										  "PCRElike2;"				  ]
[ 2229@0, "command",	  "pcre",	  "like",			  "(s:str,pat:str,esc:str):bit ",									  "PCRElike3;"				  ]
[ 2230@0, "command",	  "pcre",	  "#length",			  "():void ",												  "pcre_length;"			  ]
[ 2231@0, "command",	  "pcre",	  "match",			  "(s:str,pat:str):bit ",										  "PCREmatch;"				  ]
[ 2232@0, "command",	  "pcre",	  "match",			  "(pat:pcre,s:str):bit ",										  "PCREexec_wrap;"			  ]
[ 2233@0, "command",	  "pcre",	  "null",			  "():void ",												  "pcre_null;"				  ]
[ 2234@0, "command",	  "pcre",	  "#nequal",			  "():void ",												  "pcre_nequal;"			  ]
[ 2235@0, "pattern",	  "pcre",	  "prelude",			  "():void ",												  "pcre_init;"				  ]
[ 2236@0, "command",	  "pcre",	  "#put",			  "():void ",												  "pcre_put;"				  ]
[ 2237@0, "command",	  "pcre",	  "replace",			  "(orig:bat[:any_1,:str],pat:str,repl:str,flag:str):bat[:any_1,:str] ",				  "PCREreplace_bat_wrap;"		  ]
[ 2238@0, "command",	  "pcre",	  "replace",			  "(origin:str,pat:str,repl:str,flags:str):str ",							  "PCREreplace_wrap;"			  ]
[ 2239@0, "command",	  "pcre",	  "sql2pcre",			  "(pat:str,esc:str):str ",										  "PCREsql2pcre;"			  ]
[ 2240@0, "command",	  "pcre",	  "select",			  "(pat:str,strs:bat[:any_1,:str]):bat[:any_1,:str] ",							  "PCREselect;"				  ]
[ 2241@0, "command",	  "pcre",	  "#tostr",			  "():void ",												  "pcre_tostr;"				  ]
[ 2242@0, "command",	  "pcre",	  "uselect",			  "(pat:str,strs:bat[:any_1,:str]):bat[:any_1,:void] ",							  "PCREuselect;"			  ]
[ 2243@0, "command",	  "bat",	  "append",			  "(i:bat[:void,:any_1],u:any_1):void ",								  "BKCappend_val_wrap;"			  ]
[ 2244@0, "command",	  "bat",	  "append",			  "(i:bat[:oid,:any_1],u:any_1):void ",									  "BKCappend_val_wrap;"			  ]
[ 2245@0, "command",	  "bat",	  "append",			  "(i:bat[:void,:any_1],u:bat[:oid,:any_1]):void ",							  "BKCappend_wrap;"			  ]
[ 2246@0, "command",	  "bat",	  "append",			  "(i:bat[:void,:any_1],u:bat[:void,:any_1]):void ",							  "BKCappend_wrap;"			  ]
[ 2247@0, "command",	  "bat",	  "append",			  "(i:bat[:oid,:any_1],u:bat[:oid,:any_1]):void ",							  "BKCappend_wrap;"			  ]
[ 2248@0, "command",	  "bat",	  "delete",			  "(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2]):void ",						  "BKCdelete_bat_bun;"			  ]
[ 2249@0, "command",	  "bat",	  "delete",			  "(b:bat[:any_1,:any_2]):void ",									  "BKCdelete_all;"			  ]
[ 2250@0, "command",	  "bat",	  "delete",			  "(b:bat[:void,:any_2],h:oid):void ",									  "BKCdelete;"				  ]
[ 2251@0, "command",	  "bat",	  "delete",			  "(b:bat[:any_1,:any_2],h:any_1):void ",								  "BKCdelete;"				  ]
[ 2252@0, "command",	  "bat",	  "delete",			  "(b:bat[:void,:any_2],h:oid,t:any_2):void ",								  "BKCdelete_bun;"			  ]
[ 2253@0, "command",	  "bat",	  "delete",			  "(b:bat[:any_1,:any_2],h:any_1,t:any_2):void ",							  "BKCdelete_bun;"			  ]
[ 2254@0, "command",	  "bat",	  "getHeat",			  "(b:bat[:any_1,:any_2]):lng ",									  "BKCheat;"				  ]
[ 2255@0, "command",	  "bat",	  "getName",			  "(b:bat[:any_1,:any_2]):str ",									  "BKCgetBBPname;"			  ]
[ 2256@0, "command",	  "bat",	  "getDelta",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",								  "BKCgetDelta;"			  ]
[ 2257@0, "command",	  "bat",	  "getAlpha",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",								  "BKCgetAlpha;"			  ]
[ 2258@0, "command",	  "bat",	  "getBatSize",			  "(b:bat[:any_1,:any_2]):lng ",									  "BKCbatsize;"				  ]
[ 2259@0, "command",	  "bat",	  "getSequenceBase",		  "(b:bat[:oid,:any_1]):oid ",										  "BKCgetSequenceBase;"			  ]
[ 2260@0, "command",	  "bat",	  "getSequenceBase",		  "(b:bat[:void,:any_1]):oid ",										  "BKCgetSequenceBase;"			  ]
[ 2261@0, "command",	  "bat",	  "getAccess",			  "(b:bat[:any_1,:any_2]):str ",									  "BKCgetAccess;"			  ]
[ 2262@0, "command",	  "bat",	  "getRole",			  "(bid:bat[:any_1,:any_2]):str ",									  "BKCgetRole;"				  ]
[ 2263@0, "command",	  "bat",	  "getTailType",		  "(b:bat[:any_1,:any_2]):str ",									  "BKCgetTailType;"			  ]
[ 2264@0, "command",	  "bat",	  "getHeadType",		  "(b:bat[:any_1,:any_2]):str ",									  "BKCgetHeadType;"			  ]
[ 2265@0, "command",	  "bat",	  "getCapacity",		  "(b:bat[:any_1,:any_2]):lng ",									  "BKCgetCapacity;"			  ]
[ 2266@0, "command",	  "bat",	  "hasReadMode",		  "(b:bat[:any_1,:any_2]):bit ",									  "BKChasReadMode;"			  ]
[ 2267@0, "command",	  "bat",	  "hasWriteMode",		  "(b:bat[:any_1,:any_2]):bit ",									  "BKChasWriteMode;"			  ]
[ 2268@0, "command",	  "bat",	  "hasAppendMode",		  "(b:bat[:any_1,:any_2]):bit ",									  "BKChasAppendMode;"			  ]
[ 2269@0, "command",	  "bat",	  "isSynced",			  "(b1:bat[:any_1,:any_2],b2:bat[:any_3,:any_4]):bit ",							  "BKCisSynced;"			  ]
[ 2270@0, "command",	  "bat",	  "isCached",			  "(b:bat[:any_1,:any_2]):bit ",									  "BKCisCached;"			  ]
[ 2271@0, "command",	  "bat",	  "isPersistent",		  "(b:bat[:any_1,:any_2]):bit ",									  "BKCisPersistent;"			  ]
[ 2272@0, "command",	  "bat",	  "isTransient",		  "(b:bat[:any_1,:any_2]):bit ",									  "BKCisTransient;"			  ]
[ 2273@0, "command",	  "bat",	  "insert",			  "(b:bat[:void,:BAT],z:bat[:any_1,:any_2]):void ",							  "BKCinsert_void_bun;"			  ]
[ 2274@0, "command",	  "bat",	  "insert",			  "(b:bat[:any_1,:BAT],v:any_1,z:bat[:any_3,:any_4]):void ",						  "BKCinsert_bun;"			  ]
[ 2275@0, "command",	  "bat",	  "insert",			  "(b:bat[:void,:any_1],v:any_1):void ",								  "BKCinsert_void_bun;"			  ]
[ 2276@0, "command",	  "bat",	  "insert",			  "(b:bat[:oid,:str],h:oid,t:str):void ",								  "BKCinsert_bun_oid_str;"		  ]
[ 2277@0, "command",	  "bat",	  "insert",			  "(b:bat[:void,:str],h:oid,t:str):void ",								  "BKCinsert_bun_oid_str;"		  ]
[ 2278@0, "command",	  "bat",	  "insert",			  "(b:bat[:void,:any_2],h:oid,t:any_2):void ",								  "BKCinsert_bun_oid_any;"		  ]
[ 2279@0, "command",	  "bat",	  "insert",			  "(b:bat[:oid,:any_2],h:oid,t:any_2):void ",								  "BKCinsert_bun_oid_any;"		  ]
[ 2280@0, "command",	  "bat",	  "insert",			  "(b:bat[:int,:int],h:int,t:int):void ",								  "BKCinsert_bun_int_int;"		  ]
[ 2281@0, "command",	  "bat",	  "insert",			  "(b:bat[:any_1,:any_2],h:any_1,t:any_2):void ",							  "BKCinsert_bun;"			  ]
[ 2282@0, "command",	  "bat",	  "insert",			  "(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2]):void ",						  "BKCinsert_bat;"			  ]
[ 2283@0, "command",	  "bat",	  "insert",			  "(b:bat[:oid,:any_2],src:bat[:void,:any_2]):void ",							  "BKCinsert_bat;"			  ]
[ 2284@0, "command",	  "bat",	  "insert",			  "(b:bat[:void,:any_2],src:bat[:oid,:any_2]):void ",							  "BKCinsert_bat;"			  ]
[ 2285@0, "command",	  "bat",	  "insert",			  "(b:bat[:any_1,:oid],src:bat[:any_1,:void]):void ",							  "BKCinsert_bat;"			  ]
[ 2286@0, "command",	  "bat",	  "isSortedReverse",		  "(b:bat[:any_1,:any_2]):bit ",									  "BKCisSortedReverse;"			  ]
[ 2287@0, "command",	  "bat",	  "isSorted",			  "(b:bat[:any_1,:any_2]):bit ",									  "BKCisSorted;"			  ]
[ 2288@0, "command",	  "bat",	  "isaSet",			  "(b:bat[:any_1,:any_1]):bit ",									  "BKCisaSet;"				  ]
[ 2289@0, "command",	  "bat",	  "isaKey",			  "(b:bat[:any_1,:any_2]):bit ",									  "BKCgetKey;"				  ]
[ 2290@0, "command",	  "bat",	  "info",			  "(b:bat[:any_1,:any_2]):bat[:str,:str] ",								  "BKCinfo;"				  ]
[ 2291@0, "command",	  "bat",	  "load",			  "(name:str):bat[:any_1,:any_2] ",									  "BKCload;"				  ]
[ 2292@0, "command",	  "bat",	  "mirror",			  "(b:bat[:void,:any]):bat[:void,:void] ",								  "BKCmirror;"				  ]
[ 2293@0, "command",	  "bat",	  "mirror",			  "(b:bat[:any_1,:any]):bat[:any_1,:any_1] ",								  "BKCmirror;"				  ]
[ 2294@0, "command",	  "bat",	  "new",			  "(nme:str):bat[:any_1,:any_2] ",									  "CMDBATderivedByName;"		  ]
[ 2295@0, "pattern",	  "bat",	  "new",			  "(b:bat[:any_1,:any_2],size:lng):bat[:any_1,:any_2] ",						  "CMDBATnewDerived;"			  ]
[ 2296@0, "pattern",	  "bat",	  "new",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",								  "CMDBATnewDerived;"			  ]
[ 2297@0, "pattern",	  "bat",	  "new",			  "(ht:void,tt:any_2,size:lng):bat[:void,:any_2] ",							  "CMDBATnew;"				  ]
[ 2298@0, "pattern",	  "bat",	  "new",			  "(ht:void,tt:any_2,size:int):bat[:void,:any_2] ",							  "CMDBATnew;"				  ]
[ 2299@0, "pattern",	  "bat",	  "new",			  "(ht:any_1,tt:any_2,size:lng):bat[:any_1,:any_2] ",							  "CMDBATnew;"				  ]
[ 2300@0, "pattern",	  "bat",	  "new",			  "(ht:any_1,tt:any_2,size:int):bat[:any_1,:any_2] ",							  "CMDBATnewint;"			  ]
[ 2301@0, "pattern",	  "bat",	  "new",			  "(ht:any_1,tt:any_2):bat[:any_1,:any_2] ",								  "CMDBATnew;"				  ]
[ 2302@0, "pattern",	  "bat",	  "new",			  "(ht:any_1,tt:any_2,b:bat[:any_3,:any_4]):bat[:any_1,:any_2] ",					  "CMDBATclone;"			  ]
[ 2303@0, "pattern",	  "bat",	  "pack",			  "(h:oid,t:any_2):bat[:void,:any_2] ",									  "CMDbatpack;"				  ]
[ 2304@0, "pattern",	  "bat",	  "pack",			  "(h:any_1,t:any_2):bat[:any_1,:any_2] ",								  "CMDbatpack;"				  ]
[ 2305@0, "command",	  "bat",	  "replace",			  "(o:bat[:void,:any_1],d:bat[:oid,:any_1]):void ",							  "BKCbat_replace_oid_bat_wrap;"	  ]
[ 2306@0, "command",	  "bat",	  "replace",			  "(b:bat[:void,:any_2],h:oid,t:any_2):void ",								  "BKCreplace_bun;"			  ]
[ 2307@0, "command",	  "bat",	  "replace",			  "(b:bat[:any_1,:any_2],h:any_1,t:any_2):void ",							  "BKCreplace_bun;"			  ]
[ 2308@0, "command",	  "bat",	  "replace",			  "(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2]):void ",						  "BKCreplace_bat;"			  ]
[ 2309@0, "command",	  "bat",	  "revert",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",								  "BKCrevert;"				  ]
[ 2310@0, "command",	  "bat",	  "reverse",			  "(b:bat[:any_1,:any_2]):bat[:any_2,:any_1] ",								  "BKCreverse;"				  ]
[ 2311@0, "pattern",	  "bat",	  "setGarbage",			  "(b:bat[:any_1,:any_2]):void ",									  "CMDbbpgarbage;"			  ]
[ 2312@0, "command",	  "bat",	  "setHash",			  "(b:bat[:any_1,:any_2],prop:bit):bit ",								  "BKCsetHash;"				  ]
[ 2313@0, "command",	  "bat",	  "setMemoryAdvise",		  "(b:bat[:any_1,:any_2],mode:int):bit ",								  "BKCmadvise2;"			  ]
[ 2314@0, "command",	  "bat",	  "setMemoryAdvise",		  "(b:bat[:any_1,:any_2],buns_mode:int,hheap_mode:int,theap_mode:int):bit ",				  "BKCmadvise;"				  ]
[ 2315@0, "command",	  "bat",	  "setMemoryMap",		  "(b:bat[:any_1,:any_2],mode:int):bit ",								  "BKCmmap2;"				  ]
[ 2316@0, "command",	  "bat",	  "setMemoryMap",		  "(b:bat[:any_1,:any_2],buns_mode:int,hheap_mode:int,theap_mode:int):bit ",				  "BKCmmap;"				  ]
[ 2317@0, "command",	  "bat",	  "setHot",			  "(b:bat[:any_1,:any_2]):void ",									  "BKChotBAT;"				  ]
[ 2318@0, "command",	  "bat",	  "setCold",			  "(b:bat[:any_1,:any_1]):void ",									  "BKCcoldBAT;"				  ]
[ 2319@0, "command",	  "bat",	  "save",			  "(nme:str):bit ",											  "BKCsave;"				  ]
[ 2320@0, "command",	  "bat",	  "save",			  "(nme:bat[:any_1,:any_2]):void ",									  "BKCsave2;"				  ]
[ 2321@0, "command",	  "bat",	  "setPersistent",		  "(b:bat[:any_1,:any_2]):void ",									  "BKCsetPersistent;"			  ]
[ 2322@0, "command",	  "bat",	  "setPersistent",		  "(b:bat[:any_1,:any_2],f:bit):void ",									  "BKCpersists;"			  ]
[ 2323@0, "command",	  "bat",	  "setTransient",		  "(b:bat[:any_1,:any_2]):void ",									  "BKCsetTransient;"			  ]
[ 2324@0, "command",	  "bat",	  "setColumn",			  "(b:bat[:any_1,:any_2],h:str,t:str):void ",								  "BKCsetColumns;"			  ]
[ 2325@0, "command",	  "bat",	  "setColumn",			  "(b:bat[:any_1,:any_2],t:str):void ",									  "BKCsetColumn;"			  ]
[ 2326@0, "command",	  "bat",	  "setRole",			  "(b:bat[:any_1,:any_2],h:str,t:str):void ",								  "BKCsetRole;"				  ]
[ 2327@0, "command",	  "bat",	  "setName",			  "(b:bat[:any_1,:any_2],s:str):void ",									  "BKCsetName;"				  ]
[ 2328@0, "command",	  "bat",	  "setSorted",			  "(b:bat[:any_1,:any_2]):bit ",									  "BKCsetSorted;"			  ]
[ 2329@0, "command",	  "bat",	  "setSequenceBase",		  "(b:bat[:void,:any_1],seqbase:void):bat[:void,:any_1] ",						  "BKCsetSequenceBaseNil;"		  ]
[ 2330@0, "command",	  "bat",	  "setSequenceBase",		  "(b:bat[:oid,:any_1],seqbase:oid):bat[:void,:any_1] ",						  "BKCsetSequenceBase;"			  ]
[ 2331@0, "command",	  "bat",	  "setSequenceBase",		  "(b:bat[:void,:any_1],seqbase:oid):bat[:void,:any_1] ",						  "BKCsetSequenceBase;"			  ]
[ 2332@0, "command",	  "bat",	  "setWriteMode",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",								  "BKCsetWriteMode;"			  ]
[ 2333@0, "command",	  "bat",	  "setReadMode",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",								  "BKCsetReadMode;"			  ]
[ 2334@0, "command",	  "bat",	  "setAppendMode",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",								  "BKCsetAppendMode;"			  ]
[ 2335@0, "command",	  "bat",	  "setAccess",			  "(b:bat[:any_1,:any_2],mode:str):bat[:any_1,:any_2] ",						  "BKCsetAccess;"			  ]
[ 2336@0, "command",	  "bat",	  "setSet",			  "(b:bat[:any_1,:any_2],mode:bit):bat[:any_1,:any_2] ",						  "BKCsetSet;"				  ]
[ 2337@0, "command",	  "bat",	  "setKey",			  "(b:bat[:any_1,:any_2],mode:bit):bat[:any_1,:any_2] ",						  "BKCsetkey;"				  ]
[ 2338@0, "pattern",	  "bat",	  "unpack",			  "(b:bat[:void,:any_2]) (h:oid,t:any_2) ",								  "CMDbatunpack;"			  ]
[ 2339@0, "pattern",	  "bat",	  "unpack",			  "(b:bat[:any_1,:any_2]) (h:any_1,t:any_2) ",								  "CMDbatunpack;"			  ]
[ 2340@0, "command",	  "bat",	  "unload",			  "(name:str):bit ",											  "BKCunload;"				  ]
[ 2341@0, "command",	  "inet",	  "!=",				  "(v:inet,w:inet):bit ",										  "INET_comp_NEQ;"			  ]
[ 2342@0, "command",	  "inet",	  "<<=",			  "(v:inet,w:inet):bit ",										  "INET_comp_CWE;"			  ]
[ 2343@0, "command",	  "inet",	  "<<",				  "(v:inet,w:inet):bit ",										  "INET_comp_CW;"			  ]
[ 2344@0, "command",	  "inet",	  "<=",				  "(v:inet,w:inet):bit ",										  "INET_comp_LE;"			  ]
[ 2345@0, "command",	  "inet",	  "<",				  "(v:inet,w:inet):bit ",										  "INET_comp_LT;"			  ]
[ 2346@0, "command",	  "inet",	  "=",				  "(v:inet,w:inet):bit ",										  "INET_comp_EQ;"			  ]
[ 2347@0, "command",	  "inet",	  ">>=",			  "(v:inet,w:inet):bit ",										  "INET_comp_CSE;"			  ]
[ 2348@0, "command",	  "inet",	  ">>",				  "(v:inet,w:inet):bit ",										  "INET_comp_CS;"			  ]
[ 2349@0, "command",	  "inet",	  ">=",				  "(v:inet,w:inet):bit ",										  "INET_comp_GE;"			  ]
[ 2350@0, "command",	  "inet",	  ">",				  "(v:inet,w:inet):bit ",										  "INET_comp_GT;"			  ]
[ 2351@0, "command",	  "inet",	  "abbrev",			  "(_1:inet):str ",											  "INETabbrev;"				  ]
[ 2352@0, "command",	  "inet",	  "broadcast",			  "(_1:inet):inet ",											  "INETbroadcast;"			  ]
[ 2353@0, "command",	  "inet",	  "#fromstr",			  "():void ",												  "INETfromString;"			  ]
[ 2354@0, "command",	  "inet",	  "hostmask",			  "(_1:inet):inet ",											  "INEThostmask;"			  ]
[ 2355@0, "command",	  "inet",	  "host",			  "(_1:inet):str ",											  "INEThost;"				  ]
[ 2356@0, "command",	  "inet",	  "isnil",			  "(v:inet):bit ",											  "INET_isnil;"				  ]
[ 2357@0, "command",	  "inet",	  "masklen",			  "(_1:inet):int ",											  "INETmasklen;"			  ]
[ 2358@0, "command",	  "inet",	  "network",			  "(_1:inet):inet ",											  "INETnetwork;"			  ]
[ 2359@0, "command",	  "inet",	  "netmask",			  "(_1:inet):inet ",											  "INETnetmask;"			  ]
[ 2360@0, "command",	  "inet",	  "new",			  "(s:str):inet ",											  "INETnew;"				  ]
[ 2361@0, "command",	  "inet",	  "setmasklen",			  "(_1:inet,_2:int):inet ",										  "INETsetmasklen;"			  ]
[ 2362@0, "command",	  "inet",	  "text",			  "(_1:inet):str ",											  "INETtext;"				  ]
[ 2363@0, "command",	  "inet",	  "#tostr",			  "():void ",												  "INETtoString;"			  ]
[ 2364@0, "command",	  "date",	  "!=",				  "(v:date,w:date):bit ",										  "MTIMEdate_NEQ;"			  ]
[ 2365@0, "command",	  "date",	  "<=",				  "(v:date,w:date):bit ",										  "MTIMEdate_LE;"			  ]
[ 2366@0, "command",	  "date",	  "<",				  "(v:date,w:date):bit ",										  "MTIMEdate_LT;"			  ]
[ 2367@0, "command",	  "date",	  "=",				  "(v:date,w:date):bit ",										  "MTIMEdate_EQ;"			  ]
[ 2368@0, "command",	  "date",	  ">=",				  "(v:date,w:date):bit ",										  "MTIMEdate_GE;"			  ]
[ 2369@0, "command",	  "date",	  ">",				  "(v:date,w:date):bit ",										  "MTIMEdate_GT;"			  ]
[ 2370@0, "command",	  "date",	  "date",			  "(s:date):date ",											  "MTIMEdate_date;"			  ]
[ 2371@0, "command",	  "date",	  "#fromstr",			  "():date ",												  "date_fromstr;"			  ]
[ 2372@0, "command",	  "date",	  "isnil",			  "(v:date):bit ",											  "MTIMEdate_isnil;"			  ]
[ 2373@0, "command",	  "date",	  "isnil",			  "(v:date):bit ",											  "MTIMEdate_isnil;"			  ]
[ 2374@0, "command",	  "date",	  "#tostr",			  "():str ",												  "date_tostr;"				  ]
[ 2375@0, "command",	  "daytime",	  "!=",				  "(v:daytime,w:daytime):bit ",										  "MTIMEdaytime_NEQ;"			  ]
[ 2376@0, "command",	  "daytime",	  "<=",				  "(v:daytime,w:daytime):bit ",										  "MTIMEdaytime_LE;"			  ]
[ 2377@0, "command",	  "daytime",	  "<",				  "(v:daytime,w:daytime):bit ",										  "MTIMEdaytime_LT;"			  ]
[ 2378@0, "command",	  "daytime",	  "=",				  "(v:daytime,w:daytime):bit ",										  "MTIMEdaytime_EQ;"			  ]
[ 2379@0, "command",	  "daytime",	  ">=",				  "(v:daytime,w:daytime):bit ",										  "MTIMEdaytime_GE;"			  ]
[ 2380@0, "command",	  "daytime",	  ">",				  "(v:daytime,w:daytime):bit ",										  "MTIMEdaytime_GT;"			  ]
[ 2381@0, "command",	  "daytime",	  "#fromstr",			  "():daytime ",											  "daytime_tz_fromstr;"			  ]
[ 2382@0, "command",	  "daytime",	  "isnil",			  "(v:daytime):bit ",											  "MTIMEdaytime_isnil;"			  ]
[ 2383@0, "command",	  "daytime",	  "isnil",			  "(v:daytime):bit ",											  "MTIMEdaytime_isnil;"			  ]
[ 2384@0, "command",	  "daytime",	  "#tostr",			  "():str ",												  "daytime_tostr;"			  ]
[ 2385@0, "command",	  "timestamp",	  "!=",				  "(v:timestamp,w:timestamp):bit ",									  "MTIMEtimestamp_NEQ;"			  ]
[ 2386@0, "command",	  "timestamp",	  "<=",				  "(v:timestamp,w:timestamp):bit ",									  "MTIMEtimestamp_LE;"			  ]
[ 2387@0, "command",	  "timestamp",	  "<",				  "(v:timestamp,w:timestamp):bit ",									  "MTIMEtimestamp_LT;"			  ]
[ 2388@0, "command",	  "timestamp",	  "=",				  "(v:timestamp,w:timestamp):bit ",									  "MTIMEtimestamp_EQ;"			  ]
[ 2389@0, "command",	  "timestamp",	  ">=",				  "(v:timestamp,w:timestamp):bit ",									  "MTIMEtimestamp_GE;"			  ]
[ 2390@0, "command",	  "timestamp",	  ">",				  "(v:timestamp,w:timestamp):bit ",									  "MTIMEtimestamp_GT;"			  ]
[ 2391@0, "command",	  "timestamp",	  "epoch",			  "(t:timestamp):lng ",											  "MTIMEepoch2lng;"			  ]
[ 2392@0, "command",	  "timestamp",	  "epoch",			  "():timestamp ",											  "MTIMEepoch;"				  ]
[ 2393@0, "command",	  "timestamp",	  "#fromstr",			  "():timestamp ",											  "timestamp_fromstr;"			  ]
[ 2394@0, "command",	  "timestamp",	  "isnil",			  "(v:timestamp):bit ",											  "MTIMEtimestamp_isnil;"		  ]
[ 2395@0, "command",	  "timestamp",	  "isnil",			  "(v:timestamp):bit ",											  "MTIMEtimestamp_isnil;"		  ]
[ 2396@0, "command",	  "timestamp",	  "#tostr",			  "():str ",												  "timestamp_tostr;"			  ]
[ 2397@0, "command",	  "timestamp",	  "unix_epoch",			  "():timestamp ",											  "MTIMEunix_epoch;"			  ]
[ 2398@0, "command",	  "tzone",	  "#fromstr",			  "():tzone ",												  "tzone_fromstr;"			  ]
[ 2399@0, "command",	  "tzone",	  "str",			  "():str ",												  "MTIMEtzone_tostr;"			  ]
[ 2400@0, "command",	  "tzone",	  "timestamp",			  "(secs:int):timestamp ",										  "MTIMEtimestamp;"			  ]
[ 2401@0, "command",	  "tzone",	  "timestamp",			  "(s:str):timestamp ",											  "MTIMEtimestamp_fromstr;"		  ]
[ 2402@0, "command",	  "tzone",	  "#tostr",			  "():str ",												  "tzone_tostr;"			  ]
[ 2403@0, "command",	  "zrule",	  "define",			  "(m:int,d:str,w:int,min:int):zrule ",									  "MTIMEruleDef2;"			  ]
[ 2404@0, "command",	  "zrule",	  "define",			  "(m:int,d:str,w:int,h:int,min:int):zrule ",								  "MTIMEruleDef1;"			  ]
[ 2405@0, "command",	  "zrule",	  "define",			  "(m:int,d:int,w:int,h:int,min:int):zrule ",								  "MTIMEruleDef0;"			  ]
[ 2406@0, "command",	  "zrule",	  "#fromstr",			  "():zrule ",												  "rule_fromstr;"			  ]
[ 2407@0, "command",	  "zrule",	  "#tostr",			  "():str ",												  "rule_tostr;"				  ]
[ 2408@0, "command",	  "mtime",	  "add",			  "(v:timestamp,msecs:lng):timestamp ",									  "MTIMEtimestamp_add;"			  ]
[ 2409@0, "command",	  "mtime",	  "adddays",			  "(value:date,days:int):date ",									  "MTIMEdate_adddays;"			  ]
[ 2410@0, "command",	  "mtime",	  "addmonths",			  "(value:date,months:int):date ",									  "MTIMEdate_addmonths;"		  ]
[ 2411@0, "command",	  "mtime",	  "addyears",			  "(value:date,years:int):date ",									  "MTIMEdate_addyears;"			  ]
[ 2412@0, "command",	  "mtime",	  "current_time",		  "():daytime ",											  "MTIMEcurrent_time;"			  ]
[ 2413@0, "command",	  "mtime",	  "current_date",		  "():date ",												  "MTIMEcurrent_date;"			  ]
[ 2414@0, "command",	  "mtime",	  "current_timestamp",		  "():timestamp ",											  "MTIMEcurrent_timestamp;"		  ]
[ 2415@0, "command",	  "mtime",	  "compute",			  "(r:zrule,year:int):date ",										  "MTIMEcompute_rule_foryear;"		  ]
[ 2416@0, "command",	  "mtime",	  "day",			  "(secs:lng):int ",											  "MTIMEsql_day;"			  ]
[ 2417@0, "command",	  "mtime",	  "day",			  "(t:timestamp):int ",											  "MTIMEtimestamp_day;"			  ]
[ 2418@0, "command",	  "mtime",	  "daytime",			  "(h:int,m:int,s:int):daytime ",									  "MTIMEdaytime3;"			  ]
[ 2419@0, "command",	  "mtime",	  "daytime",			  "(h:int,m:int):daytime ",										  "MTIMEdaytime2;"			  ]
[ 2420@0, "command",	  "mtime",	  "daytime",			  "(h:int):daytime ",											  "MTIMEdaytime1;"			  ]
[ 2421@0, "command",	  "mtime",	  "dayname",			  "(day:int):str ",											  "MTIMEday_to_str;"			  ]
[ 2422@0, "command",	  "mtime",	  "daynum",			  "(day:str):int ",											  "MTIMEday_from_str;"			  ]
[ 2423@0, "command",	  "mtime",	  "dst",			  "(t:timestamp,v:tzone):bit ",										  "MTIMEtimestamp_inside_dst;"		  ]
[ 2424@0, "command",	  "mtime",	  "diff",			  "(val1:timestamp,val2:timestamp):lng ",								  "MTIMEtimestamp_diff;"		  ]
[ 2425@0, "command",	  "mtime",	  "dayofweek",			  "(d:date):int ",											  "MTIMEdate_extract_dayofweek;"	  ]
[ 2426@0, "command",	  "mtime",	  "dayofyear",			  "(d:date):int ",											  "MTIMEdate_extract_dayofyear;"	  ]
[ 2427@0, "command",	  "mtime",	  "diff",			  "(val1:date,val2:date):int ",										  "MTIMEdate_diff;"			  ]
[ 2428@0, "command",	  "mtime",	  "day",			  "(t:zrule):int ",											  "MTIMErule_extract_day;"		  ]
[ 2429@0, "command",	  "mtime",	  "date",			  "(t:timestamp,v:tzone):date ",									  "MTIMEtimestamp_extract_date;"	  ]
[ 2430@0, "command",	  "mtime",	  "date",			  "(t:timestamp):date ",										  "MTIMEtimestamp_extract_date_default;"  ]
[ 2431@0, "command",	  "mtime",	  "daytime",			  "(t:timestamp,v:tzone):daytime ",									  "MTIMEtimestamp_extract_daytime;"	  ]
[ 2432@0, "command",	  "mtime",	  "daytime",			  "(t:timestamp):daytime ",										  "MTIMEtimestamp_extract_daytime_default;"  ]
[ 2433@0, "command",	  "mtime",	  "day",			  "(d:bat[:any_1,:date]):bat[:any_1,:int] ",								  "MTIMEdate_extract_day_bulk;"		  ]
[ 2434@0, "command",	  "mtime",	  "day",			  "(d:date):int ",											  "MTIMEdate_extract_day;"		  ]
[ 2435@0, "command",	  "mtime",	  "daytime",			  "(h:int,m:int,s:int,mi:int):daytime ",								  "MTIMEdaytime_create;"		  ]
[ 2436@0, "command",	  "mtime",	  "daytime",			  "(_1:daytime):daytime ",										  "MTIMEdaytime2daytime;"		  ]
[ 2437@0, "command",	  "mtime",	  "daytime",			  "(s:str):daytime ",											  "MTIMEdaytime_fromstr;"		  ]
[ 2438@0, "command",	  "mtime",	  "date",			  "(yr:int,mo:int,day:int):date ",									  "MTIMEdate_create;"			  ]
[ 2439@0, "command",	  "mtime",	  "date",			  "(s:str):date ",											  "MTIMEdate_fromstr;"			  ]
[ 2440@0, "command",	  "mtime",	  "date",			  "(_1:void):date ",											  "MTIMEnil2date;"			  ]
[ 2441@0, "command",	  "mtime",	  "date",			  "(_1:date):date ",											  "MTIMEdate2date;"			  ]
[ 2442@0, "command",	  "mtime",	  "date_add_month_interval",	  "(t:date,s:int):date ",										  "MTIMEdate_add_month_interval_wrap;"	  ]
[ 2443@0, "command",	  "mtime",	  "date_add_sec_interval",	  "(t:date,s:lng):date ",										  "MTIMEdate_add_sec_interval_lng_wrap;"  ]
[ 2444@0, "command",	  "mtime",	  "date_add_sec_interval",	  "(t:date,s:int):date ",										  "MTIMEdate_add_sec_interval_wrap;"	  ]
[ 2445@0, "command",	  "mtime",	  "date_sub_sec_interval",	  "(t:date,s:lng):date ",										  "MTIMEdate_sub_sec_interval_lng_wrap;"  ]
[ 2446@0, "command",	  "mtime",	  "date_sub_sec_interval",	  "(t:date,s:int):date ",										  "MTIMEdate_sub_sec_interval_wrap;"	  ]
[ 2447@0, "command",	  "mtime",	  "epilogue",			  "():void ",												  "MTIMEepilogue;"			  ]
[ 2448@0, "command",	  "mtime",	  "end_dst",			  "(t:tzone):zrule ",											  "MTIMEtzone_extract_end;"		  ]
[ 2449@0, "command",	  "mtime",	  "hours",			  "(secs:lng):int ",											  "MTIMEsql_hours;"			  ]
[ 2450@0, "command",	  "mtime",	  "hours",			  "(t:timestamp):int ",											  "MTIMEtimestamp_hours;"		  ]
[ 2451@0, "command",	  "mtime",	  "hours",			  "(d:bat[:any_1,:date]):bat[:any_1,:int] ",								  "MTIMEdaytime_extract_hours_bulk;"	  ]
[ 2452@0, "command",	  "mtime",	  "hours",			  "(h:daytime):int ",											  "MTIMEdaytime_extract_hours;"		  ]
[ 2453@0, "command",	  "mtime",	  "local_timezone",		  "():lng ",												  "MTIMElocal_timezone;"		  ]
[ 2454@0, "command",	  "mtime",	  "msec",			  "():lng ",												  "MTIMEmsec;"				  ]
[ 2455@0, "command",	  "mtime",	  "minutes",			  "(secs:lng):int ",											  "MTIMEsql_minutes;"			  ]
[ 2456@0, "command",	  "mtime",	  "month",			  "(months:int):int ",											  "MTIMEsql_month;"			  ]
[ 2457@0, "command",	  "mtime",	  "milliseconds",		  "(t:timestamp):int ",											  "MTIMEtimestamp_milliseconds;"	  ]
[ 2458@0, "command",	  "mtime",	  "minutes",			  "(t:timestamp):int ",											  "MTIMEtimestamp_minutes;"		  ]
[ 2459@0, "command",	  "mtime",	  "month",			  "(t:timestamp):int ",											  "MTIMEtimestamp_month;"		  ]
[ 2460@0, "command",	  "mtime",	  "msecs",			  "(d:int,h:int,m:int,s:int,ms:int):lng ",								  "MTIMEmsecs;"				  ]
[ 2461@0, "command",	  "mtime",	  "monthname",			  "(month:int):str ",											  "MTIMEmonth_to_str;"			  ]
[ 2462@0, "command",	  "mtime",	  "monthnum",			  "(month:str):int ",											  "MTIMEmonth_from_str;"		  ]
[ 2463@0, "command",	  "mtime",	  "minutes",			  "(t:zrule):int ",											  "MTIMErule_extract_minutes;"		  ]
[ 2464@0, "command",	  "mtime",	  "month",			  "(t:zrule):int ",											  "MTIMErule_extract_month;"		  ]
[ 2465@0, "command",	  "mtime",	  "minutes",			  "(t:tzone):int ",											  "MTIMEtzone_extract_minutes;"		  ]
[ 2466@0, "command",	  "mtime",	  "milliseconds",		  "(d:bat[:any_1,:date]):bat[:any_1,:int] ",								  "MTIMEdaytime_extract_milliseconds_bulk;"  ]
[ 2467@0, "command",	  "mtime",	  "milliseconds",		  "(d:daytime):int ",											  "MTIMEdaytime_extract_milliseconds;"	  ]
[ 2468@0, "command",	  "mtime",	  "minutes",			  "(d:bat[:any_1,:date]):bat[:any_1,:int] ",								  "MTIMEdaytime_extract_minutes_bulk;"	  ]
[ 2469@0, "command",	  "mtime",	  "minutes",			  "(d:daytime):int ",											  "MTIMEdaytime_extract_minutes;"	  ]
[ 2470@0, "command",	  "mtime",	  "month",			  "(d:bat[:any_1,:date]):bat[:any_1,:int] ",								  "MTIMEdate_extract_month_bulk;"	  ]
[ 2471@0, "command",	  "mtime",	  "month",			  "(d:date):int ",											  "MTIMEdate_extract_month;"		  ]
[ 2472@0, "command",	  "mtime",	  "oldduration",		  "(format:str):int ",											  "MTIMEoldduration;"			  ]
[ 2473@0, "command",	  "mtime",	  "olddate",			  "(format:str):date ",											  "MTIMEolddate;"			  ]
[ 2474@0, "command",	  "mtime",	  "prelude",			  "():void ",												  "MTIMEprelude;"			  ]
[ 2475@0, "command",	  "mtime",	  "rule",			  "(mo:int,d:int,wkday:int,mi:int):zrule ",								  "MTIMErule_create;"			  ]
[ 2476@0, "command",	  "mtime",	  "rule",			  "(s:str):zrule ",											  "MTIMErule_fromstr;"			  ]
[ 2477@0, "command",	  "mtime",	  "seconds",			  "(secs:lng):int ",											  "MTIMEsql_seconds;"			  ]
[ 2478@0, "command",	  "mtime",	  "seconds",			  "(t:timestamp):int ",											  "MTIMEtimestamp_seconds;"		  ]
[ 2479@0, "command",	  "mtime",	  "start_dst",			  "(t:tzone):zrule ",											  "MTIMEtzone_extract_start;"		  ]
[ 2480@0, "command",	  "mtime",	  "seconds",			  "(d:bat[:any_1,:date]):bat[:any_1,:int] ",								  "MTIMEdaytime_extract_seconds_bulk;"	  ]
[ 2481@0, "command",	  "mtime",	  "seconds",			  "(d:daytime):int ",											  "MTIMEdaytime_extract_seconds;"	  ]
[ 2482@0, "command",	  "mtime",	  "time_synonyms",		  "(allow:bit):void ",											  "MTIMEsynonyms;"			  ]
[ 2483@0, "command",	  "mtime",	  "timezone",			  "(name:str):tzone ",											  "MTIMEtimezone;"			  ]
[ 2484@0, "command",	  "mtime",	  "tzone",			  "(mi:int,s:zrule,erule:zrule):tzone ",								  "MTIMEtzone_create_dst;"		  ]
[ 2485@0, "command",	  "mtime",	  "tzone",			  "(s:lng):tzone ",											  "MTIMEtzone_create;"			  ]
[ 2486@0, "command",	  "mtime",	  "tzone",			  "(s:int):tzone ",											  "MTIMEtzone_create;"			  ]
[ 2487@0, "command",	  "mtime",	  "tzone",			  "(s:str):tzone ",											  "MTIMEtzone_fromstr;"			  ]
[ 2488@0, "command",	  "mtime",	  "timestamp",			  "(d:date,dt:daytime):timestamp ",									  "MTIMEtimestamp_create_default;"	  ]
[ 2489@0, "command",	  "mtime",	  "timestamp",			  "(d:date,dt:daytime,t:tzone):timestamp ",								  "MTIMEtimestamp_create;"		  ]
[ 2490@0, "command",	  "mtime",	  "tzone_local",		  "():tzone ",												  "MTIMEtzone_get_local;"		  ]
[ 2491@0, "command",	  "mtime",	  "tzone_local",		  "(t:tzone):void ",											  "MTIMEtzone_set_local;"		  ]
[ 2492@0, "command",	  "mtime",	  "time_add_sec_interval",	  "(t:daytime,s:lng):daytime ",										  "MTIMEtime_add_sec_interval_wrap;"	  ]
[ 2493@0, "command",	  "mtime",	  "time_sub_sec_interval",	  "(t:daytime,s:lng):daytime ",										  "MTIMEtime_sub_sec_interval_wrap;"	  ]
[ 2494@0, "command",	  "mtime",	  "timestamp",			  "(t:timestamp):timestamp ",										  "MTIMEtimestamp2timestamp;"		  ]
[ 2495@0, "command",	  "mtime",	  "timestamp_add_month_interval", "(t:timestamp,s:int):timestamp ",									  "MTIMEtimestamp_add_month_interval_wrap;"  ]
[ 2496@0, "command",	  "mtime",	  "timestamp_sub_month_interval", "(t:timestamp,s:int):timestamp ",									  "MTIMEtimestamp_sub_month_interval_wrap;"  ]
[ 2497@0, "command",	  "mtime",	  "timestamp_add_sec_interval",	  "(t:timestamp,s:lng):timestamp ",									  "MTIMEtimestamp_add_sec_interval_lng_wrap;"  ]
[ 2498@0, "command",	  "mtime",	  "timestamp_sub_sec_interval",	  "(t:timestamp,s:lng):timestamp ",									  "MTIMEtimestamp_sub_sec_interval_lng_wrap;"  ]
[ 2499@0, "command",	  "mtime",	  "weekofyear",			  "(d:date):int ",											  "MTIMEdate_extract_weekofyear;"	  ]
[ 2500@0, "command",	  "mtime",	  "weekday",			  "(t:zrule):int ",											  "MTIMErule_extract_weekday;"		  ]
[ 2501@0, "command",	  "mtime",	  "year",			  "(months:int):int ",											  "MTIMEsql_year;"			  ]
[ 2502@0, "command",	  "mtime",	  "year",			  "(t:timestamp):int ",											  "MTIMEtimestamp_year;"		  ]
[ 2503@0, "command",	  "mtime",	  "year",			  "(d:bat[:any_1,:date]):bat[:any_1,:int] ",								  "MTIMEdate_extract_year_bulk;"	  ]
[ 2504@0, "command",	  "mtime",	  "year",			  "(d:date):int ",											  "MTIMEdate_extract_year;"		  ]
[ 2505@0, "command",	  "url",	  "#fromstr",			  "():url ",												  "URLfromString;"			  ]
[ 2506@0, "command",	  "url",	  "getRobotURL",		  "(u:url):str ",											  "URLgetRobotURL;"			  ]
[ 2507@0, "command",	  "url",	  "getUser",			  "(u:url):str ",											  "URLgetUser;"				  ]
[ 2508@0, "command",	  "url",	  "getQueryArg",		  "(u:url):bat[:str,:str] ",										  "URLgetQueryArg;"			  ]
[ 2509@0, "command",	  "url",	  "getQuery",			  "(u:url):str ",											  "URLgetQuery;"			  ]
[ 2510@0, "command",	  "url",	  "getProtocol",		  "(u:url):str ",											  "URLgetProtocol;"			  ]
[ 2511@0, "command",	  "url",	  "getPort",			  "(u:url):str ",											  "URLgetPort;"				  ]
[ 2512@0, "command",	  "url",	  "getHost",			  "(u:url):str ",											  "URLgetHost;"				  ]
[ 2513@0, "command",	  "url",	  "getFile",			  "(u:url):str ",											  "URLgetFile;"				  ]
[ 2514@0, "command",	  "url",	  "getExtension",		  "(u:url):str ",											  "URLgetExtension;"			  ]
[ 2515@0, "command",	  "url",	  "getDomain",			  "(u:url):str ",											  "URLgetDomain;"			  ]
[ 2516@0, "command",	  "url",	  "getDirectory",		  "(u:url):bat[:int,:str] ",										  "URLgetDirectory;"			  ]
[ 2517@0, "command",	  "url",	  "getContext",			  "(u:url):str ",											  "URLgetContext;"			  ]
[ 2518@0, "command",	  "url",	  "getContent",			  "(u:url):str ",											  "URLgetContent;"			  ]
[ 2519@0, "command",	  "url",	  "getBasename",		  "(u:url):str ",											  "URLgetBasename;"			  ]
[ 2520@0, "command",	  "url",	  "getAnchor",			  "(u:url):str ",											  "URLgetAnchor;"			  ]
[ 2521@0, "command",	  "url",	  "isaURL",			  "(u:url):bit ",											  "URLisaURL;"				  ]
[ 2522@0, "command",	  "url",	  "new",			  "(prot:str,host:str,fnme:str):url ",									  "URLnew3;"				  ]
[ 2523@0, "command",	  "url",	  "new",			  "(p:str,h:str,prt:int,f:str):url ",									  "URLnew4;"				  ]
[ 2524@0, "command",	  "url",	  "#tostr",			  "():str ",												  "URLtoString;"			  ]
[ 2525@0, "command",	  "url",	  "url",			  "(s:str):url ",											  "URLnew;"				  ]
[ 2526@0, "command",	  "str",	  "+",				  "(l:str,r:str):str ",											  "STRConcat;"				  ]
[ 2527@0, "command",	  "str",	  "STRepilogue",		  "():void ",												  "strEpilogue;"			  ]
[ 2528@0, "command",	  "str",	  "STRprelude",			  "():void ",												  "strPrelude;"				  ]
[ 2529@0, "command",	  "str",	  "ascii",			  "(s:str):int ",											  "STRascii;"				  ]
[ 2530@0, "command",	  "str",	  "codeset",			  "():str ",												  "STRcodeset;"				  ]
[ 2531@0, "command",	  "str",	  "chrAt",			  "(s:str,index:int):chr ",										  "STRChrAt;"				  ]
[ 2532@0, "command",	  "str",	  "endsWith",			  "(s:str,suffix:str):bit ",										  "STRSuffix;"				  ]
[ 2533@0, "command",	  "str",	  "insert",			  "(s:str,start:int,l:int,s2:str):str ",								  "STRinsert;"				  ]
[ 2534@0, "command",	  "str",	  "iconv",			  "(org:str,fromCs:str,toCs:str):str ",									  "STRIconv;"				  ]
[ 2535@0, "command",	  "str",	  "locate",			  "(s1:str,s2:str,start:int):void ",									  "STRlocate2;"				  ]
[ 2536@0, "command",	  "str",	  "locate",			  "(s1:str,s2:str):int ",										  "STRlocate;"				  ]
[ 2537@0, "command",	  "str",	  "like",			  "(s:str,pat:str,esc:str):bit ",									  "STRlikewrap;"			  ]
[ 2538@0, "command",	  "str",	  "like",			  "(s:str,pat:str):bit ",										  "STRlikewrap2;"			  ]
[ 2539@0, "command",	  "str",	  "ltrim",			  "(s:str):str ",											  "STRLtrim;"				  ]
[ 2540@0, "command",	  "str",	  "length",			  "(s:str):int ",											  "STRLength;"				  ]
[ 2541@0, "command",	  "str",	  "nbytes",			  "(s:str):int ",											  "STRBytes;"				  ]
[ 2542@0, "command",	  "str",	  "prefix",			  "(s:str,l:int):str ",											  "STRprefix;"				  ]
[ 2543@0, "command",	  "str",	  "repeat",			  "(s2:str,c:int):str ",										  "STRrepeat;"				  ]
[ 2544@0, "command",	  "str",	  "replace",			  "(s:str,pat:str,s2:str):str ",									  "STRreplace;"				  ]
[ 2545@0, "command",	  "str",	  "rtrim",			  "(s:str):str ",											  "STRRtrim;"				  ]
[ 2546@0, "command",	  "str",	  "r_search",			  "(s:str,c:chr):int ",											  "STRReverseChrSearch;"		  ]
[ 2547@0, "command",	  "str",	  "r_search",			  "(s:str,c:str):int ",											  "STRReverseStrSearch;"		  ]
[ 2548@0, "command",	  "str",	  "space",			  "(l:int):str ",											  "STRspace;"				  ]
[ 2549@0, "command",	  "str",	  "suffix",			  "(s:str,l:int):str ",											  "STRsuffix;"				  ]
[ 2550@0, "command",	  "str",	  "substring",			  "(s:str,start:int,len:int):str ",									  "STRsubstring;"			  ]
[ 2551@0, "command",	  "str",	  "substring",			  "(s:str,start:int):str ",										  "STRsubstringTail;"			  ]
[ 2552@0, "command",	  "str",	  "substitute",			  "(s:str,src:str,dst:str,rep:bit):str ",								  "STRSubstitute;"			  ]
[ 2553@0, "command",	  "str",	  "search",			  "(s:str,c:chr):int ",											  "STRchrSearch;"			  ]
[ 2554@0, "command",	  "str",	  "search",			  "(s:str,c:str):int ",											  "STRstrSearch;"			  ]
[ 2555@0, "command",	  "str",	  "startsWith",			  "(s:str,prefix:str):bit ",										  "STRPrefix;"				  ]
[ 2556@0, "command",	  "str",	  "stringlength",		  "(s:str):int ",											  "stringLength;"			  ]
[ 2557@0, "command",	  "str",	  "string",			  "(s:str,offset:int,count:int):str ",									  "STRSubString;"			  ]
[ 2558@0, "command",	  "str",	  "string",			  "(s:str,offset:int):str ",										  "STRTail;"				  ]
[ 2559@0, "command",	  "str",	  "str",			  "(s:str):str ",											  "STRtostr;"				  ]
[ 2560@0, "command",	  "str",	  "trim",			  "(s:str):str ",											  "STRStrip;"				  ]
[ 2561@0, "command",	  "str",	  "toUpper",			  "(s:str):str ",											  "STRUpper;"				  ]
[ 2562@0, "command",	  "str",	  "toLower",			  "(s:str):str ",											  "STRLower;"				  ]
[ 2563@0, "command",	  "str",	  "unicode",			  "(wchar:int):str ",											  "STRFromWChr;"			  ]
[ 2564@0, "command",	  "str",	  "unicodeAt",			  "(s:str,index:int):int ",										  "STRWChrAt;"				  ]
[ 2565@0, "command",	  "color",	  "blue",			  "(c:color):int ",											  "CLRblue;"				  ]
[ 2566@0, "command",	  "color",	  "cb",				  "(c:color):int ",											  "CLRcb;"				  ]
[ 2567@0, "command",	  "color",	  "cr",				  "(c:color):int ",											  "CLRcr;"				  ]
[ 2568@0, "command",	  "color",	  "color",			  "(s:str):color ",											  "CLRcolor;"				  ]
[ 2569@0, "command",	  "color",	  "#fromstr",			  "():color ",												  "color_fromstr;"			  ]
[ 2570@0, "command",	  "color",	  "green",			  "(c:color):int ",											  "CLRgreen;"				  ]
[ 2571@0, "command",	  "color",	  "hue",			  "(c:color):flt ",											  "CLRhue;"				  ]
[ 2572@0, "command",	  "color",	  "hsv",			  "(h:flt,s:flt,v:flt):color ",										  "CLRhsv;"				  ]
[ 2573@0, "command",	  "color",	  "hue",			  "(c:color):int ",											  "CLRhueInt;"				  ]
[ 2574@0, "command",	  "color",	  "luminance",			  "(c:color):int ",											  "CLRluminance;"			  ]
[ 2575@0, "command",	  "color",	  "printf",			  "(s:str,c:color):void ",										  "CLRprintf2;"				  ]
[ 2576@0, "command",	  "color",	  "print",			  "(c:color):void ",											  "CLRprintf;"				  ]
[ 2577@0, "command",	  "color",	  "red",			  "(c:color):int ",											  "CLRred;"				  ]
[ 2578@0, "command",	  "color",	  "rgb",			  "(r:int,g:int,b:int):color ",										  "CLRrgb;"				  ]
[ 2579@0, "command",	  "color",	  "saturation",			  "(c:color):flt ",											  "CLRsaturation;"			  ]
[ 2580@0, "command",	  "color",	  "saturation",			  "(c:color):int ",											  "CLRsaturationInt;"			  ]
[ 2581@0, "command",	  "color",	  "str",			  "(s:color):str ",											  "CLRstr;"				  ]
[ 2582@0, "command",	  "color",	  "#tostr",			  "():str ",												  "color_tostr;"			  ]
[ 2583@0, "command",	  "color",	  "value",			  "(c:color):flt ",											  "CLRvalue;"				  ]
[ 2584@0, "command",	  "color",	  "value",			  "(c:color):int ",											  "CLRvalueInt;"			  ]
[ 2585@0, "command",	  "color",	  "ycc",			  "(y:int,cr:int,cb:int):color ",									  "CLRycc;"				  ]
[ 2586@0, "command",	  "blob",	  "#convert",			  "():void ",												  "BLOBconvert;"			  ]
[ 2587@0, "command",	  "blob",	  "#del",			  "():void ",												  "BLOBdel;"				  ]
[ 2588@0, "command",	  "blob",	  "#fromstr",			  "():void ",												  "BLOBfromstr;"			  ]
[ 2589@0, "command",	  "blob",	  "#heap",			  "():void ",												  "BLOBheap;"				  ]
[ 2590@0, "command",	  "blob",	  "#hash",			  "():void ",												  "BLOBhash;"				  ]
[ 2591@0, "command",	  "blob",	  "#length",			  "():void ",												  "BLOBlength;"				  ]
[ 2592@0, "command",	  "blob",	  "nitems",			  "(b:blob):int ",											  "BLOBnitems;"				  ]
[ 2593@0, "command",	  "blob",	  "null",			  "():void ",												  "BLOBnull;"				  ]
[ 2594@0, "command",	  "blob",	  "#nequal",			  "():void ",												  "BLOBnequal;"				  ]
[ 2595@0, "command",	  "blob",	  "#put",			  "():void ",												  "BLOBput;"				  ]
[ 2596@0, "command",	  "blob",	  "#read",			  "():void ",												  "BLOBread;"				  ]
[ 2597@0, "command",	  "blob",	  "toblob",			  "(v:str):blob ",											  "BLOBtoblob;"				  ]
[ 2598@0, "command",	  "blob",	  "tostring",			  "(v:blob,index:int):str ",										  "BLOBfromidx;"			  ]
[ 2599@0, "command",	  "blob",	  "tostring",			  "(v:blob):str ",											  "BLOBfromblob;"			  ]
[ 2600@0, "command",	  "blob",	  "#tostr",			  "():void ",												  "BLOBtostr;"				  ]
[ 2601@0, "command",	  "blob",	  "#write",			  "():void ",												  "BLOBwrite;"				  ]
[ 2602@0, "command",	  "sqlblob",	  "#fromstr",			  "():void ",												  "SQLBLOBfromstr;"			  ]
[ 2603@0, "command",	  "sqlblob",	  "#tostr",			  "():void ",												  "SQLBLOBtostr;"			  ]
[ 2604@0, "command",	  "streams",	  "blocked",			  "(s:streams):streams ",										  "open_block_streamwrap;"		  ]
[ 2605@0, "command",	  "streams",	  "close",			  "(s:streams):void ",											  "stream_close_streamwrap;"		  ]
[ 2606@0, "command",	  "streams",	  "flush",			  "(s:streams):void ",											  "stream_flush_streamwrap;"		  ]
[ 2607@0, "command",	  "streams",	  "openWrite",			  "(s:streams):streams ",										  "stream_stream_wstreamwrap;"		  ]
[ 2608@0, "command",	  "streams",	  "openRead",			  "(s:streams):streams ",										  "stream_stream_rstreamwrap;"		  ]
[ 2609@0, "command",	  "streams",	  "openWrite",			  "(filename:str):streams ",										  "stream_open_wastreamwrap;"		  ]
[ 2610@0, "command",	  "streams",	  "openRead",			  "(filename:str):streams ",										  "stream_open_rastreamwrap;"		  ]
[ 2611@0, "command",	  "streams",	  "openWriteBytes",		  "(filename:str):streams ",										  "stream_open_wstreamwrap;"		  ]
[ 2612@0, "command",	  "streams",	  "openReadBytes",		  "(filename:str):streams ",										  "stream_open_rstreamwrap;"		  ]
[ 2613@0, "command",	  "streams",	  "readInt",			  "(s:streams):int ",											  "stream_readIntwrap;"			  ]
[ 2614@0, "command",	  "streams",	  "readStr",			  "(s:streams):str ",											  "stream_read_stringwrap;"		  ]
[ 2615@0, "command",	  "streams",	  "socketWrite",		  "(skt:int,name:str):streams ",									  "stream_socket_wastreamwrap;"		  ]
[ 2616@0, "command",	  "streams",	  "socketRead",			  "(skt:int,name:str):streams ",									  "stream_socket_rastreamwrap;"		  ]
[ 2617@0, "command",	  "streams",	  "socketWriteBytes",		  "(skt:int,name:str):streams ",									  "stream_socket_wstreamwrap;"		  ]
[ 2618@0, "command",	  "streams",	  "socketReadBytes",		  "(skt:int,name:str):streams ",									  "stream_socket_rstreamwrap;"		  ]
[ 2619@0, "command",	  "streams",	  "writeInt",			  "(s:streams,data:int):void ",										  "stream_writeIntwrap;"		  ]
[ 2620@0, "command",	  "streams",	  "writeStr",			  "(s:streams,data:str):void ",										  "stream_write_stringwrap;"		  ]
[ 2621@0, "command",	  "bstream",	  "create",			  "(s:streams,bufsize:int):bstream ",									  "bstream_create_wrapwrap;"		  ]
[ 2622@0, "command",	  "bstream",	  "destroy",			  "(s:bstream):void ",											  "bstream_destroy_wrapwrap;"		  ]
[ 2623@0, "command",	  "bstream",	  "read",			  "(s:bstream,size:int):int ",										  "bstream_read_wrapwrap;"		  ]
[ 2624@0, "command",	  "mmath",	  "atan2",			  "(x:dbl,y:dbl):dbl ",											  "MATHbinary_ATAN2dbl;"		  ]
[ 2625@0, "command",	  "mmath",	  "atan2",			  "(x:flt,y:flt):flt ",											  "MATHbinary_ATAN2flt;"		  ]
[ 2626@0, "command",	  "mmath",	  "atan",			  "(x:dbl):dbl ",											  "MATHunary_ATANdbl;"			  ]
[ 2627@0, "command",	  "mmath",	  "atan",			  "(x:flt):flt ",											  "MATHunary_ATANflt;"			  ]
[ 2628@0, "command",	  "mmath",	  "asin",			  "(x:dbl):dbl ",											  "MATHunary_ASINdbl;"			  ]
[ 2629@0, "command",	  "mmath",	  "asin",			  "(x:flt):flt ",											  "MATHunary_ASINflt;"			  ]
[ 2630@0, "command",	  "mmath",	  "acos",			  "(x:dbl):dbl ",											  "MATHunary_ACOSdbl;"			  ]
[ 2631@0, "command",	  "mmath",	  "acos",			  "(x:flt):flt ",											  "MATHunary_ACOSflt;"			  ]
[ 2632@0, "command",	  "mmath",	  "ceil",			  "(y:dbl):dbl ",											  "MATHunary_CEILdbl;"			  ]
[ 2633@0, "command",	  "mmath",	  "ceil",			  "(y:flt):flt ",											  "MATHunary_CEILflt;"			  ]
[ 2634@0, "command",	  "mmath",	  "cosh",			  "(x:dbl):dbl ",											  "MATHunary_COSHdbl;"			  ]
[ 2635@0, "command",	  "mmath",	  "cosh",			  "(x:flt):flt ",											  "MATHunary_COSHflt;"			  ]
[ 2636@0, "command",	  "mmath",	  "cos",			  "(x:dbl):dbl ",											  "MATHunary_COSdbl;"			  ]
[ 2637@0, "command",	  "mmath",	  "cos",			  "(x:flt):flt ",											  "MATHunary_COSflt;"			  ]
[ 2638@0, "command",	  "mmath",	  "exp",			  "(x:dbl):dbl ",											  "MATHunary_EXPdbl;"			  ]
[ 2639@0, "command",	  "mmath",	  "exp",			  "(x:flt):flt ",											  "MATHunary_EXPflt;"			  ]
[ 2640@0, "command",	  "mmath",	  "finite",			  "(d:dbl):bit ",											  "math_unary_FINITE;"			  ]
[ 2641@0, "command",	  "mmath",	  "fmod",			  "(y:dbl,x:dbl):dbl ",											  "MATHbinary_FMODdbl;"			  ]
[ 2642@0, "command",	  "mmath",	  "fmod",			  "(y:flt,x:flt):flt ",											  "MATHbinary_FMODflt;"			  ]
[ 2643@0, "command",	  "mmath",	  "floor",			  "(y:dbl):dbl ",											  "MATHunary_FLOORdbl;"			  ]
[ 2644@0, "command",	  "mmath",	  "floor",			  "(y:flt):flt ",											  "MATHunary_FLOORflt;"			  ]
[ 2645@0, "command",	  "mmath",	  "fabs",			  "(y:dbl):dbl ",											  "MATHunary_FABSdbl;"			  ]
[ 2646@0, "command",	  "mmath",	  "isinf",			  "(d:dbl):int ",											  "math_unary_ISINF;"			  ]
[ 2647@0, "command",	  "mmath",	  "isnan",			  "(d:dbl):bit ",											  "math_unary_ISNAN;"			  ]
[ 2648@0, "command",	  "mmath",	  "log10",			  "(x:dbl):dbl ",											  "MATHunary_LOG10dbl;"			  ]
[ 2649@0, "command",	  "mmath",	  "log",			  "(x:dbl):dbl ",											  "MATHunary_LOGdbl;"			  ]
[ 2650@0, "command",	  "mmath",	  "pow",			  "(x:dbl,y:dbl):dbl ",											  "MATHbinary_POWdbl;"			  ]
[ 2651@0, "command",	  "mmath",	  "pow",			  "(x:flt,y:flt):flt ",											  "MATHbinary_POWflt;"			  ]
[ 2652@0, "command",	  "mmath",	  "rand",			  "():int ",												  "MATHrandint;"			  ]
[ 2653@0, "command",	  "mmath",	  "round",			  "(x:dbl,y:int):dbl ",											  "MATHbinary_ROUNDdbl;"		  ]
[ 2654@0, "command",	  "mmath",	  "round",			  "(x:flt,y:int):flt ",											  "MATHbinary_ROUNDflt;"		  ]
[ 2655@0, "command",	  "mmath",	  "srand",			  "(seed:int):void ",											  "MATHsrandint;"			  ]
[ 2656@0, "command",	  "mmath",	  "sqrt",			  "(y:dbl):dbl ",											  "MATHunary_SQRTdbl;"			  ]
[ 2657@0, "command",	  "mmath",	  "sqrt",			  "(y:flt):flt ",											  "MATHunary_SQRTflt;"			  ]
[ 2658@0, "command",	  "mmath",	  "sinh",			  "(x:dbl):dbl ",											  "MATHunary_SINHdbl;"			  ]
[ 2659@0, "command",	  "mmath",	  "sinh",			  "(x:flt):flt ",											  "MATHunary_SINHflt;"			  ]
[ 2660@0, "command",	  "mmath",	  "sin",			  "(x:dbl):dbl ",											  "MATHunary_SINdbl;"			  ]
[ 2661@0, "command",	  "mmath",	  "sin",			  "(x:flt):flt ",											  "MATHunary_SINflt;"			  ]
[ 2662@0, "command",	  "mmath",	  "tanh",			  "(x:dbl):dbl ",											  "MATHunary_TANHdbl;"			  ]
[ 2663@0, "command",	  "mmath",	  "tanh",			  "(x:flt):flt ",											  "MATHunary_TANHflt;"			  ]
[ 2664@0, "command",	  "mmath",	  "tan",			  "(x:dbl):dbl ",											  "MATHunary_TANdbl;"			  ]
[ 2665@0, "command",	  "mmath",	  "tan",			  "(x:flt):flt ",											  "MATHunary_TANflt;"			  ]
[ 2666@0, "command",	  "alarm",	  "alarm",			  "(secs:int,action:str):void ",									  "ALARMsetalarm;"			  ]
[ 2667@0, "command",	  "alarm",	  "ctime",			  "():str ",												  "ALARMctime;"				  ]
[ 2668@0, "command",	  "alarm",	  "epilogue",			  "():void ",												  "ALARMepilogue;"			  ]
[ 2669@0, "command",	  "alarm",	  "epoch",			  "():int ",												  "ALARMepoch;"				  ]
[ 2670@0, "command",	  "alarm",	  "prelude",			  "():void ",												  "ALARMprelude;"			  ]
[ 2671@0, "command",	  "alarm",	  "sleep",			  "(secs:int):void ",											  "ALARMsleep;"				  ]
[ 2672@0, "command",	  "alarm",	  "time",			  "():int ",												  "ALARMtime;"				  ]
[ 2673@0, "command",	  "alarm",	  "timers",			  "():bat[:str,:str] ",											  "ALARMtimers;"			  ]
[ 2674@0, "command",	  "alarm",	  "usec",			  "():lng ",												  "ALARMusec;"				  ]
[ 2675@0, "command",	  "sema",	  "create",			  "(init:int):sema ",											  "SEMAcreate;"				  ]
[ 2676@0, "command",	  "sema",	  "destroy",			  "(s:sema):void ",											  "SEMAdestroy;"			  ]
[ 2677@0, "command",	  "sema",	  "down",			  "(s:sema):void ",											  "SEMAdown;"				  ]
[ 2678@0, "command",	  "sema",	  "up",				  "(s:sema):void ",											  "SEMAup;"				  ]
[ 2679@0, "command",	  "lock",	  "create",			  "():lock ",												  "LCKcreate;"				  ]
[ 2680@0, "command",	  "lock",	  "destroy",			  "(l:lock):void ",											  "LCKdestroy;"				  ]
[ 2681@0, "command",	  "lock",	  "set",			  "(l:lock):void ",											  "LCKset;"				  ]
[ 2682@0, "command",	  "lock",	  "tostr",			  "(l:lock):void ",											  "lockToStr;"				  ]
[ 2683@0, "command",	  "lock",	  "try",			  "(l:lock):int ",											  "LCKtry;"				  ]
[ 2684@0, "command",	  "lock",	  "unset",			  "(l:lock):void ",											  "LCKunset;"				  ]
[ 2685@0, "command",	  "unix",	  "getenv",			  "(nme:str):str ",											  "UNIXgetenv;"				  ]
[ 2686@0, "command",	  "unix",	  "setenv",			  "(nme:str,val:str):bit ",										  "UNIXsetenv;"				  ]
[ 2687@0, "pattern",	  "mdb",	  "List",			  "(M:str,F:str):void ",										  "MDBlist3Detail;"			  ]
[ 2688@0, "pattern",	  "mdb",	  "List",			  "():void ",												  "MDBlistDetail;"			  ]
[ 2689@0, "pattern",	  "mdb",	  "getDefinition",		  "():bat[:void,:str] ",										  "MDBcodeDump;"			  ]
[ 2690@0, "pattern",	  "mdb",	  "getStackTrace",		  "():bat[:void,:str] ",										  "MDBStkTrace;"			  ]
[ 2691@0, "pattern",	  "mdb",	  "getStackFrame",		  "():bat[:str,:str] ",											  "MDBStkFrame;"			  ]
[ 2692@0, "pattern",	  "mdb",	  "getStackFrame",		  "(i:int):bat[:str,:str] ",										  "MDBStkFrameN;"			  ]
[ 2693@0, "pattern",	  "mdb",	  "getStackDepth",		  "():int ",												  "MDBStkDepth;"			  ]
[ 2694@0, "command",	  "mdb",	  "getExceptionContext",	  "(s:str):str ",											  "MDBgetExceptionContext;"		  ]
[ 2695@0, "command",	  "mdb",	  "getExceptionReason",		  "(s:str):str ",											  "MDBgetExceptionReason;"		  ]
[ 2696@0, "command",	  "mdb",	  "getExceptionVariable",	  "(s:str):str ",											  "MDBgetExceptionVariable;"		  ]
[ 2697@0, "pattern",	  "mdb",	  "inspect",			  "(mod:str,fcn:str):void ",										  "MDBinspect;"				  ]
[ 2698@0, "pattern",	  "mdb",	  "list",			  "(M:str,F:str):void ",										  "MDBlist3;"				  ]
[ 2699@0, "pattern",	  "mdb",	  "list",			  "():void ",												  "MDBlist;"				  ]
[ 2700@0, "pattern",	  "mdb",	  "setTimer",			  "(b:bit):void ",											  "MDBsetTimer;"			  ]
[ 2701@0, "pattern",	  "mdb",	  "setCatch",			  "(b:bit):void ",											  "MDBsetCatch;"			  ]
[ 2702@0, "pattern",	  "mdb",	  "setTrace",			  "(b:bit):void ",											  "MDBsetTrace;"			  ]
[ 2703@0, "pattern",	  "mdb",	  "stop",			  "():void ",												  "MDBstop;"				  ]
[ 2704@0, "pattern",	  "mdb",	  "start",			  "():void ",												  "MDBstart;"				  ]
[ 2705@0, "pattern",	  "mdb",	  "var",			  "(M:str,F:str):void ",										  "MDBvar3;"				  ]
[ 2706@0, "pattern",	  "mdb",	  "var",			  "():void ",												  "MDBvar;"				  ]
[ 2707@0, "command",	  "crackers",	  "crackOrdered_validate",	  "(b:bat[:oid,:dbl],low:dbl,hgh:dbl):bit ",								  "CRKcrackOrderedTwo_validate_dbl;"	  ]
[ 2708@0, "command",	  "crackers",	  "crackOrdered_validate",	  "(b:bat[:oid,:dbl],mid:dbl):bit ",									  "CRKcrackOrderedOne_validate_dbl;"	  ]
[ 2709@0, "command",	  "crackers",	  "crackOrdered_validate",	  "(b:bat[:oid,:flt],low:flt,hgh:flt):bit ",								  "CRKcrackOrderedTwo_validate_flt;"	  ]
[ 2710@0, "command",	  "crackers",	  "crackOrdered_validate",	  "(b:bat[:oid,:flt],mid:flt):bit ",									  "CRKcrackOrderedOne_validate_flt;"	  ]
[ 2711@0, "command",	  "crackers",	  "crackOrdered_validate",	  "(b:bat[:oid,:lng],low:lng,hgh:lng):bit ",								  "CRKcrackOrderedTwo_validate_lng;"	  ]
[ 2712@0, "command",	  "crackers",	  "crackOrdered_validate",	  "(b:bat[:oid,:lng],mid:lng):bit ",									  "CRKcrackOrderedOne_validate_lng;"	  ]
[ 2713@0, "command",	  "crackers",	  "crackOrdered_validate",	  "(b:bat[:oid,:int],low:int,hgh:int):bit ",								  "CRKcrackOrderedTwo_validate_int;"	  ]
[ 2714@0, "command",	  "crackers",	  "crackOrdered_validate",	  "(b:bat[:oid,:int],mid:int):bit ",									  "CRKcrackOrderedOne_validate_int;"	  ]
[ 2715@0, "command",	  "crackers",	  "crackOrdered_validate",	  "(b:bat[:oid,:sht],low:sht,hgh:sht):bit ",								  "CRKcrackOrderedTwo_validate_sht;"	  ]
[ 2716@0, "command",	  "crackers",	  "crackOrdered_validate",	  "(b:bat[:oid,:sht],mid:sht):bit ",									  "CRKcrackOrderedOne_validate_sht;"	  ]
[ 2717@0, "command",	  "crackers",	  "crackOrdered_validate",	  "(b:bat[:oid,:chr],low:chr,hgh:chr):bit ",								  "CRKcrackOrderedTwo_validate_chr;"	  ]
[ 2718@0, "command",	  "crackers",	  "crackOrdered_validate",	  "(b:bat[:oid,:chr],mid:chr):bit ",									  "CRKcrackOrderedOne_validate_chr;"	  ]
[ 2719@0, "command",	  "crackers",	  "crackOrdered",		  "(b:bat[:oid,:dbl],low:dbl,hgh:dbl):bat[:oid,:dbl] ",							  "CRKcrackOrderedTwo_dbl;"		  ]
[ 2720@0, "command",	  "crackers",	  "crackOrdered",		  "(b:bat[:oid,:dbl],mid:dbl):bat[:oid,:dbl] ",								  "CRKcrackOrderedOne_dbl;"		  ]
[ 2721@0, "command",	  "crackers",	  "crackOrdered",		  "(b:bat[:oid,:flt],low:flt,hgh:flt):bat[:oid,:flt] ",							  "CRKcrackOrderedTwo_flt;"		  ]
[ 2722@0, "command",	  "crackers",	  "crackOrdered",		  "(b:bat[:oid,:flt],mid:flt):bat[:oid,:flt] ",								  "CRKcrackOrderedOne_flt;"		  ]
[ 2723@0, "command",	  "crackers",	  "crackOrdered",		  "(b:bat[:oid,:lng],low:lng,hgh:lng):bat[:oid,:lng] ",							  "CRKcrackOrderedTwo_lng;"		  ]
[ 2724@0, "command",	  "crackers",	  "crackOrdered",		  "(b:bat[:oid,:lng],mid:lng):bat[:oid,:lng] ",								  "CRKcrackOrderedOne_lng;"		  ]
[ 2725@0, "command",	  "crackers",	  "crackOrdered",		  "(b:bat[:oid,:int],low:int,hgh:int):bat[:oid,:int] ",							  "CRKcrackOrderedTwo_int;"		  ]
[ 2726@0, "command",	  "crackers",	  "crackOrdered",		  "(b:bat[:oid,:int],mid:int):bat[:oid,:int] ",								  "CRKcrackOrderedOne_int;"		  ]
[ 2727@0, "command",	  "crackers",	  "crackOrdered",		  "(b:bat[:oid,:sht],low:sht,hgh:sht):bat[:oid,:sht] ",							  "CRKcrackOrderedTwo_sht;"		  ]
[ 2728@0, "command",	  "crackers",	  "crackOrdered",		  "(b:bat[:oid,:sht],mid:sht):bat[:oid,:sht] ",								  "CRKcrackOrderedOne_sht;"		  ]
[ 2729@0, "command",	  "crackers",	  "crackOrdered",		  "(b:bat[:oid,:chr],low:chr,hgh:chr):bat[:oid,:chr] ",							  "CRKcrackOrderedTwo_chr;"		  ]
[ 2730@0, "command",	  "crackers",	  "crackOrdered",		  "(b:bat[:oid,:chr],mid:chr):bat[:oid,:chr] ",								  "CRKcrackOrderedOne_chr;"		  ]
[ 2731@0, "command",	  "crackers",	  "newIndex",			  "(b:bat[:oid,:dbl]):void ",										  "CRKnewIndex;"			  ]
[ 2732@0, "command",	  "crackers",	  "newIndex",			  "(b:bat[:oid,:flt]):void ",										  "CRKnewIndex;"			  ]
[ 2733@0, "command",	  "crackers",	  "newIndex",			  "(b:bat[:oid,:lng]):void ",										  "CRKnewIndex;"			  ]
[ 2734@0, "command",	  "crackers",	  "newIndex",			  "(b:bat[:oid,:int]):void ",										  "CRKnewIndex;"			  ]
[ 2735@0, "command",	  "crackers",	  "newIndex",			  "(b:bat[:oid,:sht]):void ",										  "CRKnewIndex;"			  ]
[ 2736@0, "command",	  "crackers",	  "newIndex",			  "(b:bat[:oid,:chr]):void ",										  "CRKnewIndex;"			  ]
[ 2737@0, "command",	  "crackers",	  "printIndex",			  "(b:bat[:oid,:dbl]):void ",										  "CRKprintIndex;"			  ]
[ 2738@0, "command",	  "crackers",	  "printIndex",			  "(b:bat[:oid,:flt]):void ",										  "CRKprintIndex;"			  ]
[ 2739@0, "command",	  "crackers",	  "printIndex",			  "(b:bat[:oid,:lng]):void ",										  "CRKprintIndex;"			  ]
[ 2740@0, "command",	  "crackers",	  "printIndex",			  "(b:bat[:oid,:int]):void ",										  "CRKprintIndex;"			  ]
[ 2741@0, "command",	  "crackers",	  "printIndex",			  "(b:bat[:oid,:sht]):void ",										  "CRKprintIndex;"			  ]
[ 2742@0, "command",	  "crackers",	  "printIndex",			  "(b:bat[:oid,:chr]):void ",										  "CRKprintIndex;"			  ]
[ 2743@0, "command",	  "crackers",	  "select",			  "(b:bat[:any_1,:dbl],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:oid,:dbl] ",				  "CRKselectBounds_dbl;"		  ]
[ 2744@0, "command",	  "crackers",	  "select",			  "(b:bat[:oid,:dbl],l:dbl):bat[:oid,:dbl] ",								  "CRKselectValue_dbl;"			  ]
[ 2745@0, "command",	  "crackers",	  "select",			  "(b:bat[:oid,:dbl],l:dbl,h:dbl):bat[:oid,:dbl] ",							  "CRKselect_dbl;"			  ]
[ 2746@0, "command",	  "crackers",	  "select",			  "(b:bat[:any_1,:flt],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:oid,:flt] ",				  "CRKselectBounds_flt;"		  ]
[ 2747@0, "command",	  "crackers",	  "select",			  "(b:bat[:oid,:flt],l:flt):bat[:oid,:flt] ",								  "CRKselectValue_flt;"			  ]
[ 2748@0, "command",	  "crackers",	  "select",			  "(b:bat[:oid,:flt],l:flt,h:flt):bat[:oid,:flt] ",							  "CRKselect_flt;"			  ]
[ 2749@0, "command",	  "crackers",	  "select",			  "(b:bat[:any_1,:lng],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:oid,:lng] ",				  "CRKselectBounds_lng;"		  ]
[ 2750@0, "command",	  "crackers",	  "select",			  "(b:bat[:oid,:lng],l:lng):bat[:oid,:lng] ",								  "CRKselectValue_lng;"			  ]
[ 2751@0, "command",	  "crackers",	  "select",			  "(b:bat[:oid,:lng],l:lng,h:lng):bat[:oid,:lng] ",							  "CRKselect_lng;"			  ]
[ 2752@0, "command",	  "crackers",	  "select",			  "(b:bat[:any_1,:int],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:oid,:int] ",				  "CRKselectBounds_int;"		  ]
[ 2753@0, "command",	  "crackers",	  "select",			  "(b:bat[:oid,:int],l:int):bat[:oid,:int] ",								  "CRKselectValue_int;"			  ]
[ 2754@0, "command",	  "crackers",	  "select",			  "(b:bat[:oid,:int],l:int,h:int):bat[:oid,:int] ",							  "CRKselect_int;"			  ]
[ 2755@0, "command",	  "crackers",	  "select",			  "(b:bat[:any_1,:sht],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:oid,:sht] ",				  "CRKselectBounds_sht;"		  ]
[ 2756@0, "command",	  "crackers",	  "select",			  "(b:bat[:oid,:sht],l:sht):bat[:oid,:sht] ",								  "CRKselectValue_sht;"			  ]
[ 2757@0, "command",	  "crackers",	  "select",			  "(b:bat[:oid,:sht],l:sht,h:sht):bat[:oid,:sht] ",							  "CRKselect_sht;"			  ]
[ 2758@0, "command",	  "crackers",	  "select",			  "(b:bat[:any_1,:chr],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:oid,:chr] ",				  "CRKselectBounds_chr;"		  ]
[ 2759@0, "command",	  "crackers",	  "select",			  "(b:bat[:oid,:chr],l:chr):bat[:oid,:chr] ",								  "CRKselectValue_chr;"			  ]
[ 2760@0, "command",	  "crackers",	  "select",			  "(b:bat[:oid,:chr],l:chr,h:chr):bat[:oid,:chr] ",							  "CRKselect_chr;"			  ]
[ 2761@0, "command",	  "crackers",	  "uselect",			  "(b:bat[:any_1,:dbl],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:oid,:void] ",				  "CRKuselectBounds_dbl;"		  ]
[ 2762@0, "command",	  "crackers",	  "uselect",			  "(b:bat[:oid,:dbl],l:dbl):bat[:oid,:void] ",								  "CRKuselectValue_dbl;"		  ]
[ 2763@0, "command",	  "crackers",	  "uselect",			  "(b:bat[:oid,:dbl],l:dbl,h:dbl):bat[:oid,:void] ",							  "CRKuselect_dbl;"			  ]
[ 2764@0, "command",	  "crackers",	  "uselect",			  "(b:bat[:any_1,:flt],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:oid,:void] ",				  "CRKuselectBounds_flt;"		  ]
[ 2765@0, "command",	  "crackers",	  "uselect",			  "(b:bat[:oid,:flt],l:flt):bat[:oid,:void] ",								  "CRKuselectValue_flt;"		  ]
[ 2766@0, "command",	  "crackers",	  "uselect",			  "(b:bat[:oid,:flt],l:flt,h:flt):bat[:oid,:void] ",							  "CRKuselect_flt;"			  ]
[ 2767@0, "command",	  "crackers",	  "uselect",			  "(b:bat[:any_1,:lng],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:oid,:void] ",				  "CRKuselectBounds_lng;"		  ]
[ 2768@0, "command",	  "crackers",	  "uselect",			  "(b:bat[:oid,:lng],l:lng):bat[:oid,:void] ",								  "CRKuselectValue_lng;"		  ]
[ 2769@0, "command",	  "crackers",	  "uselect",			  "(b:bat[:oid,:lng],l:lng,h:lng):bat[:oid,:void] ",							  "CRKuselect_lng;"			  ]
[ 2770@0, "command",	  "crackers",	  "uselect",			  "(b:bat[:any_1,:int],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:oid,:void] ",				  "CRKuselectBounds_int;"		  ]
[ 2771@0, "command",	  "crackers",	  "uselect",			  "(b:bat[:oid,:int],l:int):bat[:oid,:void] ",								  "CRKuselectValue_int;"		  ]
[ 2772@0, "command",	  "crackers",	  "uselect",			  "(b:bat[:oid,:int],l:int,h:int):bat[:oid,:void] ",							  "CRKuselect_int;"			  ]
[ 2773@0, "command",	  "crackers",	  "uselect",			  "(b:bat[:any_1,:sht],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:oid,:void] ",				  "CRKuselectBounds_sht;"		  ]
[ 2774@0, "command",	  "crackers",	  "uselect",			  "(b:bat[:oid,:sht],l:sht):bat[:oid,:void] ",								  "CRKuselectValue_sht;"		  ]
[ 2775@0, "command",	  "crackers",	  "uselect",			  "(b:bat[:oid,:sht],l:sht,h:sht):bat[:oid,:void] ",							  "CRKuselect_sht;"			  ]
[ 2776@0, "command",	  "crackers",	  "uselect",			  "(b:bat[:any_1,:chr],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:oid,:void] ",				  "CRKuselectBounds_chr;"		  ]
[ 2777@0, "command",	  "crackers",	  "uselect",			  "(b:bat[:oid,:chr],l:chr):bat[:oid,:void] ",								  "CRKuselectValue_chr;"		  ]
[ 2778@0, "command",	  "crackers",	  "uselect",			  "(b:bat[:oid,:chr],l:chr,h:chr):bat[:oid,:void] ",							  "CRKuselect_chr;"			  ]
[ 2779@0, "command",	  "crackers",	  "zcrackOrdered_validate",	  "(b:bat[:oid,:dbl],low:dbl,hgh:dbl):bit ",								  "CRKcrackOrderedThree_validate_dbl;"	  ]
[ 2780@0, "command",	  "crackers",	  "zcrackOrdered_validate",	  "(b:bat[:oid,:dbl],mid:dbl):bit ",									  "CRKcrackOrderedZero_validate_dbl;"	  ]
[ 2781@0, "command",	  "crackers",	  "zcrackOrdered_validate",	  "(b:bat[:oid,:flt],low:flt,hgh:flt):bit ",								  "CRKcrackOrderedThree_validate_flt;"	  ]
[ 2782@0, "command",	  "crackers",	  "zcrackOrdered_validate",	  "(b:bat[:oid,:flt],mid:flt):bit ",									  "CRKcrackOrderedZero_validate_flt;"	  ]
[ 2783@0, "command",	  "crackers",	  "zcrackOrdered_validate",	  "(b:bat[:oid,:lng],low:lng,hgh:lng):bit ",								  "CRKcrackOrderedThree_validate_lng;"	  ]
[ 2784@0, "command",	  "crackers",	  "zcrackOrdered_validate",	  "(b:bat[:oid,:lng],mid:lng):bit ",									  "CRKcrackOrderedZero_validate_lng;"	  ]
[ 2785@0, "command",	  "crackers",	  "zcrackOrdered_validate",	  "(b:bat[:oid,:int],low:int,hgh:int):bit ",								  "CRKcrackOrderedThree_validate_int;"	  ]
[ 2786@0, "command",	  "crackers",	  "zcrackOrdered_validate",	  "(b:bat[:oid,:int],mid:int):bit ",									  "CRKcrackOrderedZero_validate_int;"	  ]
[ 2787@0, "command",	  "crackers",	  "zcrackOrdered_validate",	  "(b:bat[:oid,:sht],low:sht,hgh:sht):bit ",								  "CRKcrackOrderedThree_validate_sht;"	  ]
[ 2788@0, "command",	  "crackers",	  "zcrackOrdered_validate",	  "(b:bat[:oid,:sht],mid:sht):bit ",									  "CRKcrackOrderedZero_validate_sht;"	  ]
[ 2789@0, "command",	  "crackers",	  "zcrackOrdered_validate",	  "(b:bat[:oid,:chr],low:chr,hgh:chr):bit ",								  "CRKcrackOrderedThree_validate_chr;"	  ]
[ 2790@0, "command",	  "crackers",	  "zcrackOrdered_validate",	  "(b:bat[:oid,:chr],mid:chr):bit ",									  "CRKcrackOrderedZero_validate_chr;"	  ]
[ 2791@0, "command",	  "crackers",	  "zcrackOrdered",		  "(b:bat[:oid,:dbl],low:dbl,hgh:dbl):bat[:oid,:dbl] ",							  "CRKcrackOrderedThree_dbl;"		  ]
[ 2792@0, "command",	  "crackers",	  "zcrackOrdered",		  "(b:bat[:oid,:dbl],mid:dbl):bat[:oid,:dbl] ",								  "CRKcrackOrderedZero_dbl;"		  ]
[ 2793@0, "command",	  "crackers",	  "zcrackOrdered",		  "(b:bat[:oid,:flt],low:flt,hgh:flt):bat[:oid,:flt] ",							  "CRKcrackOrderedThree_flt;"		  ]
[ 2794@0, "command",	  "crackers",	  "zcrackOrdered",		  "(b:bat[:oid,:flt],mid:flt):bat[:oid,:flt] ",								  "CRKcrackOrderedZero_flt;"		  ]
[ 2795@0, "command",	  "crackers",	  "zcrackOrdered",		  "(b:bat[:oid,:lng],low:lng,hgh:lng):bat[:oid,:lng] ",							  "CRKcrackOrderedThree_lng;"		  ]
[ 2796@0, "command",	  "crackers",	  "zcrackOrdered",		  "(b:bat[:oid,:lng],mid:lng):bat[:oid,:lng] ",								  "CRKcrackOrderedZero_lng;"		  ]
[ 2797@0, "command",	  "crackers",	  "zcrackOrdered",		  "(b:bat[:oid,:int],low:int,hgh:int):bat[:oid,:int] ",							  "CRKcrackOrderedThree_int;"		  ]
[ 2798@0, "command",	  "crackers",	  "zcrackOrdered",		  "(b:bat[:oid,:int],mid:int):bat[:oid,:int] ",								  "CRKcrackOrderedZero_int;"		  ]
[ 2799@0, "command",	  "crackers",	  "zcrackOrdered",		  "(b:bat[:oid,:sht],low:sht,hgh:sht):bat[:oid,:sht] ",							  "CRKcrackOrderedThree_sht;"		  ]
[ 2800@0, "command",	  "crackers",	  "zcrackOrdered",		  "(b:bat[:oid,:sht],mid:sht):bat[:oid,:sht] ",								  "CRKcrackOrderedZero_sht;"		  ]
[ 2801@0, "command",	  "crackers",	  "zcrackOrdered",		  "(b:bat[:oid,:chr],low:chr,hgh:chr):bat[:oid,:chr] ",							  "CRKcrackOrderedThree_chr;"		  ]
[ 2802@0, "command",	  "crackers",	  "zcrackOrdered",		  "(b:bat[:oid,:chr],mid:chr):bat[:oid,:chr] ",								  "CRKcrackOrderedZero_chr;"		  ]

# 00:03:55 >  
# 00:03:55 >  Done.
# 00:03:55 >  

