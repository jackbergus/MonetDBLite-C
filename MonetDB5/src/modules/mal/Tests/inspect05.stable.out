stdout of test 'inspect05` in directory 'src/modules/mal` itself:


# 07:22:37 >  
# 07:22:37 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=38414 --set xrpc_port=42448 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  inspect05.mal
# 07:22:37 >  

# MonetDB Server v5.0.0
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information
##Illustrate the modules loaded after start
#k:= inspect.getKind();
#m:= inspect.getModule();
#f:= inspect.getFunction();
#f1:= bat.reverse(f);
#f2:= algebra.ssort(f1);
#fs:= bat.reverse(f2);
#s:= inspect.getSignatures();
#a:= inspect.getAddresses();
#io.table(fs,k,m,s,a);
#
function user.main():void;	# 0  (main:void)
#Illustrate the modules loaded after start 	# 1  (_1:str)
    k := inspect.getKind();	# 2 INSPECTgetkind (k:bat[:oid,:str])
    m := inspect.getModule();	# 3 INSPECTgetAllModules (m:bat[:oid,:str])
    f := inspect.getFunction();	# 4 INSPECTgetAllFunctions (f:bat[:oid,:str])
    f1 := bat.reverse(f);	# 5 BKCreverse (f1:bat[:str,:oid])<-(f:bat[:oid,:str])
    f2 := algebra.ssort(f1);	# 6 ALGssort (f2:bat[:str,:oid])<-(f1:bat[:str,:oid])
    fs := bat.reverse(f2);	# 7 BKCreverse (fs:bat[:oid,:str])<-(f2:bat[:str,:oid])
    s := inspect.getSignatures();	# 8 INSPECTgetAllSignatures (s:bat[:oid,:str])
    a := inspect.getAddresses();	# 9 INSPECTgetAllAddresses (a:bat[:oid,:str])
    io.table(fs,k,m,s,a);	# 10 IOttable (_10:void)<-(fs:bat[:oid,:str])(k:bat[:oid,:str])(m:bat[:oid,:str])(s:bat[:oid,:str])(a:bat[:oid,:str])
end main;	# 11  
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
# h					symbol		symbol		 symbol															 symbol						  # name
# str					str		str		str															str						  # type
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
[ "main",				  "function",	  "user",	  "():void;",														  "nil"						  ]
[ "InsertAVLIndex",			  "command",	  "crackers",	  "(b:bat[:any_1,:date],u:bat[:any_1,:date]):void ",									  "CRKInsertAVLIndex_date;"			  ]
[ "InsertAVLIndex",			  "command",	  "crackers",	  "(b:bat[:any_1,:dbl],u:bat[:any_1,:dbl]):void ",									  "CRKInsertAVLIndex_dbl;"			  ]
[ "InsertAVLIndex",			  "command",	  "crackers",	  "(b:bat[:any_1,:flt],u:bat[:any_1,:flt]):void ",									  "CRKInsertAVLIndex_flt;"			  ]
[ "InsertAVLIndex",			  "command",	  "crackers",	  "(b:bat[:any_1,:lng],u:bat[:any_1,:lng]):void ",									  "CRKInsertAVLIndex_lng;"			  ]
[ "InsertAVLIndex",			  "command",	  "crackers",	  "(b:bat[:any_1,:int],u:bat[:any_1,:int]):void ",									  "CRKInsertAVLIndex_int;"			  ]
[ "InsertAVLIndex",			  "command",	  "crackers",	  "(b:bat[:any_1,:sht],u:bat[:any_1,:sht]):void ",									  "CRKInsertAVLIndex_sht;"			  ]
[ "InsertAVLIndex",			  "command",	  "crackers",	  "(b:bat[:any_1,:chr],u:bat[:any_1,:chr]):void ",									  "CRKInsertAVLIndex_chr;"			  ]
[ "buildAVLIndex",			  "command",	  "crackers",	  "(b:bat[:any_1,:date]):void ",											  "CRKmakeAVLIndex_date;"			  ]
[ "buildAVLIndex",			  "command",	  "crackers",	  "(b:bat[:any_1,:dbl]):void ",												  "CRKmakeAVLIndex_dbl;"			  ]
[ "buildAVLIndex",			  "command",	  "crackers",	  "(b:bat[:any_1,:flt]):void ",												  "CRKmakeAVLIndex_flt;"			  ]
[ "buildAVLIndex",			  "command",	  "crackers",	  "(b:bat[:any_1,:lng]):void ",												  "CRKmakeAVLIndex_lng;"			  ]
[ "buildAVLIndex",			  "command",	  "crackers",	  "(b:bat[:any_1,:int]):void ",												  "CRKmakeAVLIndex_int;"			  ]
[ "buildAVLIndex",			  "command",	  "crackers",	  "(b:bat[:any_1,:sht]):void ",												  "CRKmakeAVLIndex_sht;"			  ]
[ "buildAVLIndex",			  "command",	  "crackers",	  "(b:bat[:any_1,:chr]):void ",												  "CRKmakeAVLIndex_chr;"			  ]
[ "crackOrdered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:date],low:date,hgh:date):bit ",										  "CRKcrackOrderedTwo_validate_date;"		  ]
[ "crackOrdered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:date],mid:date):bit ",											  "CRKcrackOrderedOne_validate_date;"		  ]
[ "crackOrdered",			  "command",	  "crackers",	  "(b:bat[:oid,:date],mid:date):bat[:oid,:date] ",									  "CRKcrackOrderedOne_date;"			  ]
[ "crackOrdered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:dbl],low:dbl,hgh:dbl):bit ",										  "CRKcrackOrderedTwo_validate_dbl;"		  ]
[ "crackOrdered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:dbl],mid:dbl):bit ",											  "CRKcrackOrderedOne_validate_dbl;"		  ]
[ "crackOrdered",			  "command",	  "crackers",	  "(b:bat[:oid,:dbl],mid:dbl):bat[:oid,:dbl] ",										  "CRKcrackOrderedOne_dbl;"			  ]
[ "crackOrdered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:flt],low:flt,hgh:flt):bit ",										  "CRKcrackOrderedTwo_validate_flt;"		  ]
[ "crackOrdered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:flt],mid:flt):bit ",											  "CRKcrackOrderedOne_validate_flt;"		  ]
[ "crackOrdered",			  "command",	  "crackers",	  "(b:bat[:oid,:flt],mid:flt):bat[:oid,:flt] ",										  "CRKcrackOrderedOne_flt;"			  ]
[ "crackOrdered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:lng],low:lng,hgh:lng):bit ",										  "CRKcrackOrderedTwo_validate_lng;"		  ]
[ "crackOrdered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:lng],mid:lng):bit ",											  "CRKcrackOrderedOne_validate_lng;"		  ]
[ "crackOrdered",			  "command",	  "crackers",	  "(b:bat[:oid,:lng],mid:lng):bat[:oid,:lng] ",										  "CRKcrackOrderedOne_lng;"			  ]
[ "crackOrdered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:int],low:int,hgh:int):bit ",										  "CRKcrackOrderedTwo_validate_int;"		  ]
[ "crackOrdered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:int],mid:int):bit ",											  "CRKcrackOrderedOne_validate_int;"		  ]
[ "crackOrdered",			  "command",	  "crackers",	  "(b:bat[:oid,:int],mid:int):bat[:oid,:int] ",										  "CRKcrackOrderedOne_int;"			  ]
[ "crackOrdered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:sht],low:sht,hgh:sht):bit ",										  "CRKcrackOrderedTwo_validate_sht;"		  ]
[ "crackOrdered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:sht],mid:sht):bit ",											  "CRKcrackOrderedOne_validate_sht;"		  ]
[ "crackOrdered",			  "command",	  "crackers",	  "(b:bat[:oid,:sht],mid:sht):bat[:oid,:sht] ",										  "CRKcrackOrderedOne_sht;"			  ]
[ "crackOrdered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:chr],low:chr,hgh:chr):bit ",										  "CRKcrackOrderedTwo_validate_chr;"		  ]
[ "crackOrdered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:chr],mid:chr):bit ",											  "CRKcrackOrderedOne_validate_chr;"		  ]
[ "crackOrdered",			  "command",	  "crackers",	  "(b:bat[:oid,:chr],mid:chr):bat[:oid,:chr] ",										  "CRKcrackOrderedOne_chr;"			  ]
[ "deleteAVL",				  "command",	  "crackers",	  "(b:bat[:any_1,:date],u:bat[:any_2,:date]):void ",									  "CRKdeleteFromAVL_date;"			  ]
[ "deleteAVL",				  "command",	  "crackers",	  "(b:bat[:any_1,:dbl],u:bat[:any_2,:dbl]):void ",									  "CRKdeleteFromAVL_dbl;"			  ]
[ "deleteAVL",				  "command",	  "crackers",	  "(b:bat[:any_1,:flt],u:bat[:any_2,:flt]):void ",									  "CRKdeleteFromAVL_flt;"			  ]
[ "deleteAVL",				  "command",	  "crackers",	  "(b:bat[:any_1,:lng],u:bat[:any_2,:lng]):void ",									  "CRKdeleteFromAVL_lng;"			  ]
[ "deleteAVL",				  "command",	  "crackers",	  "(b:bat[:any_1,:int],u:bat[:any_2,:int]):void ",									  "CRKdeleteFromAVL_int;"			  ]
[ "deleteAVL",				  "command",	  "crackers",	  "(b:bat[:any_1,:sht],u:bat[:any_2,:sht]):void ",									  "CRKdeleteFromAVL_sht;"			  ]
[ "deleteAVL",				  "command",	  "crackers",	  "(b:bat[:any_1,:chr],u:bat[:any_2,:chr]):void ",									  "CRKdeleteFromAVL_chr;"			  ]
[ "deletionsOnNeedGraduallyRipple",	  "command",	  "crackers",	  "(b:bat[:any_1,:date],c:bat[:any_1,:date]):void ",									  "CRKmergeDeletions_OnNeedGraduallyRipple;"	  ]
[ "deletionsOnNeedGradually",		  "command",	  "crackers",	  "(b:bat[:any_1,:date],c:bat[:any_1,:date]):void ",									  "CRKmergeDeletions_OnNeedGradually;"		  ]
[ "deletionsOnNeed",			  "command",	  "crackers",	  "(b:bat[:any_1,:date],c:bat[:any_1,:date]):void ",									  "CRKmergeDeletions_OnNeed;"			  ]
[ "deletionsOnNeedGraduallyRipple",	  "command",	  "crackers",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):void ",									  "CRKmergeDeletions_OnNeedGraduallyRipple;"	  ]
[ "deletionsOnNeedGradually",		  "command",	  "crackers",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):void ",									  "CRKmergeDeletions_OnNeedGradually;"		  ]
[ "deletionsOnNeed",			  "command",	  "crackers",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):void ",									  "CRKmergeDeletions_OnNeed;"			  ]
[ "deletionsOnNeedGraduallyRipple",	  "command",	  "crackers",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):void ",									  "CRKmergeDeletions_OnNeedGraduallyRipple;"	  ]
[ "deletionsOnNeedGradually",		  "command",	  "crackers",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):void ",									  "CRKmergeDeletions_OnNeedGradually;"		  ]
[ "deletionsOnNeed",			  "command",	  "crackers",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):void ",									  "CRKmergeDeletions_OnNeed;"			  ]
[ "deletionsOnNeedGraduallyRipple",	  "command",	  "crackers",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",									  "CRKmergeDeletions_OnNeedGraduallyRipple;"	  ]
[ "deletionsOnNeedGradually",		  "command",	  "crackers",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",									  "CRKmergeDeletions_OnNeedGradually;"		  ]
[ "deletionsOnNeed",			  "command",	  "crackers",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",									  "CRKmergeDeletions_OnNeed;"			  ]
[ "deletionsOnNeedGraduallyRipple",	  "command",	  "crackers",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",									  "CRKmergeDeletions_OnNeedGraduallyRipple;"	  ]
[ "deletionsOnNeedGradually",		  "command",	  "crackers",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",									  "CRKmergeDeletions_OnNeedGradually;"		  ]
[ "deletionsOnNeed",			  "command",	  "crackers",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",									  "CRKmergeDeletions_OnNeed;"			  ]
[ "deletionsOnNeedGraduallyRipple",	  "command",	  "crackers",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void ",									  "CRKmergeDeletions_OnNeedGraduallyRipple;"	  ]
[ "deletionsOnNeedGradually",		  "command",	  "crackers",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void ",									  "CRKmergeDeletions_OnNeedGradually;"		  ]
[ "deletionsOnNeed",			  "command",	  "crackers",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void ",									  "CRKmergeDeletions_OnNeed;"			  ]
[ "deletionsOnNeedGraduallyRipple",	  "command",	  "crackers",	  "(b:bat[:any_1,:chr],c:bat[:any_1,:chr]):void ",									  "CRKmergeDeletions_OnNeedGraduallyRipple;"	  ]
[ "deletionsOnNeedGradually",		  "command",	  "crackers",	  "(b:bat[:any_1,:chr],c:bat[:any_1,:chr]):void ",									  "CRKmergeDeletions_OnNeedGradually;"		  ]
[ "deletionsOnNeed",			  "command",	  "crackers",	  "(b:bat[:any_1,:chr],c:bat[:any_1,:chr]):void ",									  "CRKmergeDeletions_OnNeed;"			  ]
[ "extendCrackerBAT",			  "command",	  "crackers",	  "(b:bat[:any_1,:date],P:lng):void ",											  "CRKextendCrackerBAT;"			  ]
[ "extendCrackerBAT",			  "command",	  "crackers",	  "(b:bat[:any_1,:dbl],P:lng):void ",											  "CRKextendCrackerBAT;"			  ]
[ "extendCrackerBAT",			  "command",	  "crackers",	  "(b:bat[:any_1,:flt],P:lng):void ",											  "CRKextendCrackerBAT;"			  ]
[ "extendCrackerBAT",			  "command",	  "crackers",	  "(b:bat[:any_1,:lng],P:lng):void ",											  "CRKextendCrackerBAT;"			  ]
[ "extendCrackerBAT",			  "command",	  "crackers",	  "(b:bat[:any_1,:int],P:lng):void ",											  "CRKextendCrackerBAT;"			  ]
[ "extendCrackerBAT",			  "command",	  "crackers",	  "(b:bat[:any_1,:sht],P:lng):void ",											  "CRKextendCrackerBAT;"			  ]
[ "extendCrackerBAT",			  "command",	  "crackers",	  "(b:bat[:any_1,:chr],P:lng):void ",											  "CRKextendCrackerBAT;"			  ]
[ "getCrackerBAT",			  "command",	  "crackers",	  "(b:bat[:any_1,:date]):bat[:oid,:date] ",										  "CRKgetCrackerBAT;"				  ]
[ "getCrackerBAT",			  "command",	  "crackers",	  "(b:bat[:any_1,:dbl]):bat[:oid,:dbl] ",										  "CRKgetCrackerBAT;"				  ]
[ "getCrackerBAT",			  "command",	  "crackers",	  "(b:bat[:any_1,:flt]):bat[:oid,:flt] ",										  "CRKgetCrackerBAT;"				  ]
[ "getCrackerBAT",			  "command",	  "crackers",	  "(b:bat[:any_1,:lng]):bat[:oid,:lng] ",										  "CRKgetCrackerBAT;"				  ]
[ "getCrackerBAT",			  "command",	  "crackers",	  "(b:bat[:any_1,:int]):bat[:oid,:int] ",										  "CRKgetCrackerBAT;"				  ]
[ "getCrackerBAT",			  "command",	  "crackers",	  "(b:bat[:any_1,:sht]):bat[:oid,:sht] ",										  "CRKgetCrackerBAT;"				  ]
[ "getCrackerBAT",			  "command",	  "crackers",	  "(b:bat[:any_1,:chr]):bat[:oid,:chr] ",										  "CRKgetCrackerBAT;"				  ]
[ "insertionsBOnNeedGraduallyRipple",	  "command",	  "crackers",	  "(b:bat[:any_1,:date],c:bat[:any_1,:date]):void ",									  "CRKmergeInsertionsB_OnNeedGraduallyRipple;"	  ]
[ "insertionsBOnNeedGradually",		  "command",	  "crackers",	  "(b:bat[:any_1,:date],c:bat[:any_1,:date]):void ",									  "CRKmergeInsertionsB_OnNeedGradually;"	  ]
[ "insertionsBOnNeed",			  "command",	  "crackers",	  "(b:bat[:any_1,:date],c:bat[:any_1,:date]):void ",									  "CRKmergeInsertionsB_OnNeed;"			  ]
[ "insertionsBForce",			  "command",	  "crackers",	  "(b:bat[:any_1,:date],c:bat[:any_1,:date]):void ",									  "CRKmergeInsertionsB_Force_date;"		  ]
[ "insertionsPartiallyForget",		  "command",	  "crackers",	  "(b:bat[:any_1,:date],c:bat[:any_1,:date]):void ",									  "CRKmergeInsertions_PartiallyForget_date;"	  ]
[ "insertionsForget",			  "command",	  "crackers",	  "(b:bat[:any_1,:date],c:bat[:any_1,:date]):void ",									  "CRKmergeInsertions_Forget;"			  ]
[ "insertionsBOnNeedGraduallyRipple",	  "command",	  "crackers",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):void ",									  "CRKmergeInsertionsB_OnNeedGraduallyRipple;"	  ]
[ "insertionsBOnNeedGradually",		  "command",	  "crackers",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):void ",									  "CRKmergeInsertionsB_OnNeedGradually;"	  ]
[ "insertionsBOnNeed",			  "command",	  "crackers",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):void ",									  "CRKmergeInsertionsB_OnNeed;"			  ]
[ "insertionsBForce",			  "command",	  "crackers",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):void ",									  "CRKmergeInsertionsB_Force_dbl;"		  ]
[ "insertionsPartiallyForget",		  "command",	  "crackers",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):void ",									  "CRKmergeInsertions_PartiallyForget_dbl;"	  ]
[ "insertionsForget",			  "command",	  "crackers",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):void ",									  "CRKmergeInsertions_Forget;"			  ]
[ "insertionsBOnNeedGraduallyRipple",	  "command",	  "crackers",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):void ",									  "CRKmergeInsertionsB_OnNeedGraduallyRipple;"	  ]
[ "insertionsBOnNeedGradually",		  "command",	  "crackers",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):void ",									  "CRKmergeInsertionsB_OnNeedGradually;"	  ]
[ "insertionsBOnNeed",			  "command",	  "crackers",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):void ",									  "CRKmergeInsertionsB_OnNeed;"			  ]
[ "insertionsBForce",			  "command",	  "crackers",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):void ",									  "CRKmergeInsertionsB_Force_flt;"		  ]
[ "insertionsPartiallyForget",		  "command",	  "crackers",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):void ",									  "CRKmergeInsertions_PartiallyForget_flt;"	  ]
[ "insertionsForget",			  "command",	  "crackers",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):void ",									  "CRKmergeInsertions_Forget;"			  ]
[ "insertionsBOnNeedGraduallyRipple",	  "command",	  "crackers",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",									  "CRKmergeInsertionsB_OnNeedGraduallyRipple;"	  ]
[ "insertionsBOnNeedGradually",		  "command",	  "crackers",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",									  "CRKmergeInsertionsB_OnNeedGradually;"	  ]
[ "insertionsBOnNeed",			  "command",	  "crackers",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",									  "CRKmergeInsertionsB_OnNeed;"			  ]
[ "insertionsBForce",			  "command",	  "crackers",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",									  "CRKmergeInsertionsB_Force_lng;"		  ]
[ "insertionsPartiallyForget",		  "command",	  "crackers",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",									  "CRKmergeInsertions_PartiallyForget_lng;"	  ]
[ "insertionsForget",			  "command",	  "crackers",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",									  "CRKmergeInsertions_Forget;"			  ]
[ "insertionsBOnNeedGraduallyRipple",	  "command",	  "crackers",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",									  "CRKmergeInsertionsB_OnNeedGraduallyRipple;"	  ]
[ "insertionsBOnNeedGradually",		  "command",	  "crackers",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",									  "CRKmergeInsertionsB_OnNeedGradually;"	  ]
[ "insertionsBOnNeed",			  "command",	  "crackers",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",									  "CRKmergeInsertionsB_OnNeed;"			  ]
[ "insertionsBForce",			  "command",	  "crackers",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",									  "CRKmergeInsertionsB_Force_int;"		  ]
[ "insertionsPartiallyForget",		  "command",	  "crackers",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",									  "CRKmergeInsertions_PartiallyForget_int;"	  ]
[ "insertionsForget",			  "command",	  "crackers",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",									  "CRKmergeInsertions_Forget;"			  ]
[ "insertionsBOnNeedGraduallyRipple",	  "command",	  "crackers",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void ",									  "CRKmergeInsertionsB_OnNeedGraduallyRipple;"	  ]
[ "insertionsBOnNeedGradually",		  "command",	  "crackers",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void ",									  "CRKmergeInsertionsB_OnNeedGradually;"	  ]
[ "insertionsBOnNeed",			  "command",	  "crackers",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void ",									  "CRKmergeInsertionsB_OnNeed;"			  ]
[ "insertionsBForce",			  "command",	  "crackers",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void ",									  "CRKmergeInsertionsB_Force_sht;"		  ]
[ "insertionsPartiallyForget",		  "command",	  "crackers",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void ",									  "CRKmergeInsertions_PartiallyForget_sht;"	  ]
[ "insertionsForget",			  "command",	  "crackers",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void ",									  "CRKmergeInsertions_Forget;"			  ]
[ "insertionsBOnNeedGraduallyRipple",	  "command",	  "crackers",	  "(b:bat[:any_1,:chr],c:bat[:any_1,:chr]):void ",									  "CRKmergeInsertionsB_OnNeedGraduallyRipple;"	  ]
[ "insertionsBOnNeedGradually",		  "command",	  "crackers",	  "(b:bat[:any_1,:chr],c:bat[:any_1,:chr]):void ",									  "CRKmergeInsertionsB_OnNeedGradually;"	  ]
[ "insertionsBOnNeed",			  "command",	  "crackers",	  "(b:bat[:any_1,:chr],c:bat[:any_1,:chr]):void ",									  "CRKmergeInsertionsB_OnNeed;"			  ]
[ "insertionsBForce",			  "command",	  "crackers",	  "(b:bat[:any_1,:chr],c:bat[:any_1,:chr]):void ",									  "CRKmergeInsertionsB_Force_chr;"		  ]
[ "insertionsPartiallyForget",		  "command",	  "crackers",	  "(b:bat[:any_1,:chr],c:bat[:any_1,:chr]):void ",									  "CRKmergeInsertions_PartiallyForget_chr;"	  ]
[ "insertionsForget",			  "command",	  "crackers",	  "(b:bat[:any_1,:chr],c:bat[:any_1,:chr]):void ",									  "CRKmergeInsertions_Forget;"			  ]
[ "joinuselect",			  "command",	  "crackers",	  "(right:bat[:oid,:date],l:date,h:date,li:bit,hi:bit,left:bat[:oid,:oid],inPlace:bit,isForeignKey:bit):bat[:oid,:oid] ", "CRKjoinSelectBounds_date;"			  ]
[ "joinuselect",			  "command",	  "crackers",	  "(right:bat[:oid,:date],l:date,h:date,li:bit,hi:bit,left:bat[:oid,:oid]):bat[:oid,:oid] ",				  "CRKjoinSelectDefault_date;"			  ]
[ "joinuselect",			  "command",	  "crackers",	  "(right:bat[:oid,:dbl],l:dbl,h:dbl,li:bit,hi:bit,left:bat[:oid,:oid],inPlace:bit,isForeignKey:bit):bat[:oid,:oid] ",	  "CRKjoinSelectBounds_dbl;"			  ]
[ "joinuselect",			  "command",	  "crackers",	  "(right:bat[:oid,:dbl],l:dbl,h:dbl,li:bit,hi:bit,left:bat[:oid,:oid]):bat[:oid,:oid] ",				  "CRKjoinSelectDefault_dbl;"			  ]
[ "joinuselect",			  "command",	  "crackers",	  "(right:bat[:oid,:flt],l:flt,h:flt,li:bit,hi:bit,left:bat[:oid,:oid],inPlace:bit,isForeignKey:bit):bat[:oid,:oid] ",	  "CRKjoinSelectBounds_flt;"			  ]
[ "joinuselect",			  "command",	  "crackers",	  "(right:bat[:oid,:flt],l:flt,h:flt,li:bit,hi:bit,left:bat[:oid,:oid]):bat[:oid,:oid] ",				  "CRKjoinSelectDefault_flt;"			  ]
[ "joinuselect",			  "command",	  "crackers",	  "(right:bat[:oid,:lng],l:lng,h:lng,li:bit,hi:bit,left:bat[:oid,:oid],inPlace:bit,isForeignKey:bit):bat[:oid,:oid] ",	  "CRKjoinSelectBounds_lng;"			  ]
[ "joinuselect",			  "command",	  "crackers",	  "(right:bat[:oid,:lng],l:lng,h:lng,li:bit,hi:bit,left:bat[:oid,:oid]):bat[:oid,:oid] ",				  "CRKjoinSelectDefault_lng;"			  ]
[ "joinuselect",			  "command",	  "crackers",	  "(right:bat[:oid,:int],l:int,h:int,li:bit,hi:bit,left:bat[:oid,:oid],inPlace:bit,isForeignKey:bit):bat[:oid,:oid] ",	  "CRKjoinSelectBounds_int;"			  ]
[ "joinuselect",			  "command",	  "crackers",	  "(right:bat[:oid,:int],l:int,h:int,li:bit,hi:bit,left:bat[:oid,:oid]):bat[:oid,:oid] ",				  "CRKjoinSelectDefault_int;"			  ]
[ "joinuselect",			  "command",	  "crackers",	  "(right:bat[:oid,:sht],l:sht,h:sht,li:bit,hi:bit,left:bat[:oid,:oid],inPlace:bit,isForeignKey:bit):bat[:oid,:oid] ",	  "CRKjoinSelectBounds_sht;"			  ]
[ "joinuselect",			  "command",	  "crackers",	  "(right:bat[:oid,:sht],l:sht,h:sht,li:bit,hi:bit,left:bat[:oid,:oid]):bat[:oid,:oid] ",				  "CRKjoinSelectDefault_sht;"			  ]
[ "joinuselect",			  "command",	  "crackers",	  "(right:bat[:oid,:chr],l:chr,h:chr,li:bit,hi:bit,left:bat[:oid,:oid],inPlace:bit,isForeignKey:bit):bat[:oid,:oid] ",	  "CRKjoinSelectBounds_chr;"			  ]
[ "joinuselect",			  "command",	  "crackers",	  "(right:bat[:oid,:chr],l:chr,h:chr,li:bit,hi:bit,left:bat[:oid,:oid]):bat[:oid,:oid] ",				  "CRKjoinSelectDefault_chr;"			  ]
[ "printAVLTree_int",			  "command",	  "crackers",	  "(b:bat[:any_1,:date]):void ",											  "CRKprintAVLTree_int;"			  ]
[ "printCrackerDeletions",		  "command",	  "crackers",	  "(b:bat[:any_1,:date]):void ",											  "CRKprintCrackerDeletions;"			  ]
[ "printCrackerInsertions",		  "command",	  "crackers",	  "(b:bat[:any_1,:date]):void ",											  "CRKprintCrackerInsertions;"			  ]
[ "printCrackerBAT",			  "command",	  "crackers",	  "(b:bat[:any_1,:date]):void ",											  "CRKprintCrackerBAT;"				  ]
[ "printCrackerIndexBATpart",		  "command",	  "crackers",	  "(b:bat[:any_1,:date]):void ",											  "CRKprintCrackerIndexBATpart;"		  ]
[ "printAVLTree_int",			  "command",	  "crackers",	  "(b:bat[:any_1,:dbl]):void ",												  "CRKprintAVLTree_int;"			  ]
[ "printCrackerDeletions",		  "command",	  "crackers",	  "(b:bat[:any_1,:dbl]):void ",												  "CRKprintCrackerDeletions;"			  ]
[ "printCrackerInsertions",		  "command",	  "crackers",	  "(b:bat[:any_1,:dbl]):void ",												  "CRKprintCrackerInsertions;"			  ]
[ "printCrackerBAT",			  "command",	  "crackers",	  "(b:bat[:any_1,:dbl]):void ",												  "CRKprintCrackerBAT;"				  ]
[ "printCrackerIndexBATpart",		  "command",	  "crackers",	  "(b:bat[:any_1,:dbl]):void ",												  "CRKprintCrackerIndexBATpart;"		  ]
[ "printAVLTree_int",			  "command",	  "crackers",	  "(b:bat[:any_1,:flt]):void ",												  "CRKprintAVLTree_int;"			  ]
[ "printCrackerDeletions",		  "command",	  "crackers",	  "(b:bat[:any_1,:flt]):void ",												  "CRKprintCrackerDeletions;"			  ]
[ "printCrackerInsertions",		  "command",	  "crackers",	  "(b:bat[:any_1,:flt]):void ",												  "CRKprintCrackerInsertions;"			  ]
[ "printCrackerBAT",			  "command",	  "crackers",	  "(b:bat[:any_1,:flt]):void ",												  "CRKprintCrackerBAT;"				  ]
[ "printCrackerIndexBATpart",		  "command",	  "crackers",	  "(b:bat[:any_1,:flt]):void ",												  "CRKprintCrackerIndexBATpart;"		  ]
[ "printAVLTree_int",			  "command",	  "crackers",	  "(b:bat[:any_1,:lng]):void ",												  "CRKprintAVLTree_int;"			  ]
[ "printCrackerDeletions",		  "command",	  "crackers",	  "(b:bat[:any_1,:lng]):void ",												  "CRKprintCrackerDeletions;"			  ]
[ "printCrackerInsertions",		  "command",	  "crackers",	  "(b:bat[:any_1,:lng]):void ",												  "CRKprintCrackerInsertions;"			  ]
[ "printCrackerBAT",			  "command",	  "crackers",	  "(b:bat[:any_1,:lng]):void ",												  "CRKprintCrackerBAT;"				  ]
[ "printCrackerIndexBATpart",		  "command",	  "crackers",	  "(b:bat[:any_1,:lng]):void ",												  "CRKprintCrackerIndexBATpart;"		  ]
[ "printAVLTree_int",			  "command",	  "crackers",	  "(b:bat[:any_1,:int]):void ",												  "CRKprintAVLTree_int;"			  ]
[ "printCrackerDeletions",		  "command",	  "crackers",	  "(b:bat[:any_1,:int]):void ",												  "CRKprintCrackerDeletions;"			  ]
[ "printCrackerInsertions",		  "command",	  "crackers",	  "(b:bat[:any_1,:int]):void ",												  "CRKprintCrackerInsertions;"			  ]
[ "printCrackerBAT",			  "command",	  "crackers",	  "(b:bat[:any_1,:int]):void ",												  "CRKprintCrackerBAT;"				  ]
[ "printCrackerIndexBATpart",		  "command",	  "crackers",	  "(b:bat[:any_1,:int]):void ",												  "CRKprintCrackerIndexBATpart;"		  ]
[ "printAVLTree_int",			  "command",	  "crackers",	  "(b:bat[:any_1,:sht]):void ",												  "CRKprintAVLTree_int;"			  ]
[ "printCrackerDeletions",		  "command",	  "crackers",	  "(b:bat[:any_1,:sht]):void ",												  "CRKprintCrackerDeletions;"			  ]
[ "printCrackerInsertions",		  "command",	  "crackers",	  "(b:bat[:any_1,:sht]):void ",												  "CRKprintCrackerInsertions;"			  ]
[ "printCrackerBAT",			  "command",	  "crackers",	  "(b:bat[:any_1,:sht]):void ",												  "CRKprintCrackerBAT;"				  ]
[ "printCrackerIndexBATpart",		  "command",	  "crackers",	  "(b:bat[:any_1,:sht]):void ",												  "CRKprintCrackerIndexBATpart;"		  ]
[ "printAVLTree_int",			  "command",	  "crackers",	  "(b:bat[:any_1,:chr]):void ",												  "CRKprintAVLTree_int;"			  ]
[ "printCrackerDeletions",		  "command",	  "crackers",	  "(b:bat[:any_1,:chr]):void ",												  "CRKprintCrackerDeletions;"			  ]
[ "printCrackerInsertions",		  "command",	  "crackers",	  "(b:bat[:any_1,:chr]):void ",												  "CRKprintCrackerInsertions;"			  ]
[ "printCrackerBAT",			  "command",	  "crackers",	  "(b:bat[:any_1,:chr]):void ",												  "CRKprintCrackerBAT;"				  ]
[ "printCrackerIndexBATpart",		  "command",	  "crackers",	  "(b:bat[:any_1,:chr]):void ",												  "CRKprintCrackerIndexBATpart;"		  ]
[ "selectAVL",				  "command",	  "crackers",	  "(b:bat[:any_1,:date],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:any_6,:date] ",						  "CRKAVLIndexSelectBounds_date;"		  ]
[ "selectAVL",				  "command",	  "crackers",	  "(b:bat[:any_1,:dbl],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:any_6,:dbl] ",						  "CRKAVLIndexSelectBounds_dbl;"		  ]
[ "selectAVL",				  "command",	  "crackers",	  "(b:bat[:any_1,:flt],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:any_6,:flt] ",						  "CRKAVLIndexSelectBounds_flt;"		  ]
[ "selectAVL",				  "command",	  "crackers",	  "(b:bat[:any_1,:lng],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:any_6,:lng] ",						  "CRKAVLIndexSelectBounds_lng;"		  ]
[ "selectAVL",				  "command",	  "crackers",	  "(b:bat[:any_1,:int],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:any_6,:int] ",						  "CRKAVLIndexSelectBounds_int;"		  ]
[ "selectAVL",				  "command",	  "crackers",	  "(b:bat[:any_1,:sht],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:any_6,:sht] ",						  "CRKAVLIndexSelectBounds_sht;"		  ]
[ "selectAVL",				  "command",	  "crackers",	  "(b:bat[:any_1,:chr],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:any_6,:chr] ",						  "CRKAVLIndexSelectBounds_chr;"		  ]
[ "sizeCrackerDeletions",		  "command",	  "crackers",	  "(b:bat[:any_1,:date]):void ",											  "CRKsizeCrackerDeletions;"			  ]
[ "sizeCrackerInsertions",		  "command",	  "crackers",	  "(b:bat[:any_1,:date]):void ",											  "CRKsizeCrackerInsertions;"			  ]
[ "select",				  "command",	  "crackers",	  "(b:bat[:oid,:date],l:date,h:date,li:bit,hi:bit):bat[:oid,:date] ",							  "CRKselectBounds_date;"			  ]
[ "select",				  "command",	  "crackers",	  "(b:bat[:any_1,:date],l:date):bat[:any_2,:date] ",									  "CRKselectValue_date;"			  ]
[ "select",				  "command",	  "crackers",	  "(b:bat[:any_1,:date],l:date,h:date):bat[:any_2,:date] ",								  "CRKselect_date;"				  ]
[ "sizeCrackerDeletions",		  "command",	  "crackers",	  "(b:bat[:any_1,:dbl]):void ",												  "CRKsizeCrackerDeletions;"			  ]
[ "sizeCrackerInsertions",		  "command",	  "crackers",	  "(b:bat[:any_1,:dbl]):void ",												  "CRKsizeCrackerInsertions;"			  ]
[ "select",				  "command",	  "crackers",	  "(b:bat[:oid,:dbl],l:dbl,h:dbl,li:bit,hi:bit):bat[:oid,:dbl] ",							  "CRKselectBounds_dbl;"			  ]
[ "select",				  "command",	  "crackers",	  "(b:bat[:any_1,:dbl],l:dbl):bat[:any_2,:dbl] ",									  "CRKselectValue_dbl;"				  ]
[ "select",				  "command",	  "crackers",	  "(b:bat[:any_1,:dbl],l:dbl,h:dbl):bat[:any_2,:dbl] ",									  "CRKselect_dbl;"				  ]
[ "sizeCrackerDeletions",		  "command",	  "crackers",	  "(b:bat[:any_1,:flt]):void ",												  "CRKsizeCrackerDeletions;"			  ]
[ "sizeCrackerInsertions",		  "command",	  "crackers",	  "(b:bat[:any_1,:flt]):void ",												  "CRKsizeCrackerInsertions;"			  ]
[ "select",				  "command",	  "crackers",	  "(b:bat[:oid,:flt],l:flt,h:flt,li:bit,hi:bit):bat[:oid,:flt] ",							  "CRKselectBounds_flt;"			  ]
[ "select",				  "command",	  "crackers",	  "(b:bat[:any_1,:flt],l:flt):bat[:any_2,:flt] ",									  "CRKselectValue_flt;"				  ]
[ "select",				  "command",	  "crackers",	  "(b:bat[:any_1,:flt],l:flt,h:flt):bat[:any_2,:flt] ",									  "CRKselect_flt;"				  ]
[ "sizeCrackerDeletions",		  "command",	  "crackers",	  "(b:bat[:any_1,:lng]):void ",												  "CRKsizeCrackerDeletions;"			  ]
[ "sizeCrackerInsertions",		  "command",	  "crackers",	  "(b:bat[:any_1,:lng]):void ",												  "CRKsizeCrackerInsertions;"			  ]
[ "select",				  "command",	  "crackers",	  "(b:bat[:oid,:lng],l:lng,h:lng,li:bit,hi:bit):bat[:oid,:lng] ",							  "CRKselectBounds_lng;"			  ]
[ "select",				  "command",	  "crackers",	  "(b:bat[:any_1,:lng],l:lng):bat[:any_2,:lng] ",									  "CRKselectValue_lng;"				  ]
[ "select",				  "command",	  "crackers",	  "(b:bat[:any_1,:lng],l:lng,h:lng):bat[:any_2,:lng] ",									  "CRKselect_lng;"				  ]
[ "sizeCrackerDeletions",		  "command",	  "crackers",	  "(b:bat[:any_1,:int]):void ",												  "CRKsizeCrackerDeletions;"			  ]
[ "sizeCrackerInsertions",		  "command",	  "crackers",	  "(b:bat[:any_1,:int]):void ",												  "CRKsizeCrackerInsertions;"			  ]
[ "select",				  "command",	  "crackers",	  "(b:bat[:oid,:int],l:int,h:int,li:bit,hi:bit):bat[:oid,:int] ",							  "CRKselectBounds_int;"			  ]
[ "select",				  "command",	  "crackers",	  "(b:bat[:any_1,:int],l:int):bat[:any_2,:int] ",									  "CRKselectValue_int;"				  ]
[ "select",				  "command",	  "crackers",	  "(b:bat[:any_1,:int],l:int,h:int):bat[:any_2,:int] ",									  "CRKselect_int;"				  ]
[ "sizeCrackerDeletions",		  "command",	  "crackers",	  "(b:bat[:any_1,:sht]):void ",												  "CRKsizeCrackerDeletions;"			  ]
[ "sizeCrackerInsertions",		  "command",	  "crackers",	  "(b:bat[:any_1,:sht]):void ",												  "CRKsizeCrackerInsertions;"			  ]
[ "select",				  "command",	  "crackers",	  "(b:bat[:oid,:sht],l:sht,h:sht,li:bit,hi:bit):bat[:oid,:sht] ",							  "CRKselectBounds_sht;"			  ]
[ "select",				  "command",	  "crackers",	  "(b:bat[:any_1,:sht],l:sht):bat[:any_2,:sht] ",									  "CRKselectValue_sht;"				  ]
[ "select",				  "command",	  "crackers",	  "(b:bat[:any_1,:sht],l:sht,h:sht):bat[:any_2,:sht] ",									  "CRKselect_sht;"				  ]
[ "sizeCrackerDeletions",		  "command",	  "crackers",	  "(b:bat[:any_1,:chr]):void ",												  "CRKsizeCrackerDeletions;"			  ]
[ "sizeCrackerInsertions",		  "command",	  "crackers",	  "(b:bat[:any_1,:chr]):void ",												  "CRKsizeCrackerInsertions;"			  ]
[ "select",				  "command",	  "crackers",	  "(b:bat[:oid,:chr],l:chr,h:chr,li:bit,hi:bit):bat[:oid,:chr] ",							  "CRKselectBounds_chr;"			  ]
[ "select",				  "command",	  "crackers",	  "(b:bat[:any_1,:chr],l:chr):bat[:any_2,:chr] ",									  "CRKselectValue_chr;"				  ]
[ "select",				  "command",	  "crackers",	  "(b:bat[:any_1,:chr],l:chr,h:chr):bat[:any_2,:chr] ",									  "CRKselect_chr;"				  ]
[ "uselect",				  "command",	  "crackers",	  "(b:bat[:any_1,:date],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:any_1,:oid] ",						  "CRKuselectBounds_date;"			  ]
[ "uselect",				  "command",	  "crackers",	  "(b:bat[:any_1,:date],l:date):bat[:any_1,:oid] ",									  "CRKuselectValue_date;"			  ]
[ "uselect",				  "command",	  "crackers",	  "(b:bat[:any_1,:date],l:date,h:date):bat[:any_1,:oid] ",								  "CRKuselect_date;"				  ]
[ "uselect",				  "command",	  "crackers",	  "(b:bat[:any_1,:dbl],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:any_1,:oid] ",						  "CRKuselectBounds_dbl;"			  ]
[ "uselect",				  "command",	  "crackers",	  "(b:bat[:any_1,:dbl],l:dbl):bat[:any_1,:oid] ",									  "CRKuselectValue_dbl;"			  ]
[ "uselect",				  "command",	  "crackers",	  "(b:bat[:any_1,:dbl],l:dbl,h:dbl):bat[:any_1,:oid] ",									  "CRKuselect_dbl;"				  ]
[ "uselect",				  "command",	  "crackers",	  "(b:bat[:any_1,:flt],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:any_1,:oid] ",						  "CRKuselectBounds_flt;"			  ]
[ "uselect",				  "command",	  "crackers",	  "(b:bat[:any_1,:flt],l:flt):bat[:any_1,:oid] ",									  "CRKuselectValue_flt;"			  ]
[ "uselect",				  "command",	  "crackers",	  "(b:bat[:any_1,:flt],l:flt,h:flt):bat[:any_1,:oid] ",									  "CRKuselect_flt;"				  ]
[ "uselect",				  "command",	  "crackers",	  "(b:bat[:any_1,:lng],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:any_1,:oid] ",						  "CRKuselectBounds_lng;"			  ]
[ "uselect",				  "command",	  "crackers",	  "(b:bat[:any_1,:lng],l:lng):bat[:any_1,:oid] ",									  "CRKuselectValue_lng;"			  ]
[ "uselect",				  "command",	  "crackers",	  "(b:bat[:any_1,:lng],l:lng,h:lng):bat[:any_1,:oid] ",									  "CRKuselect_lng;"				  ]
[ "uselect",				  "command",	  "crackers",	  "(b:bat[:any_1,:int],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:any_1,:oid] ",						  "CRKuselectBounds_int;"			  ]
[ "uselect",				  "command",	  "crackers",	  "(b:bat[:any_1,:int],l:int):bat[:any_1,:oid] ",									  "CRKuselectValue_int;"			  ]
[ "uselect",				  "command",	  "crackers",	  "(b:bat[:any_1,:int],l:int,h:int):bat[:any_1,:oid] ",									  "CRKuselect_int;"				  ]
[ "uselect",				  "command",	  "crackers",	  "(b:bat[:any_1,:sht],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:any_1,:oid] ",						  "CRKuselectBounds_sht;"			  ]
[ "uselect",				  "command",	  "crackers",	  "(b:bat[:any_1,:sht],l:sht):bat[:any_1,:oid] ",									  "CRKuselectValue_sht;"			  ]
[ "uselect",				  "command",	  "crackers",	  "(b:bat[:any_1,:sht],l:sht,h:sht):bat[:any_1,:oid] ",									  "CRKuselect_sht;"				  ]
[ "uselect",				  "command",	  "crackers",	  "(b:bat[:any_1,:chr],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:any_1,:oid] ",						  "CRKuselectBounds_chr;"			  ]
[ "uselect",				  "command",	  "crackers",	  "(b:bat[:any_1,:chr],l:chr):bat[:any_1,:oid] ",									  "CRKuselectValue_chr;"			  ]
[ "uselect",				  "command",	  "crackers",	  "(b:bat[:any_1,:chr],l:chr,h:chr):bat[:any_1,:oid] ",									  "CRKuselect_chr;"				  ]
[ "verifyCrackerIndex",			  "command",	  "crackers",	  "(b:bat[:any_1,:date]):void ",											  "CRKverifyCrackerIndex_date;"			  ]
[ "verifyCrackerIndex",			  "command",	  "crackers",	  "(b:bat[:any_1,:dbl]):void ",												  "CRKverifyCrackerIndex_dbl;"			  ]
[ "verifyCrackerIndex",			  "command",	  "crackers",	  "(b:bat[:any_1,:flt]):void ",												  "CRKverifyCrackerIndex_flt;"			  ]
[ "verifyCrackerIndex",			  "command",	  "crackers",	  "(b:bat[:any_1,:lng]):void ",												  "CRKverifyCrackerIndex_lng;"			  ]
[ "verifyCrackerIndex",			  "command",	  "crackers",	  "(b:bat[:any_1,:int]):void ",												  "CRKverifyCrackerIndex_int;"			  ]
[ "verifyCrackerIndex",			  "command",	  "crackers",	  "(b:bat[:any_1,:sht]):void ",												  "CRKverifyCrackerIndex_sht;"			  ]
[ "verifyCrackerIndex",			  "command",	  "crackers",	  "(b:bat[:any_1,:chr]):void ",												  "CRKverifyCrackerIndex_chr;"			  ]
[ "zcrackUnordered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:date],low:date,hgh:date):bit ",										  "CRKcrackUnorderedThree_validate_date;"	  ]
[ "zcrackUnordered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:date],mid:date):bit ",											  "CRKcrackUnorderedZero_validate_date;"	  ]
[ "zcrackOrdered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:date],low:date,hgh:date):bit ",										  "CRKcrackOrderedThree_validate_date;"		  ]
[ "zcrackOrdered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:date],mid:date):bit ",											  "CRKcrackOrderedZero_validate_date;"		  ]
[ "zcrackOrdered",			  "command",	  "crackers",	  "(b:bat[:oid,:date],low:date,hgh:date):bat[:oid,:date] ",								  "CRKcrackOrderedThree_date;"			  ]
[ "zcrackOrdered",			  "command",	  "crackers",	  "(b:bat[:oid,:date],mid:date):bat[:oid,:date] ",									  "CRKcrackOrderedZero_date;"			  ]
[ "zcrackUnordered",			  "command",	  "crackers",	  "(b:bat[:oid,:date],low:date,hgh:date):bat[:oid,:date] ",								  "CRKcrackUnorderedThree_date;"		  ]
[ "zcrackUnordered",			  "command",	  "crackers",	  "(b:bat[:oid,:date],mid:date):bat[:oid,:date] ",									  "CRKcrackUnorderedZero_date;"			  ]
[ "zcrackUnordered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:dbl],low:dbl,hgh:dbl):bit ",										  "CRKcrackUnorderedThree_validate_dbl;"	  ]
[ "zcrackUnordered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:dbl],mid:dbl):bit ",											  "CRKcrackUnorderedZero_validate_dbl;"		  ]
[ "zcrackOrdered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:dbl],low:dbl,hgh:dbl):bit ",										  "CRKcrackOrderedThree_validate_dbl;"		  ]
[ "zcrackOrdered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:dbl],mid:dbl):bit ",											  "CRKcrackOrderedZero_validate_dbl;"		  ]
[ "zcrackOrdered",			  "command",	  "crackers",	  "(b:bat[:oid,:dbl],low:dbl,hgh:dbl):bat[:oid,:dbl] ",									  "CRKcrackOrderedThree_dbl;"			  ]
[ "zcrackOrdered",			  "command",	  "crackers",	  "(b:bat[:oid,:dbl],mid:dbl):bat[:oid,:dbl] ",										  "CRKcrackOrderedZero_dbl;"			  ]
[ "zcrackUnordered",			  "command",	  "crackers",	  "(b:bat[:oid,:dbl],low:dbl,hgh:dbl):bat[:oid,:dbl] ",									  "CRKcrackUnorderedThree_dbl;"			  ]
[ "zcrackUnordered",			  "command",	  "crackers",	  "(b:bat[:oid,:dbl],mid:dbl):bat[:oid,:dbl] ",										  "CRKcrackUnorderedZero_dbl;"			  ]
[ "zcrackUnordered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:flt],low:flt,hgh:flt):bit ",										  "CRKcrackUnorderedThree_validate_flt;"	  ]
[ "zcrackUnordered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:flt],mid:flt):bit ",											  "CRKcrackUnorderedZero_validate_flt;"		  ]
[ "zcrackOrdered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:flt],low:flt,hgh:flt):bit ",										  "CRKcrackOrderedThree_validate_flt;"		  ]
[ "zcrackOrdered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:flt],mid:flt):bit ",											  "CRKcrackOrderedZero_validate_flt;"		  ]
[ "zcrackOrdered",			  "command",	  "crackers",	  "(b:bat[:oid,:flt],low:flt,hgh:flt):bat[:oid,:flt] ",									  "CRKcrackOrderedThree_flt;"			  ]
[ "zcrackOrdered",			  "command",	  "crackers",	  "(b:bat[:oid,:flt],mid:flt):bat[:oid,:flt] ",										  "CRKcrackOrderedZero_flt;"			  ]
[ "zcrackUnordered",			  "command",	  "crackers",	  "(b:bat[:oid,:flt],low:flt,hgh:flt):bat[:oid,:flt] ",									  "CRKcrackUnorderedThree_flt;"			  ]
[ "zcrackUnordered",			  "command",	  "crackers",	  "(b:bat[:oid,:flt],mid:flt):bat[:oid,:flt] ",										  "CRKcrackUnorderedZero_flt;"			  ]
[ "zcrackUnordered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:lng],low:lng,hgh:lng):bit ",										  "CRKcrackUnorderedThree_validate_lng;"	  ]
[ "zcrackUnordered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:lng],mid:lng):bit ",											  "CRKcrackUnorderedZero_validate_lng;"		  ]
[ "zcrackOrdered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:lng],low:lng,hgh:lng):bit ",										  "CRKcrackOrderedThree_validate_lng;"		  ]
[ "zcrackOrdered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:lng],mid:lng):bit ",											  "CRKcrackOrderedZero_validate_lng;"		  ]
[ "zcrackOrdered",			  "command",	  "crackers",	  "(b:bat[:oid,:lng],low:lng,hgh:lng):bat[:oid,:lng] ",									  "CRKcrackOrderedThree_lng;"			  ]
[ "zcrackOrdered",			  "command",	  "crackers",	  "(b:bat[:oid,:lng],mid:lng):bat[:oid,:lng] ",										  "CRKcrackOrderedZero_lng;"			  ]
[ "zcrackUnordered",			  "command",	  "crackers",	  "(b:bat[:oid,:lng],low:lng,hgh:lng):bat[:oid,:lng] ",									  "CRKcrackUnorderedThree_lng;"			  ]
[ "zcrackUnordered",			  "command",	  "crackers",	  "(b:bat[:oid,:lng],mid:lng):bat[:oid,:lng] ",										  "CRKcrackUnorderedZero_lng;"			  ]
[ "zcrackUnordered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:int],low:int,hgh:int):bit ",										  "CRKcrackUnorderedThree_validate_int;"	  ]
[ "zcrackUnordered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:int],mid:int):bit ",											  "CRKcrackUnorderedZero_validate_int;"		  ]
[ "zcrackOrdered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:int],low:int,hgh:int):bit ",										  "CRKcrackOrderedThree_validate_int;"		  ]
[ "zcrackOrdered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:int],mid:int):bit ",											  "CRKcrackOrderedZero_validate_int;"		  ]
[ "zcrackOrdered",			  "command",	  "crackers",	  "(b:bat[:oid,:int],low:int,hgh:int):bat[:oid,:int] ",									  "CRKcrackOrderedThree_int;"			  ]
[ "zcrackOrdered",			  "command",	  "crackers",	  "(b:bat[:oid,:int],mid:int):bat[:oid,:int] ",										  "CRKcrackOrderedZero_int;"			  ]
[ "zcrackUnordered",			  "command",	  "crackers",	  "(b:bat[:oid,:int],low:int,hgh:int):bat[:oid,:int] ",									  "CRKcrackUnorderedThree_int;"			  ]
[ "zcrackUnordered",			  "command",	  "crackers",	  "(b:bat[:oid,:int],mid:int):bat[:oid,:int] ",										  "CRKcrackUnorderedZero_int;"			  ]
[ "zcrackUnordered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:sht],low:sht,hgh:sht):bit ",										  "CRKcrackUnorderedThree_validate_sht;"	  ]
[ "zcrackUnordered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:sht],mid:sht):bit ",											  "CRKcrackUnorderedZero_validate_sht;"		  ]
[ "zcrackOrdered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:sht],low:sht,hgh:sht):bit ",										  "CRKcrackOrderedThree_validate_sht;"		  ]
[ "zcrackOrdered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:sht],mid:sht):bit ",											  "CRKcrackOrderedZero_validate_sht;"		  ]
[ "zcrackOrdered",			  "command",	  "crackers",	  "(b:bat[:oid,:sht],low:sht,hgh:sht):bat[:oid,:sht] ",									  "CRKcrackOrderedThree_sht;"			  ]
[ "zcrackOrdered",			  "command",	  "crackers",	  "(b:bat[:oid,:sht],mid:sht):bat[:oid,:sht] ",										  "CRKcrackOrderedZero_sht;"			  ]
[ "zcrackUnordered",			  "command",	  "crackers",	  "(b:bat[:oid,:sht],low:sht,hgh:sht):bat[:oid,:sht] ",									  "CRKcrackUnorderedThree_sht;"			  ]
[ "zcrackUnordered",			  "command",	  "crackers",	  "(b:bat[:oid,:sht],mid:sht):bat[:oid,:sht] ",										  "CRKcrackUnorderedZero_sht;"			  ]
[ "zcrackUnordered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:chr],low:chr,hgh:chr):bit ",										  "CRKcrackUnorderedThree_validate_chr;"	  ]
[ "zcrackUnordered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:chr],mid:chr):bit ",											  "CRKcrackUnorderedZero_validate_chr;"		  ]
[ "zcrackOrdered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:chr],low:chr,hgh:chr):bit ",										  "CRKcrackOrderedThree_validate_chr;"		  ]
[ "zcrackOrdered_validate",		  "command",	  "crackers",	  "(b:bat[:oid,:chr],mid:chr):bit ",											  "CRKcrackOrderedZero_validate_chr;"		  ]
[ "zcrackOrdered",			  "command",	  "crackers",	  "(b:bat[:oid,:chr],low:chr,hgh:chr):bat[:oid,:chr] ",									  "CRKcrackOrderedThree_chr;"			  ]
[ "zcrackOrdered",			  "command",	  "crackers",	  "(b:bat[:oid,:chr],mid:chr):bat[:oid,:chr] ",										  "CRKcrackOrderedZero_chr;"			  ]
[ "zcrackUnordered",			  "command",	  "crackers",	  "(b:bat[:oid,:chr],low:chr,hgh:chr):bat[:oid,:chr] ",									  "CRKcrackUnorderedThree_chr;"			  ]
[ "zcrackUnordered",			  "command",	  "crackers",	  "(b:bat[:oid,:chr],mid:chr):bat[:oid,:chr] ",										  "CRKcrackUnorderedZero_chr;"			  ]
[ "costPrediction",			  "pattern",	  "scheduler",	  "(a:any):lng ",													  "RUNcostPrediction;"				  ]
[ "choice",				  "pattern",	  "scheduler",	  "(arg:any...):void ",													  "RUNchoice;"					  ]
[ "choice",				  "pattern",	  "scheduler",	  "():void ",														  "RUNchoice;"					  ]
[ "isolation",				  "pattern",	  "scheduler",	  "():void ",														  "RUNisolation;"				  ]
[ "pick",				  "pattern",	  "scheduler",	  "(arg:any_1...):any_1 ",												  "RUNpickResult;"				  ]
[ "volumeCost",				  "pattern",	  "scheduler",	  "(a:any):lng ",													  "RUNvolumeCost;"				  ]
[ "alpha",				  "command",	  "transaction",  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "TRNtrans_alpha;"				  ]
[ "abort",				  "pattern",	  "transaction",  "(c:any...):void ",													  "TRNtrans_abort;"				  ]
[ "abort",				  "command",	  "transaction",  "():bit ",														  "TRNglobal_abort;"				  ]
[ "clean",				  "pattern",	  "transaction",  "(c:any...):void ",													  "TRNtrans_clean;"				  ]
[ "commit",				  "pattern",	  "transaction",  "(c:any...):void ",													  "TRNtrans_commit;"				  ]
[ "commit",				  "command",	  "transaction",  "():bit ",														  "TRNglobal_commit;"				  ]
[ "delta",				  "command",	  "transaction",  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "TRNtrans_delta;"				  ]
[ "prev",				  "command",	  "transaction",  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "TRNtrans_prev;"				  ]
[ "subcommit",				  "command",	  "transaction",  "(b:bat[:any_1,:str]):bit ",												  "TRNsubcommit;"				  ]
[ "sync",				  "command",	  "transaction",  "():bit ",														  "TRNglobal_sync;"				  ]
[ "multiplex",				  "pattern",	  "mal",	  "(a:any...):any ",													  "OPTremapMultiplex;"				  ]
[ "accessmode",				  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",												  "OPTaccessmode;"				  ]
[ "accessmode",				  "pattern",	  "optimizer",	  "():str ",														  "OPTaccessmode;"				  ]
[ "aliases",				  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",												  "OPTaliases;"					  ]
[ "aliases",				  "pattern",	  "optimizer",	  "():str ",														  "OPTaliases;"					  ]
[ "accumulators",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",												  "OPTaccumulators;"				  ]
[ "accumulators",			  "pattern",	  "optimizer",	  "():str ",														  "OPTaccumulators;"				  ]
[ "crack",				  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",												  "OPTcrack;"					  ]
[ "crack",				  "pattern",	  "optimizer",	  "():str ",														  "OPTcrack;"					  ]
[ "costModel",				  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",												  "OPTcostModel;"				  ]
[ "costModel",				  "pattern",	  "optimizer",	  "():str ",														  "OPTcostModel;"				  ]
[ "commonTerms",			  "pattern",	  "optimizer",	  "(mod:any_1,fcn:any_2):str ",												  "OPTcommonTerms;"				  ]
[ "commonTerms",			  "pattern",	  "optimizer",	  "():str ",														  "OPTcommonTerms;"				  ]
[ "coercions",				  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",												  "OPTcoercion;"				  ]
[ "coercions",				  "pattern",	  "optimizer",	  "():str ",														  "OPTcoercion;"				  ]
[ "clrDebug",				  "pattern",	  "optimizer",	  "():void ",														  "QOTclrdebugOptimizers;"			  ]
[ "dumpQEP",				  "pattern",	  "optimizer",	  "():void ",														  "OPTdumpQEP;"					  ]
[ "deadcode",				  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",												  "OPTdeadcode;"				  ]
[ "deadcode",				  "pattern",	  "optimizer",	  "():str ",														  "OPTdeadcode;"				  ]
[ "evaluate",				  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",												  "OPTevaluate;"				  ]
[ "evaluate",				  "pattern",	  "optimizer",	  "():str ",														  "OPTevaluate;"				  ]
[ "emptySet",				  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",												  "OPTemptySet;"				  ]
[ "emptySet",				  "pattern",	  "optimizer",	  "():str ",														  "OPTemptySet;"				  ]
[ "factorize",				  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",												  "OPTfactorize;"				  ]
[ "factorize",				  "pattern",	  "optimizer",	  "():str ",														  "OPTfactorize;"				  ]
[ "garbageCollector",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",												  "OPTgarbageCollector;"			  ]
[ "garbageCollector",			  "pattern",	  "optimizer",	  "():str ",														  "OPTgarbageCollector;"			  ]
[ "heuristics",				  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",												  "OPTheuristics;"				  ]
[ "heuristics",				  "pattern",	  "optimizer",	  "():str ",														  "OPTheuristics;"				  ]
[ "inline",				  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",												  "OPTinline;"					  ]
[ "inline",				  "pattern",	  "optimizer",	  "():str ",														  "OPTinline;"					  ]
[ "joinselect",				  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",												  "OPTjoinselect;"				  ]
[ "joinselect",				  "pattern",	  "optimizer",	  "():str ",														  "OPTjoinselect;"				  ]
[ "joinPath",				  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",												  "OPTjoinPath;"				  ]
[ "joinPath",				  "pattern",	  "optimizer",	  "():str ",														  "OPTjoinPath;"				  ]
[ "mergetable",				  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",												  "OPTmergetable;"				  ]
[ "mergetable",				  "pattern",	  "optimizer",	  "():str ",														  "OPTmergetable;"				  ]
[ "multiplex",				  "pattern",	  "optimizer",	  "(mod:str,fcn:str):void ",												  "OPTmultiplex;"				  ]
[ "multiplex",				  "pattern",	  "optimizer",	  "():void ",														  "OPTmultiplex;"				  ]
[ "macro",				  "pattern",	  "optimizer",	  "(mod:str,fcn:str,targetmod:str,targetfcn:str):void ",								  "OPTmacro;"					  ]
[ "macro",				  "pattern",	  "optimizer",	  "(targetmod:str,targetfcn:str):void ",										  "OPTmacro;"					  ]
[ "orcam",				  "pattern",	  "optimizer",	  "(mod:str,fcn:str,targetmod:str,targetfcn:str):void ",								  "OPTorcam;"					  ]
[ "orcam",				  "pattern",	  "optimizer",	  "(targetmod:str,targetfcn:str):void ",										  "OPTorcam;"					  ]
[ "optimize",				  "pattern",	  "optimizer",	  "(mod:str,fcn:str):void ",												  "QOToptimize;"				  ]
[ "pushranges",				  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",												  "OPTpushranges;"				  ]
[ "pushranges",				  "pattern",	  "optimizer",	  "():str ",														  "OPTpushranges;"				  ]
[ "peephole",				  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",												  "OPTpeephole;"				  ]
[ "peephole",				  "pattern",	  "optimizer",	  "():str ",														  "OPTpeephole;"				  ]
[ "partitions",				  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",												  "OPTpartitions;"				  ]
[ "partitions",				  "pattern",	  "optimizer",	  "():str ",														  "OPTpartitions;"				  ]
[ "prelude",				  "pattern",	  "optimizer",	  "():void ",														  "optimizer_prelude;"				  ]
[ "remoteQueries",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",												  "OPTremoteQueries;"				  ]
[ "remoteQueries",			  "pattern",	  "optimizer",	  "():str ",														  "OPTremoteQueries;"				  ]
[ "remap",				  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",												  "OPTremap;"					  ]
[ "remap",				  "pattern",	  "optimizer",	  "():str ",														  "OPTremap;"					  ]
[ "reduce",				  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",												  "OPTreduce;"					  ]
[ "reduce",				  "pattern",	  "optimizer",	  "():str ",														  "OPTreduce;"					  ]
[ "strengthReduction",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",												  "OPTstrengthReduction;"			  ]
[ "strengthReduction",			  "pattern",	  "optimizer",	  "():str ",														  "OPTstrengthReduction;"			  ]
[ "singleton",				  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",												  "OPTsingleton;"				  ]
[ "singleton",				  "pattern",	  "optimizer",	  "():str ",														  "OPTsingleton;"				  ]
[ "showPlan",				  "pattern",	  "optimizer",	  "():void ",														  "QOTshowPlan;"				  ]
[ "showPlan",				  "pattern",	  "optimizer",	  "(M:str,F:str,s:str):void ",												  "QOTshowPlan;"				  ]
[ "showFlowGraph",			  "pattern",	  "optimizer",	  "(M:str,F:str,s:str):void ",												  "QOTshowFlowGraph;"				  ]
[ "setDebug",				  "pattern",	  "optimizer",	  "():void ",														  "QOTdebugOptimizers;"				  ]
[ "close",				  "pattern",	  "statistics",	  "():void ",														  "STATclose;"					  ]
[ "dump",				  "command",	  "statistics",	  "():void ",														  "STATdump;"					  ]
[ "discard",				  "command",	  "statistics",	  "(name:bat[:any_1,:any_2]):void ",											  "STATdiscard2;"				  ]
[ "discard",				  "pattern",	  "statistics",	  "(name:str):void ",													  "STATdiscard;"				  ]
[ "deposit",				  "command",	  "statistics",	  "(name:bat[:any_1,:any_2]):void ",											  "STATdeposit;"				  ]
[ "deposit",				  "command",	  "statistics",	  "(name:str):void ",													  "STATdepositStr;"				  ]
[ "destroy",				  "pattern",	  "statistics",	  "():void ",														  "STATdestroy;"				  ]
[ "epilogue",				  "command",	  "statistics",	  "():void ",														  "STATepilogue;"				  ]
[ "forceUpdate",			  "command",	  "statistics",	  "(bnme:str):void ",													  "STATforceUpdate;"				  ]
[ "forceUpdate",			  "command",	  "statistics",	  "():void ",														  "STATforceUpdateAll;"				  ]
[ "getHistogram",			  "command",	  "statistics",	  "(nme:str):bat[:any_1,:any_2] ",											  "STATgetHistogram;"				  ]
[ "getMax",				  "command",	  "statistics",	  "(nme:str):lng ",													  "STATgetMax;"					  ]
[ "getMin",				  "command",	  "statistics",	  "(nme:str):lng ",													  "STATgetMin;"					  ]
[ "getSize",				  "command",	  "statistics",	  "(nme:str):lng ",													  "STATgetSize;"				  ]
[ "getCount",				  "command",	  "statistics",	  "(nme:str):lng ",													  "STATgetCount;"				  ]
[ "getHotset",				  "command",	  "statistics",	  "():bat[:int,:str] ",													  "STATgetHotset;"				  ]
[ "getObjects",				  "command",	  "statistics",	  "():bat[:int,:str] ",													  "STATgetObjects;"				  ]
[ "hasMoreElements",			  "pattern",	  "statistics",	  "() (_1:lng,_2:str) ",												  "STAThasMoreElements;"			  ]
[ "newIterator",			  "pattern",	  "statistics",	  "() (_1:lng,_2:str) ",												  "STATnewIterator;"				  ]
[ "open",				  "pattern",	  "statistics",	  "():void ",														  "STATopen;"					  ]
[ "prelude",				  "command",	  "statistics",	  "():void ",														  "STATprelude;"				  ]
[ "release",				  "command",	  "statistics",	  "(name:bat[:any_1,:any_2]):void ",											  "STATrelease;"				  ]
[ "release",				  "pattern",	  "statistics",	  "(name:str):void ",													  "STATreleaseStr;"				  ]
[ "releaseAll",				  "pattern",	  "statistics",	  "():void ",														  "STATreleaseAll;"				  ]
[ "toString",				  "pattern",	  "statistics",	  "(name:any_1):str ",													  "STATtoString;"				  ]
[ "take",				  "pattern",	  "statistics",	  "(name:any_1):any_2 ",												  "STATtake;"					  ]
[ "update",				  "command",	  "statistics",	  "():void ",														  "STATupdate;"					  ]
[ "activate",				  "command",	  "profiler",	  "(name:str):void ",													  "CMDactivateProfiler;"			  ]
[ "cleanup",				  "command",	  "profiler",	  "():void ",														  "CMDcleanup;"					  ]
[ "clrFilter",				  "pattern",	  "profiler",	  "(v:any):void ",													  "CMDsetFilterVariable;"			  ]
[ "closeStream",			  "command",	  "profiler",	  "():void ",														  "CMDcloseProfilerStream;"			  ]
[ "dumpTrace",				  "command",	  "profiler",	  "():void ",														  "CMDdumpTrace;"				  ]
[ "deactivate",				  "command",	  "profiler",	  "(name:str):void ",													  "CMDdeactivateProfiler;"			  ]
[ "getEvent",				  "pattern",	  "profiler",	  "() (_1:lng,_2:int,_3:int) ",												  "CMDgetEvent;"				  ]
[ "getTrace",				  "command",	  "profiler",	  "(e:str):bat[:int,:any_1] ",												  "CMDgetTrace;"				  ]
[ "noop",				  "command",	  "profiler",	  "():void ",														  "CMDnoopProfiler;"				  ]
[ "openStream",				  "command",	  "profiler",	  "(host:str,port:int):void ",												  "CMDsetProfilerStream;"			  ]
[ "openStream",				  "command",	  "profiler",	  "(fnme:str):void ",													  "CMDsetProfilerFile;"				  ]
[ "openStream",				  "command",	  "profiler",	  "():void ",														  "CMDopenProfilerStream;"			  ]
[ "reset",				  "command",	  "profiler",	  "():void ",														  "CMDclearTrace;"				  ]
[ "stop",				  "command",	  "profiler",	  "():void ",														  "CMDstopProfiler;"				  ]
[ "start",				  "command",	  "profiler",	  "():void ",														  "CMDstartProfiler;"				  ]
[ "setEndPoint",			  "command",	  "profiler",	  "(mod:str,fcn:str):void ",												  "CMDendPointProfiler;"			  ]
[ "setStartPoint",			  "command",	  "profiler",	  "(mod:str,fcn:str):void ",												  "CMDstartPointProfiler;"			  ]
[ "setFilter",				  "pattern",	  "profiler",	  "(v:any):void ",													  "CMDsetFilterVariable;"			  ]
[ "setFilter",				  "command",	  "profiler",	  "(mod:str,fcn:str):void ",												  "CMDsetFilterProfiler;"			  ]
[ "setNone",				  "command",	  "profiler",	  "():void ",														  "CMDsetNoneProfiler;"				  ]
[ "setAll",				  "command",	  "profiler",	  "():void ",														  "CMDsetAllProfiler;"				  ]
[ "bind",				  "pattern",	  "mserver",	  "(key:int,remoteName:str):bat[:any_1,:any_2] ",									  "SERVERbindBAT;"				  ]
[ "bind",				  "pattern",	  "mserver",	  "(key:int,rschema:str,rtable:str,i:int):bat[:any_1,:any_2] ",								  "SERVERbindBAT;"				  ]
[ "bind",				  "pattern",	  "mserver",	  "(key:int,rschema:str,rtable:str,rcolumn:str,i:int):bat[:any_1,:any_2] ",						  "SERVERbindBAT;"				  ]
[ "connect_ssl",			  "command",	  "mserver",	  "(host:str,port:int,usr:str,passwd:str,lang:str):int ",								  "SERVERconnectssl;"				  ]
[ "connect",				  "command",	  "mserver",	  "(host:str,port:int,usr:str,passwd:str,lang:str):int ",								  "SERVERconnect;"				  ]
[ "destroy",				  "command",	  "mserver",	  "(mid:int):void ",													  "SERVERdestroy;"				  ]
[ "disconnect",				  "command",	  "mserver",	  "(mid:int):void ",													  "SERVERdisconnect;"				  ]
[ "disconnect",				  "command",	  "mserver",	  "():int ",														  "SERVERdisconnectALL;"			  ]
[ "disconnect",				  "command",	  "mserver",	  "(dbalias:str):int ",													  "SERVERdisconnectWithAlias;"			  ]
[ "explain",				  "command",	  "mserver",	  "(mid:int):str ",													  "SERVERexplain;"				  ]
[ "error",				  "command",	  "mserver",	  "(mid:int):int ",													  "SERVERerror;"				  ]
[ "fetch_reset",			  "command",	  "mserver",	  "(hdl:int):int ",													  "SERVERfetch_reset;"				  ]
[ "fetch_line",				  "command",	  "mserver",	  "(hdl:int):str ",													  "SERVERfetch_line;"				  ]
[ "fetch_field_array",			  "command",	  "mserver",	  "(hdl:int):bat[:int,:str] ",												  "SERVERfetch_field_bat;"			  ]
[ "fetch_field",			  "command",	  "mserver",	  "(hdl:int,fnr:int):chr ",												  "SERVERfetch_field_chr;"			  ]
[ "fetch_field",			  "command",	  "mserver",	  "(hdl:int,fnr:int):oid ",												  "SERVERfetch_field_oid;"			  ]
[ "fetch_field",			  "command",	  "mserver",	  "(hdl:int,fnr:int):void ",												  "SERVERfetch_field_void;"			  ]
[ "fetch_field",			  "command",	  "mserver",	  "(hdl:int,fnr:int):sht ",												  "SERVERfetch_field_sht;"			  ]
[ "fetch_field",			  "command",	  "mserver",	  "(hdl:int,fnr:int):lng ",												  "SERVERfetch_field_lng;"			  ]
[ "fetch_field",			  "command",	  "mserver",	  "(hdl:int,fnr:int):int ",												  "SERVERfetch_field_int;"			  ]
[ "fetch_field",			  "command",	  "mserver",	  "(hdl:int,fnr:int):str ",												  "SERVERfetch_field_str;"			  ]
[ "fetch_all_rows",			  "command",	  "mserver",	  "(hdl:int):int ",													  "SERVERfetch_all_rows;"			  ]
[ "fetch_row",				  "command",	  "mserver",	  "(hdl:int):int ",													  "SERVERfetch_row;"				  ]
[ "fetch_row",				  "command",	  "mserver",	  "(hdl:int):int ",													  "SERVERrows_affected;"			  ]
[ "finish",				  "command",	  "mserver",	  "(hdl:int):int ",													  "SERVERfinish;"				  ]
[ "getError",				  "command",	  "mserver",	  "(mid:int):str ",													  "SERVERgetError;"				  ]
[ "get_row_count",			  "command",	  "mserver",	  "(hdl:int):int ",													  "SERVERget_row_count;"			  ]
[ "get_field_count",			  "command",	  "mserver",	  "(hdl:int):int ",													  "SERVERget_field_count;"			  ]
[ "lookup",				  "command",	  "mserver",	  "(dbalias:str):int ",													  "SERVERlookup;"				  ]
[ "listen_ssl",				  "command",	  "mserver",	  "(port:int,maxusers:int,keyfile:str,certfile:str,cmd:str):int ",							  "SERVERlistenSSL;"				  ]
[ "listen",				  "command",	  "mserver",	  "(port:int,maxusers:int,cmd:str):int ",										  "SERVERlisten3;"				  ]
[ "listen",				  "command",	  "mserver",	  "(port:int,maxusers:int):int ",											  "SERVERlisten2;"				  ]
[ "listen",				  "command",	  "mserver",	  "(port:int):int ",													  "SERVERlisten_port;"				  ]
[ "listen",				  "command",	  "mserver",	  "():int ",														  "SERVERlisten_default;"			  ]
[ "malclient",				  "command",	  "mserver",	  "(in:streams,out:streams):void ",											  "SERVERclient;"				  ]
[ "next_result",			  "command",	  "mserver",	  "(hdl:int):int ",													  "SERVERnext_result;"				  ]
[ "put",				  "pattern",	  "mserver",	  "(nme:str,val:any_1):str ",												  "SERVERputLocal;"				  ]
[ "put",				  "pattern",	  "mserver",	  "(mid:int,nme:str,val:any_1):void ",											  "SERVERput;"					  ]
[ "prepare",				  "command",	  "mserver",	  "(mid:int,qry:str):int ",												  "SERVERprepare;"				  ]
[ "ping",				  "command",	  "mserver",	  "(mid:int):int ",													  "SERVERping;"					  ]
[ "query_array",			  "pattern",	  "mserver",	  "(mid:int,qry:str,arg:str...):int ",											  "SERVERquery_array;"				  ]
[ "query_handle",			  "command",	  "mserver",	  "(mid:int,qry:str):int ",												  "SERVERquery_handle;"				  ]
[ "query",				  "command",	  "mserver",	  "(mid:int,qry:str):int ",												  "SERVERquery;"				  ]
[ "rpc",				  "command",	  "mserver",	  "(key:int,qry:str):void ",												  "SERVERquery;"				  ]
[ "rpc",				  "pattern",	  "mserver",	  "(key:int,qry:str):bat[:any_1,:any_2] ",										  "SERVERmapi_rpc_bat;"				  ]
[ "rpc",				  "pattern",	  "mserver",	  "(key:int,qry:str...):any ",												  "SERVERmapi_rpc_single_row;"			  ]
[ "reconnect",				  "command",	  "mserver",	  "(mid:int):void ",													  "SERVERreconnect;"				  ]
[ "reconnect",				  "command",	  "mserver",	  "(host:str,port:int,db_alias:str,usr:str,passwd:str,lang:str):int ",							  "SERVERreconnectAlias;"			  ]
[ "reconnect",				  "command",	  "mserver",	  "(host:str,port:int,usr:str,passwd:str,lang:str):int ",								  "SERVERreconnectWithoutAlias;"		  ]
[ "resume",				  "command",	  "mserver",	  "():void ",														  "SERVERresume;"				  ]
[ "setAlias",				  "command",	  "mserver",	  "(dbalias:str):void ",												  "SERVERsetAlias;"				  ]
[ "suspend",				  "command",	  "mserver",	  "():void ",														  "SERVERsuspend;"				  ]
[ "stop",				  "command",	  "mserver",	  "():void ",														  "SERVERstop;"					  ]
[ "trace",				  "command",	  "mserver",	  "(mid:int,flag:int):void ",												  "SERVERtrace;"				  ]
[ "emptySet",				  "command",	  "constraints",  "(b:bat[:oid,:any_2]):void ",												  "CemptySet;"					  ]
[ "assertSpace",			  "pattern",	  "language",	  "(depth:int):void ",									  "MALsafeguardStack;"				  ]
[ "assert",				  "pattern",	  "language",	  "(v:any_1,pname:str,oper:str,val:any_2):void ",									  "MALassertTriple;"				  ]
[ "assert",				  "command",	  "language",	  "(v:oid,term:str):void ",												  "MALassertOid;"				  ]
[ "assert",				  "command",	  "language",	  "(v:str,term:str):void ",												  "MALassertStr;"				  ]
[ "assert",				  "command",	  "language",	  "(v:lng,term:str):void ",												  "MALassertLng;"				  ]
[ "assert",				  "command",	  "language",	  "(v:int,term:str):void ",												  "MALassertInt;"				  ]
[ "assert",				  "command",	  "language",	  "(v:sht,term:str):void ",												  "MALassertSht;"				  ]
[ "assert",				  "command",	  "language",	  "(v:bit,term:str):void ",												  "MALassertBit;"				  ]
[ "call",				  "pattern",	  "language",	  "(s:bat[:oid,:str]):void ",												  "CMDcallBAT;"					  ]
[ "call",				  "pattern",	  "language",	  "(s:str):void ",													  "CMDcallString;"				  ]
[ "dataflow",				  "pattern",	  "language",	  "():int ",														  "MALstartDataflow;"				  ]
[ "nextElement",			  "command",	  "language",	  "(step:dbl,last:dbl) (_3:bit,_4:dbl) ",										  "RNGnextElement_dbl;"				  ]
[ "nextElement",			  "command",	  "language",	  "(step:flt,last:flt) (_3:bit,_4:flt) ",										  "RNGnextElement_flt;"				  ]
[ "nextElement",			  "command",	  "language",	  "(step:lng,last:lng) (_3:bit,_4:lng) ",										  "RNGnextElement_lng;"				  ]
[ "nextElement",			  "command",	  "language",	  "(step:int,last:int) (_3:bit,_4:int) ",										  "RNGnextElement_int;"				  ]
[ "nextElement",			  "command",	  "language",	  "(step:sht,last:sht) (_3:bit,_4:sht) ",										  "RNGnextElement_sht;"				  ]
[ "nextElement",			  "command",	  "language",	  "(step:oid,last:oid) (_3:bit,_4:oid) ",										  "RNGnextElement_oid;"				  ]
[ "newRange",				  "command",	  "language",	  "(v:dbl) (_2:bit,_3:dbl) ",												  "RNGnewRange_dbl;"				  ]
[ "newRange",				  "command",	  "language",	  "(v:flt) (_2:bit,_3:flt) ",												  "RNGnewRange_flt;"				  ]
[ "newRange",				  "command",	  "language",	  "(v:lng) (_2:bit,_3:lng) ",												  "RNGnewRange_lng;"				  ]
[ "newRange",				  "command",	  "language",	  "(v:int) (_2:bit,_3:int) ",												  "RNGnewRange_int;"				  ]
[ "newRange",				  "command",	  "language",	  "(v:sht) (_2:bit,_3:sht) ",												  "RNGnewRange_sht;"				  ]
[ "newRange",				  "command",	  "language",	  "(v:oid) (_2:bit,_3:oid) ",												  "RNGnewRange_oid;"				  ]
[ "register",				  "command",	  "language",	  "(m:str,f:str,code:str,help:str):void ",										  "CMDregisterFunction;"			  ]
[ "raise",				  "command",	  "language",	  "(msg:str):str ",													  "CMDraise;"					  ]
[ "source",				  "command",	  "language",	  "(f:str):void ",													  "CMDevalFile;"				  ]
[ "createXML",				  "command",	  "manual",	  "():void ",														  "MANUALcreate0;"				  ]
[ "createXML",				  "command",	  "manual",	  "(mod:str):void ",													  "MANUALcreate1;"				  ]
[ "help",				  "command",	  "manual",	  "(text:str):void ",													  "MANUALhelp;"					  ]
[ "index",				  "command",	  "manual",	  "():void ",														  "MANUALcreateIndex;"				  ]
[ "summary",				  "command",	  "manual",	  "():void ",														  "MANUALcreateSummary;"			  ]
[ "section",				  "command",	  "manual",	  "(mod:str):void ",													  "MANUALcreateSection1;"			  ]
[ "search",				  "command",	  "manual",	  "(text:str):void ",													  "MANUALsearch;"				  ]
[ "getEnvironment",			  "command",	  "inspect",	  "():bat[:str,:str] ",													  "INSPECTgetEnvironment;"			  ]
[ "getAtomSizes",			  "command",	  "inspect",	  "():bat[:int,:int] ",													  "INSPECTatom_sizes;"				  ]
[ "getAtomSuper",			  "command",	  "inspect",	  "():bat[:int,:str] ",													  "INSPECTatom_sup_names;"			  ]
[ "getAtomNames",			  "command",	  "inspect",	  "():bat[:int,:str] ",													  "INSPECTatom_names;"				  ]
[ "getTypeIndex",			  "pattern",	  "inspect",	  "(v:any_1):int ",													  "INSPECTtypeIndex;"				  ]
[ "getTypeName",			  "command",	  "inspect",	  "(v:int):str ",													  "INSPECTtypename;"				  ]
[ "getType",				  "pattern",	  "inspect",	  "(v:any_1):str ",													  "INSPECTtypeName;"				  ]
[ "getType",				  "pattern",	  "inspect",	  "(v:bat[:any_1,:any_2]) (ht:str,tt:str) ",										  "INSPECTtypeName;"				  ]
[ "getSize",				  "command",	  "inspect",	  "(mod:str,fcn:str):lng ",												  "INSPECTgetFunctionSize;"			  ]
[ "getSize",				  "command",	  "inspect",	  "(mod:str):bat[:str,:lng] ",												  "INSPECTgetModuleSize;"			  ]
[ "getSize",				  "pattern",	  "inspect",	  "():lng ",														  "INSPECTgetSize;"				  ]
[ "getAddresses",			  "command",	  "inspect",	  "():bat[:oid,:str] ",													  "INSPECTgetAllAddresses;"			  ]
[ "getSignatures",			  "command",	  "inspect",	  "():bat[:oid,:str] ",													  "INSPECTgetAllSignatures;"			  ]
[ "getFunction",			  "command",	  "inspect",	  "():bat[:oid,:str] ",													  "INSPECTgetAllFunctions;"			  ]
[ "getModule",				  "command",	  "inspect",	  "():bat[:oid,:str] ",													  "INSPECTgetAllModules;"			  ]
[ "getKind",				  "command",	  "inspect",	  "():bat[:oid,:str] ",													  "INSPECTgetkind;"				  ]
[ "getSource",				  "command",	  "inspect",	  "(mod:str,fcn:str):str ",												  "INSPECTgetSource;"				  ]
[ "getComment",				  "command",	  "inspect",	  "(mod:str,fcn:str):bat[:str,:str] ",											  "INSPECTgetComment;"				  ]
[ "getAddress",				  "command",	  "inspect",	  "(mod:str,fcn:str):bat[:str,:str] ",											  "INSPECTgetAddress;"				  ]
[ "getSignature",			  "command",	  "inspect",	  "(mod:str,fcn:str):bat[:str,:str] ",											  "INSPECTgetSignature;"			  ]
[ "getDefinition",			  "command",	  "inspect",	  "(mod:str,fcn:str):bat[:str,:str] ",											  "INSPECTgetDefinition;"			  ]
[ "adapt",				  "command",	  "bpm",	  "(s:bat[:any_1,:any_2],low:any_2,hgh:any_2,rs:bat[:any_1,:any_3],pol:int):bat[:any_1,:any_2] ", "BPMadapt;"					  ]
[ "addPartition",			  "command",	  "bpm",	  "(nme:str,b:bat[:any_1,:any_2],hl:any_1,hh:any_1,tl:any_2,th:any_2):bat[:any_1,:any_2] ",				  "BPMaddPartitionDim;"				  ]
[ "addPartition",			  "command",	  "bpm",	  "(nme:str,b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",									  "BPMaddPartition;"				  ]
[ "addPartition",			  "command",	  "bpm",	  "(b:bat[:any_1,:any_2],s:bat[:any_1,:any_2]):void ",									  "BPMaddSegment;"				  ]
[ "count",				  "command",	  "bpm",	  "(b:bat[:any_1,:any_2]):int ",											  "BPMcount;"					  ]
[ "close",				  "command",	  "bpm",	  "():void ",														  "BPMclose;"					  ]
[ "dump",				  "command",	  "bpm",	  "():void ",														  "BPMdump;"					  ]
[ "dump",				  "command",	  "bpm",	  "(alias:bat[:any_1,:any_2]):void ",											  "BPMdumpAlias;"				  ]
[ "discard",				  "command",	  "bpm",	  "():void ",														  "BPMdiscardAll;"				  ]
[ "discard",				  "command",	  "bpm",	  "(alias:bat[:any_1,:any_2]):void ",											  "BPMdiscard;"					  ]
[ "delete",				  "command",	  "bpm",	  "(pb:bat[:any_1,:any_2],b:bat[:any_1,:any_2]):void ",									  "BPMdelete;"					  ]
[ "derivePartition",			  "command",	  "bpm",	  "(pb:bat[:any_1,:any_2],src:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",							  "BPMderived;"					  ]
[ "deposit",				  "command",	  "bpm",	  "(nme:str,b:bat[:oid,:any_2]):bat[:oid,:any_2] ",									  "BPMdeposit;"					  ]
[ "destroy",				  "command",	  "bpm",	  "():void ",														  "BPMdestroy;"					  ]
[ "epilogue",				  "command",	  "bpm",	  "():void ",														  "BPMepilogue;"				  ]
[ "getNumberOfPartitions",		  "command",	  "bpm",	  "(alias:bat[:any_1,:any_2]):int ",											  "BPMgetNumberOfPartitions;"			  ]
[ "getDimension",			  "command",	  "bpm",	  "(b:bat[:any_1,:any_2]) (first:any_1,last:any_1,vlow:any_2,vhgh:any_2) ",						  "BPMgetDimension;"				  ]
[ "getNames",				  "command",	  "bpm",	  "():bat[:oid,:str] ",													  "BPMgetNames;"				  ]
[ "glue",				  "command",	  "bpm",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "BPMglue;"					  ]
[ "hasMoreElements",			  "pattern",	  "bpm",	  "(pb:bat[:any_1,:any_2],first:any_1,last:any_1,vlow:any_2,vhgh:any_2):bat[:any_1,:any_2] ",				  "BPMhasMoreElementsRng4;"			  ]
[ "hasMoreElements",			  "pattern",	  "bpm",	  "(pb:bat[:any_1,:any_2],low:any_2,hgh:any_2):bat[:any_1,:any_2] ",							  "BPMhasMoreElementsRng;"			  ]
[ "hasMoreElements",			  "pattern",	  "bpm",	  "(grp:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",									  "BPMhasMoreElements;"				  ]
[ "hasMoreElements",		  "pattern",	  "bpm",	  "(grp:bat[:any_1,:any_2],b:bat[:any_1,:any_3]) (_3:bat[:any_1,:any_2],_4:bat[:any_1,:any_2]) ",			  "BPMhasMoreElements2;"			  ]
[ "hasMoreElements",		  "pattern",	  "bpm",	  "(grp:bat[:any_1,:any_2],b:bat[:any_1,:any_3],c:bat[:oid,:any_4]) (_4:bat[:any_1,:any_2],_5:bat[:any_1,:any_3],_6:bat[:any_1,:any_4]) ", "BPMhasMoreElements3;"			  ]
[ "hashPartition",			  "command",	  "bpm",	  "(pb:bat[:any_1,:any_2],slots:int):void ",										  "BPMhash;"					  ]
[ "hashPartitions",			  "command",	  "bpm",	  "(b:bat[:any_1,:any_2]):void ",											  "BPMhashPartitions;"				  ]
[ "insert",				  "command",	  "bpm",	  "(pb:bat[:any_1,:any_2],b:bat[:any_1,:any_2]):void ",									  "BPMinsert;"					  ]
[ "mapThghDbl",			  "command",	  "bpm",	  "():bat[:int,:dbl] ",									  "BPMmapthghdbl;"				  ]
[ "mapThghLng",			  "command",	  "bpm",	  "():bat[:int,:lng] ",									  "BPMmapthghlng;"				  ]
[ "mapTlowDbl",			  "command",	  "bpm",	  "():bat[:int,:dbl] ",									  "BPMmaptlowdbl;"				  ]
[ "mapTlowLng",			  "command",	  "bpm",	  "():bat[:int,:lng] ",									  "BPMmaptlowlng;"				  ]
[ "mapPrv",				  "command",	  "bpm",	  "():bat[:int,:int] ",													  "BPMmapprv;"					  ]
[ "mapNxt",				  "command",	  "bpm",	  "():bat[:int,:int] ",													  "BPMmapnxt;"					  ]
[ "mapAlias",				  "command",	  "bpm",	  "():bat[:int,:BAT] ",													  "BPMmapalias;"				  ]
[ "mapBid",				  "command",	  "bpm",	  "():bat[:int,:BAT] ",													  "BPMmapbid;"					  ]
[ "mapName",				  "command",	  "bpm",	  "():bat[:int,:str] ",													  "BPMmapname;"					  ]
[ "newIterator",			  "pattern",	  "bpm",	  "(pb:bat[:any_1,:any_2],first:any_1,last:any_1,vlow:any_2,vhgh:any_2):bat[:oid,:any_2] ",				  "BPMnewIteratorRng4;"				  ]
[ "newIterator",			  "pattern",	  "bpm",	  "(grp:bat[:any_1,:any_2],first:any_2,last:any_2):bat[:any_1,:any_2] ",						  "BPMnewIteratorRng;"				  ]
[ "newIterator",			  "pattern",	  "bpm",	  "(grp:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",									  "BPMnewIterator;"				  ]
[ "newIterator",		  "pattern",	  "bpm",	  "(grp:bat[:any_1,:any_2],b:bat[:any_1,:any_3]) (_3:bat[:any_1,:any_2],_4:bat[:any_1,:any_2]) ",			  "BPMnewIterator2;"				  ]
[ "newIterator",		  "pattern",	  "bpm",	  "(grp:bat[:any_1,:any_2],b:bat[:any_1,:any_3],c:bat[:oid,:any_4]) (_4:bat[:any_1,:any_2],_5:bat[:any_1,:any_3],_6:bat[:any_1,:any_4]) ", "BPMnewIterator3;"				  ]
[ "new",				  "pattern",	  "bpm",	  "(ht:any_1,tt:any_2):bat[:any_1,:any_2] ",										  "BPMnew;"					  ]
[ "open",				  "command",	  "bpm",	  "():void ",														  "BPMopen;"					  ]
[ "prelude",				  "command",	  "bpm",	  "():void ",														  "BPMprelude;"					  ]
[ "partition",				  "command",	  "bpm",	  "(pb:bat[:any_1,:any_2],val:any_2):void ",										  "BPMsplitpartition;"				  ]
[ "pieces",			  "command",	  "bpm",	  "(b:bat[:any_1,:any_2]):int ",							  "BPMpieces;"					  ]
[ "replace",				  "command",	  "bpm",	  "(pb:bat[:any_1,:any_2],old:bat[:any_1,:any_2],nwe:bat[:any_1,:any_2]):void ",					  "BPMreplace;"					  ]
[ "rangePartitionSort",			  "command",	  "bpm",	  "(pb:bat[:any_1,:any_2],pv:bat[:oid,:any_2]):void ",									  "BPMrangeVectorSort;"				  ]
[ "rangePartition",			  "command",	  "bpm",	  "(pb:bat[:any_1,:any_2],pv:bat[:oid,:any_2]):void ",									  "BPMrangeVector;"				  ]
[ "rangePartition",			  "command",	  "bpm",	  "(pb:bat[:any_1,:any_2],rl:any_2,rh:any_2):void ",									  "BPMrange;"					  ]
[ "splitquant",				  "command",	  "bpm",	  "(pb:bat[:any_1,:any_2],mb:int):void ",										  "BPMsplitquant;"				  ]
[ "saveCatalog",			  "command",	  "bpm",	  "():void ",														  "BPMsaveCatalog;"				  ]
[ "select",				  "command",	  "bpm",	  "(part:bat[:any_1,:any_2],low:any_2,hgh:any_2,li:bit,hi:bit):bat[:any_1,:any_2] ",					  "BPMselectInclusive;"				  ]
[ "select",				  "command",	  "bpm",	  "(part:bat[:any_1,:any_2],low:any_2,hgh:any_2):bat[:any_1,:any_2] ",							  "BPMselect;"					  ]
[ "sortPartitions",			  "command",	  "bpm",	  "(b:bat[:any_1,:any_2]):void ",											  "BPMsortPartitions;"				  ]
[ "take",				  "command",	  "bpm",	  "(alias:bat[:any_1,:any_2],index:int):bat[:any_1,:any_2] ",								  "BPMtakePartition;"				  ]
[ "take",				  "command",	  "bpm",	  "(pb:str):bat[:any_1,:any_2] ",											  "BPMtake;"					  ]
[ "expand",				  "command",	  "mat",	  "(grp:str):bat[:any_1,:any_2] ",											  "MATdummy;"					  ]
[ "info",				  "command",	  "mat",	  "(g:str,e:str):bat[:any_1,:any_2] ",											  "MATinfo;"					  ]
[ "iterator",				  "command",	  "mat",	  "(grp:str):bat[:any_1,:any_2] ",											  "MATdummy;"					  ]
[ "new",				  "pattern",	  "mat",	  "(b:bat[:any_1,:any_2]...):bat[:any_1,:any_2] ",									  "MATnew;"					  ]
[ "print",				  "pattern",	  "mat",	  "(b:bat[:any_1,:any_2]...):void ",											  "MATprint;"					  ]
[ "pack",				  "pattern",	  "mat",	  "(b:bat[:any_1,:any_2]...):bat[:any_1,:any_2] ",									  "MATpack;"					  ]
[ "getDeparture",			  "command",	  "factory",	  "():bat[:oid,:timestamp] ",												  "FCTgetDeparture;"				  ]
[ "getArrival",				  "command",	  "factory",	  "():bat[:oid,:timestamp] ",												  "FCTgetArrival;"				  ]
[ "getOwners",				  "command",	  "factory",	  "():bat[:oid,:str] ",													  "FCTgetOwners;"				  ]
[ "getCaller",				  "command",	  "factory",	  "():int ",														  "FCTgetCaller;"				  ]
[ "getPlants",				  "command",	  "factory",	  "() (mod:bat[:oid,:str],fcn:bat[:oid,:str]) ",									  "FCTgetPlants;"				  ]
[ "shutdown",				  "command",	  "factory",	  "(m:str,f:str):void ",												  "FCTshutdown;"				  ]
[ "dump",				  "pattern",	  "tablet",	  "(s:streams,b:bat[:any,:any]...):int ",										  "TABdump;"					  ]
[ "display",				  "pattern",	  "tablet",	  "(v:bat[:any_1,:any]...):int ",											  "TABdisplayTable;"				  ]
[ "display",				  "pattern",	  "tablet",	  "(v:any...):int ",													  "TABdisplayRow;"				  ]
[ "dump",				  "command",	  "tablet",	  "(names:bat[:oid,:str],seps:bat[:oid,:str],bats:bat[:oid,:BAT],datafile:str,nr:int):void ",				  "CMDtablet_dump;"				  ]
[ "firstPage",				  "command",	  "tablet",	  "():void ",														  "TABfirstPage;"				  ]
[ "finish",				  "command",	  "tablet",	  "():void ",														  "TABfinishReport;"				  ]
[ "getPage",				  "command",	  "tablet",	  "(i:int):void ",													  "TABgetPage;"					  ]
[ "getPageCnt",				  "command",	  "tablet",	  "():void ",														  "TABgetPageCnt;"				  ]
[ "header",				  "pattern",	  "tablet",	  "(b:any...):int ",													  "TABheader;"					  ]
[ "input",				  "command",	  "tablet",	  "(names:bat[:oid,:str],seps:bat[:oid,:str],types:bat[:oid,:str],s:streams,nr:int):bat[:str,:BAT] ",			  "CMDtablet_input;"				  ]
[ "lastPage",				  "command",	  "tablet",	  "():void ",														  "TABlastPage;"				  ]
[ "load",				  "command",	  "tablet",	  "(names:bat[:oid,:str],seps:bat[:oid,:str],types:bat[:oid,:str],datafile:str,nr:int):bat[:str,:BAT] ",		  "CMDtablet_load;"				  ]
[ "nextPage",				  "command",	  "tablet",	  "():void ",														  "TABnextPage;"				  ]
[ "output",				  "command",	  "tablet",	  "(order:bat[:any_1,:any_2],seps:bat[:oid,:str],bats:bat[:oid,:BAT],s:streams):void ",					  "CMDtablet_output;"				  ]
[ "prevPage",				  "command",	  "tablet",	  "():void ",														  "TABprevPage;"				  ]
[ "page",				  "pattern",	  "tablet",	  "(b:bat[:any_1,:any]...):int ",											  "TABpage;"					  ]
[ "setDecimal",				  "command",	  "tablet",	  "(idx:int,s:int,p:int):void ",											  "TABsetColumnDecimal;"			  ]
[ "setPosition",			  "command",	  "tablet",	  "(idx:int,f:int,i:int):void ",											  "TABsetColumnPosition;"			  ]
[ "setWidth",				  "command",	  "tablet",	  "(idx:int,maxwidth:int):void ",											  "TABsetColumnWidth;"				  ]
[ "setNull",				  "command",	  "tablet",	  "(idx:int,fmt:str):void ",												  "TABsetColumnNull;"				  ]
[ "setBracket",				  "command",	  "tablet",	  "(idx:int,lbrk:str,rbrk:str):void ",											  "TABsetColumnBracket;"			  ]
[ "setName",				  "command",	  "tablet",	  "(idx:int,nme:str):void ",												  "TABsetColumnName;"				  ]
[ "setColumn",				  "pattern",	  "tablet",	  "(idx:int,v:any_1):void ",												  "TABsetColumn;"				  ]
[ "setRowBracket",			  "command",	  "tablet",	  "(lbrk:str,rbrk:str):void ",												  "TABsetRowBracket;"				  ]
[ "setTableBracket",			  "command",	  "tablet",	  "(lbrk:str,rbrk:str):void ",												  "TABsetTableBracket;"				  ]
[ "setDelimiter",			  "command",	  "tablet",	  "(sep:str):void ",													  "TABsetDelimiter;"				  ]
[ "setPivot",				  "command",	  "tablet",	  "(b:bat[:void,:oid]):void ",												  "TABsetPivot;"				  ]
[ "setStream",				  "command",	  "tablet",	  "(s:streams):void ",													  "TABsetStream;"				  ]
[ "setFormat",				  "pattern",	  "tablet",	  "(b:any...):void ",													  "TABsetFormat;"				  ]
[ "setProperties",			  "command",	  "tablet",	  "(prop:str):int ",													  "TABsetProperties;"				  ]
[ "export",				  "command",	  "io",		  "(b:bat[:any_1,:any_2],filepath:str):bit ",										  "IOexport;"					  ]
[ "ftable",				  "pattern",	  "io",		  "(fp:streams,order:int,b1:bat[:any_1,:any],b:bat[:any_1,:any]...):void ",						  "IOfotable;"					  ]
[ "ftable",				  "pattern",	  "io",		  "(filep:streams,b1:bat[:any_1,:any],b:bat[:any_1,:any]...):void ",							  "IOftable;"					  ]
[ "import",				  "command",	  "io",		  "(b:bat[:any_1,:any_2],filepath:str):bat[:any_1,:any_2] ",								  "IOimport;"					  ]
[ "printf",				  "command",	  "io",		  "(format:str,val:str):void ",												  "IOprint_formatted_str;"			  ]
[ "printf",				  "command",	  "io",		  "(val:str):void ",													  "IOprint_str;"				  ]
[ "printf",				  "command",	  "io",		  "(format:str,val:dbl):void ",												  "IOprint_formatted_dbl;"			  ]
[ "printf",				  "command",	  "io",		  "(format:str,val:flt):void ",												  "IOprint_formatted_flt;"			  ]
[ "printf",				  "command",	  "io",		  "(format:str,val:lng):void ",												  "IOprint_formatted_lng;"			  ]
[ "printf",				  "command",	  "io",		  "(format:str,val:oid):void ",												  "IOprint_oid;"				  ]
[ "printf",				  "command",	  "io",		  "(format:str,val:sht):void ",												  "IOprint_formatted_sht;"			  ]
[ "printf",				  "command",	  "io",		  "(format:str,val:int):void ",												  "IOprint_formatted_int;"			  ]
[ "printf",				  "command",	  "io",		  "(format:str,val:chr):void ",												  "IOprint_formatted_chr;"			  ]
[ "printf",				  "command",	  "io",		  "(format:str,val:bit):void ",												  "IOprint_formatted_bit;"			  ]
[ "printft",				  "pattern",	  "io",		  "(val:any_1):void ",													  "IOprint_ft;"					  ]
[ "prompt",				  "pattern",	  "io",		  "(val:any_1):void ",													  "IOprompt_val;"				  ]
[ "print",				  "pattern",	  "io",		  "(val:bat[:any_1,:any_2]):void ",											  "IOprint_val;"				  ]
[ "print",				  "pattern",	  "io",		  "(val:any_1):void ",													  "IOprint_val;"				  ]
[ "print",				  "pattern",	  "io",		  "(order:int,b:bat[:any_1,:any],b2:bat[:any_1,:any]...):void ",							  "IOotable;"					  ]
[ "print",				  "pattern",	  "io",		  "(b1:bat[:any_1,:any]...):void ",											  "IOtable;"					  ]
[ "print",				  "pattern",	  "io",		  "(val:any_1,lst:any...):void ",											  "IOprint_val;"				  ]
[ "stdout",				  "command",	  "io",		  "():streams ",													  "io_stdout;"					  ]
[ "stderr",				  "command",	  "io",		  "():streams ",													  "io_stderr;"					  ]
[ "stdin",				  "command",	  "io",		  "():bstream ",													  "io_stdin;"					  ]
[ "table",				  "pattern",	  "io",		  "(order:int,b1:bat[:any_1,:any],b2:bat[:any_1,:any]...):void ",							  "IOtotable;"					  ]
[ "table",				  "pattern",	  "io",		  "(b1:bat[:any_1,:any],b2:bat[:any_1,:any]...):void ",									  "IOttable;"					  ]
[ "close",				  "pattern",	  "box",	  "(bname:str):void ",													  "BOXclose;"					  ]
[ "discard",				  "pattern",	  "box",	  "(bname:str,name:str):void ",												  "BOXdiscard;"					  ]
[ "deposit",				  "pattern",	  "box",	  "(bname:str,name:str,v:any_1):void ",											  "BOXdeposit;"					  ]
[ "destroy",				  "pattern",	  "box",	  "(bname:str):void ",													  "BOXdestroy;"					  ]
[ "getBoxNames",			  "command",	  "box",	  "():bat[:int,:str] ",													  "BOXgetBoxNames;"				  ]
[ "iterator",				  "pattern",	  "box",	  "(nme:str):lng ",													  "BOXiterator;"				  ]
[ "open",				  "pattern",	  "box",	  "(nme:str):any_1 ",													  "BOXopen;"					  ]
[ "release",				  "pattern",	  "box",	  "(bname:str,nme:str,val:any_1):void ",										  "BOXrelease;"					  ]
[ "releaseAll",				  "pattern",	  "box",	  "(bname:str):void ",													  "BOXreleaseAll;"				  ]
[ "toString",				  "pattern",	  "box",	  "(bname:str,name:str):str ",												  "BOXtoString;"				  ]
[ "take",				  "pattern",	  "box",	  "(bnme:str,vnme:str):any_1 ",												  "BOXtake;"					  ]
[ "bind",				  "pattern",	  "bbp",	  "(name:str):bat[:any_1,:any_2] ",											  "CMDbbpbind;"					  ]
[ "commit",				  "pattern",	  "bbp",	  "():void ",														  "CMDbbpReleaseAll;"				  ]
[ "close",				  "command",	  "bbp",	  "():void ",														  "CMDbbpclose;"				  ]
[ "discard",				  "pattern",	  "bbp",	  "(name:str):void ",													  "CMDbbpdiscard;"				  ]
[ "destroy",				  "pattern",	  "bbp",	  "(b:bat[:any_1,:any_2],immediate:bit):void ",										  "CMDbbpdestroyBAT;"				  ]
[ "destroy",				  "pattern",	  "bbp",	  "(b:bat[:any_1,:any_2]):void ",											  "CMDbbpdestroyBAT1;"				  ]
[ "deposit",				  "pattern",	  "bbp",	  "(name:str,loc:str):bat[:any_1,:any_2] ",										  "CMDbbpbindDefinition;"			  ]
[ "deposit",				  "pattern",	  "bbp",	  "(name:str,v:bat[:any_1,:any_2]):void ",										  "CMDbbpdeposit;"				  ]
[ "destroy",				  "command",	  "bbp",	  "():void ",														  "CMDbbpdestroy;"				  ]
[ "find",				  "command",	  "bbp",	  "(idx:BAT):bat[:any_1,:any_2] ",											  "CMDbbpbindindex;"				  ]
[ "find",				  "command",	  "bbp",	  "(head:str,tail:str):bat[:any_1,:any_2] ",										  "CMDbbpfind2;"				  ]
[ "find",				  "command",	  "bbp",	  "(name:str):bat[:any_1,:any_2] ",											  "CMDbbpfind3;"				  ]
[ "getDiskSpace",			  "command",	  "bbp",	  "():int ",														  "CMDbbpDiskSpace;"				  ]
[ "getLRefCount",			  "command",	  "bbp",	  "(b:bat[:any_1,:any_2]):int ",											  "CMDgetBATlrefcnt;"				  ]
[ "getRefCount",			  "command",	  "bbp",	  "(b:bat[:any_1,:any_2]):int ",											  "CMDgetBATrefcnt;"				  ]
[ "getKind",				  "command",	  "bbp",	  "():bat[:int,:str] ",													  "CMDbbpKind;"					  ]
[ "getStatus",				  "command",	  "bbp",	  "():bat[:int,:str] ",													  "CMDbbpStatus;"				  ]
[ "getDirty",				  "command",	  "bbp",	  "():bat[:int,:str] ",													  "CMDbbpDirty;"				  ]
[ "getHeat",				  "command",	  "bbp",	  "():bat[:int,:int] ",													  "CMDbbpHeat;"					  ]
[ "getLocation",			  "command",	  "bbp",	  "():bat[:int,:str] ",													  "CMDbbpLocation;"				  ]
[ "getLRefCount",			  "command",	  "bbp",	  "():bat[:int,:int] ",													  "CMDbbpLRefCount;"				  ]
[ "getRefCount",			  "command",	  "bbp",	  "():bat[:int,:int] ",													  "CMDbbpRefCount;"				  ]
[ "getCount",				  "command",	  "bbp",	  "():bat[:int,:lng] ",													  "CMDbbpCount;"				  ]
[ "getName",				  "command",	  "bbp",	  "(b:bat[:any_1,:any_2]):str ",											  "CMDbbpName;"					  ]
[ "getRNames",				  "command",	  "bbp",	  "():bat[:int,:str] ",													  "CMDbbpRNames;"				  ]
[ "getNames",				  "command",	  "bbp",	  "():bat[:int,:str] ",													  "CMDbbpNames;"				  ]
[ "getTailType",			  "command",	  "bbp",	  "():bat[:int,:str] ",													  "CMDbbpTailType;"				  ]
[ "getHeadType",			  "command",	  "bbp",	  "():bat[:int,:str] ",													  "CMDbbpHeadType;"				  ]
[ "getObjects",				  "pattern",	  "bbp",	  "():bat[:int,:str] ",													  "CMDbbpGetObjects;"				  ]
[ "iterator",				  "pattern",	  "bbp",	  "(nme:str):lng ",													  "CMDbbpiterator;"				  ]
[ "open",				  "command",	  "bbp",	  "():void ",														  "CMDbbpopen;"					  ]
[ "prelude",				  "pattern",	  "bbp",	  "():void ",														  "CMDbbpprelude;"				  ]
[ "release",				  "pattern",	  "bbp",	  "(b:bat[:any_1,:any_2]):void ",											  "CMDbbpreleaseBAT;"				  ]
[ "release",				  "pattern",	  "bbp",	  "(name:str,val:bat[:any_1,:any_2]):void ",										  "CMDbbprelease;"				  ]
[ "releaseAll",				  "pattern",	  "bbp",	  "():void ",														  "CMDbbpReleaseAll;"				  ]
[ "toString",				  "pattern",	  "bbp",	  "(name:str):str ",													  "CMDbbptoStr;"				  ]
[ "take",				  "pattern",	  "bbp",	  "(name:str):bat[:any_1,:any_2] ",											  "CMDbbptake;"					  ]
[ "close",				  "pattern",	  "const",	  "():void ",														  "CSTclose;"					  ]
[ "discard",				  "pattern",	  "const",	  "(name:any_1):void ",													  "CSTdiscard;"					  ]
[ "deposit",				  "pattern",	  "const",	  "(name:str,val:any_1):void ",												  "CSTdeposit;"					  ]
[ "destroy",				  "pattern",	  "const",	  "():void ",														  "CSTdestroy;"					  ]
[ "epiloque",				  "command",	  "const",	  "():void ",														  "CSTepilogue;"				  ]
[ "hasMoreElements",			  "pattern",	  "const",	  "() (_1:lng,_2:str) ",												  "CSThasMoreElements;"				  ]
[ "newIterator",			  "pattern",	  "const",	  "() (_1:lng,_2:str) ",												  "CSTnewIterator;"				  ]
[ "open",				  "pattern",	  "const",	  "():void ",														  "CSTopen;"					  ]
[ "prelude",				  "pattern",	  "const",	  "():void ",														  "CSTprelude;"					  ]
[ "release",				  "pattern",	  "const",	  "(name:any_1):void ",													  "CSTrelease;"					  ]
[ "release",				  "pattern",	  "const",	  "(name:str):void ",													  "CSTrelease;"					  ]
[ "releaseAll",				  "pattern",	  "const",	  "():void ",														  "CSTreleaseAll;"				  ]
[ "toString",				  "pattern",	  "const",	  "(name:any_1):str ",													  "CSTtoString;"				  ]
[ "take",				  "pattern",	  "const",	  "(name:str):any_1 ",													  "CSTtake;"					  ]
[ "addScenario",			  "command",	  "clients",	  "(usr:str,sc:str):void ",												  "CLTaddScenario;"				  ]
[ "addUser",				  "command",	  "clients",	  "(nme:str,pw:str,scen:bat[:str,:any_1]):oid ",									  "CLTaddUser;"					  ]
[ "checkPermission",			  "command",	  "clients",	  "(usr:str,pw:str,sc:str):void ",											  "CLTcheckPermission;"				  ]
[ "changePassword",			  "command",	  "clients",	  "(old:str,new:str):void ",												  "CLTchangePassword;"				  ]
[ "changeUsername",			  "command",	  "clients",	  "(old:str,new:str):void ",												  "CLTchangeUsername;"				  ]
[ "exit",				  "command",	  "clients",	  "():void ",														  "CLTexit;"					  ]
[ "getUsers",				  "command",	  "clients",	  "(s:bat[:str,:any_1]):bat[:oid,:str] ",										  "CLTgetUsers;"				  ]
[ "getUsers",				  "command",	  "clients",	  "():bat[:int,:str] ",													  "CLTusers;"					  ]
[ "getLogins",				  "command",	  "clients",	  "():bat[:int,:str] ",													  "CLTLogin;"					  ]
[ "getScenario",			  "command",	  "clients",	  "():str ",														  "CLTgetScenario;"				  ]
[ "getInfo",				  "command",	  "clients",	  "():bat[:str,:str] ",													  "CLTInfo;"					  ]
[ "getId",				  "command",	  "clients",	  "():int ",														  "CLTgetClientId;"				  ]
[ "quit",				  "command",	  "clients",	  "():void ",										  "CLTquit;"					  ]
[ "removeScenario",			  "command",	  "clients",	  "(usr:str,sc:str):void ",												  "CLTremoveScenario;"				  ]
[ "removeUser",				  "command",	  "clients",	  "(nme:str):void ",													  "CLTremoveUser;"				  ]
[ "setPassword",			  "command",	  "clients",	  "(user:str,pass:str):void ",												  "CLTsetPassword;"				  ]
[ "suspend",				  "command",	  "clients",	  "(id:int):void ",													  "CLTsuspend;"					  ]
[ "setScenario",			  "command",	  "clients",	  "(msg:str):str ",													  "CLTsetScenario;"				  ]
[ "setHistory",				  "command",	  "clients",	  "(s:str):void ",													  "CLTsetHistory;"				  ]
[ "setListing",				  "command",	  "clients",	  "(flag:int):int ",													  "CLTsetListing;"				  ]
[ "wakeup",				  "command",	  "clients",	  "(id:int):void ",													  "CLTwakeup;"					  ]
[ "blue",				  "command",	  "batcolor",	  "(c:bat[:oid,:color]):bat[:oid,:int] ",										  "CLRbatBlue;"					  ]
[ "cb",					  "command",	  "batcolor",	  "(c:bat[:oid,:color]):bat[:oid,:int] ",										  "CLRbatCb;"					  ]
[ "cr",					  "command",	  "batcolor",	  "(c:bat[:oid,:color]):bat[:oid,:int] ",										  "CLRbatCr;"					  ]
[ "color",				  "command",	  "batcolor",	  "(s:bat[:oid,:str]):bat[:oid,:color] ",										  "CLRbatColor;"				  ]
[ "green",				  "command",	  "batcolor",	  "(c:bat[:oid,:color]):bat[:oid,:int] ",										  "CLRbatGreen;"				  ]
[ "hue",				  "command",	  "batcolor",	  "(c:bat[:oid,:color]):bat[:oid,:flt] ",										  "CLRbatHue;"					  ]
[ "hsv",				  "command",	  "batcolor",	  "(h:bat[:oid,:flt],s:bat[:oid,:flt],v:bat[:oid,:flt]):bat[:oid,:color] ",						  "CLRbatHsv;"					  ]
[ "hue",				  "command",	  "batcolor",	  "(c:bat[:oid,:color]):bat[:oid,:int] ",										  "CLRbatHueInt;"				  ]
[ "luminance",				  "command",	  "batcolor",	  "(c:bat[:oid,:color]):bat[:oid,:int] ",										  "CLRbatLuminance;"				  ]
[ "red",				  "command",	  "batcolor",	  "(c:bat[:oid,:color]):bat[:oid,:int] ",										  "CLRbatRed;"					  ]
[ "rgb",				  "command",	  "batcolor",	  "(r:bat[:oid,:int],g:bat[:oid,:int],b:bat[:oid,:int]):bat[:oid,:color] ",						  "CLRbatRgb;"					  ]
[ "saturation",				  "command",	  "batcolor",	  "(c:bat[:oid,:color]):bat[:oid,:flt] ",										  "CLRbatSaturation;"				  ]
[ "saturation",				  "command",	  "batcolor",	  "(c:bat[:oid,:color]):bat[:oid,:int] ",										  "CLRbatSaturationInt;"			  ]
[ "str",				  "command",	  "batcolor",	  "(b:bat[:oid,:color]):bat[:oid,:str] ",										  "CLRbatStr;"					  ]
[ "value",				  "command",	  "batcolor",	  "(c:bat[:oid,:color]):bat[:oid,:flt] ",										  "CLRbatValue;"				  ]
[ "value",				  "command",	  "batcolor",	  "(c:bat[:oid,:color]):bat[:oid,:int] ",										  "CLRbatValueInt;"				  ]
[ "!=",					  "command",	  "batcalc",	  "(l:bat[:oid,:str],r:str):bat[:oid,:bit] ",										  "STRbatNotEqualCst;"				  ]
[ "!=",					  "command",	  "batcalc",	  "(l:bat[:oid,:str],r:bat[:oid,:str]):bat[:oid,:bit] ",								  "STRbatNotEqual;"				  ]
[ "!=",					  "command",	  "batcalc",	  "(l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",								  "MTIMEtimestampbat_NEQcst;"			  ]
[ "!=",					  "command",	  "batcalc",	  "(l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",								  "MTIMEtimestampbat_NEQcst;"			  ]
[ "!=",					  "command",	  "batcalc",	  "(l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",							  "MTIMEtimestampbat_NEQ;"			  ]
[ "!=",					  "command",	  "batcalc",	  "(l:bat[:oid,:timestamp],r:bat[:oid,:timestamp]):bat[:oid,:bit] ",							  "MTIMEtimestampbat_NEQ;"			  ]
[ "!=",					  "command",	  "batcalc",	  "(l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",									  "MTIMEdaytimebat_NEQcst;"			  ]
[ "!=",					  "command",	  "batcalc",	  "(l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",									  "MTIMEdaytimebat_NEQcst;"			  ]
[ "!=",					  "command",	  "batcalc",	  "(l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",							  "MTIMEdaytimebat_NEQ;"			  ]
[ "!=",					  "command",	  "batcalc",	  "(l:bat[:oid,:daytime],r:bat[:oid,:daytime]):bat[:oid,:bit] ",							  "MTIMEdaytimebat_NEQ;"			  ]
[ "!=",					  "command",	  "batcalc",	  "(l:bat[:void,:date],r:date):bat[:void,:bit] ",									  "MTIMEdatebat_NEQcst;"			  ]
[ "!=",					  "command",	  "batcalc",	  "(l:bat[:oid,:date],r:date):bat[:oid,:bit] ",										  "MTIMEdatebat_NEQcst;"			  ]
[ "!=",					  "command",	  "batcalc",	  "(l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",								  "MTIMEdatebat_NEQ;"				  ]
[ "!=",					  "command",	  "batcalc",	  "(l:bat[:oid,:date],r:bat[:oid,:date]):bat[:oid,:bit] ",								  "MTIMEdatebat_NEQ;"				  ]
[ "!=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",							  "CMDaccum_NEQ_cst_lng;"			  ]
[ "!=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",							  "CMDaccum_NEQ_lng_cst;"			  ]
[ "!=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",									  "CMD_NEQ_lng_cst;"				  ]
[ "!=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",					  "CMDaccum_NEQ_lng;"				  ]
[ "!=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",								  "CMD_NEQ_lng;"				  ]
[ "!=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",							  "CMDaccum_NEQ_cst_int;"			  ]
[ "!=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",							  "CMDaccum_NEQ_int_cst;"			  ]
[ "!=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",									  "CMD_NEQ_int_cst;"				  ]
[ "!=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",					  "CMDaccum_NEQ_int;"				  ]
[ "!=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",								  "CMD_NEQ_int;"				  ]
[ "!=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",							  "CMDaccum_NEQ_cst_sht;"			  ]
[ "!=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",							  "CMDaccum_NEQ_sht_cst;"			  ]
[ "!=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",									  "CMD_NEQ_sht_cst;"				  ]
[ "!=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",					  "CMDaccum_NEQ_sht;"				  ]
[ "!=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",								  "CMD_NEQ_sht;"				  ]
[ "!=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",							  "CMDaccum_NEQ_cst_oid;"			  ]
[ "!=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",							  "CMDaccum_NEQ_oid_cst;"			  ]
[ "!=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",									  "CMD_NEQ_oid_cst;"				  ]
[ "!=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",					  "CMDaccum_NEQ_oid;"				  ]
[ "!=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",								  "CMD_NEQ_oid;"				  ]
[ "!=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",							  "CMDaccum_NEQ_cst_flt;"			  ]
[ "!=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",							  "CMDaccum_NEQ_flt_cst;"			  ]
[ "!=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",									  "CMD_NEQ_flt_cst;"				  ]
[ "!=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",					  "CMDaccum_NEQ_flt;"				  ]
[ "!=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",								  "CMD_NEQ_flt;"				  ]
[ "!=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",							  "CMDaccum_NEQ_cst_dbl;"			  ]
[ "!=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",							  "CMDaccum_NEQ_dbl_cst;"			  ]
[ "!=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",									  "CMD_NEQ_dbl_cst;"				  ]
[ "!=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",					  "CMDaccum_NEQ_dbl;"				  ]
[ "!=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",								  "CMD_NEQ_dbl;"				  ]
[ "!=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",							  "CMDaccum_NEQ_cst_bit;"			  ]
[ "!=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",							  "CMDaccum_NEQ_bit_cst;"			  ]
[ "!=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",									  "CMD_NEQ_bit_cst;"				  ]
[ "!=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",					  "CMDaccum_NEQ_bit;"				  ]
[ "!=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",								  "CMD_NEQ_bit;"				  ]
[ "%",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",								  "CMDbatMOD_lng_lng_lng;"			  ]
[ "%",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",										  "CMDcstMODbat_lng_lng_lng;"			  ]
[ "%",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",										  "CMDbatMODcst_lng_lng_lng;"			  ]
[ "%",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",							  "CMDbataccumMODcst_lng_lng_lng;"		  ]
[ "%",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",							  "CMDbataccumMODcst2_lng_lng_lng;"		  ]
[ "%",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbataccumMOD_lng_lng_lng;"			  ]
[ "%",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",								  "CMDbatMOD_int_int_int;"			  ]
[ "%",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",										  "CMDcstMODbat_int_int_int;"			  ]
[ "%",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:int] ",										  "CMDbatMODcst_int_int_int;"			  ]
[ "%",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],cst:int):bat[:oid,:int] ",							  "CMDbataccumMODcst_int_int_int;"		  ]
[ "%",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",							  "CMDbataccumMODcst2_int_int_int;"		  ]
[ "%",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",						  "CMDbataccumMOD_int_int_int;"			  ]
[ "%",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",								  "CMDbatMOD_sht_sht_sht;"			  ]
[ "%",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",										  "CMDcstMODbat_sht_sht_sht;"			  ]
[ "%",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",										  "CMDbatMODcst_sht_sht_sht;"			  ]
[ "%",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",							  "CMDbataccumMODcst_sht_sht_sht;"		  ]
[ "%",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",							  "CMDbataccumMODcst2_sht_sht_sht;"		  ]
[ "%",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",						  "CMDbataccumMOD_sht_sht_sht;"			  ]
[ "%",					  "command",	  "batcalc",	  "(b:bat[:oid,:oid],c:bat[:oid,:oid]):bat[:oid,:oid] ",								  "CMDbatMOD_oid_oid_oid;"			  ]
[ "%",					  "command",	  "batcalc",	  "(cst:oid,b:bat[:oid,:oid]):bat[:oid,:oid] ",										  "CMDcstMODbat_oid_oid_oid;"			  ]
[ "%",					  "command",	  "batcalc",	  "(b:bat[:oid,:oid],cst:oid):bat[:oid,:oid] ",										  "CMDbatMODcst_oid_oid_oid;"			  ]
[ "%",					  "command",	  "batcalc",	  "(a:bat[:oid,:oid],b:bat[:oid,:oid],cst:oid):bat[:oid,:oid] ",							  "CMDbataccumMODcst_oid_oid_oid;"		  ]
[ "%",					  "command",	  "batcalc",	  "(a:bat[:oid,:oid],cst:oid,b:bat[:oid,:oid]):bat[:oid,:oid] ",							  "CMDbataccumMODcst2_oid_oid_oid;"		  ]
[ "%",					  "command",	  "batcalc",	  "(a:bat[:oid,:oid],b:bat[:oid,:oid],c:bat[:oid,:oid]):bat[:oid,:oid] ",						  "CMDbataccumMOD_oid_oid_oid;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",								  "CMDbatMUL_int_int_int;"			  ]
[ "*",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",										  "CMDcstMULbat_int_int_int;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:int] ",										  "CMDbatMULcst_int_int_int;"			  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],cst:int):bat[:oid,:int] ",							  "CMDbataccumMULcst_int_int_int;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",							  "CMDbataccumMULcst2_int_int_int;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",						  "CMDbataccumMUL_int_int_int;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",								  "CMDbatMUL_lng_lng_lng;"			  ]
[ "*",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",										  "CMDcstMULbat_lng_lng_lng;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",										  "CMDbatMULcst_lng_lng_lng;"			  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",							  "CMDbataccumMULcst_lng_lng_lng;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",							  "CMDbataccumMULcst2_lng_lng_lng;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbataccumMUL_lng_lng_lng;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",								  "CMDbatMUL_sht_sht_sht;"			  ]
[ "*",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",										  "CMDcstMULbat_sht_sht_sht;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",										  "CMDbatMULcst_sht_sht_sht;"			  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",							  "CMDbataccumMULcst_sht_sht_sht;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",							  "CMDbataccumMULcst2_sht_sht_sht;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",						  "CMDbataccumMUL_sht_sht_sht;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:int] ",								  "CMDbatMUL_int_sht_int;"			  ]
[ "*",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:int] ",										  "CMDcstMULbat_int_sht_int;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:int):bat[:oid,:int] ",										  "CMDbatMULcst_int_sht_int;"			  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],cst:int):bat[:oid,:sht] ",							  "CMDbataccumMULcst_int_sht_int;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],cst:sht,b:bat[:oid,:int]):bat[:oid,:sht] ",							  "CMDbataccumMULcst2_int_sht_int;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:sht] ",						  "CMDbataccumMUL_int_sht_int;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:int] ",								  "CMDbatMUL_int_int_sht;"			  ]
[ "*",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:int] ",										  "CMDcstMULbat_int_int_sht;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:sht):bat[:oid,:int] ",										  "CMDbatMULcst_int_int_sht;"			  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],cst:sht):bat[:oid,:int] ",							  "CMDbataccumMULcst_int_int_sht;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],cst:int,b:bat[:oid,:sht]):bat[:oid,:int] ",							  "CMDbataccumMULcst2_int_int_sht;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:int] ",						  "CMDbataccumMUL_int_int_sht;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:int] ",								  "CMDbatMUL_int_sht_sht;"			  ]
[ "*",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:int] ",										  "CMDcstMULbat_int_sht_sht;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:int] ",										  "CMDbatMULcst_int_sht_sht;"			  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",							  "CMDbataccumMULcst_int_sht_sht;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",							  "CMDbataccumMULcst2_int_sht_sht;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:sht] ",						  "CMDbataccumMUL_int_sht_sht;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:lng] ",								  "CMDbatMUL_lng_int_int;"			  ]
[ "*",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:lng] ",										  "CMDcstMULbat_lng_int_int;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:lng] ",										  "CMDbatMULcst_lng_int_int;"			  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],cst:int):bat[:oid,:int] ",							  "CMDbataccumMULcst_lng_int_int;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",							  "CMDbataccumMULcst2_lng_int_int;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],c:bat[:oid,:lng]):bat[:oid,:int] ",						  "CMDbataccumMUL_lng_int_int;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:lng]):bat[:oid,:lng] ",								  "CMDbatMUL_lng_int_lng;"			  ]
[ "*",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:lng]):bat[:oid,:lng] ",										  "CMDcstMULbat_lng_int_lng;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:lng):bat[:oid,:lng] ",										  "CMDbatMULcst_lng_int_lng;"			  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],cst:lng):bat[:oid,:int] ",							  "CMDbataccumMULcst_lng_int_lng;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],cst:int,b:bat[:oid,:lng]):bat[:oid,:int] ",							  "CMDbataccumMULcst2_lng_int_lng;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:int] ",						  "CMDbataccumMUL_lng_int_lng;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:int]):bat[:oid,:lng] ",								  "CMDbatMUL_lng_lng_int;"			  ]
[ "*",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:int]):bat[:oid,:lng] ",										  "CMDcstMULbat_lng_lng_int;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:int):bat[:oid,:lng] ",										  "CMDbatMULcst_lng_lng_int;"			  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:lng],cst:int):bat[:oid,:lng] ",							  "CMDbataccumMULcst_lng_lng_int;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],cst:lng,b:bat[:oid,:int]):bat[:oid,:lng] ",							  "CMDbataccumMULcst2_lng_lng_int;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:int],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbataccumMUL_lng_lng_int;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:lng] ",								  "CMDbatMUL_lng_sht_sht;"			  ]
[ "*",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:lng] ",										  "CMDcstMULbat_lng_sht_sht;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:lng] ",										  "CMDbatMULcst_lng_sht_sht;"			  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",							  "CMDbataccumMULcst_lng_sht_sht;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",							  "CMDbataccumMULcst2_lng_sht_sht;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],c:bat[:oid,:lng]):bat[:oid,:sht] ",						  "CMDbataccumMUL_lng_sht_sht;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:lng]):bat[:oid,:lng] ",								  "CMDbatMUL_lng_sht_lng;"			  ]
[ "*",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:lng]):bat[:oid,:lng] ",										  "CMDcstMULbat_lng_sht_lng;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:lng):bat[:oid,:lng] ",										  "CMDbatMULcst_lng_sht_lng;"			  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],cst:lng):bat[:oid,:sht] ",							  "CMDbataccumMULcst_lng_sht_lng;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],cst:sht,b:bat[:oid,:lng]):bat[:oid,:sht] ",							  "CMDbataccumMULcst2_lng_sht_lng;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:sht] ",						  "CMDbataccumMUL_lng_sht_lng;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:sht]):bat[:oid,:lng] ",								  "CMDbatMUL_lng_lng_sht;"			  ]
[ "*",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:sht]):bat[:oid,:lng] ",										  "CMDcstMULbat_lng_lng_sht;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:sht):bat[:oid,:lng] ",										  "CMDbatMULcst_lng_lng_sht;"			  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:lng],cst:sht):bat[:oid,:lng] ",							  "CMDbataccumMULcst_lng_lng_sht;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],cst:lng,b:bat[:oid,:sht]):bat[:oid,:lng] ",							  "CMDbataccumMULcst2_lng_lng_sht;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:sht],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbataccumMUL_lng_lng_sht;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:lng] ",								  "CMDbatMUL_lng_sht_int;"			  ]
[ "*",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:lng] ",										  "CMDcstMULbat_lng_sht_int;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:int):bat[:oid,:lng] ",										  "CMDbatMULcst_lng_sht_int;"			  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],cst:int):bat[:oid,:sht] ",							  "CMDbataccumMULcst_lng_sht_int;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],cst:sht,b:bat[:oid,:int]):bat[:oid,:sht] ",							  "CMDbataccumMULcst2_lng_sht_int;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:int],c:bat[:oid,:lng]):bat[:oid,:sht] ",						  "CMDbataccumMUL_lng_sht_int;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:lng] ",								  "CMDbatMUL_lng_int_sht;"			  ]
[ "*",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:lng] ",										  "CMDcstMULbat_lng_int_sht;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:sht):bat[:oid,:lng] ",										  "CMDbatMULcst_lng_int_sht;"			  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],cst:sht):bat[:oid,:int] ",							  "CMDbataccumMULcst_lng_int_sht;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],cst:int,b:bat[:oid,:sht]):bat[:oid,:int] ",							  "CMDbataccumMULcst2_lng_int_sht;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:sht],c:bat[:oid,:lng]):bat[:oid,:int] ",						  "CMDbataccumMUL_lng_int_sht;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],c:bat[:oid,:flt]):bat[:oid,:flt] ",								  "CMDbatMUL_flt_flt_flt;"			  ]
[ "*",					  "command",	  "batcalc",	  "(cst:flt,b:bat[:oid,:flt]):bat[:oid,:flt] ",										  "CMDcstMULbat_flt_flt_flt;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],cst:flt):bat[:oid,:flt] ",										  "CMDbatMULcst_flt_flt_flt;"			  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:flt],b:bat[:oid,:flt],cst:flt):bat[:oid,:flt] ",							  "CMDbataccumMULcst_flt_flt_flt;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:flt],cst:flt,b:bat[:oid,:flt]):bat[:oid,:flt] ",							  "CMDbataccumMULcst2_flt_flt_flt;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:flt],b:bat[:oid,:flt],c:bat[:oid,:flt]):bat[:oid,:flt] ",						  "CMDbataccumMUL_flt_flt_flt;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",								  "CMDbatMUL_dbl_dbl_dbl;"			  ]
[ "*",					  "command",	  "batcalc",	  "(cst:dbl,b:bat[:oid,:dbl]):bat[:oid,:dbl] ",										  "CMDcstMULbat_dbl_dbl_dbl;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],cst:dbl):bat[:oid,:dbl] ",										  "CMDbatMULcst_dbl_dbl_dbl;"			  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:dbl],b:bat[:oid,:dbl],cst:dbl):bat[:oid,:dbl] ",							  "CMDbataccumMULcst_dbl_dbl_dbl;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:dbl],cst:dbl,b:bat[:oid,:dbl]):bat[:oid,:dbl] ",							  "CMDbataccumMULcst2_dbl_dbl_dbl;"		  ]
[ "*",					  "command",	  "batcalc",	  "(a:bat[:oid,:dbl],b:bat[:oid,:dbl],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",						  "CMDbataccumMUL_dbl_dbl_dbl;"			  ]
[ "+",					  "command",	  "batcalc",	  "(l:str,r:bat[:oid,:str]):bat[:oid,:str] ",										  "STRcstConcatbat;"				  ]
[ "+",					  "command",	  "batcalc",	  "(l:bat[:oid,:str],r:str):bat[:oid,:str] ",										  "STRbatConcatcst;"				  ]
[ "+",					  "command",	  "batcalc",	  "(l:bat[:oid,:str],r:bat[:oid,:str]):bat[:oid,:str] ",								  "STRbatConcat;"				  ]
[ "++",					  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",										  "CMDunaryPLUSPLUS;"				  ]
[ "++",					  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:flt] ",										  "CMDunaryPLUSPLUS;"				  ]
[ "++",					  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:sht] ",										  "CMDunaryPLUSPLUS;"				  ]
[ "++",					  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:lng] ",										  "CMDunaryPLUSPLUS;"				  ]
[ "++",					  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:int] ",										  "CMDunaryPLUSPLUS;"				  ]
[ "++",					  "command",	  "batcalc",	  "(b:bat[:any_1,:oid]):bat[:any_1,:oid] ",										  "CMDunaryPLUSPLUS;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:int] ",								  "CMDbatADD_int_sht_int;"			  ]
[ "+",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:int] ",										  "CMDcstADDbat_int_sht_int;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:int):bat[:oid,:int] ",										  "CMDbatADDcst_int_sht_int;"			  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],cst:int):bat[:oid,:sht] ",							  "CMDbataccumADDcst_int_sht_int;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],cst:sht,b:bat[:oid,:int]):bat[:oid,:sht] ",							  "CMDbataccumADDcst2_int_sht_int;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:sht] ",						  "CMDbataccumADD_int_sht_int;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",								  "CMDbatADD_lng_lng_lng;"			  ]
[ "+",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",										  "CMDcstADDbat_lng_lng_lng;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",										  "CMDbatADDcst_lng_lng_lng;"			  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",							  "CMDbataccumADDcst_lng_lng_lng;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",							  "CMDbataccumADDcst2_lng_lng_lng;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbataccumADD_lng_lng_lng;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",								  "CMDbatADD_sht_sht_sht;"			  ]
[ "+",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",										  "CMDcstADDbat_sht_sht_sht;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",										  "CMDbatADDcst_sht_sht_sht;"			  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",							  "CMDbataccumADDcst_sht_sht_sht;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",							  "CMDbataccumADDcst2_sht_sht_sht;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",						  "CMDbataccumADD_sht_sht_sht;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:int] ",								  "CMDbatADD_int_int_sht;"			  ]
[ "+",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:int] ",										  "CMDcstADDbat_int_int_sht;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:sht):bat[:oid,:int] ",										  "CMDbatADDcst_int_int_sht;"			  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],cst:sht):bat[:oid,:int] ",							  "CMDbataccumADDcst_int_int_sht;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],cst:int,b:bat[:oid,:sht]):bat[:oid,:int] ",							  "CMDbataccumADDcst2_int_int_sht;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:int] ",						  "CMDbataccumADD_int_int_sht;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:int] ",								  "CMDbatADD_int_sht_sht;"			  ]
[ "+",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:int] ",										  "CMDcstADDbat_int_sht_sht;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:int] ",										  "CMDbatADDcst_int_sht_sht;"			  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",							  "CMDbataccumADDcst_int_sht_sht;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",							  "CMDbataccumADDcst2_int_sht_sht;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:sht] ",						  "CMDbataccumADD_int_sht_sht;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",								  "CMDbatADD_int_int_int;"			  ]
[ "+",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",										  "CMDcstADDbat_int_int_int;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:int] ",										  "CMDbatADDcst_int_int_int;"			  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],cst:int):bat[:oid,:int] ",							  "CMDbataccumADDcst_int_int_int;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",							  "CMDbataccumADDcst2_int_int_int;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",						  "CMDbataccumADD_int_int_int;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:lng] ",								  "CMDbatADD_lng_int_int;"			  ]
[ "+",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:lng] ",										  "CMDcstADDbat_lng_int_int;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:lng] ",										  "CMDbatADDcst_lng_int_int;"			  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],cst:int):bat[:oid,:int] ",							  "CMDbataccumADDcst_lng_int_int;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",							  "CMDbataccumADDcst2_lng_int_int;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],c:bat[:oid,:lng]):bat[:oid,:int] ",						  "CMDbataccumADD_lng_int_int;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:lng]):bat[:oid,:lng] ",								  "CMDbatADD_lng_int_lng;"			  ]
[ "+",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:lng]):bat[:oid,:lng] ",										  "CMDcstADDbat_lng_int_lng;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:lng):bat[:oid,:lng] ",										  "CMDbatADDcst_lng_int_lng;"			  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],cst:lng):bat[:oid,:int] ",							  "CMDbataccumADDcst_lng_int_lng;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],cst:int,b:bat[:oid,:lng]):bat[:oid,:int] ",							  "CMDbataccumADDcst2_lng_int_lng;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:int] ",						  "CMDbataccumADD_lng_int_lng;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:int]):bat[:oid,:lng] ",								  "CMDbatADD_lng_lng_int;"			  ]
[ "+",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:int]):bat[:oid,:lng] ",										  "CMDcstADDbat_lng_lng_int;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:int):bat[:oid,:lng] ",										  "CMDbatADDcst_lng_lng_int;"			  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:lng],cst:int):bat[:oid,:lng] ",							  "CMDbataccumADDcst_lng_lng_int;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],cst:lng,b:bat[:oid,:int]):bat[:oid,:lng] ",							  "CMDbataccumADDcst2_lng_lng_int;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:int],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbataccumADD_lng_lng_int;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:lng]):bat[:oid,:lng] ",								  "CMDbatADD_lng_sht_lng;"			  ]
[ "+",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:lng]):bat[:oid,:lng] ",										  "CMDcstADDbat_lng_sht_lng;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:lng):bat[:oid,:lng] ",										  "CMDbatADDcst_lng_sht_lng;"			  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],cst:lng):bat[:oid,:sht] ",							  "CMDbataccumADDcst_lng_sht_lng;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],cst:sht,b:bat[:oid,:lng]):bat[:oid,:sht] ",							  "CMDbataccumADDcst2_lng_sht_lng;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:sht] ",						  "CMDbataccumADD_lng_sht_lng;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:sht]):bat[:oid,:lng] ",								  "CMDbatADD_lng_lng_sht;"			  ]
[ "+",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:sht]):bat[:oid,:lng] ",										  "CMDcstADDbat_lng_lng_sht;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:sht):bat[:oid,:lng] ",										  "CMDbatADDcst_lng_lng_sht;"			  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:lng],cst:sht):bat[:oid,:lng] ",							  "CMDbataccumADDcst_lng_lng_sht;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],cst:lng,b:bat[:oid,:sht]):bat[:oid,:lng] ",							  "CMDbataccumADDcst2_lng_lng_sht;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:sht],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbataccumADD_lng_lng_sht;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:lng] ",								  "CMDbatADD_lng_sht_int;"			  ]
[ "+",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:lng] ",										  "CMDcstADDbat_lng_sht_int;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:int):bat[:oid,:lng] ",										  "CMDbatADDcst_lng_sht_int;"			  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],cst:int):bat[:oid,:sht] ",							  "CMDbataccumADDcst_lng_sht_int;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],cst:sht,b:bat[:oid,:int]):bat[:oid,:sht] ",							  "CMDbataccumADDcst2_lng_sht_int;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:int],c:bat[:oid,:lng]):bat[:oid,:sht] ",						  "CMDbataccumADD_lng_sht_int;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:lng] ",								  "CMDbatADD_lng_int_sht;"			  ]
[ "+",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:lng] ",										  "CMDcstADDbat_lng_int_sht;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:sht):bat[:oid,:lng] ",										  "CMDbatADDcst_lng_int_sht;"			  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],cst:sht):bat[:oid,:int] ",							  "CMDbataccumADDcst_lng_int_sht;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],cst:int,b:bat[:oid,:sht]):bat[:oid,:int] ",							  "CMDbataccumADDcst2_lng_int_sht;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:sht],c:bat[:oid,:lng]):bat[:oid,:int] ",						  "CMDbataccumADD_lng_int_sht;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],c:bat[:oid,:flt]):bat[:oid,:flt] ",								  "CMDbatADD_flt_flt_flt;"			  ]
[ "+",					  "command",	  "batcalc",	  "(cst:flt,b:bat[:oid,:flt]):bat[:oid,:flt] ",										  "CMDcstADDbat_flt_flt_flt;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],cst:flt):bat[:oid,:flt] ",										  "CMDbatADDcst_flt_flt_flt;"			  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:flt],b:bat[:oid,:flt],cst:flt):bat[:oid,:flt] ",							  "CMDbataccumADDcst_flt_flt_flt;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:flt],cst:flt,b:bat[:oid,:flt]):bat[:oid,:flt] ",							  "CMDbataccumADDcst2_flt_flt_flt;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:flt],b:bat[:oid,:flt],c:bat[:oid,:flt]):bat[:oid,:flt] ",						  "CMDbataccumADD_flt_flt_flt;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",								  "CMDbatADD_dbl_dbl_dbl;"			  ]
[ "+",					  "command",	  "batcalc",	  "(cst:dbl,b:bat[:oid,:dbl]):bat[:oid,:dbl] ",										  "CMDcstADDbat_dbl_dbl_dbl;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],cst:dbl):bat[:oid,:dbl] ",										  "CMDbatADDcst_dbl_dbl_dbl;"			  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:dbl],b:bat[:oid,:dbl],cst:dbl):bat[:oid,:dbl] ",							  "CMDbataccumADDcst_dbl_dbl_dbl;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:dbl],cst:dbl,b:bat[:oid,:dbl]):bat[:oid,:dbl] ",							  "CMDbataccumADDcst2_dbl_dbl_dbl;"		  ]
[ "+",					  "command",	  "batcalc",	  "(a:bat[:oid,:dbl],b:bat[:oid,:dbl],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",						  "CMDbataccumADD_dbl_dbl_dbl;"			  ]
[ "--",					  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",										  "CMDunaryMINMIN;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",										  "CMDunaryMIN;"				  ]
[ "--",					  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:flt] ",										  "CMDunaryMINMIN;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:flt] ",										  "CMDunaryMIN;"				  ]
[ "--",					  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:sht] ",										  "CMDunaryMINMIN;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:sht] ",										  "CMDunaryMIN;"				  ]
[ "--",					  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:lng] ",										  "CMDunaryMINMIN;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:lng] ",										  "CMDunaryMIN;"				  ]
[ "--",					  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:int] ",										  "CMDunaryMINMIN;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:int] ",										  "CMDunaryMIN;"				  ]
[ "--",					  "command",	  "batcalc",	  "(b:bat[:any_1,:oid]):bat[:any_1,:oid] ",										  "CMDunaryMINMIN;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:any_1,:oid]):bat[:any_1,:oid] ",										  "CMDunaryMIN;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",								  "CMDbatSUB_int_int_int;"			  ]
[ "-",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",										  "CMDcstSUBbat_int_int_int;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:int] ",										  "CMDbatSUBcst_int_int_int;"			  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],cst:int):bat[:oid,:int] ",							  "CMDbataccumSUBcst_int_int_int;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",							  "CMDbataccumSUBcst2_int_int_int;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",						  "CMDbataccumSUB_int_int_int;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:int]):bat[:oid,:lng] ",								  "CMDbatSUB_lng_lng_int;"			  ]
[ "-",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:int]):bat[:oid,:lng] ",										  "CMDcstSUBbat_lng_lng_int;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:int):bat[:oid,:lng] ",										  "CMDbatSUBcst_lng_lng_int;"			  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:lng],cst:int):bat[:oid,:lng] ",							  "CMDbataccumSUBcst_lng_lng_int;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],cst:lng,b:bat[:oid,:int]):bat[:oid,:lng] ",							  "CMDbataccumSUBcst2_lng_lng_int;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:int],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbataccumSUB_lng_lng_int;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",								  "CMDbatSUB_sht_sht_sht;"			  ]
[ "-",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",										  "CMDcstSUBbat_sht_sht_sht;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",										  "CMDbatSUBcst_sht_sht_sht;"			  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",							  "CMDbataccumSUBcst_sht_sht_sht;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",							  "CMDbataccumSUBcst2_sht_sht_sht;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",						  "CMDbataccumSUB_sht_sht_sht;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:int] ",								  "CMDbatSUB_int_sht_int;"			  ]
[ "-",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:int] ",										  "CMDcstSUBbat_int_sht_int;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:int):bat[:oid,:int] ",										  "CMDbatSUBcst_int_sht_int;"			  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],cst:int):bat[:oid,:sht] ",							  "CMDbataccumSUBcst_int_sht_int;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],cst:sht,b:bat[:oid,:int]):bat[:oid,:sht] ",							  "CMDbataccumSUBcst2_int_sht_int;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:sht] ",						  "CMDbataccumSUB_int_sht_int;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:int] ",								  "CMDbatSUB_int_int_sht;"			  ]
[ "-",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:int] ",										  "CMDcstSUBbat_int_int_sht;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:sht):bat[:oid,:int] ",										  "CMDbatSUBcst_int_int_sht;"			  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],cst:sht):bat[:oid,:int] ",							  "CMDbataccumSUBcst_int_int_sht;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],cst:int,b:bat[:oid,:sht]):bat[:oid,:int] ",							  "CMDbataccumSUBcst2_int_int_sht;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:int] ",						  "CMDbataccumSUB_int_int_sht;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:int] ",								  "CMDbatSUB_int_sht_sht;"			  ]
[ "-",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:int] ",										  "CMDcstSUBbat_int_sht_sht;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:int] ",										  "CMDbatSUBcst_int_sht_sht;"			  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",							  "CMDbataccumSUBcst_int_sht_sht;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",							  "CMDbataccumSUBcst2_int_sht_sht;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:sht] ",						  "CMDbataccumSUB_int_sht_sht;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:lng] ",								  "CMDbatSUB_lng_int_int;"			  ]
[ "-",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:lng] ",										  "CMDcstSUBbat_lng_int_int;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:lng] ",										  "CMDbatSUBcst_lng_int_int;"			  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],cst:int):bat[:oid,:int] ",							  "CMDbataccumSUBcst_lng_int_int;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",							  "CMDbataccumSUBcst2_lng_int_int;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],c:bat[:oid,:lng]):bat[:oid,:int] ",						  "CMDbataccumSUB_lng_int_int;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:lng]):bat[:oid,:lng] ",								  "CMDbatSUB_lng_int_lng;"			  ]
[ "-",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:lng]):bat[:oid,:lng] ",										  "CMDcstSUBbat_lng_int_lng;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:lng):bat[:oid,:lng] ",										  "CMDbatSUBcst_lng_int_lng;"			  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],cst:lng):bat[:oid,:int] ",							  "CMDbataccumSUBcst_lng_int_lng;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],cst:int,b:bat[:oid,:lng]):bat[:oid,:int] ",							  "CMDbataccumSUBcst2_lng_int_lng;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:int] ",						  "CMDbataccumSUB_lng_int_lng;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",								  "CMDbatSUB_lng_lng_lng;"			  ]
[ "-",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",										  "CMDcstSUBbat_lng_lng_lng;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",										  "CMDbatSUBcst_lng_lng_lng;"			  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",							  "CMDbataccumSUBcst_lng_lng_lng;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",							  "CMDbataccumSUBcst2_lng_lng_lng;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbataccumSUB_lng_lng_lng;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:lng]):bat[:oid,:lng] ",								  "CMDbatSUB_lng_sht_lng;"			  ]
[ "-",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:lng]):bat[:oid,:lng] ",										  "CMDcstSUBbat_lng_sht_lng;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:lng):bat[:oid,:lng] ",										  "CMDbatSUBcst_lng_sht_lng;"			  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],cst:lng):bat[:oid,:sht] ",							  "CMDbataccumSUBcst_lng_sht_lng;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],cst:sht,b:bat[:oid,:lng]):bat[:oid,:sht] ",							  "CMDbataccumSUBcst2_lng_sht_lng;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:sht] ",						  "CMDbataccumSUB_lng_sht_lng;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:sht]):bat[:oid,:lng] ",								  "CMDbatSUB_lng_lng_sht;"			  ]
[ "-",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:sht]):bat[:oid,:lng] ",										  "CMDcstSUBbat_lng_lng_sht;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:sht):bat[:oid,:lng] ",										  "CMDbatSUBcst_lng_lng_sht;"			  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:lng],cst:sht):bat[:oid,:lng] ",							  "CMDbataccumSUBcst_lng_lng_sht;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],cst:lng,b:bat[:oid,:sht]):bat[:oid,:lng] ",							  "CMDbataccumSUBcst2_lng_lng_sht;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:sht],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbataccumSUB_lng_lng_sht;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:lng] ",								  "CMDbatSUB_lng_sht_int;"			  ]
[ "-",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:lng] ",										  "CMDcstSUBbat_lng_sht_int;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:int):bat[:oid,:lng] ",										  "CMDbatSUBcst_lng_sht_int;"			  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],cst:int):bat[:oid,:sht] ",							  "CMDbataccumSUBcst_lng_sht_int;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],cst:sht,b:bat[:oid,:int]):bat[:oid,:sht] ",							  "CMDbataccumSUBcst2_lng_sht_int;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:int],c:bat[:oid,:lng]):bat[:oid,:sht] ",						  "CMDbataccumSUB_lng_sht_int;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:lng] ",								  "CMDbatSUB_lng_int_sht;"			  ]
[ "-",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:lng] ",										  "CMDcstSUBbat_lng_int_sht;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:sht):bat[:oid,:lng] ",										  "CMDbatSUBcst_lng_int_sht;"			  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],cst:sht):bat[:oid,:int] ",							  "CMDbataccumSUBcst_lng_int_sht;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],cst:int,b:bat[:oid,:sht]):bat[:oid,:int] ",							  "CMDbataccumSUBcst2_lng_int_sht;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:sht],c:bat[:oid,:lng]):bat[:oid,:int] ",						  "CMDbataccumSUB_lng_int_sht;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],c:bat[:oid,:flt]):bat[:oid,:flt] ",								  "CMDbatSUB_flt_flt_flt;"			  ]
[ "-",					  "command",	  "batcalc",	  "(cst:flt,b:bat[:oid,:flt]):bat[:oid,:flt] ",										  "CMDcstSUBbat_flt_flt_flt;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],cst:flt):bat[:oid,:flt] ",										  "CMDbatSUBcst_flt_flt_flt;"			  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:flt],b:bat[:oid,:flt],cst:flt):bat[:oid,:flt] ",							  "CMDbataccumSUBcst_flt_flt_flt;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:flt],cst:flt,b:bat[:oid,:flt]):bat[:oid,:flt] ",							  "CMDbataccumSUBcst2_flt_flt_flt;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:flt],b:bat[:oid,:flt],c:bat[:oid,:flt]):bat[:oid,:flt] ",						  "CMDbataccumSUB_flt_flt_flt;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",								  "CMDbatSUB_dbl_dbl_dbl;"			  ]
[ "-",					  "command",	  "batcalc",	  "(cst:dbl,b:bat[:oid,:dbl]):bat[:oid,:dbl] ",										  "CMDcstSUBbat_dbl_dbl_dbl;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],cst:dbl):bat[:oid,:dbl] ",										  "CMDbatSUBcst_dbl_dbl_dbl;"			  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:dbl],b:bat[:oid,:dbl],cst:dbl):bat[:oid,:dbl] ",							  "CMDbataccumSUBcst_dbl_dbl_dbl;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:dbl],cst:dbl,b:bat[:oid,:dbl]):bat[:oid,:dbl] ",							  "CMDbataccumSUBcst2_dbl_dbl_dbl;"		  ]
[ "-",					  "command",	  "batcalc",	  "(a:bat[:oid,:dbl],b:bat[:oid,:dbl],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",						  "CMDbataccumSUB_dbl_dbl_dbl;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",								  "CMDbatDIV_int_int_int;"			  ]
[ "/",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",										  "CMDcstDIVbat_int_int_int;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:int] ",										  "CMDbatDIVcst_int_int_int;"			  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],cst:int):bat[:oid,:int] ",							  "CMDbataccumDIVcst_int_int_int;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",							  "CMDbataccumDIVcst2_int_int_int;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",						  "CMDbataccumDIV_int_int_int;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",								  "CMDbatDIV_lng_lng_lng;"			  ]
[ "/",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",										  "CMDcstDIVbat_lng_lng_lng;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",										  "CMDbatDIVcst_lng_lng_lng;"			  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",							  "CMDbataccumDIVcst_lng_lng_lng;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",							  "CMDbataccumDIVcst2_lng_lng_lng;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbataccumDIV_lng_lng_lng;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",								  "CMDbatDIV_sht_sht_sht;"			  ]
[ "/",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",										  "CMDcstDIVbat_sht_sht_sht;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",										  "CMDbatDIVcst_sht_sht_sht;"			  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",							  "CMDbataccumDIVcst_sht_sht_sht;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",							  "CMDbataccumDIVcst2_sht_sht_sht;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",						  "CMDbataccumDIV_sht_sht_sht;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:int] ",								  "CMDbatDIV_int_sht_int;"			  ]
[ "/",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:int] ",										  "CMDcstDIVbat_int_sht_int;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:int):bat[:oid,:int] ",										  "CMDbatDIVcst_int_sht_int;"			  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],cst:int):bat[:oid,:sht] ",							  "CMDbataccumDIVcst_int_sht_int;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],cst:sht,b:bat[:oid,:int]):bat[:oid,:sht] ",							  "CMDbataccumDIVcst2_int_sht_int;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:sht] ",						  "CMDbataccumDIV_int_sht_int;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:int] ",								  "CMDbatDIV_int_int_sht;"			  ]
[ "/",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:int] ",										  "CMDcstDIVbat_int_int_sht;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:sht):bat[:oid,:int] ",										  "CMDbatDIVcst_int_int_sht;"			  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],cst:sht):bat[:oid,:int] ",							  "CMDbataccumDIVcst_int_int_sht;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],cst:int,b:bat[:oid,:sht]):bat[:oid,:int] ",							  "CMDbataccumDIVcst2_int_int_sht;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:int] ",						  "CMDbataccumDIV_int_int_sht;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:int] ",								  "CMDbatDIV_int_sht_sht;"			  ]
[ "/",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:int] ",										  "CMDcstDIVbat_int_sht_sht;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:int] ",										  "CMDbatDIVcst_int_sht_sht;"			  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",							  "CMDbataccumDIVcst_int_sht_sht;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",							  "CMDbataccumDIVcst2_int_sht_sht;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:sht] ",						  "CMDbataccumDIV_int_sht_sht;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:lng] ",								  "CMDbatDIV_lng_int_int;"			  ]
[ "/",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:lng] ",										  "CMDcstDIVbat_lng_int_int;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:lng] ",										  "CMDbatDIVcst_lng_int_int;"			  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],cst:int):bat[:oid,:int] ",							  "CMDbataccumDIVcst_lng_int_int;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",							  "CMDbataccumDIVcst2_lng_int_int;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],c:bat[:oid,:lng]):bat[:oid,:int] ",						  "CMDbataccumDIV_lng_int_int;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:lng]):bat[:oid,:lng] ",								  "CMDbatDIV_lng_int_lng;"			  ]
[ "/",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:lng]):bat[:oid,:lng] ",										  "CMDcstDIVbat_lng_int_lng;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:lng):bat[:oid,:lng] ",										  "CMDbatDIVcst_lng_int_lng;"			  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],cst:lng):bat[:oid,:int] ",							  "CMDbataccumDIVcst_lng_int_lng;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],cst:int,b:bat[:oid,:lng]):bat[:oid,:int] ",							  "CMDbataccumDIVcst2_lng_int_lng;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:int] ",						  "CMDbataccumDIV_lng_int_lng;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:int]):bat[:oid,:lng] ",								  "CMDbatDIV_lng_lng_int;"			  ]
[ "/",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:int]):bat[:oid,:lng] ",										  "CMDcstDIVbat_lng_lng_int;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:int):bat[:oid,:lng] ",										  "CMDbatDIVcst_lng_lng_int;"			  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:lng],cst:int):bat[:oid,:lng] ",							  "CMDbataccumDIVcst_lng_lng_int;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],cst:lng,b:bat[:oid,:int]):bat[:oid,:lng] ",							  "CMDbataccumDIVcst2_lng_lng_int;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:int],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbataccumDIV_lng_lng_int;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:lng] ",								  "CMDbatDIV_lng_sht_sht;"			  ]
[ "/",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:lng] ",										  "CMDcstDIVbat_lng_sht_sht;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:lng] ",										  "CMDbatDIVcst_lng_sht_sht;"			  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",							  "CMDbataccumDIVcst_lng_sht_sht;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",							  "CMDbataccumDIVcst2_lng_sht_sht;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],c:bat[:oid,:lng]):bat[:oid,:sht] ",						  "CMDbataccumDIV_lng_sht_sht;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:lng]):bat[:oid,:lng] ",								  "CMDbatDIV_lng_sht_lng;"			  ]
[ "/",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:lng]):bat[:oid,:lng] ",										  "CMDcstDIVbat_lng_sht_lng;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:lng):bat[:oid,:lng] ",										  "CMDbatDIVcst_lng_sht_lng;"			  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],cst:lng):bat[:oid,:sht] ",							  "CMDbataccumDIVcst_lng_sht_lng;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],cst:sht,b:bat[:oid,:lng]):bat[:oid,:sht] ",							  "CMDbataccumDIVcst2_lng_sht_lng;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:sht] ",						  "CMDbataccumDIV_lng_sht_lng;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:sht]):bat[:oid,:lng] ",								  "CMDbatDIV_lng_lng_sht;"			  ]
[ "/",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:sht]):bat[:oid,:lng] ",										  "CMDcstDIVbat_lng_lng_sht;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:sht):bat[:oid,:lng] ",										  "CMDbatDIVcst_lng_lng_sht;"			  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:lng],cst:sht):bat[:oid,:lng] ",							  "CMDbataccumDIVcst_lng_lng_sht;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],cst:lng,b:bat[:oid,:sht]):bat[:oid,:lng] ",							  "CMDbataccumDIVcst2_lng_lng_sht;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:sht],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbataccumDIV_lng_lng_sht;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:lng] ",								  "CMDbatDIV_lng_sht_int;"			  ]
[ "/",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:lng] ",										  "CMDcstDIVbat_lng_sht_int;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:int):bat[:oid,:lng] ",										  "CMDbatDIVcst_lng_sht_int;"			  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],cst:int):bat[:oid,:sht] ",							  "CMDbataccumDIVcst_lng_sht_int;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],cst:sht,b:bat[:oid,:int]):bat[:oid,:sht] ",							  "CMDbataccumDIVcst2_lng_sht_int;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:int],c:bat[:oid,:lng]):bat[:oid,:sht] ",						  "CMDbataccumDIV_lng_sht_int;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:lng] ",								  "CMDbatDIV_lng_int_sht;"			  ]
[ "/",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:lng] ",										  "CMDcstDIVbat_lng_int_sht;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:sht):bat[:oid,:lng] ",										  "CMDbatDIVcst_lng_int_sht;"			  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],cst:sht):bat[:oid,:int] ",							  "CMDbataccumDIVcst_lng_int_sht;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],cst:int,b:bat[:oid,:sht]):bat[:oid,:int] ",							  "CMDbataccumDIVcst2_lng_int_sht;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:sht],c:bat[:oid,:lng]):bat[:oid,:int] ",						  "CMDbataccumDIV_lng_int_sht;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],c:bat[:oid,:flt]):bat[:oid,:flt] ",								  "CMDbatDIV_flt_flt_flt;"			  ]
[ "/",					  "command",	  "batcalc",	  "(cst:flt,b:bat[:oid,:flt]):bat[:oid,:flt] ",										  "CMDcstDIVbat_flt_flt_flt;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],cst:flt):bat[:oid,:flt] ",										  "CMDbatDIVcst_flt_flt_flt;"			  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:flt],b:bat[:oid,:flt],cst:flt):bat[:oid,:flt] ",							  "CMDbataccumDIVcst_flt_flt_flt;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:flt],cst:flt,b:bat[:oid,:flt]):bat[:oid,:flt] ",							  "CMDbataccumDIVcst2_flt_flt_flt;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:flt],b:bat[:oid,:flt],c:bat[:oid,:flt]):bat[:oid,:flt] ",						  "CMDbataccumDIV_flt_flt_flt;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",								  "CMDbatDIV_dbl_dbl_dbl;"			  ]
[ "/",					  "command",	  "batcalc",	  "(cst:dbl,b:bat[:oid,:dbl]):bat[:oid,:dbl] ",										  "CMDcstDIVbat_dbl_dbl_dbl;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],cst:dbl):bat[:oid,:dbl] ",										  "CMDbatDIVcst_dbl_dbl_dbl;"			  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:dbl],b:bat[:oid,:dbl],cst:dbl):bat[:oid,:dbl] ",							  "CMDbataccumDIVcst_dbl_dbl_dbl;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:dbl],cst:dbl,b:bat[:oid,:dbl]):bat[:oid,:dbl] ",							  "CMDbataccumDIVcst2_dbl_dbl_dbl;"		  ]
[ "/",					  "command",	  "batcalc",	  "(a:bat[:oid,:dbl],b:bat[:oid,:dbl],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",						  "CMDbataccumDIV_dbl_dbl_dbl;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",								  "MTIMEtimestampbat_LEcst;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",								  "MTIMEtimestampbat_LEcst;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",							  "MTIMEtimestampbat_LE;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(l:bat[:oid,:timestamp],r:bat[:oid,:timestamp]):bat[:oid,:bit] ",							  "MTIMEtimestampbat_LE;"			  ]
[ "<",					  "command",	  "batcalc",	  "(l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",								  "MTIMEtimestampbat_LTcst;"			  ]
[ "<",					  "command",	  "batcalc",	  "(l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",								  "MTIMEtimestampbat_LTcst;"			  ]
[ "<",					  "command",	  "batcalc",	  "(l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",							  "MTIMEtimestampbat_LT;"			  ]
[ "<",					  "command",	  "batcalc",	  "(l:bat[:oid,:timestamp],r:bat[:oid,:timestamp]):bat[:oid,:bit] ",							  "MTIMEtimestampbat_LT;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",									  "MTIMEdaytimebat_LEcst;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",									  "MTIMEdaytimebat_LEcst;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",							  "MTIMEdaytimebat_LE;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(l:bat[:oid,:daytime],r:bat[:oid,:daytime]):bat[:oid,:bit] ",							  "MTIMEdaytimebat_LE;"				  ]
[ "<",					  "command",	  "batcalc",	  "(l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",									  "MTIMEdaytimebat_LTcst;"			  ]
[ "<",					  "command",	  "batcalc",	  "(l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",									  "MTIMEdaytimebat_LTcst;"			  ]
[ "<",					  "command",	  "batcalc",	  "(l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",							  "MTIMEdaytimebat_LT;"				  ]
[ "<",					  "command",	  "batcalc",	  "(l:bat[:oid,:daytime],r:bat[:oid,:daytime]):bat[:oid,:bit] ",							  "MTIMEdaytimebat_LT;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(l:bat[:void,:date],r:date):bat[:void,:bit] ",									  "MTIMEdatebat_LEcst;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(l:bat[:oid,:date],r:date):bat[:oid,:bit] ",										  "MTIMEdatebat_LEcst;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",								  "MTIMEdatebat_LE;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(l:bat[:oid,:date],r:bat[:oid,:date]):bat[:oid,:bit] ",								  "MTIMEdatebat_LE;"				  ]
[ "<",					  "command",	  "batcalc",	  "(l:bat[:void,:date],r:date):bat[:void,:bit] ",									  "MTIMEdatebat_LTcst;"				  ]
[ "<",					  "command",	  "batcalc",	  "(l:bat[:oid,:date],r:date):bat[:oid,:bit] ",										  "MTIMEdatebat_LTcst;"				  ]
[ "<",					  "command",	  "batcalc",	  "(l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",								  "MTIMEdatebat_LT;"				  ]
[ "<",					  "command",	  "batcalc",	  "(l:bat[:oid,:date],r:bat[:oid,:date]):bat[:oid,:bit] ",								  "MTIMEdatebat_LT;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",							  "CMDaccum_LE_cst_lng;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",							  "CMDaccum_LE_lng_cst;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",									  "CMD_LE_lng_cst;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",					  "CMDaccum_LE_lng;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",								  "CMD_LE_lng;"					  ]
[ "<",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",							  "CMDaccum_LT_cst_lng;"			  ]
[ "<",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",							  "CMDaccum_LT_lng_cst;"			  ]
[ "<",					  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",									  "CMD_LT_lng_cst;"				  ]
[ "<",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",					  "CMDaccum_LT_lng;"				  ]
[ "<",					  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",								  "CMD_LT_lng;"					  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",							  "CMDaccum_LE_cst_int;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",							  "CMDaccum_LE_int_cst;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",									  "CMD_LE_int_cst;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",					  "CMDaccum_LE_int;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",								  "CMD_LE_int;"					  ]
[ "<",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",							  "CMDaccum_LT_cst_int;"			  ]
[ "<",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",							  "CMDaccum_LT_int_cst;"			  ]
[ "<",					  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",									  "CMD_LT_int_cst;"				  ]
[ "<",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",					  "CMDaccum_LT_int;"				  ]
[ "<",					  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",								  "CMD_LT_int;"					  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",							  "CMDaccum_LE_cst_sht;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",							  "CMDaccum_LE_sht_cst;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",									  "CMD_LE_sht_cst;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",					  "CMDaccum_LE_sht;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",								  "CMD_LE_sht;"					  ]
[ "<",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",							  "CMDaccum_LT_cst_sht;"			  ]
[ "<",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",							  "CMDaccum_LT_sht_cst;"			  ]
[ "<",					  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",									  "CMD_LT_sht_cst;"				  ]
[ "<",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",					  "CMDaccum_LT_sht;"				  ]
[ "<",					  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",								  "CMD_LT_sht;"					  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",							  "CMDaccum_LE_cst_oid;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",							  "CMDaccum_LE_oid_cst;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",									  "CMD_LE_oid_cst;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",					  "CMDaccum_LE_oid;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",								  "CMD_LE_oid;"					  ]
[ "<",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",							  "CMDaccum_LT_cst_oid;"			  ]
[ "<",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",							  "CMDaccum_LT_oid_cst;"			  ]
[ "<",					  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",									  "CMD_LT_oid_cst;"				  ]
[ "<",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",					  "CMDaccum_LT_oid;"				  ]
[ "<",					  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",								  "CMD_LT_oid;"					  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",							  "CMDaccum_LE_cst_flt;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",							  "CMDaccum_LE_flt_cst;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",									  "CMD_LE_flt_cst;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",					  "CMDaccum_LE_flt;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",								  "CMD_LE_flt;"					  ]
[ "<",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",							  "CMDaccum_LT_cst_flt;"			  ]
[ "<",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",							  "CMDaccum_LT_flt_cst;"			  ]
[ "<",					  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",									  "CMD_LT_flt_cst;"				  ]
[ "<",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",					  "CMDaccum_LT_flt;"				  ]
[ "<",					  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",								  "CMD_LT_flt;"					  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",							  "CMDaccum_LE_cst_dbl;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",							  "CMDaccum_LE_dbl_cst;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",									  "CMD_LE_dbl_cst;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",					  "CMDaccum_LE_dbl;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",								  "CMD_LE_dbl;"					  ]
[ "<",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",							  "CMDaccum_LT_cst_dbl;"			  ]
[ "<",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",							  "CMDaccum_LT_dbl_cst;"			  ]
[ "<",					  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",									  "CMD_LT_dbl_cst;"				  ]
[ "<",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",					  "CMDaccum_LT_dbl;"				  ]
[ "<",					  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",								  "CMD_LT_dbl;"					  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",							  "CMDaccum_LE_cst_bit;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",							  "CMDaccum_LE_bit_cst;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",									  "CMD_LE_bit_cst;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",					  "CMDaccum_LE_bit;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",								  "CMD_LE_bit;"					  ]
[ "<",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",							  "CMDaccum_LT_cst_bit;"			  ]
[ "<",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",							  "CMDaccum_LT_bit_cst;"			  ]
[ "<",					  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",									  "CMD_LT_bit_cst;"				  ]
[ "<",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",					  "CMDaccum_LT_bit;"				  ]
[ "<",					  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",								  "CMD_LT_bit;"					  ]
[ "==",					  "command",	  "batcalc",	  "(l:bat[:oid,:str],r:str):bat[:oid,:bit] ",										  "STRbatEqualCst;"				  ]
[ "==",					  "command",	  "batcalc",	  "(l:bat[:oid,:str],r:bat[:oid,:str]):bat[:oid,:bit] ",								  "STRbatEqual;"				  ]
[ "==",					  "command",	  "batcalc",	  "(l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",								  "MTIMEtimestampbat_EQcst;"			  ]
[ "==",					  "command",	  "batcalc",	  "(l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",								  "MTIMEtimestampbat_EQcst;"			  ]
[ "==",					  "command",	  "batcalc",	  "(l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",							  "MTIMEtimestampbat_EQ;"			  ]
[ "==",					  "command",	  "batcalc",	  "(l:bat[:oid,:timestamp],r:bat[:oid,:timestamp]):bat[:oid,:bit] ",							  "MTIMEtimestampbat_EQ;"			  ]
[ "==",					  "command",	  "batcalc",	  "(l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",									  "MTIMEdaytimebat_EQcst;"			  ]
[ "==",					  "command",	  "batcalc",	  "(l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",									  "MTIMEdaytimebat_EQcst;"			  ]
[ "==",					  "command",	  "batcalc",	  "(l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",							  "MTIMEdaytimebat_EQ;"				  ]
[ "==",					  "command",	  "batcalc",	  "(l:bat[:oid,:daytime],r:bat[:oid,:daytime]):bat[:oid,:bit] ",							  "MTIMEdaytimebat_EQ;"				  ]
[ "==",					  "command",	  "batcalc",	  "(l:bat[:void,:date],r:date):bat[:void,:bit] ",									  "MTIMEdatebat_EQcst;"				  ]
[ "==",					  "command",	  "batcalc",	  "(l:bat[:oid,:date],r:date):bat[:oid,:bit] ",										  "MTIMEdatebat_EQcst;"				  ]
[ "==",					  "command",	  "batcalc",	  "(l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",								  "MTIMEdatebat_EQ;"				  ]
[ "==",					  "command",	  "batcalc",	  "(l:bat[:oid,:date],r:bat[:oid,:date]):bat[:oid,:bit] ",								  "MTIMEdatebat_EQ;"				  ]
[ "==",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",							  "CMDaccum_EQ_cst_lng;"			  ]
[ "==",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",							  "CMDaccum_EQ_lng_cst;"			  ]
[ "==",					  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",									  "CMD_EQ_lng_cst;"				  ]
[ "==",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",					  "CMDaccum_EQ_lng;"				  ]
[ "==",					  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",								  "CMD_EQ_lng;"					  ]
[ "==",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",							  "CMDaccum_EQ_cst_int;"			  ]
[ "==",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",							  "CMDaccum_EQ_int_cst;"			  ]
[ "==",					  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",									  "CMD_EQ_int_cst;"				  ]
[ "==",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",					  "CMDaccum_EQ_int;"				  ]
[ "==",					  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",								  "CMD_EQ_int;"					  ]
[ "==",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",							  "CMDaccum_EQ_cst_sht;"			  ]
[ "==",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",							  "CMDaccum_EQ_sht_cst;"			  ]
[ "==",					  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",									  "CMD_EQ_sht_cst;"				  ]
[ "==",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",					  "CMDaccum_EQ_sht;"				  ]
[ "==",					  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",								  "CMD_EQ_sht;"					  ]
[ "==",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",							  "CMDaccum_EQ_cst_oid;"			  ]
[ "==",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",							  "CMDaccum_EQ_oid_cst;"			  ]
[ "==",					  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",									  "CMD_EQ_oid_cst;"				  ]
[ "==",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",					  "CMDaccum_EQ_oid;"				  ]
[ "==",					  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",								  "CMD_EQ_oid;"					  ]
[ "==",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",							  "CMDaccum_EQ_cst_flt;"			  ]
[ "==",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",							  "CMDaccum_EQ_flt_cst;"			  ]
[ "==",					  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",									  "CMD_EQ_flt_cst;"				  ]
[ "==",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",					  "CMDaccum_EQ_flt;"				  ]
[ "==",					  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",								  "CMD_EQ_flt;"					  ]
[ "==",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",							  "CMDaccum_EQ_cst_dbl;"			  ]
[ "==",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",							  "CMDaccum_EQ_dbl_cst;"			  ]
[ "==",					  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",									  "CMD_EQ_dbl_cst;"				  ]
[ "==",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",					  "CMDaccum_EQ_dbl;"				  ]
[ "==",					  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",								  "CMD_EQ_dbl;"					  ]
[ "==",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",							  "CMDaccum_EQ_cst_bit;"			  ]
[ "==",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",							  "CMDaccum_EQ_bit_cst;"			  ]
[ "==",					  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",									  "CMD_EQ_bit_cst;"				  ]
[ "==",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",					  "CMDaccum_EQ_bit;"				  ]
[ "==",					  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",								  "CMD_EQ_bit;"					  ]
[ ">=",					  "command",	  "batcalc",	  "(l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",								  "MTIMEtimestampbat_GEcst;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",								  "MTIMEtimestampbat_GEcst;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",							  "MTIMEtimestampbat_GE;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(l:bat[:oid,:timestamp],r:bat[:oid,:timestamp]):bat[:oid,:bit] ",							  "MTIMEtimestampbat_GE;"			  ]
[ ">",					  "command",	  "batcalc",	  "(l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",								  "MTIMEtimestampbat_GTcst;"			  ]
[ ">",					  "command",	  "batcalc",	  "(l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",								  "MTIMEtimestampbat_GTcst;"			  ]
[ ">",					  "command",	  "batcalc",	  "(l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",							  "MTIMEtimestampbat_GT;"			  ]
[ ">",					  "command",	  "batcalc",	  "(l:bat[:oid,:timestamp],r:bat[:oid,:timestamp]):bat[:oid,:bit] ",							  "MTIMEtimestampbat_GT;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",									  "MTIMEdaytimebat_GEcst;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",									  "MTIMEdaytimebat_GEcst;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",							  "MTIMEdaytimebat_GE;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(l:bat[:oid,:daytime],r:bat[:oid,:daytime]):bat[:oid,:bit] ",							  "MTIMEdaytimebat_GE;"				  ]
[ ">",					  "command",	  "batcalc",	  "(l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",									  "MTIMEdaytimebat_GTcst;"			  ]
[ ">",					  "command",	  "batcalc",	  "(l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",									  "MTIMEdaytimebat_GTcst;"			  ]
[ ">",					  "command",	  "batcalc",	  "(l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",							  "MTIMEdaytimebat_GT;"				  ]
[ ">",					  "command",	  "batcalc",	  "(l:bat[:oid,:daytime],r:bat[:oid,:daytime]):bat[:oid,:bit] ",							  "MTIMEdaytimebat_GT;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(l:bat[:void,:date],r:date):bat[:void,:bit] ",									  "MTIMEdatebat_GEcst;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(l:bat[:oid,:date],r:date):bat[:oid,:bit] ",										  "MTIMEdatebat_GEcst;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",								  "MTIMEdatebat_GE;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(l:bat[:oid,:date],r:bat[:oid,:date]):bat[:oid,:bit] ",								  "MTIMEdatebat_GE;"				  ]
[ ">",					  "command",	  "batcalc",	  "(l:bat[:void,:date],r:date):bat[:void,:bit] ",									  "MTIMEdatebat_GTcst;"				  ]
[ ">",					  "command",	  "batcalc",	  "(l:bat[:oid,:date],r:date):bat[:oid,:bit] ",										  "MTIMEdatebat_GTcst;"				  ]
[ ">",					  "command",	  "batcalc",	  "(l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",								  "MTIMEdatebat_GT;"				  ]
[ ">",					  "command",	  "batcalc",	  "(l:bat[:oid,:date],r:bat[:oid,:date]):bat[:oid,:bit] ",								  "MTIMEdatebat_GT;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",							  "CMDaccum_GE_cst_lng;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",							  "CMDaccum_GE_lng_cst;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",									  "CMD_GE_lng_cst;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",					  "CMDaccum_GE_lng;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",								  "CMD_GE_lng;"					  ]
[ ">",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",							  "CMDaccum_GT_cst_lng;"			  ]
[ ">",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",							  "CMDaccum_GT_lng_cst;"			  ]
[ ">",					  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",									  "CMD_GT_lng_cst;"				  ]
[ ">",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",					  "CMDaccum_GT_lng;"				  ]
[ ">",					  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",								  "CMD_GT_lng;"					  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",							  "CMDaccum_GE_cst_int;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",							  "CMDaccum_GE_int_cst;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",									  "CMD_GE_int_cst;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",					  "CMDaccum_GE_int;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",								  "CMD_GE_int;"					  ]
[ ">",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",							  "CMDaccum_GT_cst_int;"			  ]
[ ">",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",							  "CMDaccum_GT_int_cst;"			  ]
[ ">",					  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",									  "CMD_GT_int_cst;"				  ]
[ ">",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",					  "CMDaccum_GT_int;"				  ]
[ ">",					  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",								  "CMD_GT_int;"					  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",							  "CMDaccum_GE_cst_sht;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",							  "CMDaccum_GE_sht_cst;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",									  "CMD_GE_sht_cst;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",					  "CMDaccum_GE_sht;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",								  "CMD_GE_sht;"					  ]
[ ">",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",							  "CMDaccum_GT_cst_sht;"			  ]
[ ">",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",							  "CMDaccum_GT_sht_cst;"			  ]
[ ">",					  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",									  "CMD_GT_sht_cst;"				  ]
[ ">",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",					  "CMDaccum_GT_sht;"				  ]
[ ">",					  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",								  "CMD_GT_sht;"					  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",							  "CMDaccum_GE_cst_oid;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",							  "CMDaccum_GE_oid_cst;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",									  "CMD_GE_oid_cst;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",					  "CMDaccum_GE_oid;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",								  "CMD_GE_oid;"					  ]
[ ">",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",							  "CMDaccum_GT_cst_oid;"			  ]
[ ">",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",							  "CMDaccum_GT_oid_cst;"			  ]
[ ">",					  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",									  "CMD_GT_oid_cst;"				  ]
[ ">",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",					  "CMDaccum_GT_oid;"				  ]
[ ">",					  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",								  "CMD_GT_oid;"					  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",							  "CMDaccum_GE_cst_flt;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",							  "CMDaccum_GE_flt_cst;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",									  "CMD_GE_flt_cst;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",					  "CMDaccum_GE_flt;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",								  "CMD_GE_flt;"					  ]
[ ">",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",							  "CMDaccum_GT_cst_flt;"			  ]
[ ">",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",							  "CMDaccum_GT_flt_cst;"			  ]
[ ">",					  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",									  "CMD_GT_flt_cst;"				  ]
[ ">",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",					  "CMDaccum_GT_flt;"				  ]
[ ">",					  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",								  "CMD_GT_flt;"					  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",							  "CMDaccum_GE_cst_dbl;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",							  "CMDaccum_GE_dbl_cst;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",									  "CMD_GE_dbl_cst;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",					  "CMDaccum_GE_dbl;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",								  "CMD_GE_dbl;"					  ]
[ ">",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",							  "CMDaccum_GT_cst_dbl;"			  ]
[ ">",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",							  "CMDaccum_GT_dbl_cst;"			  ]
[ ">",					  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",									  "CMD_GT_dbl_cst;"				  ]
[ ">",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",					  "CMDaccum_GT_dbl;"				  ]
[ ">",					  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",								  "CMD_GT_dbl;"					  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",							  "CMDaccum_GE_cst_bit;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",							  "CMDaccum_GE_bit_cst;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",									  "CMD_GE_bit_cst;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",					  "CMDaccum_GE_bit;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",								  "CMD_GE_bit;"					  ]
[ ">",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",							  "CMDaccum_GT_cst_bit;"			  ]
[ ">",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",							  "CMDaccum_GT_bit_cst;"			  ]
[ ">",					  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",									  "CMD_GT_bit_cst;"				  ]
[ ">",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",					  "CMDaccum_GT_bit;"				  ]
[ ">",					  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",								  "CMD_GT_bit;"					  ]
[ "and",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",							  "CMDaccum_AND_cst_bit;"			  ]
[ "and",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",							  "CMDaccum_AND_bit_cst;"			  ]
[ "and",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",									  "CMD_AND_bit_cst;"				  ]
[ "and",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",					  "CMDaccum_AND_bit;"				  ]
[ "and",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",								  "CMD_AND_bit;"				  ]
[ "and",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",								  "CMDbatAND_lng_lng_lng;"			  ]
[ "and",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",										  "CMDcstANDbat_lng_lng_lng;"			  ]
[ "and",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",										  "CMDbatANDcst_lng_lng_lng;"			  ]
[ "and",				  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",							  "CMDbataccumANDcst_lng_lng_lng;"		  ]
[ "and",				  "command",	  "batcalc",	  "(a:bat[:oid,:lng],cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",							  "CMDbataccumANDcst2_lng_lng_lng;"		  ]
[ "and",				  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbataccumAND_lng_lng_lng;"			  ]
[ "and",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",								  "CMDbatAND_int_int_int;"			  ]
[ "and",				  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",										  "CMDcstANDbat_int_int_int;"			  ]
[ "and",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:int] ",										  "CMDbatANDcst_int_int_int;"			  ]
[ "and",				  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],cst:int):bat[:oid,:int] ",							  "CMDbataccumANDcst_int_int_int;"		  ]
[ "and",				  "command",	  "batcalc",	  "(a:bat[:oid,:int],cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",							  "CMDbataccumANDcst2_int_int_int;"		  ]
[ "and",				  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",						  "CMDbataccumAND_int_int_int;"			  ]
[ "and",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",								  "CMDbatAND_sht_sht_sht;"			  ]
[ "and",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",										  "CMDcstANDbat_sht_sht_sht;"			  ]
[ "and",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",										  "CMDbatANDcst_sht_sht_sht;"			  ]
[ "and",				  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",							  "CMDbataccumANDcst_sht_sht_sht;"		  ]
[ "and",				  "command",	  "batcalc",	  "(a:bat[:oid,:sht],cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",							  "CMDbataccumANDcst2_sht_sht_sht;"		  ]
[ "and",				  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",						  "CMDbataccumAND_sht_sht_sht;"			  ]
[ "and",				  "command",	  "batcalc",	  "(b:bat[:oid,:oid],c:bat[:oid,:oid]):bat[:oid,:oid] ",								  "CMDbatAND_oid_oid_oid;"			  ]
[ "and",				  "command",	  "batcalc",	  "(cst:oid,b:bat[:oid,:oid]):bat[:oid,:oid] ",										  "CMDcstANDbat_oid_oid_oid;"			  ]
[ "and",				  "command",	  "batcalc",	  "(b:bat[:oid,:oid],cst:oid):bat[:oid,:oid] ",										  "CMDbatANDcst_oid_oid_oid;"			  ]
[ "and",				  "command",	  "batcalc",	  "(a:bat[:oid,:oid],b:bat[:oid,:oid],cst:oid):bat[:oid,:oid] ",							  "CMDbataccumANDcst_oid_oid_oid;"		  ]
[ "and",				  "command",	  "batcalc",	  "(a:bat[:oid,:oid],cst:oid,b:bat[:oid,:oid]):bat[:oid,:oid] ",							  "CMDbataccumANDcst2_oid_oid_oid;"		  ]
[ "and",				  "command",	  "batcalc",	  "(a:bat[:oid,:oid],b:bat[:oid,:oid],c:bat[:oid,:oid]):bat[:oid,:oid] ",						  "CMDbataccumAND_oid_oid_oid;"			  ]
[ "bit",				  "command",	  "batcalc",	  "(b:bat[:any_1,:str]):bat[:any_1,:bit] ",										  "CMDconvert_str_bit;"				  ]
[ "bit",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:bit] ",										  "CMDconvert_lng_bit;"				  ]
[ "bit",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:bit] ",										  "CMDconvert_int_bit;"				  ]
[ "bit",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:bit] ",										  "CMDconvert_sht_bit;"				  ]
[ "bit",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit]):bat[:any_1,:bit] ",										  "CMDconvert_bit;"				  ]
[ "chrAt",				  "command",	  "batcalc",	  "(s:bat[:oid,:str],index:int):bat[:oid,:chr] ",									  "STRbatChrAtcst;"				  ]
[ "chrAt",				  "command",	  "batcalc",	  "(s:bat[:oid,:str],index:bat[:oid,:int]):bat[:oid,:chr] ",								  "STRbatChrAt;"				  ]
[ "chr",				  "command",	  "batcalc",	  "(b:bat[:any_1,:chr]):bat[:any_1,:chr] ",										  "CMDconvert_chr;"				  ]
[ "dbl",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:dbl] ",										  "CMDconvert_flt_dbl;"				  ]
[ "dbl",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid]):bat[:any_1,:dbl] ",										  "CMDconvert_oid_dbl;"				  ]
[ "dbl",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:dbl] ",										  "CMDconvert_lng_dbl;"				  ]
[ "dbl",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:dbl] ",										  "CMDconvert_int_dbl;"				  ]
[ "dbl",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:dbl] ",										  "CMDconvert_sht_dbl;"				  ]
[ "dbl",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",										  "CMDconvert_dbl;"				  ]
[ "endsWith",				  "command",	  "batcalc",	  "(s:bat[:oid,:str],suffix:str):bat[:oid,:bit] ",									  "STRbatSuffixcst;"				  ]
[ "endsWith",				  "command",	  "batcalc",	  "(s:bat[:oid,:str],suffix:bat[:oid,:str]):bat[:oid,:bit] ",								  "STRbatSuffix;"				  ]
[ "flt",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:flt] ",										  "CMDconvert_dbl_flt;"				  ]
[ "flt",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid]):bat[:any_1,:flt] ",										  "CMDconvert_oid_flt;"				  ]
[ "flt",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:flt] ",										  "CMDconvert_lng_flt;"				  ]
[ "flt",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:flt] ",										  "CMDconvert_int_flt;"				  ]
[ "flt",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:flt] ",										  "CMDconvert_sht_flt;"				  ]
[ "flt",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:flt] ",										  "CMDconvert_flt;"				  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:any_1,:dbl],e:dbl):bat[:oid,:dbl] ",							  "CMDifThenElseCst2_dbl;"			  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],e:dbl,t:bat[:oid,:dbl]):bat[:oid,:dbl] ",								  "CMDifThenElseCst1_dbl;"			  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:dbl],e:bat[:oid,:dbl]):bat[:oid,:dbl] ",						  "CMDifThenElse_dbl;"				  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:dbl,w:dbl):bat[:oid,:dbl] ",									  "CMDifThenElseCst_dbl;"			  ]
[ "ifthen",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:dbl):bat[:oid,:dbl] ",										  "CMDifThenCst_dbl;"				  ]
[ "ifthen",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:dbl]):bat[:oid,:dbl] ",								  "CMDifThen_dbl;"				  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:any_1,:flt],e:flt):bat[:oid,:flt] ",							  "CMDifThenElseCst2_flt;"			  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],e:flt,t:bat[:oid,:flt]):bat[:oid,:flt] ",								  "CMDifThenElseCst1_flt;"			  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:flt],e:bat[:oid,:flt]):bat[:oid,:flt] ",						  "CMDifThenElse_flt;"				  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:flt,w:flt):bat[:oid,:flt] ",									  "CMDifThenElseCst_flt;"			  ]
[ "ifthen",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:flt):bat[:oid,:flt] ",										  "CMDifThenCst_flt;"				  ]
[ "ifthen",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:flt]):bat[:oid,:flt] ",								  "CMDifThen_flt;"				  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:any_1,:lng],e:lng):bat[:oid,:lng] ",							  "CMDifThenElseCst2_lng;"			  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],e:lng,t:bat[:oid,:lng]):bat[:oid,:lng] ",								  "CMDifThenElseCst1_lng;"			  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:lng],e:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDifThenElse_lng;"				  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:lng,w:lng):bat[:oid,:lng] ",									  "CMDifThenElseCst_lng;"			  ]
[ "ifthen",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:lng):bat[:oid,:lng] ",										  "CMDifThenCst_lng;"				  ]
[ "ifthen",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:lng]):bat[:oid,:lng] ",								  "CMDifThen_lng;"				  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:any_1,:sht],e:sht):bat[:oid,:sht] ",							  "CMDifThenElseCst2_sht;"			  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],e:sht,t:bat[:oid,:sht]):bat[:oid,:sht] ",								  "CMDifThenElseCst1_sht;"			  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:sht],e:bat[:oid,:sht]):bat[:oid,:sht] ",						  "CMDifThenElse_sht;"				  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:sht,w:sht):bat[:oid,:sht] ",									  "CMDifThenElseCst_sht;"			  ]
[ "ifthen",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:sht):bat[:oid,:sht] ",										  "CMDifThenCst_sht;"				  ]
[ "ifthen",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:sht]):bat[:oid,:sht] ",								  "CMDifThen_sht;"				  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:any_1,:int],e:int):bat[:oid,:int] ",							  "CMDifThenElseCst2_int;"			  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],e:int,t:bat[:oid,:int]):bat[:oid,:int] ",								  "CMDifThenElseCst1_int;"			  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:int],e:bat[:oid,:int]):bat[:oid,:int] ",						  "CMDifThenElse_int;"				  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:int,w:int):bat[:oid,:int] ",									  "CMDifThenElseCst_int;"			  ]
[ "ifthen",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:int):bat[:oid,:int] ",										  "CMDifThenCst_int;"				  ]
[ "ifthen",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:int]):bat[:oid,:int] ",								  "CMDifThen_int;"				  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:any_1,:oid],e:oid):bat[:oid,:oid] ",							  "CMDifThenElseCst2_oid;"			  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],e:oid,t:bat[:oid,:oid]):bat[:oid,:oid] ",								  "CMDifThenElseCst1_oid;"			  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:oid],e:bat[:oid,:oid]):bat[:oid,:oid] ",						  "CMDifThenElse_oid;"				  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:oid,w:oid):bat[:oid,:oid] ",									  "CMDifThenElseCst_oid;"			  ]
[ "ifthen",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:oid):bat[:oid,:oid] ",										  "CMDifThenCst_oid;"				  ]
[ "ifthen",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:oid]):bat[:oid,:oid] ",								  "CMDifThen_oid;"				  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:any_1,:str],e:str):bat[:oid,:str] ",							  "CMDifThenElseCst2_str;"			  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],e:str,t:bat[:oid,:str]):bat[:oid,:str] ",								  "CMDifThenElseCst1_str;"			  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:str],e:bat[:oid,:str]):bat[:oid,:str] ",						  "CMDifThenElse_str;"				  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:str,w:str):bat[:oid,:str] ",									  "CMDifThenElseCst_str;"			  ]
[ "ifthen",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:str):bat[:oid,:str] ",										  "CMDifThenCst_str;"				  ]
[ "ifthen",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:str]):bat[:oid,:str] ",								  "CMDifThen_str;"				  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:any_1,:chr],e:chr):bat[:oid,:chr] ",							  "CMDifThenElseCst2_chr;"			  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],e:chr,t:bat[:oid,:chr]):bat[:oid,:chr] ",								  "CMDifThenElseCst1_chr;"			  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:chr],e:bat[:oid,:chr]):bat[:oid,:chr] ",						  "CMDifThenElse_chr;"				  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:chr,w:chr):bat[:oid,:chr] ",									  "CMDifThenElseCst_chr;"			  ]
[ "ifthen",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:chr):bat[:oid,:chr] ",										  "CMDifThenCst_chr;"				  ]
[ "ifthen",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:chr]):bat[:oid,:chr] ",								  "CMDifThen_chr;"				  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:any_1,:bit],e:bit):bat[:oid,:bit] ",							  "CMDifThenElseCst2_bit;"			  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],e:bit,t:bat[:oid,:bit]):bat[:oid,:bit] ",								  "CMDifThenElseCst1_bit;"			  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:bit],e:bat[:oid,:bit]):bat[:oid,:bit] ",						  "CMDifThenElse_bit;"				  ]
[ "ifthenelse",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:bit,w:bit):bat[:oid,:bit] ",									  "CMDifThenElseCst_bit;"			  ]
[ "ifthen",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:bit):bat[:oid,:bit] ",										  "CMDifThenCst_bit;"				  ]
[ "ifthen",				  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:bit]):bat[:oid,:bit] ",								  "CMDifThen_bit;"				  ]
[ "int",				  "command",	  "batcalc",	  "(b:bat[:any_1,:str]):bat[:any_1,:int] ",										  "CMDconvert_str_int;"				  ]
[ "int",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit]):bat[:any_1,:int] ",										  "CMDconvert_bit_int;"				  ]
[ "int",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:int] ",										  "CMDconvert_dbl_int;"				  ]
[ "int",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:int] ",										  "CMDconvert_flt_int;"				  ]
[ "int",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid]):bat[:any_1,:int] ",										  "CMDconvert_oid_int;"				  ]
[ "int",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:int] ",										  "CMDconvert_lng_int;"				  ]
[ "int",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:int] ",										  "CMDconvert_sht_int;"				  ]
[ "int",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:int] ",										  "CMDconvert_int;"				  ]
[ "isnil",				  "command",	  "batcalc",	  "(b:bat[:any_1,:chr]):bat[:any_1,:chr] ",										  "CMDunaryISNIL;"				  ]
[ "isnil",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit]):bat[:any_1,:bit] ",										  "CMDunaryISNIL;"				  ]
[ "isnil",				  "command",	  "batcalc",	  "(b:bat[:any_1,:str]):bat[:any_1,:bit] ",										  "CMDunaryISNIL;"				  ]
[ "isnil",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",										  "CMDunaryISNIL;"				  ]
[ "isnil",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:bit] ",										  "CMDunaryISNIL;"				  ]
[ "isnil",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:bit] ",										  "CMDunaryISNIL;"				  ]
[ "isnil",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:bit] ",										  "CMDunaryISNIL;"				  ]
[ "isnil",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:bit] ",										  "CMDunaryISNIL;"				  ]
[ "isnil",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid]):bat[:any_1,:bit] ",										  "CMDunaryISNIL;"				  ]
[ "like",				  "command",	  "batcalc",	  "(s:bat[:oid,:str],pat:str,esc:str):bat[:oid,:oid] ",									  "STRbatlike;"					  ]
[ "like",				  "command",	  "batcalc",	  "(s:bat[:oid,:str],pat:str):bat[:oid,:oid] ",										  "STRbatlike2;"				  ]
[ "ltrim",				  "command",	  "batcalc",	  "(s:bat[:oid,:str]):bat[:oid,:str] ",											  "STRbatLtrim;"				  ]
[ "length",				  "command",	  "batcalc",	  "(s:bat[:oid,:str]):bat[:oid,:int] ",											  "STRbatLength;"				  ]
[ "lng",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit]):bat[:any_1,:lng] ",										  "CMDconvert_bit_lng;"				  ]
[ "lng",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:lng] ",										  "CMDconvert_dbl_lng;"				  ]
[ "lng",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:lng] ",										  "CMDconvert_flt_lng;"				  ]
[ "lng",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid]):bat[:any_1,:lng] ",										  "CMDconvert_oid_lng;"				  ]
[ "lng",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:lng] ",										  "CMDconvert_int_lng;"				  ]
[ "lng",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:lng] ",										  "CMDconvert_sht_lng;"				  ]
[ "lng",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:lng] ",										  "CMDconvert_lng;"				  ]
[ "match",				  "command",	  "batcalc",	  "(b:bat[:oid,:str],pat:str):bat[:oid,:bit] ",										  "STRbatmatchCst;"				  ]
[ "nbytes",				  "command",	  "batcalc",	  "(s:bat[:oid,:str]):bat[:oid,:int] ",											  "STRbatBytes;"				  ]
[ "not",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit]):bat[:any_1,:bit] ",								  "CMDbitbataccumNOT;"				  ]
[ "not",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit]):bat[:any_1,:bit] ",										  "CMDbitbatNOT;"				  ]
[ "oid",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:oid] ",										  "CMDconvert_lng_oid;"				  ]
[ "oid",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:oid] ",										  "CMDconvert_int_oid;"				  ]
[ "oid",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:oid] ",										  "CMDconvert_sht_oid;"				  ]
[ "oid",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid]):bat[:any_1,:oid] ",										  "CMDconvert_oid;"				  ]
[ "or",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",							  "CMDaccum_OR_cst_bit;"			  ]
[ "or",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",							  "CMDaccum_OR_bit_cst;"			  ]
[ "or",					  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",									  "CMD_OR_bit_cst;"				  ]
[ "or",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",					  "CMDaccum_OR_bit;"				  ]
[ "or",					  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",								  "CMD_OR_bit;"					  ]
[ "or",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",								  "CMDbatOR_lng_lng_lng;"			  ]
[ "or",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",										  "CMDcstORbat_lng_lng_lng;"			  ]
[ "or",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",										  "CMDbatORcst_lng_lng_lng;"			  ]
[ "or",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",							  "CMDbataccumORcst_lng_lng_lng;"		  ]
[ "or",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",							  "CMDbataccumORcst2_lng_lng_lng;"		  ]
[ "or",					  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbataccumOR_lng_lng_lng;"			  ]
[ "or",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",								  "CMDbatOR_int_int_int;"			  ]
[ "or",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",										  "CMDcstORbat_int_int_int;"			  ]
[ "or",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:int] ",										  "CMDbatORcst_int_int_int;"			  ]
[ "or",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],cst:int):bat[:oid,:int] ",							  "CMDbataccumORcst_int_int_int;"		  ]
[ "or",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",							  "CMDbataccumORcst2_int_int_int;"		  ]
[ "or",					  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",						  "CMDbataccumOR_int_int_int;"			  ]
[ "or",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",								  "CMDbatOR_sht_sht_sht;"			  ]
[ "or",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",										  "CMDcstORbat_sht_sht_sht;"			  ]
[ "or",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",										  "CMDbatORcst_sht_sht_sht;"			  ]
[ "or",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",							  "CMDbataccumORcst_sht_sht_sht;"		  ]
[ "or",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",							  "CMDbataccumORcst2_sht_sht_sht;"		  ]
[ "or",					  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",						  "CMDbataccumOR_sht_sht_sht;"			  ]
[ "or",					  "command",	  "batcalc",	  "(b:bat[:oid,:oid],c:bat[:oid,:oid]):bat[:oid,:oid] ",								  "CMDbatOR_oid_oid_oid;"			  ]
[ "or",					  "command",	  "batcalc",	  "(cst:oid,b:bat[:oid,:oid]):bat[:oid,:oid] ",										  "CMDcstORbat_oid_oid_oid;"			  ]
[ "or",					  "command",	  "batcalc",	  "(b:bat[:oid,:oid],cst:oid):bat[:oid,:oid] ",										  "CMDbatORcst_oid_oid_oid;"			  ]
[ "or",					  "command",	  "batcalc",	  "(a:bat[:oid,:oid],b:bat[:oid,:oid],cst:oid):bat[:oid,:oid] ",							  "CMDbataccumORcst_oid_oid_oid;"		  ]
[ "or",					  "command",	  "batcalc",	  "(a:bat[:oid,:oid],cst:oid,b:bat[:oid,:oid]):bat[:oid,:oid] ",							  "CMDbataccumORcst2_oid_oid_oid;"		  ]
[ "or",					  "command",	  "batcalc",	  "(a:bat[:oid,:oid],b:bat[:oid,:oid],c:bat[:oid,:oid]):bat[:oid,:oid] ",						  "CMDbataccumOR_oid_oid_oid;"			  ]
[ "r_search",				  "command",	  "batcalc",	  "(s:bat[:oid,:str],c:str):bat[:oid,:int] ",										  "STRbatRstrSearchcst;"			  ]
[ "r_search",				  "command",	  "batcalc",	  "(s:bat[:oid,:str],c:bat[:oid,:str]):bat[:oid,:int] ",								  "STRbatRstrSearch;"				  ]
[ "rtrim",				  "command",	  "batcalc",	  "(s:bat[:oid,:str]):bat[:oid,:str] ",											  "STRbatRtrim;"				  ]
[ "substitute",				  "command",	  "batcalc",	  "(s:bat[:oid,:str],src:str,dst:str,rep:bit):bat[:oid,:str] ",								  "STRbatSubstitutecst;"			  ]
[ "substring",				  "command",	  "batcalc",	  "(s:bat[:oid,:str],start:int,index:int):bat[:oid,:str] ",								  "STRbatsubstringcst;"				  ]
[ "substring",				  "command",	  "batcalc",	  "(s:bat[:oid,:str],start:bat[:oid,:int],index:bat[:oid,:int]):bat[:oid,:str] ",					  "STRbatsubstring;"				  ]
[ "string",				  "command",	  "batcalc",	  "(b:bat[:oid,:str],offset:int):bat[:oid,:str] ",									  "STRbatTailcst;"				  ]
[ "string",				  "command",	  "batcalc",	  "(b:bat[:oid,:str],offset:bat[:oid,:int]):bat[:oid,:str] ",								  "STRbatTail;"					  ]
[ "search",				  "command",	  "batcalc",	  "(s:bat[:oid,:str],c:str):bat[:oid,:int] ",										  "STRbatstrSearchcst;"				  ]
[ "search",				  "command",	  "batcalc",	  "(s:bat[:oid,:str],c:bat[:oid,:str]):bat[:oid,:int] ",								  "STRbatstrSearch;"				  ]
[ "startsWith",				  "command",	  "batcalc",	  "(s:bat[:oid,:str],prefix:str):bat[:oid,:bit] ",									  "STRbatPrefixcst;"				  ]
[ "startsWith",				  "command",	  "batcalc",	  "(s:bat[:oid,:str],prefix:bat[:oid,:str]):bat[:oid,:bit] ",								  "STRbatPrefix;"				  ]
[ "sht",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit]):bat[:any_1,:sht] ",										  "CMDconvert_bit_sht;"				  ]
[ "sht",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:sht] ",										  "CMDconvert_dbl_sht;"				  ]
[ "sht",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:sht] ",										  "CMDconvert_flt_sht;"				  ]
[ "sht",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid]):bat[:any_1,:sht] ",										  "CMDconvert_oid_sht;"				  ]
[ "sht",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:sht] ",										  "CMDconvert_lng_sht;"				  ]
[ "sht",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:sht] ",										  "CMDconvert_int_sht;"				  ]
[ "str",				  "command",	  "batcalc",	  "(b:bat[:any_1,:str]):bat[:any_1,:str] ",										  "CMDconvert_str;"				  ]
[ "sht",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:sht] ",										  "CMDconvert_sht;"				  ]
[ "trim",				  "command",	  "batcalc",	  "(s:bat[:oid,:str]):bat[:oid,:str] ",											  "STRbatStrip;"				  ]
[ "toUpper",				  "command",	  "batcalc",	  "(s:bat[:oid,:str]):bat[:oid,:str] ",											  "STRbatUpper;"				  ]
[ "toLower",				  "command",	  "batcalc",	  "(s:bat[:oid,:str]):bat[:oid,:str] ",											  "STRbatLower;"				  ]
[ "unicodeAt",				  "command",	  "batcalc",	  "(s:bat[:oid,:str],index:int):bat[:oid,:int] ",									  "STRbatWChrAtcst;"				  ]
[ "unicodeAt",				  "command",	  "batcalc",	  "(s:bat[:oid,:str],index:bat[:oid,:int]):bat[:oid,:int] ",								  "STRbatWChrAt;"				  ]
[ "xor",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",								  "CMDbatXOR_lng_lng_lng;"			  ]
[ "xor",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",										  "CMDcstXORbat_lng_lng_lng;"			  ]
[ "xor",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",										  "CMDbatXORcst_lng_lng_lng;"			  ]
[ "xor",				  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",							  "CMDbataccumXORcst_lng_lng_lng;"		  ]
[ "xor",				  "command",	  "batcalc",	  "(a:bat[:oid,:lng],cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",							  "CMDbataccumXORcst2_lng_lng_lng;"		  ]
[ "xor",				  "command",	  "batcalc",	  "(a:bat[:oid,:lng],b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",						  "CMDbataccumXOR_lng_lng_lng;"			  ]
[ "xor",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",								  "CMDbatXOR_int_int_int;"			  ]
[ "xor",				  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",										  "CMDcstXORbat_int_int_int;"			  ]
[ "xor",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:int] ",										  "CMDbatXORcst_int_int_int;"			  ]
[ "xor",				  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],cst:int):bat[:oid,:int] ",							  "CMDbataccumXORcst_int_int_int;"		  ]
[ "xor",				  "command",	  "batcalc",	  "(a:bat[:oid,:int],cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",							  "CMDbataccumXORcst2_int_int_int;"		  ]
[ "xor",				  "command",	  "batcalc",	  "(a:bat[:oid,:int],b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",						  "CMDbataccumXOR_int_int_int;"			  ]
[ "xor",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",								  "CMDbatXOR_sht_sht_sht;"			  ]
[ "xor",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",										  "CMDcstXORbat_sht_sht_sht;"			  ]
[ "xor",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",										  "CMDbatXORcst_sht_sht_sht;"			  ]
[ "xor",				  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",							  "CMDbataccumXORcst_sht_sht_sht;"		  ]
[ "xor",				  "command",	  "batcalc",	  "(a:bat[:oid,:sht],cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",							  "CMDbataccumXORcst2_sht_sht_sht;"		  ]
[ "xor",				  "command",	  "batcalc",	  "(a:bat[:oid,:sht],b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",						  "CMDbataccumXOR_sht_sht_sht;"			  ]
[ "xor",				  "command",	  "batcalc",	  "(b:bat[:oid,:oid],c:bat[:oid,:oid]):bat[:oid,:oid] ",								  "CMDbatXOR_oid_oid_oid;"			  ]
[ "xor",				  "command",	  "batcalc",	  "(cst:oid,b:bat[:oid,:oid]):bat[:oid,:oid] ",										  "CMDcstXORbat_oid_oid_oid;"			  ]
[ "xor",				  "command",	  "batcalc",	  "(b:bat[:oid,:oid],cst:oid):bat[:oid,:oid] ",										  "CMDbatXORcst_oid_oid_oid;"			  ]
[ "xor",				  "command",	  "batcalc",	  "(a:bat[:oid,:oid],b:bat[:oid,:oid],cst:oid):bat[:oid,:oid] ",							  "CMDbataccumXORcst_oid_oid_oid;"		  ]
[ "xor",				  "command",	  "batcalc",	  "(a:bat[:oid,:oid],cst:oid,b:bat[:oid,:oid]):bat[:oid,:oid] ",							  "CMDbataccumXORcst2_oid_oid_oid;"		  ]
[ "xor",				  "command",	  "batcalc",	  "(a:bat[:oid,:oid],b:bat[:oid,:oid],c:bat[:oid,:oid]):bat[:oid,:oid] ",						  "CMDbataccumXOR_oid_oid_oid;"			  ]
[ "atan2",				  "command",	  "batmath",	  "(x:bat[:oid,:dbl],y:dbl):bat[:oid,:dbl] ",										  "CMDscience_atan2;"				  ]
[ "atan",				  "command",	  "batmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDsciencevoid_atan;"			  ]
[ "acos",				  "command",	  "batmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDsciencevoid_acos;"			  ]
[ "asin",				  "command",	  "batmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDsciencevoid_asin;"			  ]
[ "ceil",				  "command",	  "batmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDsciencevoid_ceil;"			  ]
[ "cosh",				  "command",	  "batmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDsciencevoid_cosh;"			  ]
[ "cos",				  "command",	  "batmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDsciencevoid_cos;"				  ]
[ "exp",				  "command",	  "batmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDsciencevoid_exp;"				  ]
[ "fmod",				  "command",	  "batmath",	  "(x:bat[:oid,:dbl],y:dbl):bat[:oid,:dbl] ",										  "CMDscience_fmod;"				  ]
[ "floor",				  "command",	  "batmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDsciencevoid_floor;"			  ]
[ "fabs",				  "command",	  "batmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDsciencevoid_fabs;"			  ]
[ "log10",				  "command",	  "batmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDsciencevoid_log10;"			  ]
[ "log",				  "command",	  "batmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDsciencevoid_log;"				  ]
[ "pow",				  "command",	  "batmath",	  "(x:bat[:oid,:dbl],y:dbl):bat[:oid,:dbl] ",										  "CMDscience_pow;"				  ]
[ "sqrt",				  "command",	  "batmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDsciencevoid_sqrt;"			  ]
[ "sinh",				  "command",	  "batmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDsciencevoid_sinh;"			  ]
[ "sin",				  "command",	  "batmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDsciencevoid_sin;"				  ]
[ "tanh",				  "command",	  "batmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDsciencevoid_tanh;"			  ]
[ "tan",				  "command",	  "batmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDsciencevoid_tan;"				  ]
[ "!=",					  "command",	  "inet",	  "(v:inet,w:inet):bit ",												  "INET_comp_NEQ;"				  ]
[ "<<=",				  "command",	  "inet",	  "(v:inet,w:inet):bit ",												  "INET_comp_CWE;"				  ]
[ "<<",					  "command",	  "inet",	  "(v:inet,w:inet):bit ",												  "INET_comp_CW;"				  ]
[ "<=",					  "command",	  "inet",	  "(v:inet,w:inet):bit ",												  "INET_comp_LE;"				  ]
[ "<",					  "command",	  "inet",	  "(v:inet,w:inet):bit ",												  "INET_comp_LT;"				  ]
[ "=",					  "command",	  "inet",	  "(v:inet,w:inet):bit ",												  "INET_comp_EQ;"				  ]
[ ">>=",				  "command",	  "inet",	  "(v:inet,w:inet):bit ",												  "INET_comp_CSE;"				  ]
[ ">>",					  "command",	  "inet",	  "(v:inet,w:inet):bit ",												  "INET_comp_CS;"				  ]
[ ">=",					  "command",	  "inet",	  "(v:inet,w:inet):bit ",												  "INET_comp_GE;"				  ]
[ ">",					  "command",	  "inet",	  "(v:inet,w:inet):bit ",												  "INET_comp_GT;"				  ]
[ "abbrev",				  "command",	  "inet",	  "(_1:inet):str ",													  "INETabbrev;"					  ]
[ "broadcast",				  "command",	  "inet",	  "(_1:inet):inet ",													  "INETbroadcast;"				  ]
[ "#fromstr",				  "command",	  "inet",	  "():void ",														  "INETfromString;"				  ]
[ "hostmask",				  "command",	  "inet",	  "(_1:inet):inet ",													  "INEThostmask;"				  ]
[ "host",				  "command",	  "inet",	  "(_1:inet):str ",													  "INEThost;"					  ]
[ "isnil",				  "command",	  "inet",	  "(v:inet):bit ",													  "INET_isnil;"					  ]
[ "masklen",				  "command",	  "inet",	  "(_1:inet):int ",													  "INETmasklen;"				  ]
[ "network",				  "command",	  "inet",	  "(_1:inet):inet ",													  "INETnetwork;"				  ]
[ "netmask",				  "command",	  "inet",	  "(_1:inet):inet ",													  "INETnetmask;"				  ]
[ "new",				  "command",	  "inet",	  "(s:str):inet ",													  "INETnew;"					  ]
[ "setmasklen",				  "command",	  "inet",	  "(_1:inet,_2:int):inet ",												  "INETsetmasklen;"				  ]
[ "text",				  "command",	  "inet",	  "(_1:inet):str ",													  "INETtext;"					  ]
[ "#tostr",				  "command",	  "inet",	  "():void ",														  "INETtoString;"				  ]
[ "!=",					  "command",	  "date",	  "(v:date,w:date):bit ",												  "MTIMEdate_NEQ;"				  ]
[ "<=",					  "command",	  "date",	  "(v:date,w:date):bit ",												  "MTIMEdate_LE;"				  ]
[ "<",					  "command",	  "date",	  "(v:date,w:date):bit ",												  "MTIMEdate_LT;"				  ]
[ "==",					  "command",	  "date",	  "(v:date,w:date):bit ",												  "MTIMEdate_EQ;"				  ]
[ ">=",					  "command",	  "date",	  "(v:date,w:date):bit ",												  "MTIMEdate_GE;"				  ]
[ ">",					  "command",	  "date",	  "(v:date,w:date):bit ",												  "MTIMEdate_GT;"				  ]
[ "date",				  "command",	  "date",	  "(s:date):date ",													  "MTIMEdate_date;"				  ]
[ "#fromstr",				  "command",	  "date",	  "():date ",														  "date_fromstr;"				  ]
[ "isnil",				  "command",	  "date",	  "(v:date):bit ",													  "MTIMEdate_isnil;"				  ]
[ "#tostr",				  "command",	  "date",	  "():str ",														  "date_tostr;"					  ]
[ "add",				  "command",	  "mtime",	  "(v:timestamp,msecs:lng):timestamp ",											  "MTIMEtimestamp_add;"				  ]
[ "adddays",				  "command",	  "mtime",	  "(value:date,days:int):date ",											  "MTIMEdate_adddays;"				  ]
[ "addmonths",				  "command",	  "mtime",	  "(value:date,months:int):date ",											  "MTIMEdate_addmonths;"			  ]
[ "addyears",				  "command",	  "mtime",	  "(value:date,years:int):date ",											  "MTIMEdate_addyears;"				  ]
[ "current_time",			  "command",	  "mtime",	  "():daytime ",													  "MTIMEcurrent_time;"				  ]
[ "current_date",			  "command",	  "mtime",	  "():date ",														  "MTIMEcurrent_date;"				  ]
[ "current_timestamp",			  "command",	  "mtime",	  "():timestamp ",													  "MTIMEcurrent_timestamp;"			  ]
[ "compute",				  "command",	  "mtime",	  "(r:zrule,year:int):date ",												  "MTIMEcompute_rule_foryear;"			  ]
[ "day",				  "command",	  "mtime",	  "(secs:lng):int ",													  "MTIMEsql_day;"				  ]
[ "day",				  "command",	  "mtime",	  "(t:timestamp):int ",													  "MTIMEtimestamp_day;"				  ]
[ "daytime",				  "command",	  "mtime",	  "(h:int,m:int,s:int):daytime ",											  "MTIMEdaytime3;"				  ]
[ "daytime",				  "command",	  "mtime",	  "(h:int,m:int):daytime ",												  "MTIMEdaytime2;"				  ]
[ "daytime",				  "command",	  "mtime",	  "(h:int):daytime ",													  "MTIMEdaytime1;"				  ]
[ "dayname",				  "command",	  "mtime",	  "(day:int):str ",													  "MTIMEday_to_str;"				  ]
[ "daynum",				  "command",	  "mtime",	  "(day:str):int ",													  "MTIMEday_from_str;"				  ]
[ "dst",				  "command",	  "mtime",	  "(t:timestamp,v:timezone):bit ",											  "MTIMEtimestamp_inside_dst;"			  ]
[ "diff",				  "command",	  "mtime",	  "(val1:timestamp,val2:timestamp):lng ",										  "MTIMEtimestamp_diff;"			  ]
[ "dayofweek",				  "command",	  "mtime",	  "(d:date):int ",													  "MTIMEdate_extract_dayofweek;"		  ]
[ "dayofyear",				  "command",	  "mtime",	  "(d:date):int ",													  "MTIMEdate_extract_dayofyear;"		  ]
[ "diff",				  "command",	  "mtime",	  "(val1:date,val2:date):int ",												  "MTIMEdate_diff;"				  ]
[ "day",				  "command",	  "mtime",	  "(t:zrule):int ",													  "MTIMErule_extract_day;"			  ]
[ "date",				  "command",	  "mtime",	  "(t:timestamp,v:timezone):date ",											  "MTIMEtimestamp_extract_date;"		  ]
[ "date",				  "command",	  "mtime",	  "(t:timestamp):date ",												  "MTIMEtimestamp_extract_date_default;"	  ]
[ "daytime",				  "command",	  "mtime",	  "(t:timestamp,v:timezone):daytime ",											  "MTIMEtimestamp_extract_daytime;"		  ]
[ "daytime",				  "command",	  "mtime",	  "(t:timestamp):daytime ",												  "MTIMEtimestamp_extract_daytime_default;"	  ]
[ "day",				  "command",	  "mtime",	  "(d:date):int ",													  "MTIMEdate_extract_day;"			  ]
[ "daytime",				  "command",	  "mtime",	  "(h:int,m:int,s:int,mi:int):daytime ",										  "MTIMEdaytime_create;"			  ]
[ "daytime",				  "command",	  "mtime",	  "(_1:lng):daytime ",													  "MTIMEsecs2daytime;"				  ]
[ "daytime",				  "command",	  "mtime",	  "(_1:daytime):daytime ",												  "MTIMEdaytime2daytime;"			  ]
[ "daytime",				  "command",	  "mtime",	  "(s:str):daytime ",													  "MTIMEdaytime_fromstr;"			  ]
[ "date",				  "command",	  "mtime",	  "(yr:int,mo:int,day:int):date ",											  "MTIMEdate_create;"				  ]
[ "date",				  "command",	  "mtime",	  "(s:str):date ",													  "MTIMEdate_fromstr;"				  ]
[ "date",				  "command",	  "mtime",	  "(_1:void):date ",													  "MTIMEnil2date;"				  ]
[ "date",				  "command",	  "mtime",	  "(_1:date):date ",													  "MTIMEdate2date;"				  ]
[ "date_add_month_interval",		  "command",	  "mtime",	  "(t:date,s:int):date ",												  "MTIMEdate_add_month_interval_wrap;"		  ]
[ "date_add_sec_interval",		  "command",	  "mtime",	  "(t:date,s:lng):date ",												  "MTIMEdate_add_sec_interval_lng_wrap;"	  ]
[ "date_add_sec_interval",		  "command",	  "mtime",	  "(t:date,s:int):date ",												  "MTIMEdate_add_sec_interval_wrap;"		  ]
[ "date_sub_sec_interval",		  "command",	  "mtime",	  "(t:date,s:lng):date ",												  "MTIMEdate_sub_sec_interval_lng_wrap;"	  ]
[ "date_sub_sec_interval",		  "command",	  "mtime",	  "(t:date,s:int):date ",												  "MTIMEdate_sub_sec_interval_wrap;"		  ]
[ "epilogue",				  "command",	  "mtime",	  "():void ",														  "MTIMEepilogue;"				  ]
[ "end_dst",				  "command",	  "mtime",	  "(t:timezone):zrule ",												  "MTIMEtzone_extract_end;"			  ]
[ "hours",				  "command",	  "mtime",	  "(secs:lng):int ",													  "MTIMEsql_hours;"				  ]
[ "hours",				  "command",	  "mtime",	  "(t:timestamp):int ",													  "MTIMEtimestamp_hours;"			  ]
[ "hours",				  "command",	  "mtime",	  "(h:daytime):int ",													  "MTIMEdaytime_extract_hours;"			  ]
[ "local_timezone",			  "command",	  "mtime",	  "():lng ",														  "MTIMElocal_timezone;"			  ]
[ "msec",				  "command",	  "mtime",	  "():lng ",														  "MTIMEmsec;"					  ]
[ "minutes",				  "command",	  "mtime",	  "(secs:lng):int ",													  "MTIMEsql_minutes;"				  ]
[ "month",				  "command",	  "mtime",	  "(months:int):int ",													  "MTIMEsql_month;"				  ]
[ "milliseconds",			  "command",	  "mtime",	  "(t:timestamp):int ",													  "MTIMEtimestamp_milliseconds;"		  ]
[ "minutes",				  "command",	  "mtime",	  "(t:timestamp):int ",													  "MTIMEtimestamp_minutes;"			  ]
[ "month",				  "command",	  "mtime",	  "(t:timestamp):int ",													  "MTIMEtimestamp_month;"			  ]
[ "msecs",				  "command",	  "mtime",	  "(d:int,h:int,m:int,s:int,ms:int):lng ",										  "MTIMEmsecs;"					  ]
[ "monthname",				  "command",	  "mtime",	  "(month:int):str ",													  "MTIMEmonth_to_str;"				  ]
[ "monthnum",				  "command",	  "mtime",	  "(month:str):int ",													  "MTIMEmonth_from_str;"			  ]
[ "minutes",				  "command",	  "mtime",	  "(t:zrule):int ",													  "MTIMErule_extract_minutes;"			  ]
[ "month",				  "command",	  "mtime",	  "(t:zrule):int ",													  "MTIMErule_extract_month;"			  ]
[ "minutes",				  "command",	  "mtime",	  "(t:timezone):int ",													  "MTIMEtzone_extract_minutes;"			  ]
[ "milliseconds",			  "command",	  "mtime",	  "(d:daytime):int ",													  "MTIMEdaytime_extract_milliseconds;"		  ]
[ "minutes",				  "command",	  "mtime",	  "(d:bat[:any_1,:date]):bat[:any_1,:int] ",										  "MTIMEdaytime_extract_minutes_bulk;"		  ]
[ "minutes",				  "command",	  "mtime",	  "(d:daytime):int ",													  "MTIMEdaytime_extract_minutes;"		  ]
[ "month",				  "command",	  "mtime",	  "(d:date):int ",													  "MTIMEdate_extract_month;"			  ]
[ "oldduration",			  "command",	  "mtime",	  "(format:str):int ",													  "MTIMEoldduration;"				  ]
[ "olddate",				  "command",	  "mtime",	  "(format:str):date ",													  "MTIMEolddate;"				  ]
[ "prelude",				  "command",	  "mtime",	  "():void ",														  "MTIMEprelude;"				  ]
[ "rule",				  "command",	  "mtime",	  "(mo:int,d:int,wkday:int,mi:int):zrule ",										  "MTIMErule_create;"				  ]
[ "rule",				  "command",	  "mtime",	  "(s:str):zrule ",													  "MTIMErule_fromstr;"				  ]
[ "seconds",				  "command",	  "mtime",	  "(secs:lng):int ",													  "MTIMEsql_seconds;"				  ]
[ "seconds",				  "command",	  "mtime",	  "(t:timestamp):int ",													  "MTIMEtimestamp_seconds;"			  ]
[ "start_dst",				  "command",	  "mtime",	  "(t:timezone):zrule ",												  "MTIMEtzone_extract_start;"			  ]
[ "setTimezone",			  "command",	  "mtime",	  "(name:str):timezone ",												  "MTIMEtimezone;"				  ]
[ "seconds",				  "command",	  "mtime",	  "(d:daytime):int ",													  "MTIMEdaytime_extract_seconds;"		  ]
[ "time_synonyms",			  "command",	  "mtime",	  "(allow:bit):void ",													  "MTIMEsynonyms;"				  ]
[ "timezone",				  "command",	  "mtime",	  "(mi:int,s:zrule,erule:zrule):timezone ",										  "MTIMEtzone_create_dst;"			  ]
[ "timezone",				  "command",	  "mtime",	  "(s:lng):timezone ",													  "MTIMEtzone_create;"				  ]
[ "timezone",				  "command",	  "mtime",	  "(s:int):timezone ",													  "MTIMEtzone_create;"				  ]
[ "timezone",				  "command",	  "mtime",	  "(s:str):timezone ",													  "MTIMEtzone_fromstr;"				  ]
[ "timestamp",				  "command",	  "mtime",	  "(d:date):timestamp ",												  "MTIMEtimestamp_create_from_date;"		  ]
[ "timestamp",				  "command",	  "mtime",	  "(d:date,dt:daytime):timestamp ",											  "MTIMEtimestamp_create_default;"		  ]
[ "timestamp",				  "command",	  "mtime",	  "(d:date,dt:daytime,t:timezone):timestamp ",										  "MTIMEtimestamp_create;"			  ]
[ "timezone_local",			  "command",	  "mtime",	  "():timezone ",													  "MTIMEtzone_get_local;"			  ]
[ "timezone_local",			  "command",	  "mtime",	  "(t:timezone):void ",													  "MTIMEtzone_set_local;"			  ]
[ "time_add_sec_interval",		  "command",	  "mtime",	  "(t:daytime,s:lng):daytime ",												  "MTIMEtime_add_sec_interval_wrap;"		  ]
[ "time_sub_sec_interval",		  "command",	  "mtime",	  "(t:daytime,s:lng):daytime ",												  "MTIMEtime_sub_sec_interval_wrap;"		  ]
[ "timestamp",				  "command",	  "mtime",	  "(t:timestamp):timestamp ",												  "MTIMEtimestamp2timestamp;"			  ]
[ "timestamp_add_month_interval",	  "command",	  "mtime",	  "(t:timestamp,s:int):timestamp ",											  "MTIMEtimestamp_add_month_interval_wrap;"	  ]
[ "timestamp_sub_month_interval",	  "command",	  "mtime",	  "(t:timestamp,s:int):timestamp ",											  "MTIMEtimestamp_sub_month_interval_wrap;"	  ]
[ "timestamp_add_sec_interval",		  "command",	  "mtime",	  "(t:timestamp,s:lng):timestamp ",											  "MTIMEtimestamp_add_sec_interval_lng_wrap;"	  ]
[ "timestamp_sub_sec_interval",		  "command",	  "mtime",	  "(t:timestamp,s:lng):timestamp ",											  "MTIMEtimestamp_sub_sec_interval_lng_wrap;"	  ]
[ "weekofyear",				  "command",	  "mtime",	  "(d:date):int ",													  "MTIMEdate_extract_weekofyear;"		  ]
[ "weekday",				  "command",	  "mtime",	  "(t:zrule):int ",													  "MTIMErule_extract_weekday;"			  ]
[ "year",				  "command",	  "mtime",	  "(months:int):int ",													  "MTIMEsql_year;"				  ]
[ "year",				  "command",	  "mtime",	  "(t:timestamp):int ",													  "MTIMEtimestamp_year;"			  ]
[ "year",				  "command",	  "mtime",	  "(d:date):int ",													  "MTIMEdate_extract_year;"			  ]
[ "#fromstr",				  "command",	  "timezone",	  "():timezone ",													  "tzone_fromstr;"				  ]
[ "str",				  "command",	  "timezone",	  "():str ",														  "MTIMEtzone_tostr;"				  ]
[ "timestamp",				  "command",	  "timezone",	  "(secs:int):timestamp ",												  "MTIMEtimestamp;"				  ]
[ "timestamp",				  "command",	  "timezone",	  "(s:str):timestamp ",													  "MTIMEtimestamp_fromstr;"			  ]
[ "#tostr",				  "command",	  "timezone",	  "():str ",														  "tzone_tostr;"				  ]
[ "define",				  "command",	  "zrule",	  "(m:int,d:str,w:int,min:int):zrule ",											  "MTIMEruleDef2;"				  ]
[ "define",				  "command",	  "zrule",	  "(m:int,d:str,w:int,h:int,min:int):zrule ",										  "MTIMEruleDef1;"				  ]
[ "define",				  "command",	  "zrule",	  "(m:int,d:int,w:int,h:int,min:int):zrule ",										  "MTIMEruleDef0;"				  ]
[ "#fromstr",				  "command",	  "zrule",	  "():zrule ",														  "rule_fromstr;"				  ]
[ "#tostr",				  "command",	  "zrule",	  "():str ",														  "rule_tostr;"					  ]
[ "day",				  "command",	  "batmtime",	  "(d:bat[:any_1,:date]):bat[:any_1,:int] ",										  "MTIMEdate_extract_day_bulk;"			  ]
[ "hours",				  "command",	  "batmtime",	  "(d:bat[:any_1,:date]):bat[:any_1,:int] ",										  "MTIMEdaytime_extract_hours_bulk;"		  ]
[ "milliseconds",			  "command",	  "batmtime",	  "(d:bat[:any_1,:date]):bat[:any_1,:int] ",										  "MTIMEdaytime_extract_milliseconds_bulk;"	  ]
[ "month",				  "command",	  "batmtime",	  "(d:bat[:any_1,:date]):bat[:any_1,:int] ",										  "MTIMEdate_extract_month_bulk;"		  ]
[ "seconds",				  "command",	  "batmtime",	  "(d:bat[:any_1,:date]):bat[:any_1,:int] ",										  "MTIMEdaytime_extract_seconds_bulk;"		  ]
[ "year",				  "command",	  "batmtime",	  "(d:bat[:any_1,:date]):bat[:any_1,:int] ",										  "MTIMEdate_extract_year_bulk;"		  ]
[ "!=",					  "command",	  "timestamp",	  "(v:timestamp,w:timestamp):bit ",											  "MTIMEtimestamp_NEQ;"				  ]
[ "<=",					  "command",	  "timestamp",	  "(v:timestamp,w:timestamp):bit ",											  "MTIMEtimestamp_LE;"				  ]
[ "<",					  "command",	  "timestamp",	  "(v:timestamp,w:timestamp):bit ",											  "MTIMEtimestamp_LT;"				  ]
[ "==",					  "command",	  "timestamp",	  "(v:timestamp,w:timestamp):bit ",											  "MTIMEtimestamp_EQ;"				  ]
[ ">=",					  "command",	  "timestamp",	  "(v:timestamp,w:timestamp):bit ",											  "MTIMEtimestamp_GE;"				  ]
[ ">",					  "command",	  "timestamp",	  "(v:timestamp,w:timestamp):bit ",											  "MTIMEtimestamp_GT;"				  ]
[ "epoch",				  "command",	  "timestamp",	  "(t:timestamp):lng ",													  "MTIMEepoch2lng;"				  ]
[ "epoch",				  "command",	  "timestamp",	  "():timestamp ",													  "MTIMEepoch;"					  ]
[ "#fromstr",				  "command",	  "timestamp",	  "():timestamp ",													  "timestamp_fromstr;"				  ]
[ "isnil",				  "command",	  "timestamp",	  "(v:timestamp):bit ",													  "MTIMEtimestamp_isnil;"			  ]
[ "#tostr",				  "command",	  "timestamp",	  "():str ",														  "timestamp_tostr;"				  ]
[ "unix_epoch",				  "command",	  "timestamp",	  "():timestamp ",													  "MTIMEunix_epoch;"				  ]
[ "!=",					  "command",	  "daytime",	  "(v:daytime,w:daytime):bit ",												  "MTIMEdaytime_NEQ;"				  ]
[ "<=",					  "command",	  "daytime",	  "(v:daytime,w:daytime):bit ",												  "MTIMEdaytime_LE;"				  ]
[ "<",					  "command",	  "daytime",	  "(v:daytime,w:daytime):bit ",												  "MTIMEdaytime_LT;"				  ]
[ "==",					  "command",	  "daytime",	  "(v:daytime,w:daytime):bit ",												  "MTIMEdaytime_EQ;"				  ]
[ ">=",					  "command",	  "daytime",	  "(v:daytime,w:daytime):bit ",												  "MTIMEdaytime_GE;"				  ]
[ ">",					  "command",	  "daytime",	  "(v:daytime,w:daytime):bit ",												  "MTIMEdaytime_GT;"				  ]
[ "#fromstr",				  "command",	  "daytime",	  "():daytime ",													  "daytime_tz_fromstr;"				  ]
[ "isnil",				  "command",	  "daytime",	  "(v:daytime):bit ",													  "MTIMEdaytime_isnil;"				  ]
[ "#tostr",				  "command",	  "daytime",	  "():str ",														  "daytime_tostr;"				  ]
[ "#fromstr",				  "command",	  "url",	  "():url ",														  "URLfromString;"				  ]
[ "getRobotURL",			  "command",	  "url",	  "(u:url):str ",													  "URLgetRobotURL;"				  ]
[ "getUser",				  "command",	  "url",	  "(u:url):str ",													  "URLgetUser;"					  ]
[ "getQueryArg",			  "command",	  "url",	  "(u:url):bat[:str,:str] ",												  "URLgetQueryArg;"				  ]
[ "getQuery",				  "command",	  "url",	  "(u:url):str ",													  "URLgetQuery;"				  ]
[ "getProtocol",			  "command",	  "url",	  "(u:url):str ",													  "URLgetProtocol;"				  ]
[ "getPort",				  "command",	  "url",	  "(u:url):str ",													  "URLgetPort;"					  ]
[ "getHost",				  "command",	  "url",	  "(u:url):str ",													  "URLgetHost;"					  ]
[ "getFile",				  "command",	  "url",	  "(u:url):str ",													  "URLgetFile;"					  ]
[ "getExtension",			  "command",	  "url",	  "(u:url):str ",													  "URLgetExtension;"				  ]
[ "getDomain",				  "command",	  "url",	  "(u:url):str ",													  "URLgetDomain;"				  ]
[ "getDirectory",			  "command",	  "url",	  "(u:url):bat[:int,:str] ",												  "URLgetDirectory;"				  ]
[ "getContext",				  "command",	  "url",	  "(u:url):str ",													  "URLgetContext;"				  ]
[ "getContent",				  "command",	  "url",	  "(u:url):str ",													  "URLgetContent;"				  ]
[ "getBasename",			  "command",	  "url",	  "(u:url):str ",													  "URLgetBasename;"				  ]
[ "getAnchor",				  "command",	  "url",	  "(u:url):str ",													  "URLgetAnchor;"				  ]
[ "isaURL",				  "command",	  "url",	  "(u:url):bit ",													  "URLisaURL;"					  ]
[ "new",				  "command",	  "url",	  "(prot:str,host:str,fnme:str):url ",											  "URLnew3;"					  ]
[ "new",				  "command",	  "url",	  "(p:str,h:str,prt:int,f:str):url ",											  "URLnew4;"					  ]
[ "#tostr",				  "command",	  "url",	  "():str ",														  "URLtoString;"				  ]
[ "url",				  "command",	  "url",	  "(s:str):url ",													  "URLnew;"					  ]
[ "+",					  "command",	  "str",	  "(l:str,r:str):str ",													  "STRConcat;"					  ]
[ "STRepilogue",			  "command",	  "str",	  "():void ",														  "strEpilogue;"				  ]
[ "STRprelude",				  "command",	  "str",	  "():void ",														  "strPrelude;"					  ]
[ "ascii",				  "command",	  "str",	  "(s:str):int ",													  "STRascii;"					  ]
[ "codeset",				  "command",	  "str",	  "():str ",														  "STRcodeset;"					  ]
[ "chrAt",				  "command",	  "str",	  "(s:str,index:int):chr ",												  "STRChrAt;"					  ]
[ "endsWith",				  "command",	  "str",	  "(s:str,suffix:str):bit ",												  "STRSuffix;"					  ]
[ "insert",				  "command",	  "str",	  "(s:str,start:int,l:int,s2:str):str ",										  "STRinsert;"					  ]
[ "iconv",				  "command",	  "str",	  "(org:str,fromCs:str,toCs:str):str ",											  "STRIconv;"					  ]
[ "locate",				  "command",	  "str",	  "(s1:str,s2:str,start:int):void ",											  "STRlocate2;"					  ]
[ "locate",				  "command",	  "str",	  "(s1:str,s2:str):int ",												  "STRlocate;"					  ]
[ "like",				  "command",	  "str",	  "(s:str,pat:str,esc:str):bit ",											  "STRlikewrap;"				  ]
[ "like",				  "command",	  "str",	  "(s:str,pat:str):bit ",												  "STRlikewrap2;"				  ]
[ "ltrim",				  "command",	  "str",	  "(s:str):str ",													  "STRLtrim;"					  ]
[ "length",				  "command",	  "str",	  "(s:str):int ",													  "STRLength;"					  ]
[ "nbytes",				  "command",	  "str",	  "(s:str):int ",													  "STRBytes;"					  ]
[ "prefix",				  "command",	  "str",	  "(s:str,l:int):str ",													  "STRprefix;"					  ]
[ "repeat",				  "command",	  "str",	  "(s2:str,c:int):str ",												  "STRrepeat;"					  ]
[ "replace",				  "command",	  "str",	  "(s:str,pat:str,s2:str):str ",											  "STRreplace;"					  ]
[ "rtrim",				  "command",	  "str",	  "(s:str):str ",													  "STRRtrim;"					  ]
[ "r_search",				  "command",	  "str",	  "(s:str,c:chr):int ",													  "STRReverseChrSearch;"			  ]
[ "r_search",				  "command",	  "str",	  "(s:str,c:str):int ",													  "STRReverseStrSearch;"			  ]
[ "space",				  "command",	  "str",	  "(l:int):str ",													  "STRspace;"					  ]
[ "stringright",			  "command",	  "str",	  "(s:str,l:int):str ",													  "STRsuffix;"					  ]
[ "stringleft",				  "command",	  "str",	  "(s:str,l:int):str ",													  "STRprefix;"					  ]
[ "suffix",				  "command",	  "str",	  "(s:str,l:int):str ",													  "STRsuffix;"					  ]
[ "substring",				  "command",	  "str",	  "(s:str,start:int,len:int):str ",											  "STRsubstring;"				  ]
[ "substring",				  "command",	  "str",	  "(s:str,start:int):str ",												  "STRsubstringTail;"				  ]
[ "substitute",				  "command",	  "str",	  "(s:str,src:str,dst:str,rep:bit):str ",										  "STRSubstitute;"				  ]
[ "search",				  "command",	  "str",	  "(s:str,c:chr):int ",													  "STRchrSearch;"				  ]
[ "search",				  "command",	  "str",	  "(s:str,c:str):int ",													  "STRstrSearch;"				  ]
[ "startsWith",				  "command",	  "str",	  "(s:str,prefix:str):bit ",												  "STRPrefix;"					  ]
[ "stringlength",			  "command",	  "str",	  "(s:str):int ",													  "STRstringLength;"				  ]
[ "string",				  "command",	  "str",	  "(s:str,offset:int,count:int):str ",											  "STRSubString;"				  ]
[ "string",				  "command",	  "str",	  "(s:str,offset:int):str ",												  "STRTail;"					  ]
[ "str",				  "command",	  "str",	  "(s:str):str ",													  "STRtostr;"					  ]
[ "trim",				  "command",	  "str",	  "(s:str):str ",													  "STRStrip;"					  ]
[ "toUpper",				  "command",	  "str",	  "(s:str):str ",													  "STRUpper;"					  ]
[ "toLower",				  "command",	  "str",	  "(s:str):str ",													  "STRLower;"					  ]
[ "unicode",				  "command",	  "str",	  "(wchar:int):str ",													  "STRFromWChr;"				  ]
[ "unicodeAt",				  "command",	  "str",	  "(s:str,index:int):int ",												  "STRWChrAt;"					  ]
[ "blue",				  "command",	  "color",	  "(c:color):int ",													  "CLRblue;"					  ]
[ "cb",					  "command",	  "color",	  "(c:color):int ",													  "CLRcb;"					  ]
[ "cr",					  "command",	  "color",	  "(c:color):int ",													  "CLRcr;"					  ]
[ "color",				  "command",	  "color",	  "(s:str):color ",													  "CLRcolor;"					  ]
[ "#fromstr",				  "command",	  "color",	  "():color ",														  "color_fromstr;"				  ]
[ "green",				  "command",	  "color",	  "(c:color):int ",													  "CLRgreen;"					  ]
[ "hue",				  "command",	  "color",	  "(c:color):flt ",													  "CLRhue;"					  ]
[ "hsv",				  "command",	  "color",	  "(h:flt,s:flt,v:flt):color ",												  "CLRhsv;"					  ]
[ "hue",				  "command",	  "color",	  "(c:color):int ",													  "CLRhueInt;"					  ]
[ "luminance",				  "command",	  "color",	  "(c:color):int ",													  "CLRluminance;"				  ]
[ "printf",				  "command",	  "color",	  "(s:str,c:color):void ",												  "CLRprintf2;"					  ]
[ "print",				  "command",	  "color",	  "(c:color):void ",													  "CLRprintf;"					  ]
[ "red",				  "command",	  "color",	  "(c:color):int ",													  "CLRred;"					  ]
[ "rgb",				  "command",	  "color",	  "(r:int,g:int,b:int):color ",												  "CLRrgb;"					  ]
[ "saturation",				  "command",	  "color",	  "(c:color):flt ",													  "CLRsaturation;"				  ]
[ "saturation",				  "command",	  "color",	  "(c:color):int ",													  "CLRsaturationInt;"				  ]
[ "str",				  "command",	  "color",	  "(s:color):str ",													  "CLRstr;"					  ]
[ "#tostr",				  "command",	  "color",	  "():str ",														  "color_tostr;"				  ]
[ "value",				  "command",	  "color",	  "(c:color):flt ",													  "CLRvalue;"					  ]
[ "value",				  "command",	  "color",	  "(c:color):int ",													  "CLRvalueInt;"				  ]
[ "ycc",				  "command",	  "color",	  "(y:int,cr:int,cb:int):color ",											  "CLRycc;"					  ]
[ "blob",				  "command",	  "blob",	  "(s:str):blob ",													  "BLOBblob_fromstr;"				  ]
[ "blob",				  "command",	  "blob",	  "(s:blob):blob ",													  "BLOBblob_blob;"				  ]
[ "#convert",				  "command",	  "blob",	  "():void ",														  "BLOBconvert;"				  ]
[ "#del",				  "command",	  "blob",	  "():void ",														  "BLOBdel;"					  ]
[ "#fromstr",				  "command",	  "blob",	  "():void ",														  "BLOBfromstr;"				  ]
[ "#heap",				  "command",	  "blob",	  "():void ",														  "BLOBheap;"					  ]
[ "#hash",				  "command",	  "blob",	  "():void ",														  "BLOBhash;"					  ]
[ "#length",				  "command",	  "blob",	  "():void ",														  "BLOBlength;"					  ]
[ "nitems",				  "command",	  "blob",	  "(b:blob):int ",													  "BLOBnitems;"					  ]
[ "#null",				  "command",	  "blob",	  "():void ",														  "BLOBnull;"					  ]
[ "#nequal",				  "command",	  "blob",	  "():void ",														  "BLOBnequal;"					  ]
[ "prelude",				  "command",	  "blob",	  "():void ",														  "BLOBprelude;"				  ]
[ "#put",				  "command",	  "blob",	  "():void ",														  "BLOBput;"					  ]
[ "#read",				  "command",	  "blob",	  "():void ",														  "BLOBread;"					  ]
[ "toblob",				  "command",	  "blob",	  "(v:str):blob ",													  "BLOBtoblob;"					  ]
[ "tostring",				  "command",	  "blob",	  "(v:blob,index:int):str ",												  "BLOBfromidx;"				  ]
[ "tostring",				  "command",	  "blob",	  "(v:blob):str ",													  "BLOBfromblob;"				  ]
[ "#tostr",				  "command",	  "blob",	  "():void ",														  "BLOBtostr;"					  ]
[ "#write",				  "command",	  "blob",	  "():void ",														  "BLOBwrite;"					  ]
[ "#fromstr",				  "command",	  "sqlblob",	  "():void ",														  "SQLBLOBfromstr;"				  ]
[ "sqlblob",				  "command",	  "sqlblob",	  "(s:str):sqlblob ",													  "BLOBsqlblob_fromstr;"			  ]
[ "sqlblob",				  "command",	  "sqlblob",	  "(s:sqlblob):sqlblob ",												  "BLOBblob_blob;"				  ]
[ "#tostr",				  "command",	  "sqlblob",	  "():void ",														  "SQLBLOBtostr;"				  ]
[ "bulk_rotate_xor_hash",		  "command",	  "mkey",	  "(h:bat[:oid,:int],nbits:int,b:bat[:oid,:any_1]):bat[:oid,:int] ",							  "MKEYbulk_rotate_xor_hash;"			  ]
[ "bulk_rotate_xor_hash",		  "pattern",	  "mkey",	  "(h:int,nbits:int,v:any):int ",											  "MKEYrotate_xor_hash;"			  ]
[ "hash",				  "command",	  "mkey",	  "(v:str):int ",													  "MKEYhash_str;"				  ]
[ "hash",				  "command",	  "mkey",	  "(v:lng):int ",													  "MKEYhash_lng;"				  ]
[ "hash",				  "command",	  "mkey",	  "(v:dbl):int ",													  "MKEYhash_dbl;"				  ]
[ "hash",				  "command",	  "mkey",	  "(v:flt):int ",													  "MKEYhash_flt;"				  ]
[ "hash",				  "command",	  "mkey",	  "(v:int):int ",													  "MKEYhash_int;"				  ]
[ "hash",				  "command",	  "mkey",	  "(v:sht):int ",													  "MKEYhash_sht;"				  ]
[ "hash",				  "command",	  "mkey",	  "(v:chr):int ",													  "MKEYhash_chr;"				  ]
[ "hash",				  "pattern",	  "mkey",	  "(v:any):int ",													  "MKEYhash;"					  ]
[ "rotate",				  "command",	  "mkey",	  "(v:int,nbits:int):int ",												  "MKEYrotate;"					  ]
[ "dequeue_max",			  "command",	  "pqueue",	  "(h:bat[:oid,:dbl]):void ",												  "PQdequeue_dblmax;"				  ]
[ "dequeue_min",			  "command",	  "pqueue",	  "(h:bat[:oid,:dbl]):void ",												  "PQdequeue_dblmin;"				  ]
[ "dequeue_max",			  "command",	  "pqueue",	  "(h:bat[:oid,:flt]):void ",												  "PQdequeue_fltmax;"				  ]
[ "dequeue_min",			  "command",	  "pqueue",	  "(h:bat[:oid,:flt]):void ",												  "PQdequeue_fltmin;"				  ]
[ "dequeue_max",			  "command",	  "pqueue",	  "(h:bat[:oid,:lng]):void ",												  "PQdequeue_lngmax;"				  ]
[ "dequeue_min",			  "command",	  "pqueue",	  "(h:bat[:oid,:lng]):void ",												  "PQdequeue_lngmin;"				  ]
[ "dequeue_max",			  "command",	  "pqueue",	  "(h:bat[:oid,:ptr]):void ",												  "PQdequeue_ptrmax;"				  ]
[ "dequeue_min",			  "command",	  "pqueue",	  "(h:bat[:oid,:ptr]):void ",												  "PQdequeue_ptrmin;"				  ]
[ "dequeue_max",			  "command",	  "pqueue",	  "(h:bat[:oid,:oid]):void ",												  "PQdequeue_oidmax;"				  ]
[ "dequeue_min",			  "command",	  "pqueue",	  "(h:bat[:oid,:oid]):void ",												  "PQdequeue_oidmin;"				  ]
[ "dequeue_max",			  "command",	  "pqueue",	  "(h:bat[:oid,:int]):void ",												  "PQdequeue_intmax;"				  ]
[ "dequeue_min",			  "command",	  "pqueue",	  "(h:bat[:oid,:int]):void ",												  "PQdequeue_intmin;"				  ]
[ "dequeue_max",			  "command",	  "pqueue",	  "(h:bat[:oid,:sht]):void ",												  "PQdequeue_shtmax;"				  ]
[ "dequeue_min",			  "command",	  "pqueue",	  "(h:bat[:oid,:sht]):void ",												  "PQdequeue_shtmin;"				  ]
[ "dequeue_max",			  "command",	  "pqueue",	  "(h:bat[:oid,:chr]):void ",												  "PQdequeue_chrmax;"				  ]
[ "dequeue_min",			  "command",	  "pqueue",	  "(h:bat[:oid,:chr]):void ",												  "PQdequeue_chrmin;"				  ]
[ "dequeue_max",			  "command",	  "pqueue",	  "(h:bat[:oid,:any_1]):void ",												  "PQdequeue_anymax;"				  ]
[ "dequeue_min",			  "command",	  "pqueue",	  "(h:bat[:oid,:any_1]):void ",												  "PQdequeue_anymin;"				  ]
[ "enqueue_max",			  "command",	  "pqueue",	  "(h:bat[:oid,:dbl],id:oid,value:dbl):void ",										  "PQenqueue_dblmax;"				  ]
[ "enqueue_min",			  "command",	  "pqueue",	  "(h:bat[:oid,:dbl],id:oid,value:dbl):void ",										  "PQenqueue_dblmin;"				  ]
[ "enqueue_max",			  "command",	  "pqueue",	  "(h:bat[:oid,:flt],id:oid,value:flt):void ",										  "PQenqueue_fltmax;"				  ]
[ "enqueue_min",			  "command",	  "pqueue",	  "(h:bat[:oid,:flt],id:oid,value:flt):void ",										  "PQenqueue_fltmin;"				  ]
[ "enqueue_max",			  "command",	  "pqueue",	  "(h:bat[:oid,:lng],id:oid,value:lng):void ",										  "PQenqueue_lngmax;"				  ]
[ "enqueue_min",			  "command",	  "pqueue",	  "(h:bat[:oid,:lng],id:oid,value:lng):void ",										  "PQenqueue_lngmin;"				  ]
[ "enqueue_max",			  "command",	  "pqueue",	  "(h:bat[:oid,:ptr],id:oid,value:ptr):void ",										  "PQenqueue_ptrmax;"				  ]
[ "enqueue_min",			  "command",	  "pqueue",	  "(h:bat[:oid,:ptr],id:oid,value:ptr):void ",										  "PQenqueue_ptrmin;"				  ]
[ "enqueue_max",			  "command",	  "pqueue",	  "(h:bat[:oid,:oid],id:oid,value:oid):void ",										  "PQenqueue_oidmax;"				  ]
[ "enqueue_min",			  "command",	  "pqueue",	  "(h:bat[:oid,:oid],id:oid,value:oid):void ",										  "PQenqueue_oidmin;"				  ]
[ "enqueue_max",			  "command",	  "pqueue",	  "(h:bat[:oid,:int],id:oid,value:int):void ",										  "PQenqueue_intmax;"				  ]
[ "enqueue_min",			  "command",	  "pqueue",	  "(h:bat[:oid,:int],id:oid,value:int):void ",										  "PQenqueue_intmin;"				  ]
[ "enqueue_max",			  "command",	  "pqueue",	  "(h:bat[:oid,:sht],id:oid,value:sht):void ",										  "PQenqueue_shtmax;"				  ]
[ "enqueue_min",			  "command",	  "pqueue",	  "(h:bat[:oid,:sht],id:oid,value:sht):void ",										  "PQenqueue_shtmin;"				  ]
[ "enqueue_max",			  "command",	  "pqueue",	  "(h:bat[:oid,:chr],id:oid,value:chr):void ",										  "PQenqueue_chrmax;"				  ]
[ "enqueue_min",			  "command",	  "pqueue",	  "(h:bat[:oid,:chr],id:oid,value:chr):void ",										  "PQenqueue_chrmin;"				  ]
[ "enqueue_max",			  "pattern",	  "pqueue",	  "(h:bat[:oid,:any_1],id:oid,value:any_1):void ",									  "PQenqueue_anymax;"				  ]
[ "enqueue_min",			  "pattern",	  "pqueue",	  "(h:bat[:oid,:any_1],id:oid,value:any_1):void ",									  "PQenqueue_anymin;"				  ]
[ "init",				  "command",	  "pqueue",	  "(a:bat[:void,:any_1],maxsize:int):bat[:oid,:any_1] ",								  "PQinit;"					  ]
[ "topn_max",				  "command",	  "pqueue",	  "(t:bat[:void,:dbl],n:int):bat[:oid,:dbl] ",										  "PQtopn_voiddblmax;"				  ]
[ "topn_max",				  "command",	  "pqueue",	  "(t:bat[:oid,:dbl],n:int):bat[:oid,:dbl] ",										  "PQtopn_dblmax;"				  ]
[ "topreplace_max",			  "command",	  "pqueue",	  "(h:bat[:oid,:dbl],id:oid,value:dbl):void ",										  "PQtopreplace_dblmax;"			  ]
[ "topn_min",				  "command",	  "pqueue",	  "(t:bat[:void,:dbl],n:int):bat[:oid,:dbl] ",										  "PQtopn_voiddblmin;"				  ]
[ "topn_min",				  "command",	  "pqueue",	  "(t:bat[:oid,:dbl],n:int):bat[:oid,:dbl] ",										  "PQtopn_dblmin;"				  ]
[ "topreplace_min",			  "command",	  "pqueue",	  "(h:bat[:oid,:dbl],id:oid,value:dbl):void ",										  "PQtopreplace_dblmin;"			  ]
[ "topn_max",				  "command",	  "pqueue",	  "(t:bat[:void,:flt],n:int):bat[:oid,:flt] ",										  "PQtopn_voidfltmax;"				  ]
[ "topn_max",				  "command",	  "pqueue",	  "(t:bat[:oid,:flt],n:int):bat[:oid,:flt] ",										  "PQtopn_fltmax;"				  ]
[ "topreplace_max",			  "command",	  "pqueue",	  "(h:bat[:oid,:flt],id:oid,value:flt):void ",										  "PQtopreplace_fltmax;"			  ]
[ "topn_min",				  "command",	  "pqueue",	  "(t:bat[:void,:flt],n:int):bat[:oid,:flt] ",										  "PQtopn_voidfltmin;"				  ]
[ "topn_min",				  "command",	  "pqueue",	  "(t:bat[:oid,:flt],n:int):bat[:oid,:flt] ",										  "PQtopn_fltmin;"				  ]
[ "topreplace_min",			  "command",	  "pqueue",	  "(h:bat[:oid,:flt],id:oid,value:flt):void ",										  "PQtopreplace_fltmin;"			  ]
[ "topn_max",				  "command",	  "pqueue",	  "(t:bat[:void,:lng],n:int):bat[:oid,:lng] ",										  "PQtopn_voidlngmax;"				  ]
[ "topn_max",				  "command",	  "pqueue",	  "(t:bat[:oid,:lng],n:int):bat[:oid,:lng] ",										  "PQtopn_lngmax;"				  ]
[ "topreplace_max",			  "command",	  "pqueue",	  "(h:bat[:oid,:lng],id:oid,value:lng):void ",										  "PQtopreplace_lngmax;"			  ]
[ "topn_min",				  "command",	  "pqueue",	  "(t:bat[:void,:lng],n:int):bat[:oid,:lng] ",										  "PQtopn_voidlngmin;"				  ]
[ "topn_min",				  "command",	  "pqueue",	  "(t:bat[:oid,:lng],n:int):bat[:oid,:lng] ",										  "PQtopn_lngmin;"				  ]
[ "topreplace_min",			  "command",	  "pqueue",	  "(h:bat[:oid,:lng],id:oid,value:lng):void ",										  "PQtopreplace_lngmin;"			  ]
[ "topn_max",				  "command",	  "pqueue",	  "(t:bat[:void,:ptr],n:int):bat[:oid,:ptr] ",										  "PQtopn_voidptrmax;"				  ]
[ "topn_max",				  "command",	  "pqueue",	  "(t:bat[:oid,:ptr],n:int):bat[:oid,:ptr] ",										  "PQtopn_ptrmax;"				  ]
[ "topreplace_max",			  "command",	  "pqueue",	  "(h:bat[:oid,:ptr],id:oid,value:ptr):void ",										  "PQtopreplace_ptrmax;"			  ]
[ "topn_min",				  "command",	  "pqueue",	  "(t:bat[:void,:ptr],n:int):bat[:oid,:ptr] ",										  "PQtopn_voidptrmin;"				  ]
[ "topn_min",				  "command",	  "pqueue",	  "(t:bat[:oid,:ptr],n:int):bat[:oid,:ptr] ",										  "PQtopn_ptrmin;"				  ]
[ "topreplace_min",			  "command",	  "pqueue",	  "(h:bat[:oid,:ptr],id:oid,value:ptr):void ",										  "PQtopreplace_ptrmin;"			  ]
[ "topn_max",				  "command",	  "pqueue",	  "(t:bat[:void,:oid],n:int):bat[:oid,:oid] ",										  "PQtopn_voidoidmax;"				  ]
[ "topn_max",				  "command",	  "pqueue",	  "(t:bat[:oid,:oid],n:int):bat[:oid,:oid] ",										  "PQtopn_oidmax;"				  ]
[ "topreplace_max",			  "command",	  "pqueue",	  "(h:bat[:oid,:oid],id:oid,value:oid):void ",										  "PQtopreplace_oidmax;"			  ]
[ "topn_min",				  "command",	  "pqueue",	  "(t:bat[:void,:oid],n:int):bat[:oid,:oid] ",										  "PQtopn_voidoidmin;"				  ]
[ "topn_min",				  "command",	  "pqueue",	  "(t:bat[:oid,:oid],n:int):bat[:oid,:oid] ",										  "PQtopn_oidmin;"				  ]
[ "topreplace_min",			  "command",	  "pqueue",	  "(h:bat[:oid,:oid],id:oid,value:oid):void ",										  "PQtopreplace_oidmin;"			  ]
[ "topn_max",				  "command",	  "pqueue",	  "(t:bat[:void,:int],n:int):bat[:oid,:int] ",										  "PQtopn_voidintmax;"				  ]
[ "topn_max",				  "command",	  "pqueue",	  "(t:bat[:oid,:int],n:int):bat[:oid,:int] ",										  "PQtopn_intmax;"				  ]
[ "topreplace_max",			  "command",	  "pqueue",	  "(h:bat[:oid,:int],id:oid,value:int):void ",										  "PQtopreplace_intmax;"			  ]
[ "topn_min",				  "command",	  "pqueue",	  "(t:bat[:void,:int],n:int):bat[:oid,:int] ",										  "PQtopn_voidintmin;"				  ]
[ "topn_min",				  "command",	  "pqueue",	  "(t:bat[:oid,:int],n:int):bat[:oid,:int] ",										  "PQtopn_intmin;"				  ]
[ "topreplace_min",			  "command",	  "pqueue",	  "(h:bat[:oid,:int],id:oid,value:int):void ",										  "PQtopreplace_intmin;"			  ]
[ "topn_max",				  "command",	  "pqueue",	  "(t:bat[:void,:sht],n:int):bat[:oid,:sht] ",										  "PQtopn_voidshtmax;"				  ]
[ "topn_max",				  "command",	  "pqueue",	  "(t:bat[:oid,:sht],n:int):bat[:oid,:sht] ",										  "PQtopn_shtmax;"				  ]
[ "topreplace_max",			  "command",	  "pqueue",	  "(h:bat[:oid,:sht],id:oid,value:sht):void ",										  "PQtopreplace_shtmax;"			  ]
[ "topn_min",				  "command",	  "pqueue",	  "(t:bat[:void,:sht],n:int):bat[:oid,:sht] ",										  "PQtopn_voidshtmin;"				  ]
[ "topn_min",				  "command",	  "pqueue",	  "(t:bat[:oid,:sht],n:int):bat[:oid,:sht] ",										  "PQtopn_shtmin;"				  ]
[ "topreplace_min",			  "command",	  "pqueue",	  "(h:bat[:oid,:sht],id:oid,value:sht):void ",										  "PQtopreplace_shtmin;"			  ]
[ "topn_max",				  "command",	  "pqueue",	  "(t:bat[:void,:chr],n:int):bat[:oid,:chr] ",										  "PQtopn_voidchrmax;"				  ]
[ "topn_max",				  "command",	  "pqueue",	  "(t:bat[:oid,:chr],n:int):bat[:oid,:chr] ",										  "PQtopn_chrmax;"				  ]
[ "topreplace_max",			  "command",	  "pqueue",	  "(h:bat[:oid,:chr],id:oid,value:chr):void ",										  "PQtopreplace_chrmax;"			  ]
[ "topn_min",				  "command",	  "pqueue",	  "(t:bat[:void,:chr],n:int):bat[:oid,:chr] ",										  "PQtopn_voidchrmin;"				  ]
[ "topn_min",				  "command",	  "pqueue",	  "(t:bat[:oid,:chr],n:int):bat[:oid,:chr] ",										  "PQtopn_chrmin;"				  ]
[ "topreplace_min",			  "command",	  "pqueue",	  "(h:bat[:oid,:chr],id:oid,value:chr):void ",										  "PQtopreplace_chrmin;"			  ]
[ "topn_max",				  "command",	  "pqueue",	  "(t:bat[:void,:any_1],n:int):bat[:oid,:any_1] ",									  "PQtopn_voidanymax;"				  ]
[ "topn_max",				  "command",	  "pqueue",	  "(t:bat[:oid,:any_1],n:int):bat[:oid,:any_1] ",									  "PQtopn_anymax;"				  ]
[ "topreplace_max",			  "pattern",	  "pqueue",	  "(h:bat[:oid,:any_1],id:oid,value:any_1):void ",									  "PQtopreplace_anymax;"			  ]
[ "topn_min",				  "command",	  "pqueue",	  "(t:bat[:void,:any_1],n:int):bat[:oid,:any_1] ",									  "PQtopn_voidanymin;"				  ]
[ "topn_min",				  "command",	  "pqueue",	  "(t:bat[:oid,:any_1],n:int):bat[:oid,:any_1] ",									  "PQtopn_anymin;"				  ]
[ "topreplace_min",			  "pattern",	  "pqueue",	  "(h:bat[:oid,:any_1],id:oid,value:any_1):void ",									  "PQtopreplace_anymin;"			  ]
[ "grid",				  "command",	  "array",	  "(b:bat[:oid,:lng],i:lng,j:lng,k:lng,l:lng,s:lng):bat[:oid,:lng] ",							  "ARRAYgridBAT_lng;"				  ]
[ "grid",				  "command",	  "array",	  "(b:bat[:oid,:lng],i:lng,j:lng,k:lng,l:lng):bat[:oid,:lng] ",								  "ARRAYgridBAT_lng;"				  ]
[ "grid",				  "command",	  "array",	  "(i:lng,j:lng,k:lng,l:lng,s:lng):bat[:oid,:lng] ",									  "ARRAYgridShift_lng;"				  ]
[ "grid",				  "command",	  "array",	  "(i:lng,j:lng,k:lng,l:lng):bat[:oid,:lng] ",										  "ARRAYgrid_lng;"				  ]
[ "grid",				  "command",	  "array",	  "(b:bat[:oid,:int],i:int,j:int,k:int,l:int,s:int):bat[:oid,:int] ",							  "ARRAYgridBAT_int;"				  ]
[ "grid",				  "command",	  "array",	  "(b:bat[:oid,:int],i:int,j:int,k:int,l:int):bat[:oid,:int] ",								  "ARRAYgridBAT_int;"				  ]
[ "grid",				  "command",	  "array",	  "(i:int,j:int,k:int,l:int,s:int):bat[:oid,:int] ",									  "ARRAYgridShift_int;"				  ]
[ "grid",				  "command",	  "array",	  "(i:int,j:int,k:int,l:int):bat[:oid,:int] ",										  "ARRAYgrid_int;"				  ]
[ "print",				  "pattern",	  "array",	  "(a:bat[:any_1,:any_2],b:bat[:any_1,:int]...):void ",									  "ARRAYprint;"					  ]
[ "project",				  "command",	  "array",	  "(b:bat[:oid,:any_1],i:int):bat[:oid,:int] ",										  "ARRAYproject;"				  ]
[ "product",				  "command",	  "array",	  "(b:bat[:any_3,:any_1],c:bat[:any_4,:any_2]):bat[:any_1,:any_2] ",							  "ARRAYproduct;"				  ]
[ "avg",				  "command",	  "group",	  "(b:bat[:any_2,:dbl],e:bat[:any_2,:any_1]):bat[:any_2,:dbl] ",							  "GRPavg_dbl;"					  ]
[ "avg",				  "command",	  "group",	  "(b:bat[:any_2,:flt],e:bat[:any_2,:any_1]):bat[:any_2,:flt] ",							  "GRPavg_flt;"					  ]
[ "avg",				  "command",	  "group",	  "(b:bat[:any_2,:lng],e:bat[:any_2,:any_1]):bat[:any_2,:lng] ",							  "GRPavg_lng;"					  ]
[ "avg",				  "command",	  "group",	  "(b:bat[:any_2,:int],e:bat[:any_2,:any_1]):bat[:any_2,:int] ",							  "GRPavg_int;"					  ]
[ "avg",				  "command",	  "group",	  "(b:bat[:any_2,:sht],e:bat[:any_2,:any_1]):bat[:any_2,:sht] ",							  "GRPavg_sht;"					  ]
[ "count",				  "command",	  "group",	  "(b:bat[:any_2,:any_1],e:bat[:any_2,:any_3],nonils:bit):bat[:any_2,:int] ",						  "GRPaggr_count;"				  ]
[ "derive",				  "command",	  "group",	  "(histo:bat[:void,:int],map:bat[:void,:oid],attr:bat[:oid,:any_2]) (hist:bat[:oid,:int],grp:bat[:oid,:oid]) ",	  "GRPderive;"					  ]
[ "derive",				  "command",	  "group",	  "(hist:bat[:any_1,:int],map:bat[:any_1,:oid],attr:bat[:any_1,:any_2]) (histo:bat[:any_1,:int],grp:bat[:any_1,:oid]) ",  "GRPderive;"					  ]
[ "max",				  "command",	  "group",	  "(b:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "GRPmax_oid_dbl;"				  ]
[ "min",				  "command",	  "group",	  "(b:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "GRPmin_oid_dbl;"				  ]
[ "max",				  "command",	  "group",	  "(b:bat[:oid,:flt]):bat[:oid,:flt] ",											  "GRPmax_oid_flt;"				  ]
[ "min",				  "command",	  "group",	  "(b:bat[:oid,:flt]):bat[:oid,:flt] ",											  "GRPmin_oid_flt;"				  ]
[ "max",				  "command",	  "group",	  "(b:bat[:oid,:lng]):bat[:oid,:lng] ",											  "GRPmax_oid_lng;"				  ]
[ "min",				  "command",	  "group",	  "(b:bat[:oid,:lng]):bat[:oid,:lng] ",											  "GRPmin_oid_lng;"				  ]
[ "max",				  "command",	  "group",	  "(b:bat[:oid,:int]):bat[:oid,:int] ",											  "GRPmax_oid_int;"				  ]
[ "min",				  "command",	  "group",	  "(b:bat[:oid,:int]):bat[:oid,:int] ",											  "GRPmin_oid_int;"				  ]
[ "max",				  "command",	  "group",	  "(b:bat[:oid,:sht]):bat[:oid,:sht] ",											  "GRPmax_oid_sht;"				  ]
[ "min",				  "command",	  "group",	  "(b:bat[:oid,:sht]):bat[:oid,:sht] ",											  "GRPmin_oid_sht;"				  ]
[ "max",				  "command",	  "group",	  "(b:bat[:oid,:oid]):bat[:oid,:oid] ",											  "GRPmax_oid_oid;"				  ]
[ "min",				  "command",	  "group",	  "(b:bat[:oid,:oid]):bat[:oid,:oid] ",											  "GRPmin_oid_oid;"				  ]
[ "max",				  "command",	  "group",	  "(b:bat[:any_2,:any_1],e:bat[:any_2,:any_3]):bat[:any_2,:any_1] ",							  "GRPmax;"					  ]
[ "min",				  "command",	  "group",	  "(b:bat[:any_2,:any_1],e:bat[:any_2,:any_3]):bat[:any_2,:any_1] ",							  "GRPmin;"					  ]
[ "new",				  "command",	  "group",	  "(attr:bat[:any_1,:any_2],N:int,rng:int) (histo:bat[:any_1,:int],grp:bat[:any_1,:oid]) ",				  "GRPgroup_custom;"				  ]
[ "new",				  "command",	  "group",	  "(attr:bat[:any_1,:any_2]) (histo:bat[:any_1,:int],grp:bat[:any_1,:oid]) ",						  "GRPgroup;"					  ]
[ "new",				  "command",	  "group",	  "(attr:bat[:any_1,:any_2]) (histo:bat[:any_1,:int],grp:bat[:any_1,:void]) ",						  "GRPgroup;"					  ]
[ "new",				  "command",	  "group",	  "(b:bat[:any_1,:any_2],start:int,incr:int,grpsize:int):bat[:any_1,:int] ",						  "GRPgroup0;"					  ]
[ "prelude",				  "command",	  "group",	  "():void ",														  "GRPprelude;"					  ]
[ "refine_reverse",			  "command",	  "group",	  "(b:bat[:any_2,:any_3],a:bat[:any_2,:any_1]):bat[:any_2,:oid] ",							  "GRPrefine_rev;"				  ]
[ "refine",				  "command",	  "group",	  "(b:bat[:void,:any_3],a:bat[:oid,:any_1]):bat[:oid,:oid] ",								  "GRPrefine;"					  ]
[ "refine",				  "command",	  "group",	  "(b:bat[:oid,:any_3],a:bat[:void,:any_1]):bat[:oid,:oid] ",								  "GRPrefine;"					  ]
[ "refine",				  "command",	  "group",	  "(b:bat[:any_2,:any_3],a:bat[:any_2,:any_1]):bat[:any_2,:oid] ",							  "GRPrefine;"					  ]
[ "size",				  "command",	  "group",	  "(b:bat[:any_2,:bit],e:bat[:any_2,:any_1]):bat[:any_2,:int] ",							  "GRPsize;"					  ]
[ "sum",				  "command",	  "group",	  "(b:bat[:any_2,:dbl],size:int,shift:int):bat[:any_2,:dbl] ",								  "GRPslidingsum_dbl;"				  ]
[ "sum",				  "command",	  "group",	  "(b:bat[:any_2,:dbl],size:int):bat[:any_2,:dbl] ",									  "GRPwindowsum_dbl;"				  ]
[ "sum",				  "command",	  "group",	  "(b:bat[:any_2,:dbl],e:bat[:any_2,:any_1]):bat[:any_2,:dbl] ",							  "GRPsum_dbl;"					  ]
[ "sum",				  "command",	  "group",	  "(b:bat[:any_2,:flt],size:int,shift:int):bat[:any_2,:flt] ",								  "GRPslidingsum_flt;"				  ]
[ "sum",				  "command",	  "group",	  "(b:bat[:any_2,:flt],size:int):bat[:any_2,:flt] ",									  "GRPwindowsum_flt;"				  ]
[ "sum",				  "command",	  "group",	  "(b:bat[:any_2,:flt],e:bat[:any_2,:any_1]):bat[:any_2,:flt] ",							  "GRPsum_flt;"					  ]
[ "sum",				  "command",	  "group",	  "(b:bat[:any_2,:lng],size:int,shift:int):bat[:any_2,:lng] ",								  "GRPslidingsum_lng;"				  ]
[ "sum",				  "command",	  "group",	  "(b:bat[:any_2,:lng],size:int):bat[:any_2,:lng] ",									  "GRPwindowsum_lng;"				  ]
[ "sum",				  "command",	  "group",	  "(b:bat[:any_2,:lng],e:bat[:any_2,:any_1]):bat[:any_2,:lng] ",							  "GRPsum_lng;"					  ]
[ "sum",				  "command",	  "group",	  "(b:bat[:any_2,:int],size:int,shift:int):bat[:any_2,:int] ",								  "GRPslidingsum_int;"				  ]
[ "sum",				  "command",	  "group",	  "(b:bat[:any_2,:int],size:int):bat[:any_2,:int] ",									  "GRPwindowsum_int;"				  ]
[ "sum",				  "command",	  "group",	  "(b:bat[:any_2,:int],e:bat[:any_2,:any_1]):bat[:any_2,:int] ",							  "GRPsum_int;"					  ]
[ "sum",				  "command",	  "group",	  "(b:bat[:any_2,:sht],size:int,shift:int):bat[:any_2,:sht] ",								  "GRPslidingsum_sht;"				  ]
[ "sum",				  "command",	  "group",	  "(b:bat[:any_2,:sht],size:int):bat[:any_2,:sht] ",									  "GRPwindowsum_sht;"				  ]
[ "sum",				  "command",	  "group",	  "(b:bat[:any_2,:sht],e:bat[:any_2,:any_1]):bat[:any_2,:sht] ",							  "GRPsum_sht;"					  ]
[ "batStatistics",			  "command",	  "status",	  "():bat[:str,:str] ",													  "SYSgdkEnv;"					  ]
[ "cpuStatistics",			  "command",	  "status",	  "():bat[:str,:int] ",													  "SYScpuStatistics;"				  ]
[ "getPorts",				  "command",	  "status",	  "(lang:str):bat[:str,:int] ",												  "SYSgetPorts;"				  ]
[ "getDatabases",			  "command",	  "status",	  "():bat[:str,:str] ",													  "SYSgetDatabases;"				  ]
[ "getThreads",				  "command",	  "status",	  "():bat[:int,:str] ",													  "SYSgdkThread;"				  ]
[ "ioStatistics",			  "command",	  "status",	  "():bat[:str,:int] ",													  "SYSioStatistics;"				  ]
[ "mem_maxsize",			  "command",	  "status",	  "(v:lng):void ",													  "set_mem_maxsize;"				  ]
[ "mem_maxsize",			  "command",	  "status",	  "():lng ",														  "SYSgetmem_maxsize;"				  ]
[ "mem_cursize",			  "command",	  "status",	  "():lng ",														  "SYSgetmem_cursize;"				  ]
[ "memUsage",				  "command",	  "status",	  "(minsize:lng):bat[:str,:lng] ",											  "SYSmem_usage;"				  ]
[ "memStatistics",			  "command",	  "status",	  "():bat[:str,:int] ",													  "SYSmemStatistics;"				  ]
[ "vm_maxsize",				  "command",	  "status",	  "(v:lng):void ",													  "SYSsetvm_maxsize;"				  ]
[ "vm_maxsize",				  "command",	  "status",	  "():lng ",														  "SYSgetvm_maxsize;"				  ]
[ "vm_cursize",				  "command",	  "status",	  "():lng ",														  "SYSgetvm_cursize;"				  ]
[ "vmStatistics",			  "command",	  "status",	  "(minsize:lng):bat[:str,:lng] ",											  "SYSvm_usage;"				  ]
[ "!=",					  "command",	  "calc",	  "(v:timestamp,w:timestamp):bit ",											  "MTIMEtimestamp_NEQ;"				  ]
[ "!=",					  "command",	  "calc",	  "(v:daytime,w:daytime):bit ",												  "MTIMEdaytime_NEQ;"				  ]
[ "!=",					  "command",	  "calc",	  "(v:date,w:date):bit ",												  "MTIMEdate_NEQ;"				  ]
[ "!=",					  "command",	  "calc",	  "(left:str,right:str):bit ",												  "CALCcompNEQstrstr;"				  ]
[ "!=",					  "command",	  "calc",	  "(left:lng,right:lng):bit ",												  "CALCcompNEQlnglng;"				  ]
[ "!=",					  "command",	  "calc",	  "(left:lng,right:int):bit ",												  "CALCcompNEQlngint;"				  ]
[ "!=",					  "command",	  "calc",	  "(left:lng,right:sht):bit ",												  "CALCcompNEQlngsht;"				  ]
[ "!=",					  "command",	  "calc",	  "(left:lng,right:chr):bit ",												  "CALCcompNEQlngchr;"				  ]
[ "!=",					  "command",	  "calc",	  "(left:int,right:lng):bit ",												  "CALCcompNEQintlng;"				  ]
[ "!=",					  "command",	  "calc",	  "(left:int,right:int):bit ",												  "CALCcompNEQintint;"				  ]
[ "!=",					  "command",	  "calc",	  "(left:int,right:sht):bit ",												  "CALCcompNEQintsht;"				  ]
[ "!=",					  "command",	  "calc",	  "(left:int,right:chr):bit ",												  "CALCcompNEQintchr;"				  ]
[ "!=",					  "command",	  "calc",	  "(left:sht,right:lng):bit ",												  "CALCcompNEQshtlng;"				  ]
[ "!=",					  "command",	  "calc",	  "(left:sht,right:int):bit ",												  "CALCcompNEQshtint;"				  ]
[ "!=",					  "command",	  "calc",	  "(left:sht,right:sht):bit ",												  "CALCcompNEQshtsht;"				  ]
[ "!=",					  "command",	  "calc",	  "(left:sht,right:chr):bit ",												  "CALCcompNEQshtchr;"				  ]
[ "!=",					  "command",	  "calc",	  "(left:bit,right:lng):bit ",												  "CALCcompNEQbitlng;"				  ]
[ "!=",					  "command",	  "calc",	  "(left:bit,right:int):bit ",												  "CALCcompNEQbitint;"				  ]
[ "!=",					  "command",	  "calc",	  "(left:bit,right:sht):bit ",												  "CALCcompNEQbitsht;"				  ]
[ "!=",					  "command",	  "calc",	  "(left:bit,right:chr):bit ",												  "CALCcompNEQbitchr;"				  ]
[ "!=",					  "command",	  "calc",	  "(left:bit,right:bit):bit ",												  "CALCcompNEQbitbit;"				  ]
[ "!=",					  "command",	  "calc",	  "(left:chr,right:lng):bit ",												  "CALCcompNEQchrlng;"				  ]
[ "!=",					  "command",	  "calc",	  "(left:chr,right:int):bit ",												  "CALCcompNEQchrint;"				  ]
[ "!=",					  "command",	  "calc",	  "(left:chr,right:sht):bit ",												  "CALCcompNEQchrsht;"				  ]
[ "!=",					  "command",	  "calc",	  "(left:chr,right:chr):bit ",												  "CALCcompNEQchrchr;"				  ]
[ "!=",					  "command",	  "calc",	  "(left:dbl,right:dbl):bit ",												  "CALCcompNEQdbldbl;"				  ]
[ "!=",					  "command",	  "calc",	  "(left:flt,right:dbl):bit ",												  "CALCcompNEQfltdbl;"				  ]
[ "!=",					  "command",	  "calc",	  "(left:flt,right:flt):bit ",												  "CALCcompNEQfltflt;"				  ]
[ "!=",					  "command",	  "calc",	  "(left:oid,right:oid):bit ",												  "CALCcompNEQoidoid;"				  ]
[ "%",					  "command",	  "calc",	  "(left:int,right:sht):sht ",												  "CALCbinarycheckMODintsht;"			  ]
[ "%",					  "command",	  "calc",	  "(left:int,right:chr):chr ",												  "CALCbinarycheckMODintchr;"			  ]
[ "%",					  "command",	  "calc",	  "(left:lng,right:lng):lng ",												  "CALCbinarycheckMODlnglng;"			  ]
[ "%",					  "command",	  "calc",	  "(left:lng,right:int):int ",												  "CALCbinarycheckMODlngint;"			  ]
[ "%",					  "command",	  "calc",	  "(left:int,right:int):int ",												  "CALCbinarycheckMODintint;"			  ]
[ "%",					  "command",	  "calc",	  "(left:sht,right:int):int ",												  "CALCbinarycheckMODshtint;"			  ]
[ "%",					  "command",	  "calc",	  "(left:chr,right:int):int ",												  "CALCbinarycheckMODchrint;"			  ]
[ "*",					  "command",	  "calc",	  "(left:lng,right:dbl):dbl ",												  "CALCbinaryMULlngdbl;"			  ]
[ "*",					  "command",	  "calc",	  "(left:lng,right:flt):flt ",												  "CALCbinaryMULlngflt;"			  ]
[ "*",					  "command",	  "calc",	  "(left:lng,right:lng):lng ",												  "CALCbinaryMULlnglng;"			  ]
[ "*",					  "command",	  "calc",	  "(left:lng,right:int):lng ",												  "CALCbinaryMULlngint;"			  ]
[ "*",					  "command",	  "calc",	  "(left:lng,right:sht):lng ",												  "CALCbinaryMULlngsht;"			  ]
[ "*",					  "command",	  "calc",	  "(left:lng,right:chr):lng ",												  "CALCbinaryMULlngchr;"			  ]
[ "*",					  "command",	  "calc",	  "(left:int,right:dbl):dbl ",												  "CALCbinaryMULintdbl;"			  ]
[ "*",					  "command",	  "calc",	  "(left:int,right:flt):flt ",												  "CALCbinaryMULintflt;"			  ]
[ "*",					  "command",	  "calc",	  "(left:int,right:lng):lng ",												  "CALCbinaryMULintlng;"			  ]
[ "*",					  "command",	  "calc",	  "(left:int,right:int):int ",												  "CALCbinaryMULintint;"			  ]
[ "*",					  "command",	  "calc",	  "(left:int,right:sht):int ",												  "CALCbinaryMULintsht;"			  ]
[ "*",					  "command",	  "calc",	  "(left:int,right:chr):int ",												  "CALCbinaryMULintchr;"			  ]
[ "*",					  "command",	  "calc",	  "(left:sht,right:dbl):dbl ",												  "CALCbinaryMULshtdbl;"			  ]
[ "*",					  "command",	  "calc",	  "(left:sht,right:flt):flt ",												  "CALCbinaryMULshtflt;"			  ]
[ "*",					  "command",	  "calc",	  "(left:sht,right:lng):lng ",												  "CALCbinaryMULshtlng;"			  ]
[ "*",					  "command",	  "calc",	  "(left:sht,right:int):int ",												  "CALCbinaryMULshtint;"			  ]
[ "*",					  "command",	  "calc",	  "(left:sht,right:sht):sht ",												  "CALCbinaryMULshtsht;"			  ]
[ "*",					  "command",	  "calc",	  "(left:sht,right:chr):sht ",												  "CALCbinaryMULshtchr;"			  ]
[ "*",					  "command",	  "calc",	  "(left:chr,right:dbl):dbl ",												  "CALCbinaryMULchrdbl;"			  ]
[ "*",					  "command",	  "calc",	  "(left:chr,right:flt):flt ",												  "CALCbinaryMULchrflt;"			  ]
[ "*",					  "command",	  "calc",	  "(left:chr,right:lng):lng ",												  "CALCbinaryMULchrlng;"			  ]
[ "*",					  "command",	  "calc",	  "(left:chr,right:int):int ",												  "CALCbinaryMULchrint;"			  ]
[ "*",					  "command",	  "calc",	  "(left:chr,right:sht):sht ",												  "CALCbinaryMULchrsht;"			  ]
[ "*",					  "command",	  "calc",	  "(left:chr,right:chr):chr ",												  "CALCbinaryMULchrchr;"			  ]
[ "*",					  "command",	  "calc",	  "(left:oid,right:oid):oid ",												  "CALCbinaryMULoidoid;"			  ]
[ "*",					  "command",	  "calc",	  "(left:dbl,right:dbl):dbl ",												  "CALCbinaryMULdbldbl;"			  ]
[ "*",					  "command",	  "calc",	  "(left:dbl,right:flt):dbl ",												  "CALCbinaryMULdblflt;"			  ]
[ "*",					  "command",	  "calc",	  "(left:dbl,right:lng):dbl ",												  "CALCbinaryMULdbllng;"			  ]
[ "*",					  "command",	  "calc",	  "(left:dbl,right:int):dbl ",												  "CALCbinaryMULdblint;"			  ]
[ "*",					  "command",	  "calc",	  "(left:dbl,right:sht):dbl ",												  "CALCbinaryMULdblsht;"			  ]
[ "*",					  "command",	  "calc",	  "(left:dbl,right:chr):dbl ",												  "CALCbinaryMULdblchr;"			  ]
[ "*",					  "command",	  "calc",	  "(left:flt,right:dbl):dbl ",												  "CALCbinaryMULfltdbl;"			  ]
[ "*",					  "command",	  "calc",	  "(left:flt,right:flt):flt ",												  "CALCbinaryMULfltflt;"			  ]
[ "*",					  "command",	  "calc",	  "(left:flt,right:lng):flt ",												  "CALCbinaryMULfltlng;"			  ]
[ "*",					  "command",	  "calc",	  "(left:flt,right:int):flt ",												  "CALCbinaryMULfltint;"			  ]
[ "*",					  "command",	  "calc",	  "(left:flt,right:sht):flt ",												  "CALCbinaryMULfltsht;"			  ]
[ "*",					  "command",	  "calc",	  "(left:flt,right:chr):flt ",												  "CALCbinaryMULfltchr;"			  ]
[ "+",					  "command",	  "calc",	  "(left:lng,right:dbl):dbl ",												  "CALCbinaryADDlngdbl;"			  ]
[ "+",					  "command",	  "calc",	  "(left:lng,right:flt):flt ",												  "CALCbinaryADDlngflt;"			  ]
[ "+",					  "command",	  "calc",	  "(left:lng,right:lng):lng ",												  "CALCbinaryADDlnglng;"			  ]
[ "+",					  "command",	  "calc",	  "(left:lng,right:int):lng ",												  "CALCbinaryADDlngint;"			  ]
[ "+",					  "command",	  "calc",	  "(left:lng,right:sht):lng ",												  "CALCbinaryADDlngsht;"			  ]
[ "+",					  "command",	  "calc",	  "(left:lng,right:chr):lng ",												  "CALCbinaryADDlngchr;"			  ]
[ "+",					  "command",	  "calc",	  "(left:int,right:dbl):dbl ",												  "CALCbinaryADDintdbl;"			  ]
[ "+",					  "command",	  "calc",	  "(left:int,right:flt):flt ",												  "CALCbinaryADDintflt;"			  ]
[ "+",					  "command",	  "calc",	  "(left:int,right:lng):lng ",												  "CALCbinaryADDintlng;"			  ]
[ "+",					  "command",	  "calc",	  "(left:int,right:int):int ",												  "CALCbinaryADDintint;"			  ]
[ "+",					  "command",	  "calc",	  "(left:int,right:sht):int ",												  "CALCbinaryADDintsht;"			  ]
[ "+",					  "command",	  "calc",	  "(left:int,right:chr):int ",												  "CALCbinaryADDintchr;"			  ]
[ "+",					  "command",	  "calc",	  "(left:sht,right:dbl):dbl ",												  "CALCbinaryADDshtdbl;"			  ]
[ "+",					  "command",	  "calc",	  "(left:sht,right:flt):flt ",												  "CALCbinaryADDshtflt;"			  ]
[ "+",					  "command",	  "calc",	  "(left:sht,right:lng):lng ",												  "CALCbinaryADDshtlng;"			  ]
[ "+",					  "command",	  "calc",	  "(left:sht,right:int):int ",												  "CALCbinaryADDshtint;"			  ]
[ "+",					  "command",	  "calc",	  "(left:sht,right:sht):sht ",												  "CALCbinaryADDshtsht;"			  ]
[ "+",					  "command",	  "calc",	  "(left:sht,right:chr):sht ",												  "CALCbinaryADDshtchr;"			  ]
[ "+",					  "command",	  "calc",	  "(left:chr,right:dbl):dbl ",												  "CALCbinaryADDchrdbl;"			  ]
[ "+",					  "command",	  "calc",	  "(left:chr,right:flt):flt ",												  "CALCbinaryADDchrflt;"			  ]
[ "+",					  "command",	  "calc",	  "(left:chr,right:lng):lng ",												  "CALCbinaryADDchrlng;"			  ]
[ "+",					  "command",	  "calc",	  "(left:chr,right:int):int ",												  "CALCbinaryADDchrint;"			  ]
[ "+",					  "command",	  "calc",	  "(left:chr,right:sht):sht ",												  "CALCbinaryADDchrsht;"			  ]
[ "+",					  "command",	  "calc",	  "(left:chr,right:chr):chr ",												  "CALCbinaryADDchrchr;"			  ]
[ "+",					  "command",	  "calc",	  "(left:oid,right:oid):oid ",												  "CALCbinaryADDoidoid;"			  ]
[ "+",					  "command",	  "calc",	  "(left:dbl,right:dbl):dbl ",												  "CALCbinaryADDdbldbl;"			  ]
[ "+",					  "command",	  "calc",	  "(left:dbl,right:flt):dbl ",												  "CALCbinaryADDdblflt;"			  ]
[ "+",					  "command",	  "calc",	  "(left:dbl,right:lng):dbl ",												  "CALCbinaryADDdbllng;"			  ]
[ "+",					  "command",	  "calc",	  "(left:dbl,right:int):dbl ",												  "CALCbinaryADDdblint;"			  ]
[ "+",					  "command",	  "calc",	  "(left:dbl,right:sht):dbl ",												  "CALCbinaryADDdblsht;"			  ]
[ "+",					  "command",	  "calc",	  "(left:dbl,right:chr):dbl ",												  "CALCbinaryADDdblchr;"			  ]
[ "+",					  "command",	  "calc",	  "(left:flt,right:dbl):dbl ",												  "CALCbinaryADDfltdbl;"			  ]
[ "+",					  "command",	  "calc",	  "(left:flt,right:flt):flt ",												  "CALCbinaryADDfltflt;"			  ]
[ "+",					  "command",	  "calc",	  "(left:flt,right:lng):flt ",												  "CALCbinaryADDfltlng;"			  ]
[ "+",					  "command",	  "calc",	  "(left:flt,right:int):flt ",												  "CALCbinaryADDfltint;"			  ]
[ "+",					  "command",	  "calc",	  "(left:flt,right:sht):flt ",												  "CALCbinaryADDfltsht;"			  ]
[ "+",					  "command",	  "calc",	  "(left:flt,right:chr):flt ",												  "CALCbinaryADDfltchr;"			  ]
[ "+",					  "command",	  "calc",	  "(l:str,r:int):str ",													  "CALCstrConcatInt;"				  ]
[ "+",					  "command",	  "calc",	  "(l:str,r:str):str ",													  "CALCstrConcat;"				  ]
[ "-",					  "command",	  "calc",	  "(x:lng):lng ",													  "CALCunarylngNEG;"				  ]
[ "-",					  "command",	  "calc",	  "(x:int):int ",													  "CALCunaryintNEG;"				  ]
[ "-",					  "command",	  "calc",	  "(x:sht):sht ",													  "CALCunaryshtNEG;"				  ]
[ "-",					  "command",	  "calc",	  "(x:chr):chr ",													  "CALCunarychrNEG;"				  ]
[ "-",					  "command",	  "calc",	  "(x:flt):flt ",													  "CALCunaryfltNEG;"				  ]
[ "-",					  "command",	  "calc",	  "(x:dbl):dbl ",													  "CALCunarydblNEG;"				  ]
[ "-",					  "command",	  "calc",	  "(left:lng,right:dbl):dbl ",												  "CALCbinarySUBlngdbl;"			  ]
[ "-",					  "command",	  "calc",	  "(left:lng,right:flt):flt ",												  "CALCbinarySUBlngflt;"			  ]
[ "-",					  "command",	  "calc",	  "(left:lng,right:lng):lng ",												  "CALCbinarySUBlnglng;"			  ]
[ "-",					  "command",	  "calc",	  "(left:lng,right:int):lng ",												  "CALCbinarySUBlngint;"			  ]
[ "-",					  "command",	  "calc",	  "(left:lng,right:sht):lng ",												  "CALCbinarySUBlngsht;"			  ]
[ "-",					  "command",	  "calc",	  "(left:lng,right:chr):lng ",												  "CALCbinarySUBlngchr;"			  ]
[ "-",					  "command",	  "calc",	  "(left:int,right:dbl):dbl ",												  "CALCbinarySUBintdbl;"			  ]
[ "-",					  "command",	  "calc",	  "(left:int,right:flt):flt ",												  "CALCbinarySUBintflt;"			  ]
[ "-",					  "command",	  "calc",	  "(left:int,right:lng):lng ",												  "CALCbinarySUBintlng;"			  ]
[ "-",					  "command",	  "calc",	  "(left:int,right:int):int ",												  "CALCbinarySUBintint;"			  ]
[ "-",					  "command",	  "calc",	  "(left:int,right:sht):int ",												  "CALCbinarySUBintsht;"			  ]
[ "-",					  "command",	  "calc",	  "(left:int,right:chr):int ",												  "CALCbinarySUBintchr;"			  ]
[ "-",					  "command",	  "calc",	  "(left:sht,right:dbl):dbl ",												  "CALCbinarySUBshtdbl;"			  ]
[ "-",					  "command",	  "calc",	  "(left:sht,right:flt):flt ",												  "CALCbinarySUBshtflt;"			  ]
[ "-",					  "command",	  "calc",	  "(left:sht,right:lng):lng ",												  "CALCbinarySUBshtlng;"			  ]
[ "-",					  "command",	  "calc",	  "(left:sht,right:int):int ",												  "CALCbinarySUBshtint;"			  ]
[ "-",					  "command",	  "calc",	  "(left:sht,right:sht):sht ",												  "CALCbinarySUBshtsht;"			  ]
[ "-",					  "command",	  "calc",	  "(left:sht,right:chr):sht ",												  "CALCbinarySUBshtchr;"			  ]
[ "-",					  "command",	  "calc",	  "(left:chr,right:dbl):dbl ",												  "CALCbinarySUBchrdbl;"			  ]
[ "-",					  "command",	  "calc",	  "(left:chr,right:flt):flt ",												  "CALCbinarySUBchrflt;"			  ]
[ "-",					  "command",	  "calc",	  "(left:chr,right:lng):lng ",												  "CALCbinarySUBchrlng;"			  ]
[ "-",					  "command",	  "calc",	  "(left:chr,right:int):int ",												  "CALCbinarySUBchrint;"			  ]
[ "-",					  "command",	  "calc",	  "(left:chr,right:sht):sht ",												  "CALCbinarySUBchrsht;"			  ]
[ "-",					  "command",	  "calc",	  "(left:chr,right:chr):chr ",												  "CALCbinarySUBchrchr;"			  ]
[ "-",					  "command",	  "calc",	  "(left:oid,right:oid):oid ",												  "CALCbinarySUBoidoid;"			  ]
[ "-",					  "command",	  "calc",	  "(left:dbl,right:dbl):dbl ",												  "CALCbinarySUBdbldbl;"			  ]
[ "-",					  "command",	  "calc",	  "(left:dbl,right:flt):dbl ",												  "CALCbinarySUBdblflt;"			  ]
[ "-",					  "command",	  "calc",	  "(left:dbl,right:lng):dbl ",												  "CALCbinarySUBdbllng;"			  ]
[ "-",					  "command",	  "calc",	  "(left:dbl,right:int):dbl ",												  "CALCbinarySUBdblint;"			  ]
[ "-",					  "command",	  "calc",	  "(left:dbl,right:sht):dbl ",												  "CALCbinarySUBdblsht;"			  ]
[ "-",					  "command",	  "calc",	  "(left:dbl,right:chr):dbl ",												  "CALCbinarySUBdblchr;"			  ]
[ "-",					  "command",	  "calc",	  "(left:flt,right:dbl):dbl ",												  "CALCbinarySUBfltdbl;"			  ]
[ "-",					  "command",	  "calc",	  "(left:flt,right:flt):flt ",												  "CALCbinarySUBfltflt;"			  ]
[ "-",					  "command",	  "calc",	  "(left:flt,right:lng):flt ",												  "CALCbinarySUBfltlng;"			  ]
[ "-",					  "command",	  "calc",	  "(left:flt,right:int):flt ",												  "CALCbinarySUBfltint;"			  ]
[ "-",					  "command",	  "calc",	  "(left:flt,right:sht):flt ",												  "CALCbinarySUBfltsht;"			  ]
[ "-",					  "command",	  "calc",	  "(left:flt,right:chr):flt ",												  "CALCbinarySUBfltchr;"			  ]
[ "/",					  "command",	  "calc",	  "(left:lng,right:dbl):dbl ",												  "CALCbinarycheckDIVlngdbl;"			  ]
[ "/",					  "command",	  "calc",	  "(left:lng,right:flt):flt ",												  "CALCbinarycheckDIVlngflt;"			  ]
[ "/",					  "command",	  "calc",	  "(left:lng,right:lng):lng ",												  "CALCbinarycheckDIVlnglng;"			  ]
[ "/",					  "command",	  "calc",	  "(left:lng,right:int):lng ",												  "CALCbinarycheckDIVlngint;"			  ]
[ "/",					  "command",	  "calc",	  "(left:lng,right:sht):lng ",												  "CALCbinarycheckDIVlngsht;"			  ]
[ "/",					  "command",	  "calc",	  "(left:lng,right:chr):lng ",												  "CALCbinarycheckDIVlngchr;"			  ]
[ "/",					  "command",	  "calc",	  "(left:int,right:dbl):dbl ",												  "CALCbinarycheckDIVintdbl;"			  ]
[ "/",					  "command",	  "calc",	  "(left:int,right:flt):flt ",												  "CALCbinarycheckDIVintflt;"			  ]
[ "/",					  "command",	  "calc",	  "(left:int,right:lng):lng ",												  "CALCbinarycheckDIVintlng;"			  ]
[ "/",					  "command",	  "calc",	  "(left:int,right:int):int ",												  "CALCbinarycheckDIVintint;"			  ]
[ "/",					  "command",	  "calc",	  "(left:int,right:sht):int ",												  "CALCbinarycheckDIVintsht;"			  ]
[ "/",					  "command",	  "calc",	  "(left:int,right:chr):int ",												  "CALCbinarycheckDIVintchr;"			  ]
[ "/",					  "command",	  "calc",	  "(left:sht,right:dbl):dbl ",												  "CALCbinarycheckDIVshtdbl;"			  ]
[ "/",					  "command",	  "calc",	  "(left:sht,right:flt):flt ",												  "CALCbinarycheckDIVshtflt;"			  ]
[ "/",					  "command",	  "calc",	  "(left:sht,right:lng):lng ",												  "CALCbinarycheckDIVshtlng;"			  ]
[ "/",					  "command",	  "calc",	  "(left:sht,right:int):int ",												  "CALCbinarycheckDIVshtint;"			  ]
[ "/",					  "command",	  "calc",	  "(left:sht,right:sht):sht ",												  "CALCbinarycheckDIVshtsht;"			  ]
[ "/",					  "command",	  "calc",	  "(left:sht,right:chr):sht ",												  "CALCbinarycheckDIVshtchr;"			  ]
[ "/",					  "command",	  "calc",	  "(left:chr,right:dbl):dbl ",												  "CALCbinarycheckDIVchrdbl;"			  ]
[ "/",					  "command",	  "calc",	  "(left:chr,right:flt):flt ",												  "CALCbinarycheckDIVchrflt;"			  ]
[ "/",					  "command",	  "calc",	  "(left:chr,right:lng):lng ",												  "CALCbinarycheckDIVchrlng;"			  ]
[ "/",					  "command",	  "calc",	  "(left:chr,right:int):int ",												  "CALCbinarycheckDIVchrint;"			  ]
[ "/",					  "command",	  "calc",	  "(left:chr,right:sht):sht ",												  "CALCbinarycheckDIVchrsht;"			  ]
[ "/",					  "command",	  "calc",	  "(left:chr,right:chr):chr ",												  "CALCbinarycheckDIVchrchr;"			  ]
[ "/",					  "command",	  "calc",	  "(left:oid,right:oid):oid ",												  "CALCbinarycheckDIVoidoid;"			  ]
[ "/",					  "command",	  "calc",	  "(left:dbl,right:dbl):dbl ",												  "CALCbinarycheckDIVdbldbl;"			  ]
[ "/",					  "command",	  "calc",	  "(left:dbl,right:flt):dbl ",												  "CALCbinarycheckDIVdblflt;"			  ]
[ "/",					  "command",	  "calc",	  "(left:dbl,right:lng):dbl ",												  "CALCbinarycheckDIVdbllng;"			  ]
[ "/",					  "command",	  "calc",	  "(left:dbl,right:int):dbl ",												  "CALCbinarycheckDIVdblint;"			  ]
[ "/",					  "command",	  "calc",	  "(left:dbl,right:sht):dbl ",												  "CALCbinarycheckDIVdblsht;"			  ]
[ "/",					  "command",	  "calc",	  "(left:dbl,right:chr):dbl ",												  "CALCbinarycheckDIVdblchr;"			  ]
[ "/",					  "command",	  "calc",	  "(left:flt,right:dbl):dbl ",												  "CALCbinarycheckDIVfltdbl;"			  ]
[ "/",					  "command",	  "calc",	  "(left:flt,right:flt):flt ",												  "CALCbinarycheckDIVfltflt;"			  ]
[ "/",					  "command",	  "calc",	  "(left:flt,right:lng):flt ",												  "CALCbinarycheckDIVfltlng;"			  ]
[ "/",					  "command",	  "calc",	  "(left:flt,right:int):flt ",												  "CALCbinarycheckDIVfltint;"			  ]
[ "/",					  "command",	  "calc",	  "(left:flt,right:sht):flt ",												  "CALCbinarycheckDIVfltsht;"			  ]
[ "/",					  "command",	  "calc",	  "(left:flt,right:chr):flt ",												  "CALCbinarycheckDIVfltchr;"			  ]
[ "<=",					  "command",	  "calc",	  "(v:timestamp,w:timestamp):bit ",											  "MTIMEtimestamp_LE;"				  ]
[ "<",					  "command",	  "calc",	  "(v:timestamp,w:timestamp):bit ",											  "MTIMEtimestamp_LT;"				  ]
[ "<=",					  "command",	  "calc",	  "(v:daytime,w:daytime):bit ",												  "MTIMEdaytime_LE;"				  ]
[ "<",					  "command",	  "calc",	  "(v:daytime,w:daytime):bit ",												  "MTIMEdaytime_LT;"				  ]
[ "<=",					  "command",	  "calc",	  "(v:date,w:date):bit ",												  "MTIMEdate_LE;"				  ]
[ "<",					  "command",	  "calc",	  "(v:date,w:date):bit ",												  "MTIMEdate_LT;"				  ]
[ "<<",					  "command",	  "calc",	  "(left:lng,right:int):lng ",												  "CALCbinaryLSHlngint;"			  ]
[ "<<",					  "command",	  "calc",	  "(left:int,right:int):int ",												  "CALCbinaryLSHintint;"			  ]
[ "<<",					  "command",	  "calc",	  "(left:sht,right:int):sht ",												  "CALCbinaryLSHshtint;"			  ]
[ "<<",					  "command",	  "calc",	  "(left:chr,right:int):chr ",												  "CALCbinaryLSHchrint;"			  ]
[ "<=",					  "command",	  "calc",	  "(left:str,right:str):bit ",												  "CALCcompLEstrstr;"				  ]
[ "<",					  "command",	  "calc",	  "(left:str,right:str):bit ",												  "CALCcompLTstrstr;"				  ]
[ "<=",					  "command",	  "calc",	  "(left:lng,right:lng):bit ",												  "CALCcompLElnglng;"				  ]
[ "<",					  "command",	  "calc",	  "(left:lng,right:lng):bit ",												  "CALCcompLTlnglng;"				  ]
[ "<=",					  "command",	  "calc",	  "(left:lng,right:int):bit ",												  "CALCcompLElngint;"				  ]
[ "<",					  "command",	  "calc",	  "(left:lng,right:int):bit ",												  "CALCcompLTlngint;"				  ]
[ "<=",					  "command",	  "calc",	  "(left:lng,right:sht):bit ",												  "CALCcompLElngsht;"				  ]
[ "<",					  "command",	  "calc",	  "(left:lng,right:sht):bit ",												  "CALCcompLTlngsht;"				  ]
[ "<=",					  "command",	  "calc",	  "(left:lng,right:chr):bit ",												  "CALCcompLElngchr;"				  ]
[ "<",					  "command",	  "calc",	  "(left:lng,right:chr):bit ",												  "CALCcompLTlngchr;"				  ]
[ "<=",					  "command",	  "calc",	  "(left:int,right:lng):bit ",												  "CALCcompLEintlng;"				  ]
[ "<",					  "command",	  "calc",	  "(left:int,right:lng):bit ",												  "CALCcompLTintlng;"				  ]
[ "<=",					  "command",	  "calc",	  "(left:int,right:int):bit ",												  "CALCcompLEintint;"				  ]
[ "<",					  "command",	  "calc",	  "(left:int,right:int):bit ",												  "CALCcompLTintint;"				  ]
[ "<=",					  "command",	  "calc",	  "(left:int,right:sht):bit ",												  "CALCcompLEintsht;"				  ]
[ "<",					  "command",	  "calc",	  "(left:int,right:sht):bit ",												  "CALCcompLTintsht;"				  ]
[ "<=",					  "command",	  "calc",	  "(left:int,right:chr):bit ",												  "CALCcompLEintchr;"				  ]
[ "<",					  "command",	  "calc",	  "(left:int,right:chr):bit ",												  "CALCcompLTintchr;"				  ]
[ "<=",					  "command",	  "calc",	  "(left:sht,right:lng):bit ",												  "CALCcompLEshtlng;"				  ]
[ "<",					  "command",	  "calc",	  "(left:sht,right:lng):bit ",												  "CALCcompLTshtlng;"				  ]
[ "<=",					  "command",	  "calc",	  "(left:sht,right:int):bit ",												  "CALCcompLEshtint;"				  ]
[ "<",					  "command",	  "calc",	  "(left:sht,right:int):bit ",												  "CALCcompLTshtint;"				  ]
[ "<=",					  "command",	  "calc",	  "(left:sht,right:sht):bit ",												  "CALCcompLEshtsht;"				  ]
[ "<",					  "command",	  "calc",	  "(left:sht,right:sht):bit ",												  "CALCcompLTshtsht;"				  ]
[ "<=",					  "command",	  "calc",	  "(left:sht,right:chr):bit ",												  "CALCcompLEshtchr;"				  ]
[ "<",					  "command",	  "calc",	  "(left:sht,right:chr):bit ",												  "CALCcompLTshtchr;"				  ]
[ "<=",					  "command",	  "calc",	  "(left:chr,right:lng):bit ",												  "CALCcompLEchrlng;"				  ]
[ "<",					  "command",	  "calc",	  "(left:chr,right:lng):bit ",												  "CALCcompLTchrlng;"				  ]
[ "<=",					  "command",	  "calc",	  "(left:chr,right:int):bit ",												  "CALCcompLEchrint;"				  ]
[ "<",					  "command",	  "calc",	  "(left:chr,right:int):bit ",												  "CALCcompLTchrint;"				  ]
[ "<=",					  "command",	  "calc",	  "(left:chr,right:sht):bit ",												  "CALCcompLEchrsht;"				  ]
[ "<",					  "command",	  "calc",	  "(left:chr,right:sht):bit ",												  "CALCcompLTchrsht;"				  ]
[ "<=",					  "command",	  "calc",	  "(left:chr,right:chr):bit ",												  "CALCcompLEchrchr;"				  ]
[ "<",					  "command",	  "calc",	  "(left:chr,right:chr):bit ",												  "CALCcompLTchrchr;"				  ]
[ "<=",					  "command",	  "calc",	  "(left:dbl,right:dbl):bit ",												  "CALCcompLEdbldbl;"				  ]
[ "<",					  "command",	  "calc",	  "(left:dbl,right:dbl):bit ",												  "CALCcompLTdbldbl;"				  ]
[ "<=",					  "command",	  "calc",	  "(left:flt,right:dbl):bit ",												  "CALCcompLEfltdbl;"				  ]
[ "<",					  "command",	  "calc",	  "(left:flt,right:dbl):bit ",												  "CALCcompLTfltdbl;"				  ]
[ "<=",					  "command",	  "calc",	  "(left:flt,right:flt):bit ",												  "CALCcompLEfltflt;"				  ]
[ "<",					  "command",	  "calc",	  "(left:flt,right:flt):bit ",												  "CALCcompLTfltflt;"				  ]
[ "<=",					  "command",	  "calc",	  "(left:oid,right:oid):bit ",												  "CALCcompLEoidoid;"				  ]
[ "<",					  "command",	  "calc",	  "(left:oid,right:oid):bit ",												  "CALCcompLToidoid;"				  ]
[ "==",					  "command",	  "calc",	  "(v:timestamp,w:timestamp):bit ",											  "MTIMEtimestamp_EQ;"				  ]
[ "==",					  "command",	  "calc",	  "(v:daytime,w:daytime):bit ",												  "MTIMEdaytime_EQ;"				  ]
[ "==",					  "command",	  "calc",	  "(v:date,w:date):bit ",												  "MTIMEdate_EQ;"				  ]
[ "==",					  "command",	  "calc",	  "(left:str,right:str):bit ",												  "CALCcompEQstrstr;"				  ]
[ "==",					  "command",	  "calc",	  "(left:lng,right:lng):bit ",												  "CALCcompEQlnglng;"				  ]
[ "==",					  "command",	  "calc",	  "(left:lng,right:int):bit ",												  "CALCcompEQlngint;"				  ]
[ "==",					  "command",	  "calc",	  "(left:lng,right:sht):bit ",												  "CALCcompEQlngsht;"				  ]
[ "==",					  "command",	  "calc",	  "(left:lng,right:chr):bit ",												  "CALCcompEQlngchr;"				  ]
[ "==",					  "command",	  "calc",	  "(left:int,right:lng):bit ",												  "CALCcompEQintlng;"				  ]
[ "==",					  "command",	  "calc",	  "(left:int,right:int):bit ",												  "CALCcompEQintint;"				  ]
[ "==",					  "command",	  "calc",	  "(left:int,right:sht):bit ",												  "CALCcompEQintsht;"				  ]
[ "==",					  "command",	  "calc",	  "(left:int,right:chr):bit ",												  "CALCcompEQintchr;"				  ]
[ "==",					  "command",	  "calc",	  "(left:sht,right:lng):bit ",												  "CALCcompEQshtlng;"				  ]
[ "==",					  "command",	  "calc",	  "(left:sht,right:int):bit ",												  "CALCcompEQshtint;"				  ]
[ "==",					  "command",	  "calc",	  "(left:sht,right:sht):bit ",												  "CALCcompEQshtsht;"				  ]
[ "==",					  "command",	  "calc",	  "(left:sht,right:chr):bit ",												  "CALCcompEQshtchr;"				  ]
[ "==",					  "command",	  "calc",	  "(left:bit,right:lng):bit ",												  "CALCcompEQbitlng;"				  ]
[ "==",					  "command",	  "calc",	  "(left:bit,right:int):bit ",												  "CALCcompEQbitint;"				  ]
[ "==",					  "command",	  "calc",	  "(left:bit,right:sht):bit ",												  "CALCcompEQbitsht;"				  ]
[ "==",					  "command",	  "calc",	  "(left:bit,right:chr):bit ",												  "CALCcompEQbitchr;"				  ]
[ "==",					  "command",	  "calc",	  "(left:bit,right:bit):bit ",												  "CALCcompEQbitbit;"				  ]
[ "==",					  "command",	  "calc",	  "(left:chr,right:lng):bit ",												  "CALCcompEQchrlng;"				  ]
[ "==",					  "command",	  "calc",	  "(left:chr,right:int):bit ",												  "CALCcompEQchrint;"				  ]
[ "==",					  "command",	  "calc",	  "(left:chr,right:sht):bit ",												  "CALCcompEQchrsht;"				  ]
[ "==",					  "command",	  "calc",	  "(left:chr,right:chr):bit ",												  "CALCcompEQchrchr;"				  ]
[ "==",					  "command",	  "calc",	  "(left:dbl,right:dbl):bit ",												  "CALCcompEQdbldbl;"				  ]
[ "==",					  "command",	  "calc",	  "(left:flt,right:dbl):bit ",												  "CALCcompEQfltdbl;"				  ]
[ "==",					  "command",	  "calc",	  "(left:flt,right:flt):bit ",												  "CALCcompEQfltflt;"				  ]
[ "==",					  "command",	  "calc",	  "(left:oid,right:oid):bit ",												  "CALCcompEQoidoid;"				  ]
[ ">=",					  "command",	  "calc",	  "(v:timestamp,w:timestamp):bit ",											  "MTIMEtimestamp_GE;"				  ]
[ ">",					  "command",	  "calc",	  "(v:timestamp,w:timestamp):bit ",											  "MTIMEtimestamp_GT;"				  ]
[ ">=",					  "command",	  "calc",	  "(v:daytime,w:daytime):bit ",												  "MTIMEdaytime_GE;"				  ]
[ ">",					  "command",	  "calc",	  "(v:daytime,w:daytime):bit ",												  "MTIMEdaytime_GT;"				  ]
[ ">=",					  "command",	  "calc",	  "(v:date,w:date):bit ",												  "MTIMEdate_GE;"				  ]
[ ">",					  "command",	  "calc",	  "(v:date,w:date):bit ",												  "MTIMEdate_GT;"				  ]
[ ">>",					  "command",	  "calc",	  "(left:lng,right:int):lng ",												  "CALCbinaryRSHlngint;"			  ]
[ ">>",					  "command",	  "calc",	  "(left:int,right:int):int ",												  "CALCbinaryRSHintint;"			  ]
[ ">>",					  "command",	  "calc",	  "(left:sht,right:int):sht ",												  "CALCbinaryRSHshtint;"			  ]
[ ">>",					  "command",	  "calc",	  "(left:chr,right:int):chr ",												  "CALCbinaryRSHchrint;"			  ]
[ ">",					  "command",	  "calc",	  "(left:str,right:str):bit ",												  "CALCcompGTstrstr;"				  ]
[ ">=",					  "command",	  "calc",	  "(left:str,right:str):bit ",												  "CALCcompGEstrstr;"				  ]
[ ">",					  "command",	  "calc",	  "(left:lng,right:lng):bit ",												  "CALCcompGTlnglng;"				  ]
[ ">=",					  "command",	  "calc",	  "(left:lng,right:lng):bit ",												  "CALCcompGElnglng;"				  ]
[ ">",					  "command",	  "calc",	  "(left:lng,right:int):bit ",												  "CALCcompGTlngint;"				  ]
[ ">=",					  "command",	  "calc",	  "(left:lng,right:int):bit ",												  "CALCcompGElngint;"				  ]
[ ">",					  "command",	  "calc",	  "(left:lng,right:sht):bit ",												  "CALCcompGTlngsht;"				  ]
[ ">=",					  "command",	  "calc",	  "(left:lng,right:sht):bit ",												  "CALCcompGElngsht;"				  ]
[ ">",					  "command",	  "calc",	  "(left:lng,right:chr):bit ",												  "CALCcompGTlngchr;"				  ]
[ ">=",					  "command",	  "calc",	  "(left:lng,right:chr):bit ",												  "CALCcompGElngchr;"				  ]
[ ">",					  "command",	  "calc",	  "(left:int,right:lng):bit ",												  "CALCcompGTintlng;"				  ]
[ ">=",					  "command",	  "calc",	  "(left:int,right:lng):bit ",												  "CALCcompGEintlng;"				  ]
[ ">",					  "command",	  "calc",	  "(left:int,right:int):bit ",												  "CALCcompGTintint;"				  ]
[ ">=",					  "command",	  "calc",	  "(left:int,right:int):bit ",												  "CALCcompGEintint;"				  ]
[ ">",					  "command",	  "calc",	  "(left:int,right:sht):bit ",												  "CALCcompGTintsht;"				  ]
[ ">=",					  "command",	  "calc",	  "(left:int,right:sht):bit ",												  "CALCcompGEintsht;"				  ]
[ ">",					  "command",	  "calc",	  "(left:int,right:chr):bit ",												  "CALCcompGTintchr;"				  ]
[ ">=",					  "command",	  "calc",	  "(left:int,right:chr):bit ",												  "CALCcompGEintchr;"				  ]
[ ">",					  "command",	  "calc",	  "(left:sht,right:lng):bit ",												  "CALCcompGTshtlng;"				  ]
[ ">=",					  "command",	  "calc",	  "(left:sht,right:lng):bit ",												  "CALCcompGEshtlng;"				  ]
[ ">",					  "command",	  "calc",	  "(left:sht,right:int):bit ",												  "CALCcompGTshtint;"				  ]
[ ">=",					  "command",	  "calc",	  "(left:sht,right:int):bit ",												  "CALCcompGEshtint;"				  ]
[ ">",					  "command",	  "calc",	  "(left:sht,right:sht):bit ",												  "CALCcompGTshtsht;"				  ]
[ ">=",					  "command",	  "calc",	  "(left:sht,right:sht):bit ",												  "CALCcompGEshtsht;"				  ]
[ ">",					  "command",	  "calc",	  "(left:sht,right:chr):bit ",												  "CALCcompGTshtchr;"				  ]
[ ">=",					  "command",	  "calc",	  "(left:sht,right:chr):bit ",												  "CALCcompGEshtchr;"				  ]
[ ">",					  "command",	  "calc",	  "(left:chr,right:lng):bit ",												  "CALCcompGTchrlng;"				  ]
[ ">=",					  "command",	  "calc",	  "(left:chr,right:lng):bit ",												  "CALCcompGEchrlng;"				  ]
[ ">",					  "command",	  "calc",	  "(left:chr,right:int):bit ",												  "CALCcompGTchrint;"				  ]
[ ">=",					  "command",	  "calc",	  "(left:chr,right:int):bit ",												  "CALCcompGEchrint;"				  ]
[ ">",					  "command",	  "calc",	  "(left:chr,right:sht):bit ",												  "CALCcompGTchrsht;"				  ]
[ ">=",					  "command",	  "calc",	  "(left:chr,right:sht):bit ",												  "CALCcompGEchrsht;"				  ]
[ ">",					  "command",	  "calc",	  "(left:chr,right:chr):bit ",												  "CALCcompGTchrchr;"				  ]
[ ">=",					  "command",	  "calc",	  "(left:chr,right:chr):bit ",												  "CALCcompGEchrchr;"				  ]
[ ">",					  "command",	  "calc",	  "(left:dbl,right:dbl):bit ",												  "CALCcompGTdbldbl;"				  ]
[ ">=",					  "command",	  "calc",	  "(left:dbl,right:dbl):bit ",												  "CALCcompGEdbldbl;"				  ]
[ ">",					  "command",	  "calc",	  "(left:flt,right:dbl):bit ",												  "CALCcompGTfltdbl;"				  ]
[ ">=",					  "command",	  "calc",	  "(left:flt,right:dbl):bit ",												  "CALCcompGEfltdbl;"				  ]
[ ">",					  "command",	  "calc",	  "(left:flt,right:flt):bit ",												  "CALCcompGTfltflt;"				  ]
[ ">=",					  "command",	  "calc",	  "(left:flt,right:flt):bit ",												  "CALCcompGEfltflt;"				  ]
[ ">",					  "command",	  "calc",	  "(left:oid,right:oid):bit ",												  "CALCcompGToidoid;"				  ]
[ ">=",					  "command",	  "calc",	  "(left:oid,right:oid):bit ",												  "CALCcompGEoidoid;"				  ]
[ "and",				  "command",	  "calc",	  "(left:lng,right:lng):lng ",												  "CALCbinaryANDlnglng;"			  ]
[ "and",				  "command",	  "calc",	  "(left:int,right:int):int ",												  "CALCbinaryANDintint;"			  ]
[ "and",				  "command",	  "calc",	  "(left:sht,right:sht):sht ",												  "CALCbinaryANDshtsht;"			  ]
[ "and",				  "command",	  "calc",	  "(left:chr,right:chr):chr ",												  "CALCbinaryANDchrchr;"			  ]
[ "and",				  "command",	  "calc",	  "(left:bit,right:bit):bit ",												  "CALCbinaryANDbit;"				  ]
[ "abs",				  "command",	  "calc",	  "(x:lng):lng ",													  "CALCunarylngABS;"				  ]
[ "abs",				  "command",	  "calc",	  "(x:int):int ",													  "CALCunaryintABS;"				  ]
[ "abs",				  "command",	  "calc",	  "(x:sht):sht ",													  "CALCunaryshtABS;"				  ]
[ "abs",				  "command",	  "calc",	  "(x:chr):chr ",													  "CALCunarychrABS;"				  ]
[ "abs",				  "command",	  "calc",	  "(x:flt):flt ",													  "CALCunaryfltABS;"				  ]
[ "abs",				  "command",	  "calc",	  "(x:dbl):dbl ",													  "CALCunarydblABS;"				  ]
[ "blob",				  "command",	  "calc",	  "(s:str):blob ",													  "BLOBblob_fromstr;"				  ]
[ "blob",				  "command",	  "calc",	  "(b:blob):blob ",													  "BLOBblob_blob;"				  ]
[ "bat",				  "command",	  "calc",	  "(v:void):bat[:any_1,:any_2] ",											  "CALCnil2bat;"				  ]
[ "bat",				  "command",	  "calc",	  "(v:str):bat[:any_1,:any_2] ",											  "CALCstr2bat;"				  ]
[ "bit",				  "command",	  "calc",	  "(v:void):bit ",													  "CALCnil2bit;"				  ]
[ "bit",				  "command",	  "calc",	  "(v:str):bit ",													  "CALCstr2bit;"				  ]
[ "bat",				  "command",	  "calc",	  "(v:void):BAT ",													  "CALCnil2bat;"				  ]
[ "bat",				  "command",	  "calc",	  "(v:str):BAT ",													  "CALCstr2bat;"				  ]
[ "bit",				  "command",	  "calc",	  "(x:dbl):bit ",													  "CALCdbl2bit;"				  ]
[ "bit",				  "command",	  "calc",	  "(x:flt):bit ",													  "CALCflt2bit;"				  ]
[ "bit",				  "command",	  "calc",	  "(x:lng):bit ",													  "CALClng2bit;"				  ]
[ "bit",				  "command",	  "calc",	  "(x:int):bit ",													  "CALCint2bit;"				  ]
[ "bit",				  "command",	  "calc",	  "(x:sht):bit ",													  "CALCsht2bit;"				  ]
[ "bit",				  "command",	  "calc",	  "(x:chr):bit ",													  "CALCchr2bit;"				  ]
[ "bit",				  "command",	  "calc",	  "(x:bit):bit ",													  "CALCbit2bit;"				  ]
[ "bit",				  "command",	  "calc",	  "(x:oid):bit ",													  "CALCoid2bit;"				  ]
[ "between",				  "command",	  "calc",	  "(val:str,low:str,high:str):bit ",											  "CALCcompBetweenstr;"				  ]
[ "between",				  "command",	  "calc",	  "(val:lng,low:lng,high:lng):bit ",											  "CALCcompBetweenlng;"				  ]
[ "between",				  "command",	  "calc",	  "(val:lng,low:lng,high:lng):bit ",											  "CALCcompBetweenlng;"				  ]
[ "between",				  "command",	  "calc",	  "(val:lng,low:lng,high:lng):bit ",											  "CALCcompBetweenlng;"				  ]
[ "between",				  "command",	  "calc",	  "(val:lng,low:lng,high:lng):bit ",											  "CALCcompBetweenlng;"				  ]
[ "between",				  "command",	  "calc",	  "(val:int,low:int,high:int):bit ",											  "CALCcompBetweenint;"				  ]
[ "between",				  "command",	  "calc",	  "(val:int,low:int,high:int):bit ",											  "CALCcompBetweenint;"				  ]
[ "between",				  "command",	  "calc",	  "(val:int,low:int,high:int):bit ",											  "CALCcompBetweenint;"				  ]
[ "between",				  "command",	  "calc",	  "(val:int,low:int,high:int):bit ",											  "CALCcompBetweenint;"				  ]
[ "between",				  "command",	  "calc",	  "(val:sht,low:sht,high:sht):bit ",											  "CALCcompBetweensht;"				  ]
[ "between",				  "command",	  "calc",	  "(val:sht,low:sht,high:sht):bit ",											  "CALCcompBetweensht;"				  ]
[ "between",				  "command",	  "calc",	  "(val:sht,low:sht,high:sht):bit ",											  "CALCcompBetweensht;"				  ]
[ "between",				  "command",	  "calc",	  "(val:sht,low:sht,high:sht):bit ",											  "CALCcompBetweensht;"				  ]
[ "between",				  "command",	  "calc",	  "(val:chr,low:chr,high:chr):bit ",											  "CALCcompBetweenchr;"				  ]
[ "between",				  "command",	  "calc",	  "(val:chr,low:chr,high:chr):bit ",											  "CALCcompBetweenchr;"				  ]
[ "between",				  "command",	  "calc",	  "(val:chr,low:chr,high:chr):bit ",											  "CALCcompBetweenchr;"				  ]
[ "between",				  "command",	  "calc",	  "(val:chr,low:chr,high:chr):bit ",											  "CALCcompBetweenchr;"				  ]
[ "between",				  "command",	  "calc",	  "(val:dbl,low:dbl,high:dbl):bit ",											  "CALCcompBetweendbl;"				  ]
[ "between",				  "command",	  "calc",	  "(val:flt,low:flt,high:flt):bit ",											  "CALCcompBetweenflt;"				  ]
[ "between",				  "command",	  "calc",	  "(val:flt,low:flt,high:flt):bit ",											  "CALCcompBetweenflt;"				  ]
[ "between",				  "command",	  "calc",	  "(val:oid,low:oid,high:oid):bit ",											  "CALCcompBetweenoid;"				  ]
[ "chr",				  "command",	  "calc",	  "(v:void):chr ",													  "CALCnil2chr;"				  ]
[ "chr",				  "command",	  "calc",	  "(v:str):chr ",													  "CALCstr2chr;"				  ]
[ "chr",				  "command",	  "calc",	  "(x:lng):chr ",													  "CALClng2chr;"				  ]
[ "chr",				  "command",	  "calc",	  "(x:int):chr ",													  "CALCint2chr;"				  ]
[ "chr",				  "command",	  "calc",	  "(x:sht):chr ",													  "CALCsht2chr;"				  ]
[ "chr",				  "command",	  "calc",	  "(x:chr):chr ",													  "CALCchr2chr;"				  ]
[ "chr",				  "command",	  "calc",	  "(x:dbl):chr ",													  "CALCdbl2chr;"				  ]
[ "chr",				  "command",	  "calc",	  "(x:flt):chr ",													  "CALCflt2chr;"				  ]
[ "chr",				  "command",	  "calc",	  "(x:lng):chr ",													  "CALClng2chr;"				  ]
[ "chr",				  "command",	  "calc",	  "(x:int):chr ",													  "CALCint2chr;"				  ]
[ "chr",				  "command",	  "calc",	  "(x:sht):chr ",													  "CALCsht2chr;"				  ]
[ "chr",				  "command",	  "calc",	  "(x:chr):chr ",													  "CALCchr2chr;"				  ]
[ "chr",				  "command",	  "calc",	  "(x:bit):chr ",													  "CALCbit2chr;"				  ]
[ "chr",				  "command",	  "calc",	  "(x:oid):chr ",													  "CALCoid2chr;"				  ]
[ "daytime",				  "command",	  "calc",	  "(t:timestamp):daytime ",												  "MTIMEtimestamp_extract_daytime_default;"	  ]
[ "daytime",				  "command",	  "calc",	  "(s:lng):daytime ",													  "MTIMEsecs2daytime;"				  ]
[ "daytime",				  "command",	  "calc",	  "(d:daytime):daytime ",												  "MTIMEdaytime2daytime;"			  ]
[ "daytime",				  "command",	  "calc",	  "(s:str):daytime ",													  "MTIMEdaytime_fromstr;"			  ]
[ "date",				  "command",	  "calc",	  "(t:timestamp):date ",												  "MTIMEtimestamp_extract_date_default;"	  ]
[ "date",				  "command",	  "calc",	  "(d:date):date ",													  "MTIMEdate_date;"				  ]
[ "date",				  "command",	  "calc",	  "(s:str):date ",													  "MTIMEdate_fromstr;"				  ]
[ "dbl",				  "command",	  "calc",	  "(v:void):dbl ",													  "CALCnil2dbl;"				  ]
[ "dbl",				  "command",	  "calc",	  "(v:str):dbl ",													  "CALCstr2dbl;"				  ]
[ "dbl",				  "command",	  "calc",	  "(x:lng):dbl ",													  "CALClng2dbl;"				  ]
[ "dbl",				  "command",	  "calc",	  "(x:int):dbl ",													  "CALCint2dbl;"				  ]
[ "dbl",				  "command",	  "calc",	  "(x:sht):dbl ",													  "CALCsht2dbl;"				  ]
[ "dbl",				  "command",	  "calc",	  "(x:flt):dbl ",													  "CALCflt2dbl;"				  ]
[ "dbl",				  "command",	  "calc",	  "(x:dbl):dbl ",													  "CALCdbl2dbl;"				  ]
[ "flt",				  "command",	  "calc",	  "(v:void):flt ",													  "CALCnil2flt;"				  ]
[ "flt",				  "command",	  "calc",	  "(v:str):flt ",													  "CALCstr2flt;"				  ]
[ "flt",				  "command",	  "calc",	  "(x:lng):flt ",													  "CALClng2flt;"				  ]
[ "flt",				  "command",	  "calc",	  "(x:int):flt ",													  "CALCint2flt;"				  ]
[ "flt",				  "command",	  "calc",	  "(x:sht):flt ",													  "CALCsht2flt;"				  ]
[ "flt",				  "command",	  "calc",	  "(x:dbl):flt ",													  "CALCdbl2flt;"				  ]
[ "flt",				  "command",	  "calc",	  "(x:flt):flt ",													  "CALCflt2flt;"				  ]
[ "getBAT",				  "command",	  "calc",	  "(b:BAT):bat[:any_1,:any_2] ",											  "CALCbatid2bat;"				  ]
[ "getBATidentifier",			  "command",	  "calc",	  "(b:bat[:any_1,:any_2]):BAT ",											  "CALCbat2batid;"				  ]
[ "isnil",				  "command",	  "calc",	  "(v:timestamp):bit ",													  "MTIMEtimestamp_isnil;"			  ]
[ "isnil",				  "command",	  "calc",	  "(v:daytime):bit ",													  "MTIMEdaytime_isnil;"				  ]
[ "isnil",				  "command",	  "calc",	  "(v:date):bit ",													  "MTIMEdate_isnil;"				  ]
[ "int",				  "command",	  "calc",	  "(v:void):int ",													  "CALCnil2int;"				  ]
[ "int",				  "command",	  "calc",	  "(v:str):int ",													  "CALCstr2int;"				  ]
[ "ifthenelse",				  "pattern",	  "calc",	  "(b:bit,t:any_1,f:any_1):any_1 ",											  "CALCswitchbit;"				  ]
[ "int",				  "command",	  "calc",	  "(x:dbl):int ",													  "CALCdbl2int;"				  ]
[ "int",				  "command",	  "calc",	  "(x:flt):int ",													  "CALCflt2int;"				  ]
[ "int",				  "command",	  "calc",	  "(x:lng):int ",													  "CALClng2int;"				  ]
[ "int",				  "command",	  "calc",	  "(x:int):int ",													  "CALCint2int;"				  ]
[ "int",				  "command",	  "calc",	  "(x:sht):int ",													  "CALCsht2int;"				  ]
[ "int",				  "command",	  "calc",	  "(x:chr):int ",													  "CALCchr2int;"				  ]
[ "int",				  "command",	  "calc",	  "(x:bit):int ",													  "CALCbit2int;"				  ]
[ "int",				  "command",	  "calc",	  "(x:oid):int ",													  "CALCoid2int;"				  ]
[ "inv",				  "command",	  "calc",	  "(x:lng):lng ",													  "CALCunarychecklngINV;"			  ]
[ "inv",				  "command",	  "calc",	  "(x:int):int ",													  "CALCunarycheckintINV;"			  ]
[ "inv",				  "command",	  "calc",	  "(x:sht):sht ",													  "CALCunarycheckshtINV;"			  ]
[ "inv",				  "command",	  "calc",	  "(x:chr):chr ",													  "CALCunarycheckchrINV;"			  ]
[ "inv",				  "command",	  "calc",	  "(x:flt):flt ",													  "CALCunarycheckfltINV;"			  ]
[ "inv",				  "command",	  "calc",	  "(x:dbl):dbl ",													  "CALCunarycheckdblINV;"			  ]
[ "isnotnil",				  "command",	  "calc",	  "(v:void):bit ",													  "CALCisnotnil_void;"				  ]
[ "isnil",				  "command",	  "calc",	  "(v:void):bit ",													  "CALCisnil_void;"				  ]
[ "isnotnil",				  "command",	  "calc",	  "(v:BAT):bit ",													  "CALCisnotnil_bat;"				  ]
[ "isnil",				  "command",	  "calc",	  "(v:BAT):bit ",													  "CALCisnil_bat;"				  ]
[ "isnotnil",				  "command",	  "calc",	  "(v:str):bit ",													  "CALCisnotnil_str;"				  ]
[ "isnil",				  "command",	  "calc",	  "(v:str):bit ",													  "CALCisnil_str;"				  ]
[ "isnotnil",				  "command",	  "calc",	  "(v:dbl):bit ",													  "CALCisnotnil_dbl;"				  ]
[ "isnil",				  "command",	  "calc",	  "(v:dbl):bit ",													  "CALCisnil_dbl;"				  ]
[ "isnotnil",				  "command",	  "calc",	  "(v:lng):bit ",													  "CALCisnotnil_lng;"				  ]
[ "isnil",				  "command",	  "calc",	  "(v:lng):bit ",													  "CALCisnil_lng;"				  ]
[ "isnotnil",				  "command",	  "calc",	  "(v:flt):bit ",													  "CALCisnotnil_flt;"				  ]
[ "isnil",				  "command",	  "calc",	  "(v:flt):bit ",													  "CALCisnil_flt;"				  ]
[ "isnotnil",				  "command",	  "calc",	  "(v:oid):bit ",													  "CALCisnotnil_oid;"				  ]
[ "isnil",				  "command",	  "calc",	  "(v:oid):bit ",													  "CALCisnil_oid;"				  ]
[ "isnotnil",				  "command",	  "calc",	  "(v:int):bit ",													  "CALCisnotnil_int;"				  ]
[ "isnil",				  "command",	  "calc",	  "(v:int):bit ",													  "CALCisnil_int;"				  ]
[ "isnotnil",				  "command",	  "calc",	  "(v:sht):bit ",													  "CALCisnotnil_sht;"				  ]
[ "isnil",				  "command",	  "calc",	  "(v:sht):bit ",													  "CALCisnil_sht;"				  ]
[ "isnotnil",				  "command",	  "calc",	  "(v:bit):bit ",													  "CALCisnotnil_bit;"				  ]
[ "isnil",				  "command",	  "calc",	  "(v:bit):bit ",													  "CALCisnil_bit;"				  ]
[ "isnotnil",				  "command",	  "calc",	  "(v:chr):bit ",													  "CALCisnotnil_chr;"				  ]
[ "isnil",				  "command",	  "calc",	  "(v:chr):bit ",													  "CALCisnil_chr;"				  ]
[ "lng",				  "command",	  "calc",	  "(v:void):lng ",													  "CALCnil2lng;"				  ]
[ "lng",				  "command",	  "calc",	  "(v:str):lng ",													  "CALCstr2lng;"				  ]
[ "lng",				  "command",	  "calc",	  "(x:dbl):lng ",													  "CALCdbl2lng;"				  ]
[ "lng",				  "command",	  "calc",	  "(x:flt):lng ",													  "CALCflt2lng;"				  ]
[ "lng",				  "command",	  "calc",	  "(x:lng):lng ",													  "CALClng2lng;"				  ]
[ "lng",				  "command",	  "calc",	  "(x:int):lng ",													  "CALCint2lng;"				  ]
[ "lng",				  "command",	  "calc",	  "(x:sht):lng ",													  "CALCsht2lng;"				  ]
[ "lng",				  "command",	  "calc",	  "(x:chr):lng ",													  "CALCchr2lng;"				  ]
[ "lng",				  "command",	  "calc",	  "(x:bit):lng ",													  "CALCbit2lng;"				  ]
[ "lng",				  "command",	  "calc",	  "(x:oid):lng ",													  "CALCoid2lng;"				  ]
[ "length",				  "command",	  "calc",	  "(x:str):int ",													  "CALClengthstr;"				  ]
[ "length",				  "command",	  "calc",	  "(x:lng):int ",													  "CALClengthlng;"				  ]
[ "length",				  "command",	  "calc",	  "(x:int):int ",													  "CALClengthint;"				  ]
[ "length",				  "command",	  "calc",	  "(x:sht):int ",													  "CALClengthsht;"				  ]
[ "length",				  "command",	  "calc",	  "(x:chr):int ",													  "CALClengthchr;"				  ]
[ "length",				  "command",	  "calc",	  "(x:flt):int ",													  "CALClengthflt;"				  ]
[ "length",				  "command",	  "calc",	  "(x:dbl):int ",													  "CALClengthdbl;"				  ]
[ "min",				  "command",	  "calc",	  "(l:dbl,r:dbl):dbl ",													  "CALCbinaryMINdbl;"				  ]
[ "max",				  "command",	  "calc",	  "(l:dbl,r:dbl):dbl ",													  "CALCbinaryMAXdbl;"				  ]
[ "min",				  "command",	  "calc",	  "(l:lng,r:lng):lng ",													  "CALCbinaryMINlng;"				  ]
[ "max",				  "command",	  "calc",	  "(l:lng,r:lng):lng ",													  "CALCbinaryMAXlng;"				  ]
[ "min",				  "command",	  "calc",	  "(l:flt,r:flt):flt ",													  "CALCbinaryMINflt;"				  ]
[ "max",				  "command",	  "calc",	  "(l:flt,r:flt):flt ",													  "CALCbinaryMAXflt;"				  ]
[ "min",				  "command",	  "calc",	  "(l:oid,r:oid):oid ",													  "CALCbinaryMINoid;"				  ]
[ "max",				  "command",	  "calc",	  "(l:oid,r:oid):oid ",													  "CALCbinaryMAXoid;"				  ]
[ "min",				  "command",	  "calc",	  "(l:int,r:int):int ",													  "CALCbinaryMINint;"				  ]
[ "max",				  "command",	  "calc",	  "(l:int,r:int):int ",													  "CALCbinaryMAXint;"				  ]
[ "min",				  "command",	  "calc",	  "(l:sht,r:sht):sht ",													  "CALCbinaryMINsht;"				  ]
[ "max",				  "command",	  "calc",	  "(l:sht,r:sht):sht ",													  "CALCbinaryMAXsht;"				  ]
[ "min",				  "command",	  "calc",	  "(l:chr,r:chr):chr ",													  "CALCbinaryMINchr;"				  ]
[ "max",				  "command",	  "calc",	  "(l:chr,r:chr):chr ",													  "CALCbinaryMAXchr;"				  ]
[ "newoid",				  "command",	  "calc",	  "(incr:int):oid ",													  "CALCnewoidInc;"				  ]
[ "newoid",				  "command",	  "calc",	  "(incr:lng):oid ",													  "CALCnewoidInclng;"				  ]
[ "newoid",				  "command",	  "calc",	  "():oid ",														  "CALCnewoidBase;"				  ]
[ "not",				  "command",	  "calc",	  "(left:lng):lng ",													  "CALCunarylngNOT;"				  ]
[ "not",				  "command",	  "calc",	  "(left:int):int ",													  "CALCunaryintNOT;"				  ]
[ "not",				  "command",	  "calc",	  "(left:sht):sht ",													  "CALCunaryshtNOT;"				  ]
[ "not",				  "command",	  "calc",	  "(left:chr):chr ",													  "CALCunarychrNOT;"				  ]
[ "not",				  "command",	  "calc",	  "(left:bit):bit ",													  "CALCunarybitNOT;"				  ]
[ "oid",				  "command",	  "calc",	  "(v:void):oid ",													  "CALCnil2oid;"				  ]
[ "oid",				  "command",	  "calc",	  "(v:str):oid ",													  "CALCstr2oid;"				  ]
[ "or",					  "command",	  "calc",	  "(left:lng,right:lng):lng ",												  "CALCbinaryORlnglng;"				  ]
[ "or",					  "command",	  "calc",	  "(left:int,right:int):int ",												  "CALCbinaryORintint;"				  ]
[ "or",					  "command",	  "calc",	  "(left:sht,right:sht):sht ",												  "CALCbinaryORshtsht;"				  ]
[ "or",					  "command",	  "calc",	  "(left:chr,right:chr):chr ",												  "CALCbinaryORchrchr;"				  ]
[ "or",					  "command",	  "calc",	  "(left:bit,right:bit):bit ",												  "CALCbinaryORbit;"				  ]
[ "oid",				  "command",	  "calc",	  "(x:dbl):oid ",													  "CALCdbl2oid;"				  ]
[ "oid",				  "command",	  "calc",	  "(x:flt):oid ",													  "CALCflt2oid;"				  ]
[ "oid",				  "command",	  "calc",	  "(x:int):oid ",													  "CALCint2oid;"				  ]
[ "oid",				  "command",	  "calc",	  "(x:sht):oid ",													  "CALCsht2oid;"				  ]
[ "oid",				  "command",	  "calc",	  "(x:lng):oid ",													  "CALClng2oid;"				  ]
[ "oid",				  "command",	  "calc",	  "(x:oid):oid ",													  "CALCoid2oid;"				  ]
[ "ptr",				  "command",	  "calc",	  "(v:void):ptr ",													  "CALCnil2ptr;"				  ]
[ "ptr",				  "command",	  "calc",	  "(v:str):ptr ",													  "CALCstr2ptr;"				  ]
[ "sqlblob",				  "command",	  "calc",	  "(s:str):sqlblob ",													  "BLOBsqlblob_fromstr;"			  ]
[ "sqlblob",				  "command",	  "calc",	  "(b:sqlblob):sqlblob ",												  "BLOBblob_blob;"				  ]
[ "setoid",				  "command",	  "calc",	  "():oid ",														  "CALCsetoidBase;"				  ]
[ "setoid",				  "command",	  "calc",	  "(base:oid):oid ",													  "CALCsetoidInc;"				  ]
[ "setoid",				  "command",	  "calc",	  "(v:oid):void ",													  "oidSetoidImpl;"				  ]
[ "setoid",				  "command",	  "calc",	  "(v:lng):void ",													  "lngSetoidImpl;"				  ]
[ "setoid",				  "command",	  "calc",	  "(v:int):void ",													  "intSetoidImpl;"				  ]
[ "str",				  "command",	  "calc",	  "(v:str):str ",													  "CALCstr2str;"				  ]
[ "str",				  "command",	  "calc",	  "(v:void):str ",													  "CALCnil2str;"				  ]
[ "str",				  "command",	  "calc",	  "(v:bat[:any_1,:any_2]):str ",											  "CALCbat2str;"				  ]
[ "str",				  "command",	  "calc",	  "(v:chr):str ",													  "CALCchr2str;"				  ]
[ "str",				  "command",	  "calc",	  "(v:ptr):str ",													  "CALCptr2str;"				  ]
[ "str",				  "command",	  "calc",	  "(v:bit):str ",													  "CALCbit2str;"				  ]
[ "str",				  "command",	  "calc",	  "(v:dbl):str ",													  "CALCdbl2str;"				  ]
[ "str",				  "command",	  "calc",	  "(v:flt):str ",													  "CALCflt2str;"				  ]
[ "str",				  "command",	  "calc",	  "(v:lng):str ",													  "CALClng2str;"				  ]
[ "str",				  "command",	  "calc",	  "(v:BAT):str ",													  "CALCbat2str;"				  ]
[ "str",				  "command",	  "calc",	  "(v:int):str ",													  "CALCint2str;"				  ]
[ "sht",				  "command",	  "calc",	  "(v:void):sht ",													  "CALCnil2sht;"				  ]
[ "str",				  "command",	  "calc",	  "(v:sht):str ",													  "CALCsht2str;"				  ]
[ "sht",				  "command",	  "calc",	  "(v:str):sht ",													  "CALCstr2sht;"				  ]
[ "str",				  "command",	  "calc",	  "(v:oid):str ",													  "CALCoid2str;"				  ]
[ "str",				  "command",	  "calc",	  "(x:dbl):str ",													  "CALCdbl2str;"				  ]
[ "str",				  "command",	  "calc",	  "(x:flt):str ",													  "CALCflt2str;"				  ]
[ "str",				  "command",	  "calc",	  "(x:lng):str ",													  "CALClng2str;"				  ]
[ "str",				  "command",	  "calc",	  "(x:int):str ",													  "CALCint2str;"				  ]
[ "str",				  "command",	  "calc",	  "(x:sht):str ",													  "CALCsht2str;"				  ]
[ "sht",				  "command",	  "calc",	  "(x:dbl):sht ",													  "CALCdbl2sht;"				  ]
[ "sht",				  "command",	  "calc",	  "(x:flt):sht ",													  "CALCflt2sht;"				  ]
[ "sht",				  "command",	  "calc",	  "(x:lng):sht ",													  "CALClng2sht;"				  ]
[ "sht",				  "command",	  "calc",	  "(x:int):sht ",													  "CALCint2sht;"				  ]
[ "sht",				  "command",	  "calc",	  "(x:sht):sht ",													  "CALCsht2sht;"				  ]
[ "sht",				  "command",	  "calc",	  "(x:chr):sht ",													  "CALCchr2sht;"				  ]
[ "sht",				  "command",	  "calc",	  "(x:bit):sht ",													  "CALCbit2sht;"				  ]
[ "sht",				  "command",	  "calc",	  "(x:oid):sht ",													  "CALCoid2sht;"				  ]
[ "timestamp",				  "command",	  "calc",	  "(d:date):timestamp ",												  "MTIMEtimestamp_create_from_date;"		  ]
[ "timestamp",				  "command",	  "calc",	  "(t:timestamp):timestamp ",												  "MTIMEtimestamp2timestamp;"			  ]
[ "timestamp",				  "command",	  "calc",	  "(s:str):timestamp ",													  "MTIMEtimestamp_fromstr;"			  ]
[ "void",				  "command",	  "calc",	  "(v:lng):void ",													  "CALClng2void;"				  ]
[ "void",				  "command",	  "calc",	  "(v:sht):void ",													  "CALCsht2void;"				  ]
[ "void",				  "command",	  "calc",	  "(v:int):void ",													  "CALCint2void;"				  ]
[ "void",				  "command",	  "calc",	  "(v:void):void ",													  "CALCnil2void;"				  ]
[ "xor",				  "command",	  "calc",	  "(left:lng,right:lng):lng ",												  "CALCbinaryXORlnglng;"			  ]
[ "xor",				  "command",	  "calc",	  "(left:int,right:int):int ",												  "CALCbinaryXORintint;"			  ]
[ "xor",				  "command",	  "calc",	  "(left:sht,right:sht):sht ",												  "CALCbinaryXORshtsht;"			  ]
[ "xor",				  "command",	  "calc",	  "(left:chr,right:chr):chr ",												  "CALCbinaryXORchrchr;"			  ]
[ "xor",				  "command",	  "calc",	  "(left:bit,right:bit):bit ",												  "CALCbinaryXORbit;"				  ]
[ "antijoin",				  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_4]):bat[:any_1,:any_4] ",						  "ALGantijoin;"				  ]
[ "bandjoin",				  "command",	  "algebra",	  "(outer:bat[:any_1,:any_2],inner:bat[:any_2,:any_3],minus:any_2,plus:any_2):bat[:any_1,:any_3] ",			  "ALGbandjoin;"				  ]
[ "crossproduct",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_3,:any_4]):bat[:any_1,:any_4] ",						  "ALGcross;"					  ]
[ "copy",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "ALGcopy;"					  ]
[ "difference",				  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",						  "ALGsdiff;"					  ]
[ "exist",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],h:any_1,t:any_2):bit ",									  "ALGexistBUN;"				  ]
[ "exist",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],h:any_1):bit ",										  "ALGexist;"					  ]
[ "fetchjoin",				  "command",	  "algebra",	  "(left:bat[:any_1,:oid],right:bat[:oid,:any_3]):bat[:any_1,:any_3] ",							  "ALGfetchjoin;"				  ]
[ "fragment",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],hlow:any_1,hhigh:any_1,tlow:any_2,thigh:any_2):bat[:any_1,:any_2] ",				  "ALGfragment;"				  ]
[ "fetch",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],s:bat[:oid,:any_3]):bat[:any_1,:any_2] ",							  "ALGfetchbat;"				  ]
[ "fetch",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],s:bat[:lng,:any_3]):bat[:any_1,:any_2] ",							  "ALGfetchbat;"				  ]
[ "fetch",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],s:bat[:int,:any_3]):bat[:any_1,:any_2] ",							  "ALGfetchbat;"				  ]
[ "fetch",				  "command",	  "algebra",	  "(b:bat[:any_2,:any_1],x:int):any_1 ",										  "ALGfetchint;"				  ]
[ "fetch",				  "command",	  "algebra",	  "(b:bat[:any_2,:any_1],x:lng):any_1 ",										  "ALGfetch;"					  ]
[ "fetch",				  "command",	  "algebra",	  "(b:bat[:any_2,:any_1],x:oid):any_1 ",										  "ALGfetchoid;"				  ]
[ "find",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],h:any_1):any_2 ",										  "ALGfind;"					  ]
[ "groupby",				  "command",	  "algebra",	  "(b:bat[:any_1,:int]):bat[:any_1,:oid] ",										  "ALGgroupby;"					  ]
[ "hashsplit",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],buckects:int):bat[:int,:BAT] ",								  "ALGhashsplit;"				  ]
[ "hashjoin",				  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",						  "ALGhashjoin;"				  ]
[ "indexjoin",				  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",						  "ALGindexjoin;"				  ]
[ "intersect",				  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",						  "ALGsintersect;"				  ]
[ "joinPath",				  "pattern",	  "algebra",	  "(l:bat[:any,:any]...):bat[:any,:any] ",										  "ALGjoinPath;"				  ]
[ "join",				  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3],estimate:lng):bat[:any_1,:any_3] ",				  "ALGjoinestimate;"				  ]
[ "join",				  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",						  "ALGjoin;"					  ]
[ "join",				  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",						  "ALGjoin;"					  ]
[ "kunion",				  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",						  "ALGkunion;"					  ]
[ "kdifference",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any]):bat[:any_1,:any_2] ",						  "ALGkdiff;"					  ]
[ "kintersect",				  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any]):bat[:any_1,:any_2] ",						  "ALGsemijoin;"				  ]
[ "kunique",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "ALGkunique;"					  ]
[ "leftfetchjoin",			  "command",	  "algebra",	  "(left:bat[:any_1,:oid],right:bat[:oid,:any_3]):bat[:any_1,:any_3] ",							  "ALGleftfetchjoin;"				  ]
[ "leftjoin",				  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3],estimate:lng):bat[:any_1,:any_3] ",				  "ALGleftjoinestimate;"			  ]
[ "like",				  "command",	  "algebra",	  "(b:bat[:any_1,:str],substr:str):bat[:any_1,:str] ",									  "ALGlike;"					  ]
[ "materialize",			  "command",	  "algebra",	  "(b:bat[:oid,:any_1]):bat[:oid,:any_1] ",										  "ALGmaterialize;"				  ]
[ "merge",				  "command",	  "algebra",	  "(b:bat[:oid,:oid]):bat[:lng,:oid] ",											  "ALGmerge;"					  ]
[ "mark_grp",				  "command",	  "algebra",	  "(b:bat[:any_1,:oid],g:bat[:oid,:any_2],s:oid):bat[:any_1,:oid] ",							  "ALGmark_grp_2;"				  ]
[ "mark_grp",				  "command",	  "algebra",	  "(b:bat[:any_1,:oid],g:bat[:oid,:oid]):bat[:any_1,:oid] ",								  "ALGmark_grp_1;"				  ]
[ "markH",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],base:oid):bat[:oid,:any_2] ",									  "ALGmarkHead;"				  ]
[ "markH",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:oid,:any_2] ",										  "ALGmarkHead_default;"			  ]
[ "markT",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:oid] ",										  "ALGtmark_default;"				  ]
[ "markT",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],base:oid):bat[:any_1,:oid] ",									  "ALGtmark;"					  ]
[ "mergejoin",				  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",						  "ALGmergejoin;"				  ]
[ "number",				  "command",	  "algebra",	  "(b:bat[:any_1,:any]):bat[:any_1,:int] ",										  "ALGnumber;"					  ]
[ "outerjoin",				  "command",	  "algebra",	  "(outer:bat[:any_1,:any_2],inner:bat[:any_2,:any_3],estimate:lng):bat[:any_1,:any_3] ",				  "ALGouterjoinestimate;"			  ]
[ "outerjoin",				  "command",	  "algebra",	  "(outer:bat[:any_1,:oid],inner:bat[:oid,:any_3]):bat[:any_1,:any_3] ",						  "ALGouterjoin;"				  ]
[ "outerjoin",				  "command",	  "algebra",	  "(outer:bat[:any_1,:oid],inner:bat[:oid,:any_3]):bat[:any_1,:any_3] ",						  "ALGouterjoin;"				  ]
[ "outerjoin",				  "command",	  "algebra",	  "(outer:bat[:any_1,:any_2],inner:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",						  "ALGouterjoin;"				  ]
[ "project",				  "pattern",	  "algebra",	  "(b:bat[:any_1,:any_3],val:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",							  "CMDBBPproject;"				  ]
[ "project",				  "pattern",	  "algebra",	  "(b:bat[:any_1,:any_3],val:any_2):bat[:any_1,:any_2] ",								  "CMDBBPproject;"				  ]
[ "project",				  "command",	  "algebra",	  "(b:bat[:any_2,:any_1],v:dbl):bat[:any_2,:dbl] ",									  "ALGprojecttail_dbl;"				  ]
[ "project",				  "command",	  "algebra",	  "(v:dbl,b:bat[:any_2,:any_1]):bat[:dbl,:any_1] ",									  "ALGprojecthead_dbl;"				  ]
[ "project",				  "command",	  "algebra",	  "(b:bat[:any_2,:any_1],v:flt):bat[:any_2,:flt] ",									  "ALGprojecttail_flt;"				  ]
[ "project",				  "command",	  "algebra",	  "(v:flt,b:bat[:any_2,:any_1]):bat[:flt,:any_1] ",									  "ALGprojecthead_flt;"				  ]
[ "project",				  "command",	  "algebra",	  "(b:bat[:any_2,:any_1],v:lng):bat[:any_2,:lng] ",									  "ALGprojecttail_lng;"				  ]
[ "project",				  "command",	  "algebra",	  "(v:lng,b:bat[:any_2,:any_1]):bat[:lng,:any_1] ",									  "ALGprojecthead_lng;"				  ]
[ "project",				  "command",	  "algebra",	  "(b:bat[:any_2,:any_1],v:sht):bat[:any_2,:sht] ",									  "ALGprojecttail_sht;"				  ]
[ "project",				  "command",	  "algebra",	  "(v:sht,b:bat[:any_2,:any_1]):bat[:sht,:any_1] ",									  "ALGprojecthead_sht;"				  ]
[ "project",				  "command",	  "algebra",	  "(b:bat[:any_2,:any_1],v:int):bat[:any_2,:int] ",									  "ALGprojecttail_int;"				  ]
[ "project",				  "command",	  "algebra",	  "(v:int,b:bat[:any_2,:any_1]):bat[:int,:any_1] ",									  "ALGprojecthead_int;"				  ]
[ "project",				  "command",	  "algebra",	  "(b:bat[:any_2,:any_1],v:oid):bat[:any_2,:oid] ",									  "ALGprojecttail_oid;"				  ]
[ "project",				  "command",	  "algebra",	  "(v:oid,b:bat[:any_2,:any_1]):bat[:oid,:any_1] ",									  "ALGprojecthead_oid;"				  ]
[ "project",				  "command",	  "algebra",	  "(b:bat[:any_2,:any_1],v:str):bat[:any_2,:str] ",									  "ALGprojecttail_str;"				  ]
[ "project",				  "command",	  "algebra",	  "(v:str,b:bat[:any_2,:any_1]):bat[:str,:any_1] ",									  "ALGprojecthead_str;"				  ]
[ "project",				  "command",	  "algebra",	  "(b:bat[:any_2,:any_1],v:chr):bat[:any_2,:chr] ",									  "ALGprojecttail_chr;"				  ]
[ "project",				  "command",	  "algebra",	  "(v:chr,b:bat[:any_2,:any_1]):bat[:chr,:any_1] ",									  "ALGprojecthead_chr;"				  ]
[ "project",				  "command",	  "algebra",	  "(b:bat[:any_2,:any_1],v:bit):bat[:any_2,:bit] ",									  "ALGprojecttail_bit;"				  ]
[ "project",				  "command",	  "algebra",	  "(v:bit,b:bat[:any_2,:any_1]):bat[:bit,:any_1] ",									  "ALGprojecthead_bit;"				  ]
[ "project",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:oid] ",										  "ALGprojectNIL;"				  ]
[ "position",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],val:any_1,tval:any_2):int ",									  "ALGpositionBUN;"				  ]
[ "position",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],v:any_1):int ",										  "ALGposition;"				  ]
[ "reuse",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "ALGreuse;"					  ]
[ "revert",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "ALGrevert;"					  ]
[ "split",				  "command",	  "algebra",	  "(b:bat[:lng,:oid]):bat[:oid,:oid] ",											  "ALGsplit;"					  ]
[ "sunion",				  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",						  "ALGsunion;"					  ]
[ "sdifference",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",						  "ALGsdiff;"					  ]
[ "semijoin",				  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any]):bat[:any_1,:any_2] ",						  "ALGsemijoin;"				  ]
[ "sintersect",				  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",						  "ALGsintersect;"				  ]
[ "sunique",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "ALGsunique;"					  ]
[ "ssort_rev",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "ALGssort_rev;"				  ]
[ "ssort",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "ALGssort;"					  ]
[ "sortTH",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "ALGthsort;"					  ]
[ "sortHT",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "ALGhtsort;"					  ]
[ "sortReverseTail",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "ALGtsort_rev;"				  ]
[ "sortTail",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "ALGtsort;"					  ]
[ "sortReverse",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "ALGhsort_rev;"				  ]
[ "sort",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "ALGhsort;"					  ]
[ "sample",				  "command",	  "algebra",	  "(b:bat[:oid,:any_2],num:int):bat[:oid,:any_2] ",									  "ALGsample;"					  ]
[ "slice",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],x:int,y:int):bat[:any_1,:any_2] ",								  "ALGslice_int;"				  ]
[ "slice",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],x:lng,y:lng):bat[:any_1,:any_2] ",								  "ALGslice;"					  ]
[ "select",				  "command",	  "algebra",	  "(b:bat[:any_2,:void],low:any_2,high:any_2,li:bit,hi:bit):bat[:any_2,:void] ",					  "ALGselectInclusiveHead;"			  ]
[ "select",				  "command",	  "algebra",	  "(b:bat[:any_2,:void],low:any_2,high:any_2):bat[:any_2,:void] ",							  "ALGselectHead;"				  ]
[ "select",				  "command",	  "algebra",	  "(b:bat[:any_2,:void],low:any_2):bat[:any_2,:void] ",									  "ALGselect1Head;"				  ]
[ "selectH",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],value:any_1):bat[:any_1,:any_2] ",								  "ALGselect1Head;"				  ]
[ "selectH",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],low:any_1,high:any_1,li:bit,hi:bit):bat[:any_1,:any_2] ",					  "ALGselectInclusiveHead;"			  ]
[ "selectH",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],low:any_1,high:any_1):bat[:any_1,:any_2] ",							  "ALGselectHead;"				  ]
[ "selectNotNil",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "ALGselectNotNil;"				  ]
[ "select",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],value:any_2):bat[:any_1,:any_2] ",								  "ALGselect1;"					  ]
[ "select",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],low:any_2,high:any_2,li:bit,hi:bit):bat[:any_1,:any_2] ",					  "ALGselectInclusive;"				  ]
[ "select",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],low:any_2,high:any_2):bat[:any_1,:any_2] ",							  "ALGselect;"					  ]
[ "thetajoin",				  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3],opname:int,estimate:lng):bat[:any_1,:any_3] ",			  "ALGthetajoinEstimate;"			  ]
[ "thetajoin",				  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3],opname:int):bat[:any_1,:any_3] ",					  "ALGthetajoin;"				  ]
[ "tunique",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "ALGtunique;"					  ]
[ "topN",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],top:lng):bat[:any_1,:any_2] ",									  "ALGtopN;"					  ]
[ "uhashsplit",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],buckets:int):bat[:int,:BAT] ",									  "ALGuhashsplit;"				  ]
[ "union",				  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",						  "ALGsunion;"					  ]
[ "unique",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "ALGsunique;"					  ]
[ "uselect",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],value:any_2):bat[:any_1,:oid] ",								  "ALGuselect1;"				  ]
[ "uselect",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],low:any_2,high:any_2):bat[:any_1,:oid] ",							  "ALGuselect;"					  ]
[ "uselect",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],low:any_2,high:any_2,li:bit,hi:bit):bat[:any_1,:oid] ",					  "ALGuselectInclusive;"			  ]
[ "avg",				  "command",	  "aggr",	  "(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",						  "AX3aggrX3_avg3_dbl;"				  ]
[ "avg",				  "command",	  "aggr",	  "(b:bat[:oid,:dbl],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",								  "AX3aggrX3_avg_dbl;"				  ]
[ "avg",				  "command",	  "aggr",	  "(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",						  "AX3aggrX3_avg3_flt;"				  ]
[ "avg",				  "command",	  "aggr",	  "(b:bat[:oid,:flt],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",								  "AX3aggrX3_avg_flt;"				  ]
[ "avg",				  "command",	  "aggr",	  "(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",						  "AX3aggrX3_avg3_lng;"				  ]
[ "avg",				  "command",	  "aggr",	  "(b:bat[:oid,:lng],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",								  "AX3aggrX3_avg_lng;"				  ]
[ "avg",				  "command",	  "aggr",	  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",						  "AX3aggrX3_avg3_int;"				  ]
[ "avg",				  "command",	  "aggr",	  "(b:bat[:oid,:int],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",								  "AX3aggrX3_avg_int;"				  ]
[ "avg",				  "command",	  "aggr",	  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",						  "AX3aggrX3_avg3_sht;"				  ]
[ "avg",				  "command",	  "aggr",	  "(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",								  "AX3aggrX3_avg_sht;"				  ]
[ "avg",				  "command",	  "aggr",	  "(b:bat[:any_1,:dbl]):dbl ",												  "ALGavg_dbl;"					  ]
[ "avg",				  "command",	  "aggr",	  "(b:bat[:any_1,:flt]):dbl ",												  "ALGavg_flt;"					  ]
[ "avg",				  "command",	  "aggr",	  "(b:bat[:any_1,:lng]):dbl ",												  "ALGavg_lng;"					  ]
[ "avg",				  "command",	  "aggr",	  "(b:bat[:any_1,:int]):dbl ",												  "ALGavg_int;"					  ]
[ "avg",				  "command",	  "aggr",	  "(b:bat[:any_1,:sht]):dbl ",												  "ALGavg_sht;"					  ]
[ "count_no_nil",			  "command",	  "aggr",	  "(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:int] ",						  "AX3count_no_nil3;"				  ]
[ "count",				  "command",	  "aggr",	  "(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:int] ",						  "AX3aggrX3_count3Nils;"			  ]
[ "count_no_nil",			  "command",	  "aggr",	  "(b:bat[:oid,:any_1],e:bat[:oid,:any_1]):bat[:oid,:int] ",								  "AX3count_no_nil2;"				  ]
[ "count",				  "command",	  "aggr",	  "(b:bat[:void,:any_1],e:bat[:void,:any_2]):bat[:void,:int] ",								  "AX3aggrX3_count2Nils;"			  ]
[ "count",				  "command",	  "aggr",	  "(b:bat[:void,:any_1],e:bat[:oid,:any_2]):bat[:void,:int] ",								  "AX3aggrX3_count2Nils;"			  ]
[ "count",				  "command",	  "aggr",	  "(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2],nonils:bit):bat[:void,:int] ",				  "AX3aggrX3_count3;"				  ]
[ "count",				  "command",	  "aggr",	  "(b:bat[:oid,:any_1],e:bat[:oid,:any_2],ignorenils:bit):bat[:oid,:int] ",						  "AX3aggrX3_count;"				  ]
[ "cardinality",			  "command",	  "aggr",	  "(b:bat[:any_1,:any_2]):lng ",											  "ALGcard;"					  ]
[ "count_no_nil",			  "command",	  "aggr",	  "(b:bat[:any_1,:any_2]):int ",											  "ALGcount_no_nil;"				  ]
[ "count",				  "command",	  "aggr",	  "(b:bat[:any_1,:any],ignore_nils:bit):int ",										  "ALGcount_nil;"				  ]
[ "count",				  "command",	  "aggr",	  "(b:bat[:any_1,:any]):int ",												  "ALGcount_bat;"				  ]
[ "histogram",				  "command",	  "aggr",	  "(b:bat[:any_1,:any_2]):bat[:any_2,:int] ",										  "ALGhistogram;"				  ]
[ "max",				  "command",	  "aggr",	  "(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:any_1] ",						  "AX3aggrX3_max3;"				  ]
[ "min",				  "command",	  "aggr",	  "(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:any_1] ",						  "AX3aggrX3_min3;"				  ]
[ "max",				  "command",	  "aggr",	  "(b:bat[:oid,:any_1],e:bat[:oid,:any_2]):bat[:oid,:any_1] ",								  "AX3aggrX3_max;"				  ]
[ "min",				  "command",	  "aggr",	  "(b:bat[:oid,:any_1],e:bat[:oid,:any_2]):bat[:oid,:any_1] ",								  "AX3aggrX3_min;"				  ]
[ "min",				  "command",	  "aggr",	  "(b:bat[:any_1,:lng]):lng ",												  "ALGmin_lng;"					  ]
[ "min",				  "command",	  "aggr",	  "(b:bat[:any_1,:dbl]):dbl ",												  "ALGmin_dbl;"					  ]
[ "min",				  "command",	  "aggr",	  "(b:bat[:any_1,:flt]):flt ",												  "ALGmin_flt;"					  ]
[ "min",				  "command",	  "aggr",	  "(b:bat[:any_1,:int]):int ",												  "ALGmin_int;"					  ]
[ "min",				  "command",	  "aggr",	  "(b:bat[:any_1,:sht]):sht ",												  "ALGmin_sht;"					  ]
[ "max",				  "command",	  "aggr",	  "(b:bat[:any_1,:lng]):lng ",												  "ALGmax_lng;"					  ]
[ "max",				  "command",	  "aggr",	  "(b:bat[:any_1,:dbl]):dbl ",												  "ALGmax_dbl;"					  ]
[ "max",				  "command",	  "aggr",	  "(b:bat[:any_1,:flt]):flt ",												  "ALGmax_flt;"					  ]
[ "max",				  "command",	  "aggr",	  "(b:bat[:any_1,:int]):int ",												  "ALGmax_int;"					  ]
[ "max",				  "command",	  "aggr",	  "(b:bat[:any_1,:sht]):sht ",												  "ALGmax_sht;"					  ]
[ "max",				  "command",	  "aggr",	  "(b:bat[:any_1,:any_2]):any_2 ",											  "ALGmaxany;"					  ]
[ "min",				  "command",	  "aggr",	  "(b:bat[:any_1,:any_2]):any_2 ",											  "ALGminany;"					  ]
[ "product",				  "command",	  "aggr",	  "(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",						  "AX3aggrX3_prod3_dbl_dbl;"			  ]
[ "product",				  "command",	  "aggr",	  "(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",						  "AX3aggrX3_prod3_flt_dbl;"			  ]
[ "product",				  "command",	  "aggr",	  "(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:flt] ",						  "AX3aggrX3_prod3_flt_flt;"			  ]
[ "product",				  "command",	  "aggr",	  "(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",						  "AX3aggrX3_prod3_lng_lng;"			  ]
[ "product",				  "command",	  "aggr",	  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",						  "AX3aggrX3_prod3_int_lng;"			  ]
[ "product",				  "command",	  "aggr",	  "(b:bat[:oid,:oid],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] ",						  "AX3aggrX3_prod3_oid_int;"			  ]
[ "product",				  "command",	  "aggr",	  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] ",						  "AX3aggrX3_prod3_int_int;"			  ]
[ "product",				  "command",	  "aggr",	  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",						  "AX3aggrX3_prod3_sht_lng;"			  ]
[ "product",				  "command",	  "aggr",	  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] ",						  "AX3aggrX3_prod3_sht_int;"			  ]
[ "product",				  "command",	  "aggr",	  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:sht] ",						  "AX3aggrX3_prod3_sht_sht;"			  ]
[ "product",				  "command",	  "aggr",	  "(b:bat[:any_1,:dbl]):dbl ",												  "ALGprod_dbl_dbl;"				  ]
[ "product",				  "command",	  "aggr",	  "(b:bat[:any_1,:flt]):dbl ",												  "ALGprod_flt_dbl;"				  ]
[ "product",				  "command",	  "aggr",	  "(b:bat[:any_1,:flt]):flt ",												  "ALGprod_flt_flt;"				  ]
[ "product",				  "command",	  "aggr",	  "(b:bat[:any_1,:lng]):lng ",												  "ALGprod_lng_lng;"				  ]
[ "product",				  "command",	  "aggr",	  "(b:bat[:any_1,:int]):lng ",												  "ALGprod_int_lng;"				  ]
[ "product",				  "command",	  "aggr",	  "(b:bat[:any_1,:int]):int ",												  "ALGprod_int_int;"				  ]
[ "product",				  "command",	  "aggr",	  "(b:bat[:any_1,:sht]):lng ",												  "ALGprod_sht_lng;"				  ]
[ "product",				  "command",	  "aggr",	  "(b:bat[:any_1,:sht]):int ",												  "ALGprod_sht_int;"				  ]
[ "product",				  "command",	  "aggr",	  "(b:bat[:any_1,:sht]):sht ",												  "ALGprod_sht_sht;"				  ]
[ "size",				  "command",	  "aggr",	  "(b:bat[:void,:bit],e:bat[:void,:any_1]):bat[:void,:int] ",								  "AX3aggrX3_size;"				  ]
[ "sum",				  "command",	  "aggr",	  "(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",						  "AX3aggrX3_sum3_dbl_dbl;"			  ]
[ "sum",				  "command",	  "aggr",	  "(b:bat[:oid,:dbl],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",								  "AX3aggrX3_sum_dbl_dbl;"			  ]
[ "sum",				  "command",	  "aggr",	  "(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",						  "AX3aggrX3_sum3_flt_dbl;"			  ]
[ "sum",				  "command",	  "aggr",	  "(b:bat[:oid,:flt],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",								  "AX3aggrX3_sum_flt_dbl;"			  ]
[ "sum",				  "command",	  "aggr",	  "(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:flt] ",						  "AX3aggrX3_sum3_flt_flt;"			  ]
[ "sum",				  "command",	  "aggr",	  "(b:bat[:oid,:flt],e:bat[:oid,:any_1]):bat[:oid,:flt] ",								  "AX3aggrX3_sum_flt_flt;"			  ]
[ "sum",				  "command",	  "aggr",	  "(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",						  "AX3aggrX3_sum3_lng_lng;"			  ]
[ "sum",				  "command",	  "aggr",	  "(b:bat[:oid,:lng],e:bat[:oid,:any_1]):bat[:oid,:lng] ",								  "AX3aggrX3_sum_lng_lng;"			  ]
[ "sum",				  "command",	  "aggr",	  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",						  "AX3aggrX3_sum3_int_lng;"			  ]
[ "sum",				  "command",	  "aggr",	  "(b:bat[:oid,:int],e:bat[:oid,:any_1]):bat[:oid,:lng] ",								  "AX3aggrX3_sum_int_lng;"			  ]
[ "sum",				  "command",	  "aggr",	  "(b:bat[:oid,:oid],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] ",						  "AX3aggrX3_sum3_oid_int;"			  ]
[ "sum",				  "command",	  "aggr",	  "(b:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] ",								  "AX3aggrX3_sum_oid_int;"			  ]
[ "sum",				  "command",	  "aggr",	  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] ",						  "AX3aggrX3_sum3_int_int;"			  ]
[ "sum",				  "command",	  "aggr",	  "(b:bat[:oid,:int],e:bat[:oid,:any_1]):bat[:oid,:int] ",								  "AX3aggrX3_sum_int_int;"			  ]
[ "sum",				  "command",	  "aggr",	  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",						  "AX3aggrX3_sum3_sht_lng;"			  ]
[ "sum",				  "command",	  "aggr",	  "(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:lng] ",								  "AX3aggrX3_sum_sht_lng;"			  ]
[ "sum",				  "command",	  "aggr",	  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] ",						  "AX3aggrX3_sum3_sht_int;"			  ]
[ "sum",				  "command",	  "aggr",	  "(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:int] ",								  "AX3aggrX3_sum_sht_int;"			  ]
[ "sum",				  "command",	  "aggr",	  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:sht] ",						  "AX3aggrX3_sum3_sht_sht;"			  ]
[ "sum",				  "command",	  "aggr",	  "(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:sht] ",								  "AX3aggrX3_sum_sht_sht;"			  ]
[ "sum",				  "command",	  "aggr",	  "(b:bat[:any_1,:dbl]):dbl ",												  "ALGsum_dbl_dbl;"				  ]
[ "sum",				  "command",	  "aggr",	  "(b:bat[:any_1,:flt]):dbl ",												  "ALGsum_flt_dbl;"				  ]
[ "sum",				  "command",	  "aggr",	  "(b:bat[:any_1,:flt]):flt ",												  "ALGsum_flt_flt;"				  ]
[ "sum",				  "command",	  "aggr",	  "(b:bat[:any_1,:lng]):lng ",												  "ALGsum_lng_lng;"				  ]
[ "sum",				  "command",	  "aggr",	  "(b:bat[:any_1,:int]):lng ",												  "ALGsum_int_lng;"				  ]
[ "sum",				  "command",	  "aggr",	  "(b:bat[:any_1,:int]):int ",												  "ALGsum_int_int;"				  ]
[ "sum",				  "command",	  "aggr",	  "(b:bat[:any_1,:sht]):lng ",												  "ALGsum_sht_lng;"				  ]
[ "sum",				  "command",	  "aggr",	  "(b:bat[:any_1,:sht]):int ",												  "ALGsum_sht_int;"				  ]
[ "sum",				  "command",	  "aggr",	  "(b:bat[:any_1,:sht]):sht ",												  "ALGsum_sht_sht;"				  ]
[ "compile",				  "command",	  "pcre",	  "(pat:str):pcre ",													  "PCREcompile_wrap;"				  ]
[ "#del",				  "command",	  "pcre",	  "():void ",														  "pcre_del;"					  ]
[ "#fromstr",				  "command",	  "pcre",	  "():void ",														  "pcre_fromstr;"				  ]
[ "#heap",				  "command",	  "pcre",	  "():void ",														  "pcre_heap;"					  ]
[ "#hash",				  "command",	  "pcre",	  "():void ",														  "pcre_hash;"					  ]
[ "like",				  "command",	  "pcre",	  "(s:bat[:any_1,:str],pat:str,esc:str):bat[:any_1,:void] ",								  "PCRElike_uselect_pcre;"			  ]
[ "like",				  "command",	  "pcre",	  "(s:str,pat:str):bit ",												  "PCRElike2;"					  ]
[ "like",				  "command",	  "pcre",	  "(s:str,pat:str,esc:str):bit ",											  "PCRElike3;"					  ]
[ "#length",				  "command",	  "pcre",	  "():void ",														  "pcre_length;"				  ]
[ "match",				  "command",	  "pcre",	  "(s:str,pat:str):bit ",												  "PCREmatch;"					  ]
[ "match",				  "command",	  "pcre",	  "(pat:pcre,s:str):bit ",												  "PCREexec_wrap;"				  ]
[ "#null",				  "command",	  "pcre",	  "():void ",														  "pcre_null;"					  ]
[ "#nequal",				  "command",	  "pcre",	  "():void ",														  "pcre_nequal;"				  ]
[ "prelude",				  "pattern",	  "pcre",	  "():void ",														  "pcre_init;"					  ]
[ "pcre_quote",				  "command",	  "pcre",	  "(s:str):str ",													  "PCREquote;"					  ]
[ "patindex",				  "command",	  "pcre",	  "(s:str,pat:str):int ",												  "PCREpatindex;"				  ]
[ "#put",				  "command",	  "pcre",	  "():void ",														  "pcre_put;"					  ]
[ "replace",				  "command",	  "pcre",	  "(orig:bat[:any_1,:str],pat:str,repl:str,flag:str):bat[:any_1,:str] ",						  "PCREreplace_bat_wrap;"			  ]
[ "select",				  "command",	  "pcre",	  "(pat:str,strs:bat[:any_1,:str]):bat[:any_1,:str] ",									  "PCREselect;"					  ]
[ "#tostr",				  "command",	  "pcre",	  "():void ",														  "pcre_tostr;"					  ]
[ "uselect",				  "command",	  "pcre",	  "(pat:str,strs:bat[:any_1,:str]):bat[:any_1,:void] ",									  "PCREuselect;"				  ]
[ "append",				  "command",	  "bat",	  "(i:bat[:any_1,:any_2],u:any_2,force:bit):void ",									  "BKCappend_val_force_wrap;"			  ]
[ "append",				  "command",	  "bat",	  "(i:bat[:any_1,:void],u:any_1):void ",										  "BKCappend_reverse_val_wrap;"			  ]
[ "append",				  "command",	  "bat",	  "(i:bat[:void,:any_1],u:any_1):void ",										  "BKCappend_val_wrap;"				  ]
[ "append",				  "command",	  "bat",	  "(i:bat[:oid,:any_1],u:any_1):void ",											  "BKCappend_val_wrap;"				  ]
[ "append",				  "command",	  "bat",	  "(i:bat[:any_1,:any_2],u:bat[:any_1,:any_2],force:bit):void ",							  "BKCappend_force_wrap;"			  ]
[ "append",				  "command",	  "bat",	  "(i:bat[:any_1,:any_2],u:bat[:any_1,:any_2]):void ",									  "BKCappend_wrap;"				  ]
[ "delete",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2]):void ",								  "BKCdelete_bat_bun;"				  ]
[ "delete",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):void ",											  "BKCdelete_all;"				  ]
[ "delete",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:any_1):void ",										  "BKCdelete;"					  ]
[ "delete",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:any_1,t:any_2):void ",									  "BKCdelete_bun;"				  ]
[ "flush",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):void ",											  "CMDBATflush;"				  ]
[ "getTail",				  "pattern",	  "bat",	  "(b:bat[:any_2,:any_1],i:lng):any_1 ",										  "CHPgetTail;"					  ]
[ "getHead",				  "pattern",	  "bat",	  "(b:bat[:any_1,:any],i:lng):any_1 ",											  "CHPgetHead;"					  ]
[ "getHeat",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):lng ",											  "BKCheat;"					  ]
[ "getName",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):str ",											  "BKCgetBBPname;"				  ]
[ "getDelta",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "BKCgetDelta;"				  ]
[ "getAlpha",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "BKCgetAlpha;"				  ]
[ "getSpaceUsed",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):lng ",											  "BKCgetSpaceUsed;"				  ]
[ "getSpaceReserved",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):lng ",											  "BKCgetSpaceReserved;"			  ]
[ "getSequenceBase",			  "command",	  "bat",	  "(b:bat[:oid,:any_1]):oid ",												  "BKCgetSequenceBase;"				  ]
[ "getAccess",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):str ",											  "BKCgetAccess;"				  ]
[ "getRole",				  "command",	  "bat",	  "(bid:bat[:any_1,:any_2]):str ",											  "BKCgetRole;"					  ]
[ "getTailType",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):str ",											  "BKCgetTailType;"				  ]
[ "getHeadType",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):str ",											  "BKCgetHeadType;"				  ]
[ "getCapacity",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):lng ",											  "BKCgetCapacity;"				  ]
[ "hasMoreElements",			  "pattern",	  "bat",	  "(b:bat[:any_1,:BAT]) (_2:lng,h:any_1,t:any_2) ",									  "CHPbunHasMoreElements;"			  ]
[ "hasMoreElements",			  "pattern",	  "bat",	  "(b:bat[:oid,:any_2]) (_2:lng,h:oid,t:any_2) ",									  "CHPbunHasMoreElements;"			  ]
[ "hasMoreElements",			  "pattern",	  "bat",	  "(b:bat[:any_1,:any_2]) (_2:lng,h:any_1,t:any_2) ",									  "CHPbunHasMoreElements;"			  ]
[ "hasMoreElements",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],size:lng) (_3:lng,_4:bat[:any_1,:any_2]) ",							  "CHPhasMoreChunks;"				  ]
[ "hasReadMode",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",											  "BKChasReadMode;"				  ]
[ "hasWriteMode",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",											  "BKChasWriteMode;"				  ]
[ "hasAppendMode",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",											  "BKChasAppendMode;"				  ]
[ "isSynced",				  "command",	  "bat",	  "(b1:bat[:any_1,:any_2],b2:bat[:any_3,:any_4]):bit ",									  "BKCisSynced;"				  ]
[ "isCached",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",											  "BKCisCached;"				  ]
[ "isPersistent",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",											  "BKCisPersistent;"				  ]
[ "isTransient",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",											  "BKCisTransient;"				  ]
[ "inplace",				  "command",	  "bat",	  "(o:bat[:any_1,:any_2],d:bat[:any_1,:any_2],force:bit):void ",							  "BKCbat_inplace_force;"			  ]
[ "inplace",				  "command",	  "bat",	  "(o:bat[:any_1,:any_2],id:any_1,t:any_2,force:bit):void ",								  "BKCbun_inplace_force;"			  ]
[ "inplace",				  "command",	  "bat",	  "(o:bat[:any_1,:any_2],d:bat[:any_1,:any_2]):void ",									  "BKCbat_inplace;"				  ]
[ "inplace",				  "command",	  "bat",	  "(o:bat[:any_1,:any_2],id:any_1,t:any_2):void ",									  "BKCbun_inplace;"				  ]
[ "insert",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:any_1,t:any_2,force:bit):void ",								  "BKCinsert_bun_force;"			  ]
[ "insert",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:any_1,t:any_2):void ",									  "BKCinsert_bun;"				  ]
[ "insert",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2],force:bit):void ",							  "BKCinsert_bat_force;"			  ]
[ "insert",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2]):void ",								  "BKCinsert_bat;"				  ]
[ "isSortedReverse",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",											  "BKCisSortedReverse;"				  ]
[ "isSorted",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",											  "BKCisSorted;"				  ]
[ "isaSet",				  "command",	  "bat",	  "(b:bat[:any_1,:any_1]):bit ",											  "BKCisaSet;"					  ]
[ "isaKey",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",											  "BKCgetKey;"					  ]
[ "info",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:str,:str] ",										  "BKCinfo;"					  ]
[ "load",				  "command",	  "bat",	  "(name:str):bat[:any_1,:any_2] ",											  "BKCload;"					  ]
[ "mirror",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_1] ",										  "BKCmirror;"					  ]
[ "newIterator",			  "pattern",	  "bat",	  "(b:bat[:any_1,:BAT]) (_2:lng,h:any_1,t:any_2) ",									  "CHPbunIterator;"				  ]
[ "newIterator",			  "pattern",	  "bat",	  "(b:bat[:any_1,:any_2]) (_2:lng,h:any_1,t:any_2) ",									  "CHPbunIterator;"				  ]
[ "newIterator",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],size:lng) (_3:lng,_4:bat[:any_1,:any_2]) ",							  "CHPnewChunkIterator;"			  ]
[ "new",				  "command",	  "bat",	  "(nme:str):bat[:any_1,:any_2] ",											  "CMDBATderivedByName;"			  ]
[ "new",				  "pattern",	  "bat",	  "(b:bat[:any_1,:any_2],size:lng):bat[:any_1,:any_2] ",								  "CMDBATnewDerived;"				  ]
[ "new",				  "pattern",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "CMDBATnewDerived;"				  ]
[ "new",				  "pattern",	  "bat",	  "(ht:oid,tt:any_2,size:lng):bat[:oid,:any_2] ",									  "CMDBATnew;"					  ]
[ "new",				  "pattern",	  "bat",	  "(ht:oid,tt:any_2,size:int):bat[:oid,:any_2] ",									  "CMDBATnewint;"				  ]
[ "new",				  "pattern",	  "bat",	  "(ht:any_1,tt:any_2,size:lng):bat[:any_1,:any_2] ",									  "CMDBATnew;"					  ]
[ "new",				  "pattern",	  "bat",	  "(ht:any_1,tt:any_2,size:int):bat[:any_1,:any_2] ",									  "CMDBATnewint;"				  ]
[ "new",				  "pattern",	  "bat",	  "(ht:any_1,tt:any_2):bat[:any_1,:any_2] ",										  "CMDBATnew;"					  ]
[ "new",				  "pattern",	  "bat",	  "(ht:any_1,tt:any_2,b:bat[:any_3,:any_4]):bat[:any_1,:any_2] ",							  "CMDBATclone;"				  ]
[ "orderReverse",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "BKCorder_rev;"				  ]
[ "order",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "BKCorder;"					  ]
[ "pack",				  "pattern",	  "bat",	  "(h:any_1,t:any_2):bat[:any_1,:any_2] ",										  "CMDbatpack;"					  ]
[ "reduce",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "CMDBATreduce;"				  ]
[ "replace",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:any_1,t:any_2,force:bit):void ",								  "BKCreplace_bun_force;"			  ]
[ "replace",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:any_1,t:any_2):void ",									  "BKCreplace_bun;"				  ]
[ "replace",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2],force:bit):void ",							  "BKCreplace_bat_force;"			  ]
[ "replace",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2]):void ",								  "BKCreplace_bat;"				  ]
[ "revert",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "BKCrevert;"					  ]
[ "reverse",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_2,:any_1] ",										  "BKCreverse;"					  ]
[ "setGarbage",				  "pattern",	  "bat",	  "(b:bat[:any_1,:any_2]):void ",											  "CMDBATsetGarbage;"				  ]
[ "setHash",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2],prop:bit):bit ",										  "BKCsetHash;"					  ]
[ "setMemoryAdvise",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],mode:int):bit ",										  "BKCmadvise2;"				  ]
[ "setMemoryAdvise",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],buns_mode:int,hheap_mode:int,theap_mode:int):bit ",						  "BKCmadvise;"					  ]
[ "setMemoryMap",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],mode:int):bit ",										  "BKCmmap2;"					  ]
[ "setMemoryMap",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],buns_mode:int,hheap_mode:int,theap_mode:int):bit ",						  "BKCmmap;"					  ]
[ "setHot",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):void ",											  "BKChotBAT;"					  ]
[ "setCold",				  "command",	  "bat",	  "(b:bat[:any_1,:any_1]):void ",											  "BKCcoldBAT;"					  ]
[ "save",				  "command",	  "bat",	  "(nme:str):bit ",													  "BKCsave;"					  ]
[ "save",				  "command",	  "bat",	  "(nme:bat[:any_1,:any_2]):void ",											  "BKCsave2;"					  ]
[ "setPersistent",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):void ",											  "BKCsetPersistent;"				  ]
[ "setPersistent",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],f:bit):void ",											  "BKCpersists;"				  ]
[ "setTransient",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):void ",											  "BKCsetTransient;"				  ]
[ "setColumn",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:str,t:str):void ",										  "BKCsetColumns;"				  ]
[ "setColumn",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2],t:str):void ",											  "BKCsetColumn;"				  ]
[ "setRole",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:str,t:str):void ",										  "BKCsetRole;"					  ]
[ "setName",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2],s:str):void ",											  "BKCsetName;"					  ]
[ "setSorted",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",											  "BKCsetSorted;"				  ]
[ "setWriteMode",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "BKCsetWriteMode;"				  ]
[ "setReadMode",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "BKCsetReadMode;"				  ]
[ "setAppendMode",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",										  "BKCsetAppendMode;"				  ]
[ "setAccess",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2],mode:str):bat[:any_1,:any_2] ",								  "BKCsetAccess;"				  ]
[ "setSet",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2],mode:bit):bat[:any_1,:any_2] ",								  "BKCsetSet;"					  ]
[ "setKey",				  "command",	  "bat",	  "(b:bat[:any_1,:any_2],mode:bit):bat[:any_1,:any_2] ",								  "BKCsetkey;"					  ]
[ "unpack",				  "pattern",	  "bat",	  "(b:bat[:any_1,:any_2]) (h:any_1,t:any_2) ",										  "CMDbatunpack;"				  ]
[ "unload",				  "command",	  "bat",	  "(name:str):bit ",													  "BKCunload;"					  ]
[ "blocked",				  "command",	  "streams",	  "(s:streams):streams ",												  "open_block_streamwrap;"			  ]
[ "close",				  "command",	  "streams",	  "(s:streams):void ",													  "stream_close_streamwrap;"			  ]
[ "flush",				  "command",	  "streams",	  "(s:streams):void ",													  "stream_flush_streamwrap;"			  ]
[ "openWrite",				  "command",	  "streams",	  "(s:streams):streams ",												  "stream_stream_wstreamwrap;"			  ]
[ "openRead",				  "command",	  "streams",	  "(s:streams):streams ",												  "stream_stream_rstreamwrap;"			  ]
[ "openWrite",				  "command",	  "streams",	  "(filename:str):streams ",												  "stream_open_wastreamwrap;"			  ]
[ "openRead",				  "command",	  "streams",	  "(filename:str):streams ",												  "stream_open_rastreamwrap;"			  ]
[ "openWriteBytes",			  "command",	  "streams",	  "(filename:str):streams ",												  "stream_open_wstreamwrap;"			  ]
[ "openReadBytes",			  "command",	  "streams",	  "(filename:str):streams ",												  "stream_open_rstreamwrap;"			  ]
[ "readInt",				  "command",	  "streams",	  "(s:streams):int ",													  "stream_readIntwrap;"				  ]
[ "readStr",				  "command",	  "streams",	  "(s:streams):str ",													  "stream_read_stringwrap;"			  ]
[ "socketWrite",			  "command",	  "streams",	  "(skt:int,name:str):streams ",											  "stream_socket_wastreamwrap;"			  ]
[ "socketRead",				  "command",	  "streams",	  "(skt:int,name:str):streams ",											  "stream_socket_rastreamwrap;"			  ]
[ "socketWriteBytes",			  "command",	  "streams",	  "(skt:int,name:str):streams ",											  "stream_socket_wstreamwrap;"			  ]
[ "socketReadBytes",			  "command",	  "streams",	  "(skt:int,name:str):streams ",											  "stream_socket_rstreamwrap;"			  ]
[ "writeInt",				  "command",	  "streams",	  "(s:streams,data:int):void ",												  "stream_writeIntwrap;"			  ]
[ "writeStr",				  "command",	  "streams",	  "(s:streams,data:str):void ",												  "stream_write_stringwrap;"			  ]
[ "create",				  "command",	  "bstream",	  "(s:streams,bufsize:int):bstream ",											  "bstream_create_wrapwrap;"			  ]
[ "destroy",				  "command",	  "bstream",	  "(s:bstream):void ",													  "bstream_destroy_wrapwrap;"			  ]
[ "read",				  "command",	  "bstream",	  "(s:bstream,size:int):int ",												  "bstream_read_wrapwrap;"			  ]
[ "atan2",				  "command",	  "mmath",	  "(x:dbl,y:dbl):dbl ",													  "MATHbinary_ATAN2dbl;"			  ]
[ "atan2",				  "command",	  "mmath",	  "(x:flt,y:flt):flt ",													  "MATHbinary_ATAN2flt;"			  ]
[ "atan",				  "command",	  "mmath",	  "(x:dbl):dbl ",													  "MATHunary_ATANdbl;"				  ]
[ "atan",				  "command",	  "mmath",	  "(x:flt):flt ",													  "MATHunary_ATANflt;"				  ]
[ "asin",				  "command",	  "mmath",	  "(x:dbl):dbl ",													  "MATHunary_ASINdbl;"				  ]
[ "asin",				  "command",	  "mmath",	  "(x:flt):flt ",													  "MATHunary_ASINflt;"				  ]
[ "acos",				  "command",	  "mmath",	  "(x:dbl):dbl ",													  "MATHunary_ACOSdbl;"				  ]
[ "acos",				  "command",	  "mmath",	  "(x:flt):flt ",													  "MATHunary_ACOSflt;"				  ]
[ "ceil",				  "command",	  "mmath",	  "(y:dbl):dbl ",													  "MATHunary_CEILdbl;"				  ]
[ "ceil",				  "command",	  "mmath",	  "(y:flt):flt ",													  "MATHunary_CEILflt;"				  ]
[ "cosh",				  "command",	  "mmath",	  "(x:dbl):dbl ",													  "MATHunary_COSHdbl;"				  ]
[ "cosh",				  "command",	  "mmath",	  "(x:flt):flt ",													  "MATHunary_COSHflt;"				  ]
[ "cos",				  "command",	  "mmath",	  "(x:dbl):dbl ",													  "MATHunary_COSdbl;"				  ]
[ "cos",				  "command",	  "mmath",	  "(x:flt):flt ",													  "MATHunary_COSflt;"				  ]
[ "exp",				  "command",	  "mmath",	  "(x:dbl):dbl ",													  "MATHunary_EXPdbl;"				  ]
[ "exp",				  "command",	  "mmath",	  "(x:flt):flt ",													  "MATHunary_EXPflt;"				  ]
[ "finite",				  "command",	  "mmath",	  "(d:dbl):bit ",													  "math_unary_FINITE;"				  ]
[ "fmod",				  "command",	  "mmath",	  "(y:dbl,x:dbl):dbl ",													  "MATHbinary_FMODdbl;"				  ]
[ "fmod",				  "command",	  "mmath",	  "(y:flt,x:flt):flt ",													  "MATHbinary_FMODflt;"				  ]
[ "floor",				  "command",	  "mmath",	  "(y:dbl):dbl ",													  "MATHunary_FLOORdbl;"				  ]
[ "floor",				  "command",	  "mmath",	  "(y:flt):flt ",													  "MATHunary_FLOORflt;"				  ]
[ "fabs",				  "command",	  "mmath",	  "(y:dbl):dbl ",													  "MATHunary_FABSdbl;"				  ]
[ "isinf",				  "command",	  "mmath",	  "(d:dbl):int ",													  "math_unary_ISINF;"				  ]
[ "isnan",				  "command",	  "mmath",	  "(d:dbl):bit ",													  "math_unary_ISNAN;"				  ]
[ "log10",				  "command",	  "mmath",	  "(x:dbl):dbl ",													  "MATHunary_LOG10dbl;"				  ]
[ "log10",				  "command",	  "mmath",	  "(x:flt):flt ",													  "MATHunary_LOG10flt;"				  ]
[ "log",				  "command",	  "mmath",	  "(x:dbl):dbl ",													  "MATHunary_LOGdbl;"				  ]
[ "log",				  "command",	  "mmath",	  "(x:flt):flt ",													  "MATHunary_LOGflt;"				  ]
[ "pi",					  "command",	  "mmath",	  "():dbl ",														  "MATHpi;"					  ]
[ "pow",				  "command",	  "mmath",	  "(x:dbl,y:dbl):dbl ",													  "MATHbinary_POWdbl;"				  ]
[ "pow",				  "command",	  "mmath",	  "(x:flt,y:flt):flt ",													  "MATHbinary_POWflt;"				  ]
[ "rand",				  "command",	  "mmath",	  "():int ",														  "MATHrandint;"				  ]
[ "round",				  "command",	  "mmath",	  "(x:dbl,y:int):dbl ",													  "MATHbinary_ROUNDdbl;"			  ]
[ "round",				  "command",	  "mmath",	  "(x:flt,y:int):flt ",													  "MATHbinary_ROUNDflt;"			  ]
[ "srand",				  "command",	  "mmath",	  "(seed:int):void ",													  "MATHsrandint;"				  ]
[ "sqrt",				  "command",	  "mmath",	  "(y:dbl):dbl ",													  "MATHunary_SQRTdbl;"				  ]
[ "sqrt",				  "command",	  "mmath",	  "(y:flt):flt ",													  "MATHunary_SQRTflt;"				  ]
[ "sinh",				  "command",	  "mmath",	  "(x:dbl):dbl ",													  "MATHunary_SINHdbl;"				  ]
[ "sinh",				  "command",	  "mmath",	  "(x:flt):flt ",													  "MATHunary_SINHflt;"				  ]
[ "sin",				  "command",	  "mmath",	  "(x:dbl):dbl ",													  "MATHunary_SINdbl;"				  ]
[ "sin",				  "command",	  "mmath",	  "(x:flt):flt ",													  "MATHunary_SINflt;"				  ]
[ "tanh",				  "command",	  "mmath",	  "(x:dbl):dbl ",													  "MATHunary_TANHdbl;"				  ]
[ "tanh",				  "command",	  "mmath",	  "(x:flt):flt ",													  "MATHunary_TANHflt;"				  ]
[ "tan",				  "command",	  "mmath",	  "(x:dbl):dbl ",													  "MATHunary_TANdbl;"				  ]
[ "tan",				  "command",	  "mmath",	  "(x:flt):flt ",													  "MATHunary_TANflt;"				  ]
[ "alarm",				  "command",	  "alarm",	  "(secs:int,action:str):void ",											  "ALARMsetalarm;"				  ]
[ "ctime",				  "command",	  "alarm",	  "():str ",														  "ALARMctime;"					  ]
[ "epilogue",				  "command",	  "alarm",	  "():void ",														  "ALARMepilogue;"				  ]
[ "epoch",				  "command",	  "alarm",	  "():int ",														  "ALARMepoch;"					  ]
[ "prelude",				  "command",	  "alarm",	  "():void ",														  "ALARMprelude;"				  ]
[ "sleep",				  "command",	  "alarm",	  "(secs:int):void ",													  "ALARMsleep;"					  ]
[ "time",				  "command",	  "alarm",	  "():int ",														  "ALARMtime;"					  ]
[ "timers",				  "command",	  "alarm",	  "():bat[:str,:str] ",													  "ALARMtimers;"				  ]
[ "usec",				  "command",	  "alarm",	  "():lng ",														  "ALARMusec;"					  ]
[ "create",				  "command",	  "sema",	  "(init:int):sema ",													  "SEMAcreate;"					  ]
[ "destroy",				  "command",	  "sema",	  "(s:sema):void ",													  "SEMAdestroy;"				  ]
[ "down",				  "command",	  "sema",	  "(s:sema):void ",													  "SEMAdown;"					  ]
[ "up",					  "command",	  "sema",	  "(s:sema):void ",													  "SEMAup;"					  ]
[ "create",				  "command",	  "lock",	  "():lock ",														  "LCKcreate;"					  ]
[ "destroy",				  "command",	  "lock",	  "(l:lock):void ",													  "LCKdestroy;"					  ]
[ "set",				  "command",	  "lock",	  "(l:lock):void ",													  "LCKset;"					  ]
[ "tostr",				  "command",	  "lock",	  "(l:lock):void ",													  "lockToStr;"					  ]
[ "try",				  "command",	  "lock",	  "(l:lock):int ",													  "LCKtry;"					  ]
[ "unset",				  "command",	  "lock",	  "(l:lock):void ",													  "LCKunset;"					  ]
[ "getenv",				  "command",	  "unix",	  "(nme:str):str ",													  "UNIXgetenv;"					  ]
[ "setenv",				  "command",	  "unix",	  "(nme:str,val:str):bit ",												  "UNIXsetenv;"					  ]
[ "List",				  "pattern",	  "mdb",	  "(M:str,F:str):void ",												  "MDBlist3Detail;"				  ]
[ "List",				  "pattern",	  "mdb",	  "():void ",														  "MDBlistDetail;"				  ]
[ "dot",				  "pattern",	  "mdb",	  "(M:str,F:str,s:str):void ",												  "MDBshowFlowGraph;"				  ]
[ "getDefinition",			  "pattern",	  "mdb",	  "():bat[:void,:str] ",												  "MDBgetDefinition;"				  ]
[ "getStackTrace",			  "pattern",	  "mdb",	  "():bat[:void,:str] ",												  "MDBStkTrace;"				  ]
[ "getStackFrame",			  "pattern",	  "mdb",	  "():bat[:str,:str] ",													  "MDBgetStackFrame;"				  ]
[ "getStackFrame",			  "pattern",	  "mdb",	  "(i:int):bat[:str,:str] ",												  "MDBgetStackFrameN;"				  ]
[ "getStackDepth",			  "pattern",	  "mdb",	  "():int ",														  "MDBStkDepth;"				  ]
[ "grab",				  "command",	  "mdb",	  "(id:int):void ",													  "MDBgrabClient;"				  ]
[ "getContext",				  "command",	  "mdb",	  "(s:str):str ",													  "MDBgetExceptionContext;"			  ]
[ "getReason",				  "command",	  "mdb",	  "(s:str):str ",													  "MDBgetExceptionReason;"			  ]
[ "getException",			  "command",	  "mdb",	  "(s:str):str ",													  "MDBgetExceptionVariable;"			  ]
[ "getDebug",				  "command",	  "mdb",	  "():int ",														  "MDBgetDebug;"				  ]
[ "inspect",				  "pattern",	  "mdb",	  "(mod:str,fcn:str):void ",												  "MDBinspect;"					  ]
[ "list",				  "pattern",	  "mdb",	  "(M:str,F:str):void ",												  "MDBlist3;"					  ]
[ "list",				  "pattern",	  "mdb",	  "():void ",														  "MDBlist;"					  ]
[ "setDebug",				  "command",	  "mdb",	  "(flg:int):int ",													  "MDBsetDebug;"				  ]
[ "setDebug",				  "command",	  "mdb",	  "(flg:str):int ",													  "MDBsetDebugStr;"				  ]
[ "setIO",				  "command",	  "mdb",	  "(b:bit):void ",													  "MDBsetIO;"					  ]
[ "setMemory",				  "command",	  "mdb",	  "(b:bit):void ",													  "MDBsetMemory;"				  ]
[ "setFlow",				  "command",	  "mdb",	  "(b:bit):void ",													  "MDBsetFlow;"					  ]
[ "setTimer",				  "command",	  "mdb",	  "(b:bit):void ",													  "MDBsetTimer;"				  ]
[ "setCatch",				  "pattern",	  "mdb",	  "(b:bit):void ",													  "MDBsetCatch;"				  ]
[ "setTrace",				  "pattern",	  "mdb",	  "(b:bit):void ",													  "MDBsetTrace;"				  ]
[ "stop",				  "pattern",	  "mdb",	  "():void ",														  "MDBstop;"					  ]
[ "start",				  "pattern",	  "mdb",	  "(mod:str,fcn:str):void ",												  "MDBstartFactory;"				  ]
[ "start",				  "pattern",	  "mdb",	  "(clientid:int):void ",												  "MDBstart;"					  ]
[ "start",				  "pattern",	  "mdb",	  "():void ",														  "MDBstart;"					  ]
[ "var",				  "pattern",	  "mdb",	  "(M:str,F:str):void ",												  "MDBvar3;"					  ]
[ "var",				  "pattern",	  "mdb",	  "():void ",														  "MDBvar;"					  ]

# 07:22:38 >  
# 07:22:38 >  Done.
# 07:22:38 >  

