stdout of test 'inspect05` in directory 'src/modules/mal` itself:


# 00:03:55 >  
# 00:03:55 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=33330 --set sql_port=49911 --set xquery_port=56575 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  inspect05.mal </dev/null
# 00:03:55 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information.
##Illustrate the modules loaded after start
#k:= inspect.getKind();
#m:= inspect.getModule();
#f:= inspect.getFunction();
#s:= inspect.getSignature();
#io.print(k,m,f,s);
#
function user.main():int;	# 0  (main:int)
#Illustrate the modules loaded after start 	# 1  (_2:str)
    k := inspect.getKind();	# 2 INSPECTgetkind (k:bat[:void,:str])
    m := inspect.getModule();	# 3 INSPECTgetModule (m:bat[:void,:str])
    f := inspect.getFunction();	# 4 INSPECTgetFunction (f:bat[:void,:str])
    s := inspect.getSignature();	# 5 INSPECTgetsignature (s:bat[:void,:str])
    io.print(k,m,f,s);	# 6 IOtable (_7:int)<-(k:bat[:void,:str])(m:bat[:void,:str])(f:bat[:void,:str])(s:bat[:void,:str])
end main;	# 7  
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
# view	symbol		symbol		symbol				 symbol																  # name
# oid	str		str		str				str																  # type
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
[ 0@0,	  "function",	  "user",	  "main",			  "():int;"															  ]
[ 1@0,	  "function",	  "user",	  "main",			  "():int;"															  ]
[ 2@0,	  "command",	  "partitions",	  "compress",			  "(b:bat[:void,:any_1]):bat[:void,:any_1] address BPTcompress;"								  ]
[ 3@0,	  "command",	  "partitions",	  "close",			  "():void address BPTclose;"													  ]
[ 4@0,	  "command",	  "partitions",	  "dump",			  "():void address BPTdump;"													  ]
[ 5@0,	  "command",	  "partitions",	  "delete",			  "(b:bat[:void,:any_1],p:bat[:void,:any_1]):bat[:void,:any_1] address BPTdeleteBAT;"						  ]
[ 6@0,	  "command",	  "partitions",	  "delete",			  "(b:bat[:void,:any_1],h:oid):bat[:void,:any_1] address BPTdelete_oid;"							  ]
[ 7@0,	  "command",	  "partitions",	  "discard",			  "(name:bat[:void,:any_1]):void address BPTdiscard;"										  ]
[ 8@0,	  "command",	  "partitions",	  "deposit",			  "(b:str,p:str,cap:int):void address BPTdepositPartition;"									  ]
[ 9@0,	  "command",	  "partitions",	  "deposit",			  "(b:bat[:void,:any_1],p:bat[:void,:any_1]):void address BPTdeposit2;"								  ]
[ 10@0,	  "command",	  "partitions",	  "deposit",			  "(b:bat[:void,:any_1]):void address BPTdeposit;"										  ]
[ 11@0,	  "command",	  "partitions",	  "destroy",			  "():void address BPTdestroy;"													  ]
[ 12@0,	  "command",	  "partitions",	  "getRange",			  "(b:bat[:void,:any_1]) (first:oid,last:oid) address BPTgetRange;"								  ]
[ 13@0,	  "command",	  "partitions",	  "getLastPartition",		  "(b:bat[:void,:any_1]):bat[:void,:any_1] address BPTgetLastPartition;"							  ]
[ 14@0,	  "command",	  "partitions",	  "hasMoreElements",		  "(b:bat[:void,:any_1],first:oid,last:oid) (_4:int,_5:bat[:void,:any_1]) address BPThasMoreElementsRng;"			  ]
[ 15@0,	  "command",	  "partitions",	  "hasMoreElements",		  "(b:bat[:void,:any_1]) (_2:int,_3:bat[:void,:any_1]) address BPThasMoreElements;"						  ]
[ 16@0,	  "command",	  "partitions",	  "hasMoreElements",		  "():int address BPThasMoreElementsBase;"											  ]
[ 17@0,	  "command",	  "partitions",	  "insert",			  "(b:bat[:void,:any_1],p:bat[:void,:any_1]):bat[:void,:any_1] address BPTinsertBAT;"						  ]
[ 18@0,	  "command",	  "partitions",	  "insert",			  "(b:bat[:void,:any_1],t:any_1):bat[:void,:any_1] address BPTinsert_void_bun;"							  ]
[ 19@0,	  "command",	  "partitions",	  "insert",			  "(b:bat[:void,:any_1],h:void,t:any_1):bat[:void,:any_1] address BPTinsert;"							  ]
[ 20@0,	  "command",	  "partitions",	  "newIterator",		  "(b:bat[:void,:any_1],first:oid,last:oid) (_4:int,_5:bat[:void,:any_1]) address BPTnewIteratorRng;"				  ]
[ 21@0,	  "command",	  "partitions",	  "newIterator",		  "(b:bat[:void,:any_1]) (_2:int,_3:bat[:void,:any_1]) address BPTnewIterator;"							  ]
[ 22@0,	  "command",	  "partitions",	  "newIterator",		  "():int address BPTnewIteratorBase;"												  ]
[ 23@0,	  "command",	  "partitions",	  "open",			  "():void address BPTopen;"													  ]
[ 24@0,	  "command",	  "partitions",	  "prelude",			  "():void address BPTprelude;"													  ]
[ 25@0,	  "pattern",	  "partitions",	  "release",			  "(b:bat[:void,:any_1]):void address BPTrelease;"										  ]
[ 26@0,	  "pattern",	  "partitions",	  "releaseAll",			  "():void address BPTreleaseAll;"												  ]
[ 27@0,	  "command",	  "partitions",	  "setCapacity",		  "(b:bat[:void,:any_1],s:int):void address BPTsetCapacity;"									  ]
[ 28@0,	  "pattern",	  "partitions",	  "toString",			  "(idx:int):str address BPTtoString;"												  ]
[ 29@0,	  "command",	  "partitions",	  "take",			  "(idx:int):bat[:void,:any_1] address BPTtake;"										  ]
[ 30@0,	  "command",	  "transaction",  "alpha",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] address TRNtrans_alpha;"								  ]
[ 31@0,	  "pattern",	  "transaction",  "abort",		  "(c:any...):void address TRNtrans_abort;"											  ]
[ 32@0,	  "command",	  "transaction",  "abort",			  "():void address TRNglobal_abort;"												  ]
[ 33@0,	  "pattern",	  "transaction",  "clean",		  "(c:any...):void address TRNtrans_clean;"											  ]
[ 34@0,	  "pattern",	  "transaction",  "commit",		  "(c:any...):void address TRNtrans_commit;"											  ]
[ 35@0,	  "command",	  "transaction",  "commit",			  "():void address TRNglobal_commit;"												  ]
[ 36@0,	  "command",	  "transaction",  "delta",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] address TRNtrans_delta;"								  ]
[ 37@0,	  "command",	  "transaction",  "sync",			  "():void address TRNglobal_sync;"												  ]
[ 38@0,	  "pattern",	  "chop",	  "getTail",			  "(b:bat[:any_2,:any_1],i:lng):any_1 address CHPgetTail;"							  ]
[ 39@0,	  "pattern",	  "chop",	  "getHead",			  "(b:bat[:any_1,:any],i:lng):any_1 address CHPgetHead;"							  ]
[ 40@0,	  "pattern",	  "chop",	  "hasMoreElements",		  "(b:bat[:any_1,:any_2]) (_2:lng,h:any_1,t:any_2) address CHPbunHasMoreElements;"				  ]
[ 41@0,	  "command",	  "chop",	  "hasMoreElements",		  "(b:bat[:any_1,:any_2],size:lng) (_3:lng,_4:bat[:any_1,:any_2]) address CHPhasMoreChunks;"			  ]
[ 42@0,	  "pattern",	  "chop",	  "newIterator",		  "(b:bat[:any_1,:any_2]) (_2:lng,h:any_1,t:any_2) address CHPbunIterator;"					  ]
[ 43@0,	  "command",	  "chop",	  "newIterator",		  "(b:bat[:any_1,:any_2],size:lng) (_3:lng,_4:bat[:any_1,:any_2]) address CHPnewChunkIterator;"			  ]
[ 44@0,	  "pattern",	  "optimizer",	  "aliasRemoval",		  "(mod:str,fcn:str):str address QOTARoptimizerCALL;"								  ]
[ 45@0,	  "pattern",	  "optimizer",	  "aliasRemoval",		  "():str address QOTARoptimizer;"										  ]
[ 46@0,	  "pattern",	  "optimizer",	  "clrDebug",			  "():void address QOTclrdebugOptimizers;"									  ]
[ 47@0,	  "pattern",	  "optimizer",	  "costEstimation",		  "(mod:str,fcn:str):str address QOTRMoptimizerCALL;"								  ]
[ 48@0,	  "pattern",	  "optimizer",	  "costEstimation",		  "():str address QOTRMoptimizer;"										  ]
[ 49@0,	  "pattern",	  "optimizer",	  "commonExpressionRemoval",	  "(mod:any_1,fcn:any_2):str address QOTCXoptimizerCALL;"							  ]
[ 50@0,	  "pattern",	  "optimizer",	  "commonExpressionRemoval",	  "():str address QOTCXoptimizer;"										  ]
[ 51@0,	  "pattern",	  "optimizer",	  "dumpQEP",			  "():void address QEPtreedump;"										  ]
[ 52@0,	  "pattern",	  "optimizer",	  "deadCodeRemoval",		  "(mod:str,fcn:str):str address QOTDCoptimizerCALL;"								  ]
[ 53@0,	  "pattern",	  "optimizer",	  "deadCodeRemoval",		  "():str address QOTDCoptimizer;"										  ]
[ 54@0,	  "pattern",	  "optimizer",	  "emptySet",			  "(mod:str,fcn:str):str address QOTESoptimizerCALL;"								  ]
[ 55@0,	  "pattern",	  "optimizer",	  "emptySet",			  "():str address QOTESoptimizer;"										  ]
[ 56@0,	  "pattern",	  "optimizer",	  "expressionAccumulation",	  "(mod:str,fcn:str):str address QOTAEoptimizerCALL;"								  ]
[ 57@0,	  "pattern",	  "optimizer",	  "expressionAccumulation",	  "():str address QOTAEoptimizer;"										  ]
[ 58@0,	  "pattern",	  "optimizer",	  "factorize",			  "(mod:str,fcn:str):str address QOTFToptimizerCALL;"								  ]
[ 59@0,	  "pattern",	  "optimizer",	  "factorize",			  "():str address QOTFToptimizer;"										  ]
[ 60@0,	  "pattern",	  "optimizer",	  "garbageCollector",		  "(mod:str,fcn:str):str address QOTGCoptimizerCALL;"								  ]
[ 61@0,	  "pattern",	  "optimizer",	  "garbageCollector",		  "():str address QOTGCoptimizer;"										  ]
[ 62@0,	  "pattern",	  "optimizer",	  "multiplex",			  "(CMD:str,a:any...):any address OPTmultiplex;"								  ]
[ 63@0,	  "pattern",	  "optimizer",	  "macroContraction",		  "(mod:str,fcn:str):void address QOTMCoptimizerSymbol;"							  ]
[ 64@0,	  "pattern",	  "optimizer",	  "macroContraction",		  "(mod:str):void address QOTMCoptimizerModule;"								  ]
[ 65@0,	  "pattern",	  "optimizer",	  "macroContraction",		  "():void address QOTMCoptimizer;"										  ]
[ 66@0,	  "pattern",	  "optimizer",	  "macroExpansion",		  "(mod:str,fcn:str):void address QOTMEoptimizerSymbol;"							  ]
[ 67@0,	  "pattern",	  "optimizer",	  "macroExpansion",		  "(mod:str):void address QOTMEoptimizerModule;"								  ]
[ 68@0,	  "pattern",	  "optimizer",	  "macroExpansion",		  "():void address QOTMEoptimizer;"										  ]
[ 69@0,	  "pattern",	  "optimizer",	  "optimize",			  "(mod:str,fcn:str):void address QOToptimize;"									  ]
[ 70@0,	  "pattern",	  "optimizer",	  "partitionedQuery",		  "(mod:str,fcn:str):str address QOTBPToptimizerCALL;"								  ]
[ 71@0,	  "pattern",	  "optimizer",	  "partitionedQuery",		  "():str address QOTBPToptimizer;"										  ]
[ 72@0,	  "pattern",	  "optimizer",	  "peephole",			  "(mod:str,fcn:str):str address QOTPHoptimizerCALL;"								  ]
[ 73@0,	  "pattern",	  "optimizer",	  "peephole",			  "():str address QOTPHoptimizer;"										  ]
[ 74@0,	  "pattern",	  "optimizer",	  "prelude",			  "():void address optimizer_prelude;"										  ]
[ 75@0,	  "pattern",	  "optimizer",	  "reduce",			  "(mod:str,fcn:str):str address QOTMRoptimizerCALL;"								  ]
[ 76@0,	  "pattern",	  "optimizer",	  "reduce",			  "():str address QOTMRoptimizer;"										  ]
[ 77@0,	  "pattern",	  "optimizer",	  "showPlan",			  "():void address QOTshowPlan;"										  ]
[ 78@0,	  "pattern",	  "optimizer",	  "showPlan",			  "(M:str,F:str,s:str):void address QOTshowPlan;"								  ]
[ 79@0,	  "pattern",	  "optimizer",	  "showFlowGraph",		  "(M:str,F:str,s:str):void address QOTshowFlowGraph;"								  ]
[ 80@0,	  "pattern",	  "optimizer",	  "setDebug",			  "():void address QOTdebugOptimizers;"										  ]
[ 81@0,	  "pattern",	  "optimizer",	  "singleton",			  "(mod:str,fcn:str):str address QOTSToptimizerCALL;"								  ]
[ 82@0,	  "pattern",	  "optimizer",	  "singleton",			  "():str address QOTSToptimizer;"										  ]
[ 83@0,	  "pattern",	  "optimizer",	  "strengthReduction",		  "(mod:str,fcn:str):str address QOTSRoptimizerCALL;"								  ]
[ 84@0,	  "pattern",	  "optimizer",	  "strengthReduction",		  "():str address QOTSRoptimizer;"										  ]
[ 85@0,	  "pattern",	  "statistics",	  "close",			  "():void address STATclose;"											  ]
[ 86@0,	  "command",	  "statistics",	  "dump",			  "():void address STATdump;"											  ]
[ 87@0,	  "command",	  "statistics",	  "discard",			  "(name:bat[:any_1,:any_2]):void address STATdiscard2;"							  ]
[ 88@0,	  "pattern",	  "statistics",	  "discard",			  "(name:str):void address STATdiscard;"									  ]
[ 89@0,	  "command",	  "statistics",	  "deposit",			  "(name:bat[:any_1,:any_2]):void address STATdeposit;"								  ]
[ 90@0,	  "command",	  "statistics",	  "deposit",			  "(name:str):void address STATdepositStr;"									  ]
[ 91@0,	  "pattern",	  "statistics",	  "destroy",			  "():void address STATdestroy;"										  ]
[ 92@0,	  "command",	  "statistics",	  "forceUpdate",		  "(bnme:str):void address STATforceUpdate;"									  ]
[ 93@0,	  "command",	  "statistics",	  "forceUpdate",		  "():void address STATforceUpdateAll;"										  ]
[ 94@0,	  "command",	  "statistics",	  "getHistogram",		  "(nme:str):bat[:any_1,:any_2] address STATgetHistogram;"							  ]
[ 95@0,	  "command",	  "statistics",	  "getMax",			  "(nme:str):lng address STATgetMax;"										  ]
[ 96@0,	  "command",	  "statistics",	  "getMin",			  "(nme:str):lng address STATgetMin;"										  ]
[ 97@0,	  "command",	  "statistics",	  "getSize",			  "(nme:str):lng address STATgetSize;"										  ]
[ 98@0,	  "command",	  "statistics",	  "getCount",			  "(nme:str):lng address STATgetCount;"										  ]
[ 99@0,	  "command",	  "statistics",	  "getHotset",			  "():bat[:int,:str] address STATgetHotset;"									  ]
[ 100@0,  "command",	  "statistics",	  "getObjects",			  "():bat[:int,:str] address STATgetObjects;"									  ]
[ 101@0,  "pattern",	  "statistics",	  "hasMoreElements",		  "() (_1:lng,_2:str) address STAThasMoreElements;"								  ]
[ 102@0,  "pattern",	  "statistics",	  "newIterator",		  "() (_1:lng,_2:str) address STATnewIterator;"									  ]
[ 103@0,  "pattern",	  "statistics",	  "open",			  "():void address STATopen;"											  ]
[ 104@0,  "command",	  "statistics",	  "prelude",			  "():void address STATprelude;"										  ]
[ 105@0,  "command",	  "statistics",	  "release",			  "(name:bat[:any_1,:any_2]):void address STATrelease;"								  ]
[ 106@0,  "pattern",	  "statistics",	  "release",			  "(name:str):void address STATreleaseStr;"									  ]
[ 107@0,  "pattern",	  "statistics",	  "releaseAll",			  "():void address STATreleaseAll;"										  ]
[ 108@0,  "pattern",	  "statistics",	  "toString",			  "(name:any_1):str address STATtoString;"									  ]
[ 109@0,  "pattern",	  "statistics",	  "take",			  "(name:any_1):any_2 address STATtake;"									  ]
[ 110@0,  "command",	  "statistics",	  "update",			  "():void address STATupdate;"											  ]
[ 111@0,  "command",	  "profiler",	  "activate",			  "(name:str):void address CMDactivateProfiler;"								  ]
[ 112@0,  "command",	  "profiler",	  "clearTrace",			  "():void address CMDclearTrace;"										  ]
[ 113@0,  "command",	  "profiler",	  "clrFilter",			  "(mod:str,fcn:str):void address CMDclrFilterProfiler;"							  ]
[ 114@0,  "command",	  "profiler",	  "closeStream",		  "():void address CMDcloseProfilerStream;"									  ]
[ 115@0,  "command",	  "profiler",	  "dumpTrace",			  "():void address CMDdumpTrace;"										  ]
[ 116@0,  "command",	  "profiler",	  "deactivate",			  "(name:str):void address CMDdeactivateProfiler;"								  ]
[ 117@0,  "command",	  "profiler",	  "getTrace",			  "(e:str):bat[:int,:any_1] address CMDgetTrace;"								  ]
[ 118@0,  "command",	  "profiler",	  "openStream",			  "(fnme:str):void address CMDsetProfilerStream;"								  ]
[ 119@0,  "command",	  "profiler",	  "openStream",			  "():void address CMDopenProfilerStream;"									  ]
[ 120@0,  "command",	  "profiler",	  "setOfflineProfiling",	  "():void address CMDsetOfflineProfiling;"									  ]
[ 121@0,  "command",	  "profiler",	  "setOnlineProfiling",		  "():void address CMDsetOnlineProfiling;"									  ]
[ 122@0,  "command",	  "profiler",	  "setCachedProfiling",		  "():void address CMDsetCachedProfiling;"									  ]
[ 123@0,  "command",	  "profiler",	  "stopTrace",			  "():void address CMDstopTrace;"										  ]
[ 124@0,  "command",	  "profiler",	  "startTrace",			  "():void address CMDstartTrace;"										  ]
[ 125@0,  "command",	  "profiler",	  "stop",			  "():void address CMDstopProfiler;"										  ]
[ 126@0,  "command",	  "profiler",	  "start",			  "():void address CMDstartProfiler;"										  ]
[ 127@0,  "command",	  "profiler",	  "setEndPoint",		  "(mod:str,fcn:str):void address CMDendPointProfiler;"								  ]
[ 128@0,  "command",	  "profiler",	  "setStartPoint",		  "(mod:str,fcn:str):void address CMDstartPointProfiler;"							  ]
[ 129@0,  "command",	  "profiler",	  "setFilter",			  "(mod:str,fcn:str):void address CMDsetFilterProfiler;"							  ]
[ 130@0,  "command",	  "profiler",	  "setNone",			  "():void address CMDsetNoneProfiler;"										  ]
[ 131@0,  "command",	  "profiler",	  "setAll",			  "():void address CMDsetAllProfiler;"										  ]
[ 132@0,  "pattern",	  "mal",	  "assert",			  "(v:any_1,pname:str,oper:str,val:any_2):void address CMDassertProperty;"					  ]
[ 133@0,  "pattern",	  "mal",	  "assert",			  "(v:any_1,term:str):void address CMDassertProperty;"								  ]
[ 134@0,  "pattern",	  "mal",	  "call",			  "(s:bat[:any_1,:str]):void address CMDcallBAT;"								  ]
[ 135@0,  "pattern",	  "mal",	  "call",			  "(s:str):void address CMDcallString;"										  ]
[ 136@0,  "command",	  "mal",	  "nextElement",		  "(step:dbl,last:dbl) (_3:bit,_4:dbl) address RNGnextElement_dbl;"						  ]
[ 137@0,  "command",	  "mal",	  "nextElement",		  "(step:flt,last:flt) (_3:bit,_4:flt) address RNGnextElement_flt;"						  ]
[ 138@0,  "command",	  "mal",	  "nextElement",		  "(step:lng,last:lng) (_3:bit,_4:lng) address RNGnextElement_lng;"						  ]
[ 139@0,  "command",	  "mal",	  "nextElement",		  "(step:int,last:int) (_3:bit,_4:int) address RNGnextElement_int;"						  ]
[ 140@0,  "command",	  "mal",	  "nextElement",		  "(step:sht,last:sht) (_3:bit,_4:sht) address RNGnextElement_sht;"						  ]
[ 141@0,  "command",	  "mal",	  "nextElement",		  "(step:oid,last:oid) (_3:bit,_4:oid) address RNGnextElement_oid;"						  ]
[ 142@0,  "command",	  "mal",	  "newRange",			  "(v:dbl) (_2:bit,_3:dbl) address RNGnewRange_dbl;"								  ]
[ 143@0,  "command",	  "mal",	  "newRange",			  "(v:flt) (_2:bit,_3:flt) address RNGnewRange_flt;"								  ]
[ 144@0,  "command",	  "mal",	  "newRange",			  "(v:lng) (_2:bit,_3:lng) address RNGnewRange_lng;"								  ]
[ 145@0,  "command",	  "mal",	  "newRange",			  "(v:int) (_2:bit,_3:int) address RNGnewRange_int;"								  ]
[ 146@0,  "command",	  "mal",	  "newRange",			  "(v:sht) (_2:bit,_3:sht) address RNGnewRange_sht;"								  ]
[ 147@0,  "command",	  "mal",	  "newRange",			  "(v:oid) (_2:bit,_3:oid) address RNGnewRange_oid;"								  ]
[ 148@0,  "command",	  "mal",	  "register",			  "(m:str,f:str,code:str,help:str):void address CMDregisterFunction;"						  ]
[ 149@0,  "command",	  "mal",	  "raise",			  "(msg:str):str address CMDraise;"										  ]
[ 150@0,  "command",	  "mal",	  "source",			  "(f:str):void address CMDevalFile;"										  ]
[ 151@0,  "command",	  "inspect",	  "getAtomSizes",		  "():bat[:int,:int] address INSPECTatom_sizes;"								  ]
[ 152@0,  "command",	  "inspect",	  "getAtomSuperNames",		  "():bat[:int,:str] address INSPECTatom_sup_names;"								  ]
[ 153@0,  "command",	  "inspect",	  "getAtomNames",		  "():bat[:int,:str] address INSPECTatom_names;"								  ]
[ 154@0,  "command",	  "inspect",	  "getTypeName",		  "(v:int):str address INSPECTtypename;"									  ]
[ 155@0,  "pattern",	  "inspect",	  "getType",			  "(v:any_1):int address INSPECTtype;"										  ]
[ 156@0,  "pattern",	  "inspect",	  "getType",			  "(v:bat[:any_1,:any_2]):int address INSPECTtype;"								  ]
[ 157@0,  "command",	  "inspect",	  "getSignature",		  "(mod:str,fcn:str):bat[:str,:str] address INSPECTgetSignature;"						  ]
[ 158@0,  "command",	  "inspect",	  "getSignature",		  "():bat[:void,:str] address INSPECTgetsignature;"								  ]
[ 159@0,  "command",	  "inspect",	  "getFunction",		  "():bat[:void,:str] address INSPECTgetFunction;"								  ]
[ 160@0,  "command",	  "inspect",	  "getModule",			  "():bat[:void,:str] address INSPECTgetModule;"								  ]
[ 161@0,  "command",	  "inspect",	  "getKind",			  "():bat[:void,:str] address INSPECTgetkind;"									  ]
[ 162@0,  "command",	  "inspect",	  "getDefinition",		  "(mod:str,fcn:str):bat[:int,:str] address INSPECTgetDefinition;"						  ]
[ 163@0,  "command",	  "manual",	  "createHelp",			  "():void address MANUALcreateHelp;"										  ]
[ 164@0,  "command",	  "manual",	  "createOverview",		  "():void address MANUALcreateOverview;"									  ]
[ 165@0,  "command",	  "manual",	  "create",			  "():void address MANUALcreate0;"										  ]
[ 166@0,  "command",	  "manual",	  "create",			  "(mod:str):void address MANUALcreate1;"									  ]
[ 167@0,  "command",	  "manual",	  "create",			  "(file:str,mod:str,recursive:int):void address MANUALcreate;"							  ]
[ 168@0,  "command",	  "manual",	  "create",			  "(file:str,mod:str):void address MANUALcreate2;"								  ]
[ 169@0,  "command",	  "manual",	  "help",			  "(mod:str,fcn:str):bat[:str,:str] address MANUALhelp2;"							  ]
[ 170@0,  "command",	  "manual",	  "help",			  "(k:str):bat[:str,:str] address MANUALhelp;"									  ]
[ 171@0,  "pattern",	  "box",	  "close",			  "(bname:str):void address BOXclose;"										  ]
[ 172@0,  "pattern",	  "box",	  "discard",			  "(bname:str,name:str):void address BOXdiscard;"								  ]
[ 173@0,  "pattern",	  "box",	  "deposit",			  "(bname:str,name:str,v:any_1):void address BOXdeposit;"							  ]
[ 174@0,  "pattern",	  "box",	  "destroy",			  "(bname:str):void address BOXdestroy;"									  ]
[ 175@0,  "command",	  "box",	  "getBoxNames",		  "():bat[:int,:str] address BOXgetBoxNames;"									  ]
[ 176@0,  "pattern",	  "box",	  "iterator",			  "(nme:str):lng address BOXiterator;"										  ]
[ 177@0,  "pattern",	  "box",	  "open",			  "(nme:str):any_1 address BOXopen;"										  ]
[ 178@0,  "pattern",	  "box",	  "release",			  "(bname:str,nme:str,val:any_1):void address BOXrelease;"							  ]
[ 179@0,  "pattern",	  "box",	  "releaseAll",			  "(bname:str):void address BOXreleaseAll;"									  ]
[ 180@0,  "pattern",	  "box",	  "toString",			  "(bname:str,name:str):str address BOXtoString;"								  ]
[ 181@0,  "pattern",	  "box",	  "take",			  "(bnme:str,vnme:str):any_1 address BOXtake;"									  ]
[ 182@0,  "command",	  "bbp",	  "bind",			  "(idx:int):bat[:any_1,:any_2] address CMDbbpbindindex;"							  ]
[ 183@0,  "pattern",	  "bbp",	  "bind",			  "(name:str):bat[:any_1,:any_2] address CMDbbpbind;"								  ]
[ 184@0,  "pattern",	  "bbp",	  "bind",			  "(name:str,loc:str):bat[:any_1,:any_2] address CMDbbpbindDefinition;"						  ]
[ 185@0,  "pattern",	  "bbp",	  "commit",			  "():void address CMDbbpReleasA;"										  ]
[ 186@0,  "command",	  "bbp",	  "close",			  "():void address CMDbbpclose;"										  ]
[ 187@0,  "pattern",	  "bbp",	  "discard",			  "(name:str):void address CMDbbpdiscard;"									  ]
[ 188@0,  "pattern",	  "bbp",	  "destroy",			  "(b:bat[:any_1,:any_2],immediate:bit):void address CMDbbpdestroyBAT;"						  ]
[ 189@0,  "pattern",	  "bbp",	  "destroy",			  "(b:bat[:any_1,:any_2]):void address CMDbbpdestroyBAT1;"							  ]
[ 190@0,  "pattern",	  "bbp",	  "deposit",			  "(name:str,v:bat[:any_1,:any_2]):void address CMDbbpdeposit;"							  ]
[ 191@0,  "command",	  "bbp",	  "destroy",			  "():void address CMDbbpdestroy;"										  ]
[ 192@0,  "command",	  "bbp",	  "getLRefCount",		  "(b:bat[:any_1,:any_2]):int address CMDgetBATlrefcnt;"							  ]
[ 193@0,  "command",	  "bbp",	  "getRefCount",		  "(b:bat[:any_1,:any_2]):int address CMDgetBATrefcnt;"								  ]
[ 194@0,  "command",	  "bbp",	  "getKind",			  "():bat[:int,:str] address CMDbbpKind;"									  ]
[ 195@0,  "command",	  "bbp",	  "getStatus",			  "():bat[:int,:str] address CMDbbpStatus;"									  ]
[ 196@0,  "command",	  "bbp",	  "getDirty",			  "():bat[:int,:str] address CMDbbpDirty;"									  ]
[ 197@0,  "command",	  "bbp",	  "getHeat",			  "():bat[:int,:int] address CMDbbpHeat;"									  ]
[ 198@0,  "command",	  "bbp",	  "getLocation",		  "():bat[:int,:str] address CMDbbpLocation;"									  ]
[ 199@0,  "command",	  "bbp",	  "getLRefCount",		  "():bat[:int,:int] address CMDbbpLRefCount;"									  ]
[ 200@0,  "command",	  "bbp",	  "getRefCount",		  "():bat[:int,:int] address CMDbbpRefCount;"									  ]
[ 201@0,  "command",	  "bbp",	  "getCount",			  "():bat[:int,:lng] address CMDbbpCount;"									  ]
[ 202@0,  "command",	  "bbp",	  "getName",			  "(b:bat[:any_1,:any_2]):str address CMDbbpName;"								  ]
[ 203@0,  "command",	  "bbp",	  "getRNames",			  "():bat[:int,:str] address CMDbbpRNames;"									  ]
[ 204@0,  "command",	  "bbp",	  "getNames",			  "():bat[:int,:str] address CMDbbpNames;"									  ]
[ 205@0,  "command",	  "bbp",	  "getTailType",		  "():bat[:int,:str] address CMDbbpTailType;"									  ]
[ 206@0,  "command",	  "bbp",	  "getHeadType",		  "():bat[:int,:str] address CMDbbpHeadType;"									  ]
[ 207@0,  "pattern",	  "bbp",	  "getObjects",			  "():bat[:int,:str] address CMDbbpGetObjects;"									  ]
[ 208@0,  "pattern",	  "bbp",	  "iterator",			  "(nme:str):lng address CMDbbpiterator;"									  ]
[ 209@0,  "command",	  "bbp",	  "open",			  "():void address CMDbbpopen;"											  ]
[ 210@0,  "pattern",	  "bbp",	  "prelude",			  "():void address CMDbbpprelude;"										  ]
[ 211@0,  "pattern",	  "bbp",	  "release",			  "(b:bat[:any_1,:any_2]):void address CMDbbpreleaseBAT;"							  ]
[ 212@0,  "pattern",	  "bbp",	  "release",			  "(name:str,val:bat[:any_1,:any_2]):void address CMDbbprelease;"						  ]
[ 213@0,  "pattern",	  "bbp",	  "releaseAll",			  "():void address CMDbbpReleasA;"										  ]
[ 214@0,  "pattern",	  "bbp",	  "toString",			  "(name:str):str address CMDbbptoStr;"										  ]
[ 215@0,  "pattern",	  "bbp",	  "take",			  "(name:str):bat[:any_1,:any_2] address CMDbbptake;"								  ]
[ 216@0,  "pattern",	  "const",	  "close",			  "():void address CSTclose;"											  ]
[ 217@0,  "pattern",	  "const",	  "discard",			  "(name:any_1):void address CSTdiscard;"									  ]
[ 218@0,  "pattern",	  "const",	  "deposit",			  "(name:str,val:any_1):void address CSTdeposit;"								  ]
[ 219@0,  "pattern",	  "const",	  "destroy",			  "():void address CSTdestroy;"											  ]
[ 220@0,  "pattern",	  "const",	  "hasMoreElements",		  "() (_1:lng,_2:str) address CSThasMoreElements;"								  ]
[ 221@0,  "pattern",	  "const",	  "newIterator",		  "() (_1:lng,_2:str) address CSTnewIterator;"									  ]
[ 222@0,  "pattern",	  "const",	  "open",			  "():void address CSTopen;"											  ]
[ 223@0,  "pattern",	  "const",	  "prelude",			  "():void address CSTprelude;"											  ]
[ 224@0,  "pattern",	  "const",	  "release",			  "(name:any_1):void address CSTrelease;"									  ]
[ 225@0,  "pattern",	  "const",	  "release",			  "(name:str):void address CSTrelease;"										  ]
[ 226@0,  "pattern",	  "const",	  "releaseAll",			  "():void address CSTreleaseAll;"										  ]
[ 227@0,  "pattern",	  "const",	  "toString",			  "(name:any_1):str address CSTtoString;"									  ]
[ 228@0,  "pattern",	  "const",	  "take",			  "(name:str):any_1 address CSTtake;"										  ]
[ 229@0,  "command",	  "factory",	  "getLocations",		  "():bat[:int,:str] address FCTgetLocations;"									  ]
[ 230@0,  "command",	  "factory",	  "getTimeStampOut",		  "():date address FCTgetTimeStampOut;"										  ]
[ 231@0,  "command",	  "factory",	  "getTimeStampIn",		  "():date address FCTgetTimeStampIn;"										  ]
[ 232@0,  "command",	  "factory",	  "getOwners",			  "():bat[:int,:str] address FCTgetOwners;"									  ]
[ 233@0,  "command",	  "factory",	  "getCaller",			  "():int address FCTgetCaller;"										  ]
[ 234@0,  "command",	  "factory",	  "getPlants",			  "():bat[:str,:str] address FCTgetPlants;"									  ]
[ 235@0,  "command",	  "factory",	  "shutdown",			  "(m:str,f:str):void address FCTshutdown;"									  ]
[ 236@0,  "command",	  "factory",	  "setLocation",		  "(uri:str):void address FCTsetLocation;"									  ]
[ 237@0,  "command",	  "io",		  "export",			  "(b:bat[:any_1,:any_2],filepath:str):bit address IOexport;"							  ]
[ 238@0,  "pattern",	  "io",		  "ftable",			  "(fp:stream,order:int,b1:bat[:any_1,:any],b:bat[:any_1,:any]...):void address IOfotable;"			  ]
[ 239@0,  "pattern",	  "io",		  "ftable",			  "(filep:stream,b1:bat[:any_1,:any],b:bat[:any_1,:any]...):int address IOftable;"				  ]
[ 240@0,  "command",	  "io",		  "import",			  "(b:bat[:any_1,:any_2],filepath:str):bit address IOimport;"							  ]
[ 241@0,  "command",	  "io",		  "printf",			  "(format:str,val:str):int address IOprint_formatted_str;"							  ]
[ 242@0,  "command",	  "io",		  "printf",			  "(val:str):int address IOprint_str;"										  ]
[ 243@0,  "command",	  "io",		  "printf",			  "(format:str,val:dbl):int address IOprint_formatted_dbl;"							  ]
[ 244@0,  "command",	  "io",		  "printf",			  "(format:str,val:flt):int address IOprint_formatted_flt;"							  ]
[ 245@0,  "command",	  "io",		  "printf",			  "(format:str,val:lng):int address IOprint_formatted_lng;"							  ]
[ 246@0,  "command",	  "io",		  "printf",			  "(format:str,val:oid):int address IOprint_oid;"								  ]
[ 247@0,  "command",	  "io",		  "printf",			  "(format:str,val:sht):int address IOprint_formatted_sht;"							  ]
[ 248@0,  "command",	  "io",		  "printf",			  "(format:str,val:int):int address IOprint_formatted_int;"							  ]
[ 249@0,  "command",	  "io",		  "printf",			  "(format:str,val:chr):int address IOprint_formatted_chr;"							  ]
[ 250@0,  "command",	  "io",		  "printf",			  "(format:str,val:bit):int address IOprint_formatted_bit;"							  ]
[ 251@0,  "pattern",	  "io",		  "printft",			  "(val:any_1):int address IOprint_ft;"										  ]
[ 252@0,  "pattern",	  "io",		  "prompt",			  "(val:any_1):int address IOprompt_val;"									  ]
[ 253@0,  "pattern",	  "io",		  "print",			  "(val:bat[:any_1,:any_2]):int address IOprint_val;"								  ]
[ 254@0,  "pattern",	  "io",		  "print",			  "(val:any_1):int address IOprint_val;"									  ]
[ 255@0,  "pattern",	  "io",		  "print",			  "(order:int,b:bat[:any_1,:any],b2:bat[:any_1,:any]...):int address IOotable;"					  ]
[ 256@0,  "pattern",	  "io",		  "print",			  "(b1:bat[:any_1,:any]...):int address IOtable;"								  ]
[ 257@0,  "pattern",	  "io",		  "print",			  "(val:any_1,lst:any...):int address IOprint_val;"								  ]
[ 258@0,  "command",	  "io",		  "stdout",			  "():stream address io_stdout;"										  ]
[ 259@0,  "command",	  "io",		  "stderr",			  "():stream address io_stderr;"										  ]
[ 260@0,  "command",	  "io",		  "stdin",			  "():stream address io_stdin;"											  ]
[ 261@0,  "pattern",	  "io",		  "table",			  "(order:int,b1:bat[:any_1,:any],b2:bat[:any_1,:any]...):int address IOtotable;"				  ]
[ 262@0,  "pattern",	  "io",		  "table",			  "(b1:bat[:any_1,:any],b2:bat[:any_1,:any]...):int address IOttable;"						  ]
[ 263@0,  "pattern",	  "tablet",	  "dump",			  "(s:stream,b:bat[:any,:any]...):int address TABdump;"								  ]
[ 264@0,  "pattern",	  "tablet",	  "display",			  "(v:bat[:any_1,:any]...):int address TABdisplayTable;"							  ]
[ 265@0,  "pattern",	  "tablet",	  "display",			  "(v:any...):int address TABdisplayRow;"									  ]
[ 266@0,  "command",	  "tablet",	  "dump",			  "(names:bat[:void,:str],seps:bat[:void,:str],bats:bat[:void,:BAT],datafile:str,nr:int):void address CMDtablet_dump;"  ]
[ 267@0,  "command",	  "tablet",	  "firstPage",			  "():void address TABfirstPage;"										  ]
[ 268@0,  "command",	  "tablet",	  "finish",			  "():void address TABfinishReport;"										  ]
[ 269@0,  "command",	  "tablet",	  "getPage",			  "(i:int):void address TABgetPage;"										  ]
[ 270@0,  "command",	  "tablet",	  "getPageCnt",			  "():void address TABgetPageCnt;"										  ]
[ 271@0,  "pattern",	  "tablet",	  "header",			  "(b:any...):int address TABheader;"										  ]
[ 272@0,  "command",	  "tablet",	  "input",			  "(names:bat[:void,:str],seps:bat[:void,:str],types:bat[:void,:str],s:stream,nr:int):bat[:str,:BAT] address CMDtablet_input;"  ]
[ 273@0,  "command",	  "tablet",	  "lastPage",			  "():void address TABlastPage;"										  ]
[ 274@0,  "command",	  "tablet",	  "load",			  "(names:bat[:void,:str],seps:bat[:void,:str],types:bat[:void,:str],datafile:str,nr:int):bat[:str,:BAT] address CMDtablet_load;"  ]
[ 275@0,  "command",	  "tablet",	  "nextPage",			  "():void address TABnextPage;"										  ]
[ 276@0,  "command",	  "tablet",	  "output",			  "(order:bat[:any_1,:any_2],seps:bat[:void,:str],bats:bat[:void,:BAT],s:stream):void address CMDtablet_output;"  ]
[ 277@0,  "command",	  "tablet",	  "prevPage",			  "():void address TABprevPage;"										  ]
[ 278@0,  "pattern",	  "tablet",	  "page",			  "(b:bat[:any_1,:any]...):int address TABpage;"								  ]
[ 279@0,  "command",	  "tablet",	  "setColumnDecimal",		  "(idx:int,s:int,p:int):void address TABsetColumnDecimal;"							  ]
[ 280@0,  "command",	  "tablet",	  "setColumnPosition",		  "(idx:int,f:int,i:int):void address TABsetColumnPosition;"							  ]
[ 281@0,  "command",	  "tablet",	  "setColumnWidth",		  "(idx:int,maxwidth:int):void address TABsetColumnWidth;"							  ]
[ 282@0,  "command",	  "tablet",	  "setColumnNull",		  "(idx:int,fmt:str):void address TABsetColumnNull;"								  ]
[ 283@0,  "command",	  "tablet",	  "setColumnBracket",		  "(idx:int,lbrk:str,rbrk:str):void address TABsetColumnBracket;"						  ]
[ 284@0,  "command",	  "tablet",	  "setColumnName",		  "(idx:int,nme:str):void address TABsetColumnName;"								  ]
[ 285@0,  "pattern",	  "tablet",	  "setColumn",			  "(idx:int,v:any_1):void address TABsetColumn;"								  ]
[ 286@0,  "command",	  "tablet",	  "setRowBracket",		  "(lbrk:str,rbrk:str):void address TABsetRowBracket;"								  ]
[ 287@0,  "command",	  "tablet",	  "setTableBracket",		  "(lbrk:str,rbrk:str):void address TABsetTableBracket;"							  ]
[ 288@0,  "command",	  "tablet",	  "setDelimiter",		  "(sep:str):void address TABsetDelimiter;"									  ]
[ 289@0,  "command",	  "tablet",	  "setPivot",			  "(b:bat[:void,:oid]):void address TABsetPivot;"								  ]
[ 290@0,  "command",	  "tablet",	  "setStream",			  "(s:stream):void address TABsetStream;"									  ]
[ 291@0,  "pattern",	  "tablet",	  "setFormat",			  "(b:any...):void address TABsetFormat;"									  ]
[ 292@0,  "command",	  "tablet",	  "setProperties",		  "(prop:str):int address TABsetProperties;"									  ]
[ 293@0,  "command",	  "clients",	  "getScenario",		  "():str address CLTgetScenario;"										  ]
[ 294@0,  "command",	  "clients",	  "getInfo",			  "():bat[:int,:str] address CLTInfo;"										  ]
[ 295@0,  "command",	  "clients",	  "getId",			  "():int address CLTgetClientId;"										  ]
[ 296@0,  "command",	  "clients",	  "getLogins",			  "():bat[:int,:str] address CLTLogin;"										  ]
[ 297@0,  "command",	  "clients",	  "getUsers",			  "():bat[:int,:str] address CLTusers;"										  ]
[ 298@0,  "command",	  "clients",	  "quit",			  "():void address CLTquit;"											  ]
[ 299@0,  "command",	  "clients",	  "setScenario",		  "(msg:str):str address CLTsetScenario;"									  ]
[ 300@0,  "command",	  "clients",	  "setHistory",			  "(s:str):void address CLTsetHistory;"										  ]
[ 301@0,  "command",	  "clients",	  "setDebug",			  "(flg:int):void address CLTsetDebug;"										  ]
[ 302@0,  "command",	  "clients",	  "setListing",			  "(flg:int):int address CLTsetListing;"									  ]
[ 303@0,  "command",	  "batcolor",	  "blue",			  "(c:bat[:void,:color]):bat[:void,:int] address CLRbatBlue;"							  ]
[ 304@0,  "command",	  "batcolor",	  "cb",				  "(c:bat[:void,:color]):bat[:void,:int] address CLRbatCb;"							  ]
[ 305@0,  "command",	  "batcolor",	  "cr",				  "(c:bat[:void,:color]):bat[:void,:int] address CLRbatCr;"							  ]
[ 306@0,  "command",	  "batcolor",	  "color",			  "(s:bat[:void,:str]):bat[:void,:color] address CLRbatColor;"							  ]
[ 307@0,  "command",	  "batcolor",	  "green",			  "(c:bat[:void,:color]):bat[:void,:int] address CLRbatGreen;"							  ]
[ 308@0,  "command",	  "batcolor",	  "hue",			  "(c:bat[:void,:color]):bat[:void,:flt] address CLRbatHue;"							  ]
[ 309@0,  "command",	  "batcolor",	  "hsv",			  "(h:bat[:void,:flt],s:bat[:void,:flt],v:bat[:void,:flt]):bat[:void,:color] address CLRbatHsv;"		  ]
[ 310@0,  "command",	  "batcolor",	  "hue",			  "(c:bat[:void,:color]):bat[:void,:int] address CLRbatHueInt;"							  ]
[ 311@0,  "command",	  "batcolor",	  "luminance",			  "(c:bat[:void,:color]):bat[:void,:int] address CLRbatLuminance;"						  ]
[ 312@0,  "command",	  "batcolor",	  "red",			  "(c:bat[:void,:color]):bat[:void,:int] address CLRbatRed;"							  ]
[ 313@0,  "command",	  "batcolor",	  "rgb",			  "(r:bat[:void,:int],g:bat[:void,:int],b:bat[:void,:int]):bat[:void,:color] address CLRbatRgb;"		  ]
[ 314@0,  "command",	  "batcolor",	  "saturation",			  "(c:bat[:void,:color]):bat[:void,:flt] address CLRbatSaturation;"						  ]
[ 315@0,  "command",	  "batcolor",	  "saturation",			  "(c:bat[:void,:color]):bat[:void,:int] address CLRbatSaturationInt;"						  ]
[ 316@0,  "command",	  "batcolor",	  "str",			  "(b:bat[:void,:color]):bat[:void,:str] address CLRbatStr;"							  ]
[ 317@0,  "command",	  "batcolor",	  "value",			  "(c:bat[:void,:color]):bat[:void,:flt] address CLRbatValue;"							  ]
[ 318@0,  "command",	  "batcolor",	  "value",			  "(c:bat[:void,:color]):bat[:void,:int] address CLRbatValueInt;"						  ]
[ 319@0,  "command",	  "batstr",	  "+",				  "(l:bat[:void,:str],r:str):bat[:void,:str] address STRbatConcatcst;"						  ]
[ 320@0,  "command",	  "batstr",	  "+",				  "(l:bat[:void,:str],r:bat[:void,:str]):bat[:void,:str] address STRbatConcat;"					  ]
[ 321@0,  "command",	  "batstr",	  "==",				  "(l:bat[:void,:str],r:str):bat[:void,:bit] address STRbatEqualCst;"						  ]
[ 322@0,  "command",	  "batstr",	  "==",				  "(l:bat[:void,:str],r:bat[:void,:str]):bat[:void,:bit] address STRbatEqual;"					  ]
[ 323@0,  "command",	  "batstr",	  "bytes",			  "(s:bat[:void,:str]):bat[:void,:int] address STRbatBytes;"							  ]
[ 324@0,  "command",	  "batstr",	  "chrAt",			  "(s:bat[:void,:str],index:int):bat[:void,:chr] address STRbatChrAtcst;"					  ]
[ 325@0,  "command",	  "batstr",	  "chrAt",			  "(s:bat[:void,:str],index:bat[:void,:int]):bat[:void,:chr] address STRbatChrAt;"				  ]
[ 326@0,  "command",	  "batstr",	  "endsWith",			  "(s:bat[:void,:str],suffix:str):bat[:void,:bit] address STRbatSuffixcst;"					  ]
[ 327@0,  "command",	  "batstr",	  "endsWith",			  "(s:bat[:void,:str],suffix:bat[:void,:str]):bat[:void,:bit] address STRbatSuffix;"				  ]
[ 328@0,  "command",	  "batstr",	  "ltrim",			  "(s:bat[:void,:str]):bat[:void,:str] address STRbatLtrim;"							  ]
[ 329@0,  "command",	  "batstr",	  "length",			  "(s:bat[:void,:str]):bat[:void,:int] address STRbatLength;"							  ]
[ 330@0,  "command",	  "batstr",	  "match",			  "(b:bat[:void,:str],pat:str):bat[:void,:bit] address STRbatmatchCst;"						  ]
[ 331@0,  "command",	  "batstr",	  "r_search",			  "(s:bat[:void,:str],c:str):bat[:void,:int] address STRbatRstrSearchcst;"					  ]
[ 332@0,  "command",	  "batstr",	  "r_search",			  "(s:bat[:void,:str],c:bat[:void,:str]):bat[:void,:int] address STRbatRstrSearch;"				  ]
[ 333@0,  "command",	  "batstr",	  "rtrim",			  "(s:bat[:void,:str]):bat[:void,:str] address STRbatRtrim;"							  ]
[ 334@0,  "command",	  "batstr",	  "substitute",			  "(s:bat[:void,:str],src:str,dst:str,rep:bit):bat[:void,:str] address STRbatSubstitutecst;"			  ]
[ 335@0,  "command",	  "batstr",	  "string",			  "(s:bat[:void,:str],offset:int,count:int):bat[:void,:str] address STRbatSubStringcst;"			  ]
[ 336@0,  "command",	  "batstr",	  "string",			  "(b:bat[:void,:str],offset:int):bat[:void,:str] address STRbatTailcst;"					  ]
[ 337@0,  "command",	  "batstr",	  "string",			  "(b:bat[:void,:str],offset:bat[:void,:int]):bat[:void,:str] address STRbatTail;"				  ]
[ 338@0,  "command",	  "batstr",	  "search",			  "(s:bat[:void,:str],c:str):bat[:void,:int] address STRbatstrSearchcst;"					  ]
[ 339@0,  "command",	  "batstr",	  "search",			  "(s:bat[:void,:str],c:bat[:void,:str]):bat[:void,:int] address STRbatstrSearch;"				  ]
[ 340@0,  "command",	  "batstr",	  "startsWith",			  "(s:bat[:void,:str],prefix:str):bat[:void,:str] address STRbatPrefixcst;"					  ]
[ 341@0,  "command",	  "batstr",	  "startsWith",			  "(s:bat[:void,:str],prefix:bat[:void,:str]):bat[:void,:str] address STRbatPrefix;"				  ]
[ 342@0,  "command",	  "batstr",	  "str",			  "(b:bat[:void,:str]):bat[:void,:str] address STRbattostr;"							  ]
[ 343@0,  "command",	  "batstr",	  "trim",			  "(s:bat[:void,:str]):bat[:void,:str] address STRbatStrip;"							  ]
[ 344@0,  "command",	  "batstr",	  "toUpper",			  "(s:bat[:void,:str]):bat[:void,:str] address STRbatUpper;"							  ]
[ 345@0,  "command",	  "batstr",	  "toLower",			  "(s:bat[:void,:str]):bat[:void,:str] address STRbatLower;"							  ]
[ 346@0,  "command",	  "batstr",	  "unicodeAt",			  "(s:bat[:void,:str],index:int):bat[:void,:int] address STRbatWChrAtcst;"					  ]
[ 347@0,  "command",	  "batstr",	  "unicodeAt",			  "(s:bat[:void,:str],index:bat[:void,:int]):bat[:void,:int] address STRbatWChrAt;"				  ]
[ 348@0,  "command",	  "batcalc",	  "!=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] address CMDcmpaccumNEQcst;"			  ]
[ 349@0,  "command",	  "batcalc",	  "!=",				  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] address CMDcmpNEQcst;"						  ]
[ 350@0,  "command",	  "batcalc",	  "!=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] address CMDcmpaccumNEQ;"		  ]
[ 351@0,  "command",	  "batcalc",	  "!=",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] address CMDcmpNEQ;"					  ]
[ 352@0,  "command",	  "batcalc",	  "!=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] address CMDcmpaccumNEQcst;"			  ]
[ 353@0,  "command",	  "batcalc",	  "!=",				  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] address CMDcmpNEQcst;"						  ]
[ 354@0,  "command",	  "batcalc",	  "!=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] address CMDcmpaccumNEQ;"		  ]
[ 355@0,  "command",	  "batcalc",	  "!=",				  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] address CMDcmpNEQ;"					  ]
[ 356@0,  "command",	  "batcalc",	  "!=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] address CMDcmpaccumNEQcst;"			  ]
[ 357@0,  "command",	  "batcalc",	  "!=",				  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] address CMDcmpNEQcst;"						  ]
[ 358@0,  "command",	  "batcalc",	  "!=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] address CMDcmpaccumNEQ;"		  ]
[ 359@0,  "command",	  "batcalc",	  "!=",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] address CMDcmpNEQ;"					  ]
[ 360@0,  "command",	  "batcalc",	  "!=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] address CMDcmpaccumNEQcst;"			  ]
[ 361@0,  "command",	  "batcalc",	  "!=",				  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] address CMDcmpNEQcst;"						  ]
[ 362@0,  "command",	  "batcalc",	  "!=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] address CMDcmpaccumNEQ;"		  ]
[ 363@0,  "command",	  "batcalc",	  "!=",				  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] address CMDcmpNEQ;"					  ]
[ 364@0,  "command",	  "batcalc",	  "!=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] address CMDcmpaccumNEQcst;"			  ]
[ 365@0,  "command",	  "batcalc",	  "!=",				  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] address CMDcmpNEQcst;"						  ]
[ 366@0,  "command",	  "batcalc",	  "!=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] address CMDcmpaccumNEQ;"		  ]
[ 367@0,  "command",	  "batcalc",	  "!=",				  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] address CMDcmpNEQ;"					  ]
[ 368@0,  "command",	  "batcalc",	  "!=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] address CMDcmpaccumNEQcst;"			  ]
[ 369@0,  "command",	  "batcalc",	  "!=",				  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] address CMDcmpNEQcst;"						  ]
[ 370@0,  "command",	  "batcalc",	  "!=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] address CMDcmpaccumNEQ;"		  ]
[ 371@0,  "command",	  "batcalc",	  "!=",				  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] address CMDcmpNEQ;"					  ]
[ 372@0,  "command",	  "batcalc",	  "!=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] address CMDcmpaccumNEQcst;"			  ]
[ 373@0,  "command",	  "batcalc",	  "!=",				  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] address CMDcmpNEQcst;"						  ]
[ 374@0,  "command",	  "batcalc",	  "!=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] address CMDcmpaccumNEQ;"		  ]
[ 375@0,  "command",	  "batcalc",	  "!=",				  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] address CMDcmpNEQ;"					  ]
[ 376@0,  "command",	  "batcalc",	  "%",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:lng] address CMDbatMOD_lng_lng_lng;"					  ]
[ 377@0,  "command",	  "batcalc",	  "%",				  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:lng] address CMDcstMODbat_lng_lng_lng;"						  ]
[ 378@0,  "command",	  "batcalc",	  "%",				  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:lng] address CMDbatMODcst_lng_lng_lng;"						  ]
[ 379@0,  "command",	  "batcalc",	  "%",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:lng):void address CMDbataccumMODcst_lng_lng_lng;"					  ]
[ 380@0,  "command",	  "batcalc",	  "%",				  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:lng]):void address CMDbataccumMODcst2_lng_lng_lng;"				  ]
[ 381@0,  "command",	  "batcalc",	  "%",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void address CMDbataccumMOD_lng_lng_lng;"				  ]
[ 382@0,  "command",	  "batcalc",	  "%",				  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:int] address CMDbatMOD_int_int_int;"					  ]
[ 383@0,  "command",	  "batcalc",	  "%",				  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:int] address CMDcstMODbat_int_int_int;"						  ]
[ 384@0,  "command",	  "batcalc",	  "%",				  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:int] address CMDbatMODcst_int_int_int;"						  ]
[ 385@0,  "command",	  "batcalc",	  "%",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:int):void address CMDbataccumMODcst_int_int_int;"					  ]
[ 386@0,  "command",	  "batcalc",	  "%",				  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:int]):void address CMDbataccumMODcst2_int_int_int;"				  ]
[ 387@0,  "command",	  "batcalc",	  "%",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],c:bat[:any_1,:int]):void address CMDbataccumMOD_int_int_int;"				  ]
[ 388@0,  "command",	  "batcalc",	  "%",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:sht] address CMDbatMOD_sht_sht_sht;"					  ]
[ 389@0,  "command",	  "batcalc",	  "%",				  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:sht] address CMDcstMODbat_sht_sht_sht;"						  ]
[ 390@0,  "command",	  "batcalc",	  "%",				  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:sht] address CMDbatMODcst_sht_sht_sht;"						  ]
[ 391@0,  "command",	  "batcalc",	  "%",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void address CMDbataccumMODcst_sht_sht_sht;"					  ]
[ 392@0,  "command",	  "batcalc",	  "%",				  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void address CMDbataccumMODcst2_sht_sht_sht;"				  ]
[ 393@0,  "command",	  "batcalc",	  "%",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void address CMDbataccumMOD_sht_sht_sht;"				  ]
[ 394@0,  "command",	  "batcalc",	  "%",				  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:oid] address CMDbatMOD_oid_oid_oid;"					  ]
[ 395@0,  "command",	  "batcalc",	  "%",				  "(cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:oid] address CMDcstMODbat_oid_oid_oid;"						  ]
[ 396@0,  "command",	  "batcalc",	  "%",				  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:oid] address CMDbatMODcst_oid_oid_oid;"						  ]
[ 397@0,  "command",	  "batcalc",	  "%",				  "(a:bat[:any_1,:oid],b:bat[:any_1,:oid],cst:oid):void address CMDbataccumMODcst_oid_oid_oid;"					  ]
[ 398@0,  "command",	  "batcalc",	  "%",				  "(a:bat[:any_1,:oid],cst:oid,b:bat[:any_1,:oid]):void address CMDbataccumMODcst2_oid_oid_oid;"				  ]
[ 399@0,  "command",	  "batcalc",	  "%",				  "(a:bat[:any_1,:oid],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):void address CMDbataccumMOD_oid_oid_oid;"				  ]
[ 400@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:dbl] address CMDbatMUL_dbl_dbl_dbl;"			  ]
[ 401@0,  "command",	  "batcalc",	  "*",				  "(cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:dbl] address CMDcstMULbat_dbl_dbl_dbl;"				  ]
[ 402@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:dbl] address CMDbatMULcst_dbl_dbl_dbl;"				  ]
[ 403@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:dbl],b:bat[:any_1,:dbl],cst:dbl):void address CMDbataccumMULcst_dbl_dbl_dbl;"			  ]
[ 404@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:dbl],cst:dbl,b:bat[:any_1,:dbl]):void address CMDbataccumMULcst2_dbl_dbl_dbl;"		  ]
[ 405@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:dbl],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):void address CMDbataccumMUL_dbl_dbl_dbl;"		  ]
[ 406@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:flt] address CMDbatMUL_flt_flt_flt;"			  ]
[ 407@0,  "command",	  "batcalc",	  "*",				  "(cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:flt] address CMDcstMULbat_flt_flt_flt;"				  ]
[ 408@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:flt] address CMDbatMULcst_flt_flt_flt;"				  ]
[ 409@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:flt],b:bat[:any_1,:flt],cst:flt):void address CMDbataccumMULcst_flt_flt_flt;"			  ]
[ 410@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:flt],cst:flt,b:bat[:any_1,:flt]):void address CMDbataccumMULcst2_flt_flt_flt;"		  ]
[ 411@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:flt],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):void address CMDbataccumMUL_flt_flt_flt;"		  ]
[ 412@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:lng] address CMDbatMUL_lng_lng_lng;"			  ]
[ 413@0,  "command",	  "batcalc",	  "*",				  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:lng] address CMDcstMULbat_lng_lng_lng;"				  ]
[ 414@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:lng] address CMDbatMULcst_lng_lng_lng;"				  ]
[ 415@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:lng):void address CMDbataccumMULcst_lng_lng_lng;"			  ]
[ 416@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:lng]):void address CMDbataccumMULcst2_lng_lng_lng;"		  ]
[ 417@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void address CMDbataccumMUL_lng_lng_lng;"		  ]
[ 418@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:int] address CMDbatMUL_int_int_int;"			  ]
[ 419@0,  "command",	  "batcalc",	  "*",				  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:int] address CMDcstMULbat_int_int_int;"				  ]
[ 420@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:int] address CMDbatMULcst_int_int_int;"				  ]
[ 421@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:int):void address CMDbataccumMULcst_int_int_int;"			  ]
[ 422@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:int]):void address CMDbataccumMULcst2_int_int_int;"		  ]
[ 423@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],c:bat[:any_1,:int]):void address CMDbataccumMUL_int_int_int;"		  ]
[ 424@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:sht] address CMDbatMUL_sht_sht_sht;"			  ]
[ 425@0,  "command",	  "batcalc",	  "*",				  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:sht] address CMDcstMULbat_sht_sht_sht;"				  ]
[ 426@0,  "command",	  "batcalc",	  "*",				  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:sht] address CMDbatMULcst_sht_sht_sht;"				  ]
[ 427@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void address CMDbataccumMULcst_sht_sht_sht;"			  ]
[ 428@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void address CMDbataccumMULcst2_sht_sht_sht;"		  ]
[ 429@0,  "command",	  "batcalc",	  "*",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void address CMDbataccumMUL_sht_sht_sht;"		  ]
[ 430@0,  "command",	  "batcalc",	  "++",				  "(b:bat[:any_1,:dbl]):bat[:any_1,:dbl] address CMDunaryPLUSPLUS;"						  ]
[ 431@0,  "command",	  "batcalc",	  "++",				  "(b:bat[:any_1,:flt]):bat[:any_1,:flt] address CMDunaryPLUSPLUS;"						  ]
[ 432@0,  "command",	  "batcalc",	  "++",				  "(b:bat[:any_1,:sht]):bat[:any_1,:sht] address CMDunaryPLUSPLUS;"						  ]
[ 433@0,  "command",	  "batcalc",	  "++",				  "(b:bat[:any_1,:lng]):bat[:any_1,:lng] address CMDunaryPLUSPLUS;"						  ]
[ 434@0,  "command",	  "batcalc",	  "++",				  "(b:bat[:any_1,:int]):bat[:any_1,:int] address CMDunaryPLUSPLUS;"						  ]
[ 435@0,  "command",	  "batcalc",	  "++",				  "(b:bat[:any_1,:oid]):bat[:any_1,:oid] address CMDunaryPLUSPLUS;"						  ]
[ 436@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:dbl] address CMDbatADD_dbl_dbl_dbl;"			  ]
[ 437@0,  "command",	  "batcalc",	  "+",				  "(cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:dbl] address CMDcstADDbat_dbl_dbl_dbl;"				  ]
[ 438@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:dbl] address CMDbatADDcst_dbl_dbl_dbl;"				  ]
[ 439@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:dbl],b:bat[:any_1,:dbl],cst:dbl):void address CMDbataccumADDcst_dbl_dbl_dbl;"			  ]
[ 440@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:dbl],cst:dbl,b:bat[:any_1,:dbl]):void address CMDbataccumADDcst2_dbl_dbl_dbl;"		  ]
[ 441@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:dbl],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):void address CMDbataccumADD_dbl_dbl_dbl;"		  ]
[ 442@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:flt] address CMDbatADD_flt_flt_flt;"			  ]
[ 443@0,  "command",	  "batcalc",	  "+",				  "(cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:flt] address CMDcstADDbat_flt_flt_flt;"				  ]
[ 444@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:flt] address CMDbatADDcst_flt_flt_flt;"				  ]
[ 445@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:flt],b:bat[:any_1,:flt],cst:flt):void address CMDbataccumADDcst_flt_flt_flt;"			  ]
[ 446@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:flt],cst:flt,b:bat[:any_1,:flt]):void address CMDbataccumADDcst2_flt_flt_flt;"		  ]
[ 447@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:flt],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):void address CMDbataccumADD_flt_flt_flt;"		  ]
[ 448@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:lng] address CMDbatADD_lng_lng_lng;"			  ]
[ 449@0,  "command",	  "batcalc",	  "+",				  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:lng] address CMDcstADDbat_lng_lng_lng;"				  ]
[ 450@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:lng] address CMDbatADDcst_lng_lng_lng;"				  ]
[ 451@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:lng):void address CMDbataccumADDcst_lng_lng_lng;"			  ]
[ 452@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:lng]):void address CMDbataccumADDcst2_lng_lng_lng;"		  ]
[ 453@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void address CMDbataccumADD_lng_lng_lng;"		  ]
[ 454@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:int] address CMDbatADD_int_int_int;"			  ]
[ 455@0,  "command",	  "batcalc",	  "+",				  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:int] address CMDcstADDbat_int_int_int;"				  ]
[ 456@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:int] address CMDbatADDcst_int_int_int;"				  ]
[ 457@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:int):void address CMDbataccumADDcst_int_int_int;"			  ]
[ 458@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:int]):void address CMDbataccumADDcst2_int_int_int;"		  ]
[ 459@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],c:bat[:any_1,:int]):void address CMDbataccumADD_int_int_int;"		  ]
[ 460@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:sht] address CMDbatADD_sht_sht_sht;"			  ]
[ 461@0,  "command",	  "batcalc",	  "+",				  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:sht] address CMDcstADDbat_sht_sht_sht;"				  ]
[ 462@0,  "command",	  "batcalc",	  "+",				  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:sht] address CMDbatADDcst_sht_sht_sht;"				  ]
[ 463@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void address CMDbataccumADDcst_sht_sht_sht;"			  ]
[ 464@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void address CMDbataccumADDcst2_sht_sht_sht;"		  ]
[ 465@0,  "command",	  "batcalc",	  "+",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void address CMDbataccumADD_sht_sht_sht;"		  ]
[ 466@0,  "command",	  "batcalc",	  "--",				  "(b:bat[:any_1,:dbl]):bat[:any_1,:dbl] address CMDunaryMINMIN;"						  ]
[ 467@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:dbl]):bat[:any_1,:dbl] address CMDunaryMIN;"							  ]
[ 468@0,  "command",	  "batcalc",	  "--",				  "(b:bat[:any_1,:flt]):bat[:any_1,:flt] address CMDunaryMINMIN;"						  ]
[ 469@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:flt]):bat[:any_1,:flt] address CMDunaryMIN;"							  ]
[ 470@0,  "command",	  "batcalc",	  "--",				  "(b:bat[:any_1,:sht]):bat[:any_1,:sht] address CMDunaryMINMIN;"						  ]
[ 471@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:sht]):bat[:any_1,:sht] address CMDunaryMIN;"							  ]
[ 472@0,  "command",	  "batcalc",	  "--",				  "(b:bat[:any_1,:lng]):bat[:any_1,:lng] address CMDunaryMINMIN;"						  ]
[ 473@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:lng]):bat[:any_1,:lng] address CMDunaryMIN;"							  ]
[ 474@0,  "command",	  "batcalc",	  "--",				  "(b:bat[:any_1,:int]):bat[:any_1,:int] address CMDunaryMINMIN;"						  ]
[ 475@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:int]):bat[:any_1,:int] address CMDunaryMIN;"							  ]
[ 476@0,  "command",	  "batcalc",	  "--",				  "(b:bat[:any_1,:oid]):bat[:any_1,:oid] address CMDunaryMINMIN;"						  ]
[ 477@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:oid]):bat[:any_1,:oid] address CMDunaryMIN;"							  ]
[ 478@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:dbl] address CMDbatSUB_dbl_dbl_dbl;"			  ]
[ 479@0,  "command",	  "batcalc",	  "-",				  "(cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:dbl] address CMDcstSUBbat_dbl_dbl_dbl;"				  ]
[ 480@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:dbl] address CMDbatSUBcst_dbl_dbl_dbl;"				  ]
[ 481@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:dbl],b:bat[:any_1,:dbl],cst:dbl):void address CMDbataccumSUBcst_dbl_dbl_dbl;"			  ]
[ 482@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:dbl],cst:dbl,b:bat[:any_1,:dbl]):void address CMDbataccumSUBcst2_dbl_dbl_dbl;"		  ]
[ 483@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:dbl],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):void address CMDbataccumSUB_dbl_dbl_dbl;"		  ]
[ 484@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:flt] address CMDbatSUB_flt_flt_flt;"			  ]
[ 485@0,  "command",	  "batcalc",	  "-",				  "(cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:flt] address CMDcstSUBbat_flt_flt_flt;"				  ]
[ 486@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:flt] address CMDbatSUBcst_flt_flt_flt;"				  ]
[ 487@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:flt],b:bat[:any_1,:flt],cst:flt):void address CMDbataccumSUBcst_flt_flt_flt;"			  ]
[ 488@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:flt],cst:flt,b:bat[:any_1,:flt]):void address CMDbataccumSUBcst2_flt_flt_flt;"		  ]
[ 489@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:flt],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):void address CMDbataccumSUB_flt_flt_flt;"		  ]
[ 490@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:lng] address CMDbatSUB_lng_lng_lng;"			  ]
[ 491@0,  "command",	  "batcalc",	  "-",				  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:lng] address CMDcstSUBbat_lng_lng_lng;"				  ]
[ 492@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:lng] address CMDbatSUBcst_lng_lng_lng;"				  ]
[ 493@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:lng):void address CMDbataccumSUBcst_lng_lng_lng;"			  ]
[ 494@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:lng]):void address CMDbataccumSUBcst2_lng_lng_lng;"		  ]
[ 495@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void address CMDbataccumSUB_lng_lng_lng;"		  ]
[ 496@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:int] address CMDbatSUB_int_int_int;"			  ]
[ 497@0,  "command",	  "batcalc",	  "-",				  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:int] address CMDcstSUBbat_int_int_int;"				  ]
[ 498@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:int] address CMDbatSUBcst_int_int_int;"				  ]
[ 499@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:int):void address CMDbataccumSUBcst_int_int_int;"			  ]
[ 500@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:int]):void address CMDbataccumSUBcst2_int_int_int;"		  ]
[ 501@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],c:bat[:any_1,:int]):void address CMDbataccumSUB_int_int_int;"		  ]
[ 502@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:sht] address CMDbatSUB_sht_sht_sht;"			  ]
[ 503@0,  "command",	  "batcalc",	  "-",				  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:sht] address CMDcstSUBbat_sht_sht_sht;"				  ]
[ 504@0,  "command",	  "batcalc",	  "-",				  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:sht] address CMDbatSUBcst_sht_sht_sht;"				  ]
[ 505@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void address CMDbataccumSUBcst_sht_sht_sht;"			  ]
[ 506@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void address CMDbataccumSUBcst2_sht_sht_sht;"		  ]
[ 507@0,  "command",	  "batcalc",	  "-",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void address CMDbataccumSUB_sht_sht_sht;"		  ]
[ 508@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:dbl] address CMDbatDIV_dbl_dbl_dbl;"			  ]
[ 509@0,  "command",	  "batcalc",	  "/",				  "(cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:dbl] address CMDcstDIVbat_dbl_dbl_dbl;"				  ]
[ 510@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:dbl] address CMDbatDIVcst_dbl_dbl_dbl;"				  ]
[ 511@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:dbl],b:bat[:any_1,:dbl],cst:dbl):void address CMDbataccumDIVcst_dbl_dbl_dbl;"			  ]
[ 512@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:dbl],cst:dbl,b:bat[:any_1,:dbl]):void address CMDbataccumDIVcst2_dbl_dbl_dbl;"		  ]
[ 513@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:dbl],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):void address CMDbataccumDIV_dbl_dbl_dbl;"		  ]
[ 514@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:flt] address CMDbatDIV_flt_flt_flt;"			  ]
[ 515@0,  "command",	  "batcalc",	  "/",				  "(cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:flt] address CMDcstDIVbat_flt_flt_flt;"				  ]
[ 516@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:flt] address CMDbatDIVcst_flt_flt_flt;"				  ]
[ 517@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:flt],b:bat[:any_1,:flt],cst:flt):void address CMDbataccumDIVcst_flt_flt_flt;"			  ]
[ 518@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:flt],cst:flt,b:bat[:any_1,:flt]):void address CMDbataccumDIVcst2_flt_flt_flt;"		  ]
[ 519@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:flt],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):void address CMDbataccumDIV_flt_flt_flt;"		  ]
[ 520@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:lng] address CMDbatDIV_lng_lng_lng;"			  ]
[ 521@0,  "command",	  "batcalc",	  "/",				  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:lng] address CMDcstDIVbat_lng_lng_lng;"				  ]
[ 522@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:lng] address CMDbatDIVcst_lng_lng_lng;"				  ]
[ 523@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:lng):void address CMDbataccumDIVcst_lng_lng_lng;"			  ]
[ 524@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:lng]):void address CMDbataccumDIVcst2_lng_lng_lng;"		  ]
[ 525@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void address CMDbataccumDIV_lng_lng_lng;"		  ]
[ 526@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:int] address CMDbatDIV_int_int_int;"			  ]
[ 527@0,  "command",	  "batcalc",	  "/",				  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:int] address CMDcstDIVbat_int_int_int;"				  ]
[ 528@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:int] address CMDbatDIVcst_int_int_int;"				  ]
[ 529@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:int):void address CMDbataccumDIVcst_int_int_int;"			  ]
[ 530@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:int]):void address CMDbataccumDIVcst2_int_int_int;"		  ]
[ 531@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:int],b:bat[:any_1,:int],c:bat[:any_1,:int]):void address CMDbataccumDIV_int_int_int;"		  ]
[ 532@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:sht] address CMDbatDIV_sht_sht_sht;"			  ]
[ 533@0,  "command",	  "batcalc",	  "/",				  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:sht] address CMDcstDIVbat_sht_sht_sht;"				  ]
[ 534@0,  "command",	  "batcalc",	  "/",				  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:sht] address CMDbatDIVcst_sht_sht_sht;"				  ]
[ 535@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void address CMDbataccumDIVcst_sht_sht_sht;"			  ]
[ 536@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void address CMDbataccumDIVcst2_sht_sht_sht;"		  ]
[ 537@0,  "command",	  "batcalc",	  "/",				  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void address CMDbataccumDIV_sht_sht_sht;"		  ]
[ 538@0,  "command",	  "batcalc",	  "<=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] address CMDcmpaccumLEcst;"			  ]
[ 539@0,  "command",	  "batcalc",	  "<=",				  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] address CMDcmpLEcst;"						  ]
[ 540@0,  "command",	  "batcalc",	  "<=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] address CMDcmpaccumLE;"		  ]
[ 541@0,  "command",	  "batcalc",	  "<=",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] address CMDcmpLE;"					  ]
[ 542@0,  "command",	  "batcalc",	  "<",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] address CMDcmpaccumLTcst;"			  ]
[ 543@0,  "command",	  "batcalc",	  "<",				  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] address CMDcmpLTcst;"						  ]
[ 544@0,  "command",	  "batcalc",	  "<",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] address CMDcmpaccumLT;"		  ]
[ 545@0,  "command",	  "batcalc",	  "<",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] address CMDcmpLT;"					  ]
[ 546@0,  "command",	  "batcalc",	  "<=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] address CMDcmpaccumLEcst;"			  ]
[ 547@0,  "command",	  "batcalc",	  "<=",				  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] address CMDcmpLEcst;"						  ]
[ 548@0,  "command",	  "batcalc",	  "<=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] address CMDcmpaccumLE;"		  ]
[ 549@0,  "command",	  "batcalc",	  "<=",				  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] address CMDcmpLE;"					  ]
[ 550@0,  "command",	  "batcalc",	  "<",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] address CMDcmpaccumLTcst;"			  ]
[ 551@0,  "command",	  "batcalc",	  "<",				  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] address CMDcmpLTcst;"						  ]
[ 552@0,  "command",	  "batcalc",	  "<",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] address CMDcmpaccumLT;"		  ]
[ 553@0,  "command",	  "batcalc",	  "<",				  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] address CMDcmpLT;"					  ]
[ 554@0,  "command",	  "batcalc",	  "<=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] address CMDcmpaccumLEcst;"			  ]
[ 555@0,  "command",	  "batcalc",	  "<=",				  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] address CMDcmpLEcst;"						  ]
[ 556@0,  "command",	  "batcalc",	  "<=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] address CMDcmpaccumLE;"		  ]
[ 557@0,  "command",	  "batcalc",	  "<=",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] address CMDcmpLE;"					  ]
[ 558@0,  "command",	  "batcalc",	  "<",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] address CMDcmpaccumLTcst;"			  ]
[ 559@0,  "command",	  "batcalc",	  "<",				  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] address CMDcmpLTcst;"						  ]
[ 560@0,  "command",	  "batcalc",	  "<",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] address CMDcmpaccumLT;"		  ]
[ 561@0,  "command",	  "batcalc",	  "<",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] address CMDcmpLT;"					  ]
[ 562@0,  "command",	  "batcalc",	  "<=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] address CMDcmpaccumLEcst;"			  ]
[ 563@0,  "command",	  "batcalc",	  "<=",				  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] address CMDcmpLEcst;"						  ]
[ 564@0,  "command",	  "batcalc",	  "<=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] address CMDcmpaccumLE;"		  ]
[ 565@0,  "command",	  "batcalc",	  "<=",				  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] address CMDcmpLE;"					  ]
[ 566@0,  "command",	  "batcalc",	  "<",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] address CMDcmpaccumLTcst;"			  ]
[ 567@0,  "command",	  "batcalc",	  "<",				  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] address CMDcmpLTcst;"						  ]
[ 568@0,  "command",	  "batcalc",	  "<",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] address CMDcmpaccumLT;"		  ]
[ 569@0,  "command",	  "batcalc",	  "<",				  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] address CMDcmpLT;"					  ]
[ 570@0,  "command",	  "batcalc",	  "<=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] address CMDcmpaccumLEcst;"			  ]
[ 571@0,  "command",	  "batcalc",	  "<=",				  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] address CMDcmpLEcst;"						  ]
[ 572@0,  "command",	  "batcalc",	  "<=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] address CMDcmpaccumLE;"		  ]
[ 573@0,  "command",	  "batcalc",	  "<=",				  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] address CMDcmpLE;"					  ]
[ 574@0,  "command",	  "batcalc",	  "<",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] address CMDcmpaccumLTcst;"			  ]
[ 575@0,  "command",	  "batcalc",	  "<",				  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] address CMDcmpLTcst;"						  ]
[ 576@0,  "command",	  "batcalc",	  "<",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] address CMDcmpaccumLT;"		  ]
[ 577@0,  "command",	  "batcalc",	  "<",				  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] address CMDcmpLT;"					  ]
[ 578@0,  "command",	  "batcalc",	  "<=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] address CMDcmpaccumLEcst;"			  ]
[ 579@0,  "command",	  "batcalc",	  "<=",				  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] address CMDcmpLEcst;"						  ]
[ 580@0,  "command",	  "batcalc",	  "<=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] address CMDcmpaccumLE;"		  ]
[ 581@0,  "command",	  "batcalc",	  "<=",				  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] address CMDcmpLE;"					  ]
[ 582@0,  "command",	  "batcalc",	  "<",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] address CMDcmpaccumLTcst;"			  ]
[ 583@0,  "command",	  "batcalc",	  "<",				  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] address CMDcmpLTcst;"						  ]
[ 584@0,  "command",	  "batcalc",	  "<",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] address CMDcmpaccumLT;"		  ]
[ 585@0,  "command",	  "batcalc",	  "<",				  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] address CMDcmpLT;"					  ]
[ 586@0,  "command",	  "batcalc",	  "<=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] address CMDcmpaccumLEcst;"			  ]
[ 587@0,  "command",	  "batcalc",	  "<=",				  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] address CMDcmpLEcst;"						  ]
[ 588@0,  "command",	  "batcalc",	  "<=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] address CMDcmpaccumLE;"		  ]
[ 589@0,  "command",	  "batcalc",	  "<=",				  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] address CMDcmpLE;"					  ]
[ 590@0,  "command",	  "batcalc",	  "<",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] address CMDcmpaccumLTcst;"			  ]
[ 591@0,  "command",	  "batcalc",	  "<",				  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] address CMDcmpLTcst;"						  ]
[ 592@0,  "command",	  "batcalc",	  "<",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] address CMDcmpaccumLT;"		  ]
[ 593@0,  "command",	  "batcalc",	  "<",				  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] address CMDcmpLT;"					  ]
[ 594@0,  "command",	  "batcalc",	  "==",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] address CMDcmpaccumEQcst;"			  ]
[ 595@0,  "command",	  "batcalc",	  "==",				  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] address CMDcmpEQcst;"						  ]
[ 596@0,  "command",	  "batcalc",	  "==",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] address CMDcmpaccumEQ;"		  ]
[ 597@0,  "command",	  "batcalc",	  "==",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] address CMDcmpEQ;"					  ]
[ 598@0,  "command",	  "batcalc",	  "==",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] address CMDcmpaccumEQcst;"			  ]
[ 599@0,  "command",	  "batcalc",	  "==",				  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] address CMDcmpEQcst;"						  ]
[ 600@0,  "command",	  "batcalc",	  "==",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] address CMDcmpaccumEQ;"		  ]
[ 601@0,  "command",	  "batcalc",	  "==",				  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] address CMDcmpEQ;"					  ]
[ 602@0,  "command",	  "batcalc",	  "==",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] address CMDcmpaccumEQcst;"			  ]
[ 603@0,  "command",	  "batcalc",	  "==",				  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] address CMDcmpEQcst;"						  ]
[ 604@0,  "command",	  "batcalc",	  "==",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] address CMDcmpaccumEQ;"		  ]
[ 605@0,  "command",	  "batcalc",	  "==",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] address CMDcmpEQ;"					  ]
[ 606@0,  "command",	  "batcalc",	  "==",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] address CMDcmpaccumEQcst;"			  ]
[ 607@0,  "command",	  "batcalc",	  "==",				  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] address CMDcmpEQcst;"						  ]
[ 608@0,  "command",	  "batcalc",	  "==",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] address CMDcmpaccumEQ;"		  ]
[ 609@0,  "command",	  "batcalc",	  "==",				  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] address CMDcmpEQ;"					  ]
[ 610@0,  "command",	  "batcalc",	  "==",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] address CMDcmpaccumEQcst;"			  ]
[ 611@0,  "command",	  "batcalc",	  "==",				  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] address CMDcmpEQcst;"						  ]
[ 612@0,  "command",	  "batcalc",	  "==",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] address CMDcmpaccumEQ;"		  ]
[ 613@0,  "command",	  "batcalc",	  "==",				  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] address CMDcmpEQ;"					  ]
[ 614@0,  "command",	  "batcalc",	  "==",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] address CMDcmpaccumEQcst;"			  ]
[ 615@0,  "command",	  "batcalc",	  "==",				  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] address CMDcmpEQcst;"						  ]
[ 616@0,  "command",	  "batcalc",	  "==",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] address CMDcmpaccumEQ;"		  ]
[ 617@0,  "command",	  "batcalc",	  "==",				  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] address CMDcmpEQ;"					  ]
[ 618@0,  "command",	  "batcalc",	  "==",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] address CMDcmpaccumEQcst;"			  ]
[ 619@0,  "command",	  "batcalc",	  "==",				  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] address CMDcmpEQcst;"						  ]
[ 620@0,  "command",	  "batcalc",	  "==",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] address CMDcmpaccumEQ;"		  ]
[ 621@0,  "command",	  "batcalc",	  "==",				  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] address CMDcmpEQ;"					  ]
[ 622@0,  "command",	  "batcalc",	  ">=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] address CMDcmpaccumGEcst;"			  ]
[ 623@0,  "command",	  "batcalc",	  ">=",				  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] address CMDcmpGEcst;"						  ]
[ 624@0,  "command",	  "batcalc",	  ">=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] address CMDcmpaccumGE;"		  ]
[ 625@0,  "command",	  "batcalc",	  ">=",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] address CMDcmpGE;"					  ]
[ 626@0,  "command",	  "batcalc",	  ">",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] address CMDcmpaccumGTcst;"			  ]
[ 627@0,  "command",	  "batcalc",	  ">",				  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] address CMDcmpGTcst;"						  ]
[ 628@0,  "command",	  "batcalc",	  ">",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] address CMDcmpaccumGT;"		  ]
[ 629@0,  "command",	  "batcalc",	  ">",				  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] address CMDcmpGT;"					  ]
[ 630@0,  "command",	  "batcalc",	  ">=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] address CMDcmpaccumGEcst;"			  ]
[ 631@0,  "command",	  "batcalc",	  ">=",				  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] address CMDcmpGEcst;"						  ]
[ 632@0,  "command",	  "batcalc",	  ">=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] address CMDcmpaccumGE;"		  ]
[ 633@0,  "command",	  "batcalc",	  ">=",				  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] address CMDcmpGE;"					  ]
[ 634@0,  "command",	  "batcalc",	  ">",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] address CMDcmpaccumGTcst;"			  ]
[ 635@0,  "command",	  "batcalc",	  ">",				  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] address CMDcmpGTcst;"						  ]
[ 636@0,  "command",	  "batcalc",	  ">",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] address CMDcmpaccumGT;"		  ]
[ 637@0,  "command",	  "batcalc",	  ">",				  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] address CMDcmpGT;"					  ]
[ 638@0,  "command",	  "batcalc",	  ">=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] address CMDcmpaccumGEcst;"			  ]
[ 639@0,  "command",	  "batcalc",	  ">=",				  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] address CMDcmpGEcst;"						  ]
[ 640@0,  "command",	  "batcalc",	  ">=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] address CMDcmpaccumGE;"		  ]
[ 641@0,  "command",	  "batcalc",	  ">=",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] address CMDcmpGE;"					  ]
[ 642@0,  "command",	  "batcalc",	  ">",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] address CMDcmpaccumGTcst;"			  ]
[ 643@0,  "command",	  "batcalc",	  ">",				  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] address CMDcmpGTcst;"						  ]
[ 644@0,  "command",	  "batcalc",	  ">",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] address CMDcmpaccumGT;"		  ]
[ 645@0,  "command",	  "batcalc",	  ">",				  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] address CMDcmpGT;"					  ]
[ 646@0,  "command",	  "batcalc",	  ">=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] address CMDcmpaccumGEcst;"			  ]
[ 647@0,  "command",	  "batcalc",	  ">=",				  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] address CMDcmpGEcst;"						  ]
[ 648@0,  "command",	  "batcalc",	  ">=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] address CMDcmpaccumGE;"		  ]
[ 649@0,  "command",	  "batcalc",	  ">=",				  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] address CMDcmpGE;"					  ]
[ 650@0,  "command",	  "batcalc",	  ">",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] address CMDcmpaccumGTcst;"			  ]
[ 651@0,  "command",	  "batcalc",	  ">",				  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] address CMDcmpGTcst;"						  ]
[ 652@0,  "command",	  "batcalc",	  ">",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] address CMDcmpaccumGT;"		  ]
[ 653@0,  "command",	  "batcalc",	  ">",				  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] address CMDcmpGT;"					  ]
[ 654@0,  "command",	  "batcalc",	  ">=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] address CMDcmpaccumGEcst;"			  ]
[ 655@0,  "command",	  "batcalc",	  ">=",				  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] address CMDcmpGEcst;"						  ]
[ 656@0,  "command",	  "batcalc",	  ">=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] address CMDcmpaccumGE;"		  ]
[ 657@0,  "command",	  "batcalc",	  ">=",				  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] address CMDcmpGE;"					  ]
[ 658@0,  "command",	  "batcalc",	  ">",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] address CMDcmpaccumGTcst;"			  ]
[ 659@0,  "command",	  "batcalc",	  ">",				  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] address CMDcmpGTcst;"						  ]
[ 660@0,  "command",	  "batcalc",	  ">",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] address CMDcmpaccumGT;"		  ]
[ 661@0,  "command",	  "batcalc",	  ">",				  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] address CMDcmpGT;"					  ]
[ 662@0,  "command",	  "batcalc",	  ">=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] address CMDcmpaccumGEcst;"			  ]
[ 663@0,  "command",	  "batcalc",	  ">=",				  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] address CMDcmpGEcst;"						  ]
[ 664@0,  "command",	  "batcalc",	  ">=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] address CMDcmpaccumGE;"		  ]
[ 665@0,  "command",	  "batcalc",	  ">=",				  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] address CMDcmpGE;"					  ]
[ 666@0,  "command",	  "batcalc",	  ">",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] address CMDcmpaccumGTcst;"			  ]
[ 667@0,  "command",	  "batcalc",	  ">",				  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] address CMDcmpGTcst;"						  ]
[ 668@0,  "command",	  "batcalc",	  ">",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] address CMDcmpaccumGT;"		  ]
[ 669@0,  "command",	  "batcalc",	  ">",				  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] address CMDcmpGT;"					  ]
[ 670@0,  "command",	  "batcalc",	  ">=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] address CMDcmpaccumGEcst;"			  ]
[ 671@0,  "command",	  "batcalc",	  ">=",				  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] address CMDcmpGEcst;"						  ]
[ 672@0,  "command",	  "batcalc",	  ">=",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] address CMDcmpaccumGE;"		  ]
[ 673@0,  "command",	  "batcalc",	  ">=",				  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] address CMDcmpGE;"					  ]
[ 674@0,  "command",	  "batcalc",	  ">",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] address CMDcmpaccumGTcst;"			  ]
[ 675@0,  "command",	  "batcalc",	  ">",				  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] address CMDcmpGTcst;"						  ]
[ 676@0,  "command",	  "batcalc",	  ">",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] address CMDcmpaccumGT;"		  ]
[ 677@0,  "command",	  "batcalc",	  ">",				  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] address CMDcmpGT;"					  ]
[ 678@0,  "command",	  "batcalc",	  "and",			  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] address CMDcmpaccumANDcst;"			  ]
[ 679@0,  "command",	  "batcalc",	  "and",			  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] address CMDcmpANDcst;"						  ]
[ 680@0,  "command",	  "batcalc",	  "and",			  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] address CMDcmpaccumAND;"		  ]
[ 681@0,  "command",	  "batcalc",	  "and",			  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] address CMDcmpAND;"					  ]
[ 682@0,  "command",	  "batcalc",	  "dbl",			  "(b:bat[:any_1,:dbl]):bat[:any_1,:dbl] address CMDconvertdbl_dbl;"						  ]
[ 683@0,  "command",	  "batcalc",	  "dbl",			  "(b:bat[:any_1,:flt]):bat[:any_1,:dbl] address CMDconvertflt_dbl;"						  ]
[ 684@0,  "command",	  "batcalc",	  "dbl",			  "(b:bat[:any_1,:lng]):bat[:any_1,:dbl] address CMDconvertlng_dbl;"						  ]
[ 685@0,  "command",	  "batcalc",	  "dbl",			  "(b:bat[:any_1,:int]):bat[:any_1,:dbl] address CMDconvertint_dbl;"						  ]
[ 686@0,  "command",	  "batcalc",	  "dbl",			  "(b:bat[:any_1,:sht]):bat[:any_1,:dbl] address CMDconvertsht_dbl;"						  ]
[ 687@0,  "command",	  "batcalc",	  "flt",			  "(b:bat[:any_1,:dbl]):bat[:any_1,:flt] address CMDconvertdbl_flt;"						  ]
[ 688@0,  "command",	  "batcalc",	  "flt",			  "(b:bat[:any_1,:flt]):bat[:any_1,:flt] address CMDconvertflt_flt;"						  ]
[ 689@0,  "command",	  "batcalc",	  "flt",			  "(b:bat[:any_1,:lng]):bat[:any_1,:flt] address CMDconvertlng_flt;"						  ]
[ 690@0,  "command",	  "batcalc",	  "flt",			  "(b:bat[:any_1,:int]):bat[:any_1,:flt] address CMDconvertint_flt;"						  ]
[ 691@0,  "command",	  "batcalc",	  "flt",			  "(b:bat[:any_1,:sht]):bat[:any_1,:flt] address CMDconvertsht_flt;"						  ]
[ 692@0,  "command",	  "batcalc",	  "int",			  "(b:bat[:any_1,:oid]):bat[:any_1,:int] address CMDconvertoid_int;"						  ]
[ 693@0,  "command",	  "batcalc",	  "int",			  "(b:bat[:any_1,:str]):bat[:any_1,:int] address CMDconvertstr_int;"						  ]
[ 694@0,  "command",	  "batcalc",	  "int",			  "(b:bat[:any_1,:dbl]):bat[:any_1,:int] address CMDconvertdbl_int;"						  ]
[ 695@0,  "command",	  "batcalc",	  "int",			  "(b:bat[:any_1,:flt]):bat[:any_1,:int] address CMDconvertflt_int;"						  ]
[ 696@0,  "command",	  "batcalc",	  "int",			  "(b:bat[:any_1,:lng]):bat[:any_1,:int] address CMDconvertlng_int;"						  ]
[ 697@0,  "command",	  "batcalc",	  "int",			  "(b:bat[:any_1,:int]):bat[:any_1,:int] address CMDconvertint_int;"						  ]
[ 698@0,  "command",	  "batcalc",	  "int",			  "(b:bat[:any_1,:sht]):bat[:any_1,:int] address CMDconvertsht_int;"						  ]
[ 699@0,  "command",	  "batcalc",	  "ifthenelse",			  "(b:bat[:any_1,:bit],v:dbl,w:dbl):bat[:any_1,:dbl] address CMDifThenElseCst_dbl;"				  ]
[ 700@0,  "command",	  "batcalc",	  "ifthen",			  "(b:bat[:any_1,:bit],v:dbl):bat[:any_1,:dbl] address CMDifThenCst_dbl;"					  ]
[ 701@0,  "command",	  "batcalc",	  "ifthenelse",			  "(b:bat[:any_1,:bit],v:flt,w:flt):bat[:any_1,:flt] address CMDifThenElseCst_flt;"				  ]
[ 702@0,  "command",	  "batcalc",	  "ifthen",			  "(b:bat[:any_1,:bit],v:flt):bat[:any_1,:flt] address CMDifThenCst_flt;"					  ]
[ 703@0,  "command",	  "batcalc",	  "ifthenelse",			  "(b:bat[:any_1,:bit],v:lng,w:lng):bat[:any_1,:lng] address CMDifThenElseCst_lng;"				  ]
[ 704@0,  "command",	  "batcalc",	  "ifthen",			  "(b:bat[:any_1,:bit],v:lng):bat[:any_1,:lng] address CMDifThenCst_lng;"					  ]
[ 705@0,  "command",	  "batcalc",	  "ifthenelse",			  "(b:bat[:any_1,:bit],v:sht,w:sht):bat[:any_1,:sht] address CMDifThenElseCst_sht;"				  ]
[ 706@0,  "command",	  "batcalc",	  "ifthen",			  "(b:bat[:any_1,:bit],v:sht):bat[:any_1,:sht] address CMDifThenCst_sht;"					  ]
[ 707@0,  "command",	  "batcalc",	  "ifthenelse",			  "(b:bat[:any_1,:bit],v:int,w:int):bat[:any_1,:int] address CMDifThenElseCst_int;"				  ]
[ 708@0,  "command",	  "batcalc",	  "ifthen",			  "(b:bat[:any_1,:bit],v:int):bat[:any_1,:int] address CMDifThenCst_int;"					  ]
[ 709@0,  "command",	  "batcalc",	  "ifthenelse",			  "(b:bat[:any_1,:bit],v:oid,w:oid):bat[:any_1,:oid] address CMDifThenElseCst_oid;"				  ]
[ 710@0,  "command",	  "batcalc",	  "ifthen",			  "(b:bat[:any_1,:bit],v:oid):bat[:any_1,:oid] address CMDifThenCst_oid;"					  ]
[ 711@0,  "command",	  "batcalc",	  "ifthenelse",			  "(b:bat[:any_1,:bit],v:str,w:str):bat[:any_1,:str] address CMDifThenElseCst_str;"				  ]
[ 712@0,  "command",	  "batcalc",	  "ifthen",			  "(b:bat[:any_1,:bit],v:str):bat[:any_1,:str] address CMDifThenCst_str;"					  ]
[ 713@0,  "command",	  "batcalc",	  "ifthenelse",			  "(b:bat[:any_1,:bit],v:chr,w:chr):bat[:any_1,:chr] address CMDifThenElseCst_chr;"				  ]
[ 714@0,  "command",	  "batcalc",	  "ifthen",			  "(b:bat[:any_1,:bit],v:chr):bat[:any_1,:chr] address CMDifThenCst_chr;"					  ]
[ 715@0,  "command",	  "batcalc",	  "ifthenelse",			  "(b:bat[:any_1,:bit],v:bit,w:bit):bat[:any_1,:bit] address CMDifThenElseCst_bit;"				  ]
[ 716@0,  "command",	  "batcalc",	  "ifthen",			  "(b:bat[:any_1,:bit],v:bit):bat[:any_1,:bit] address CMDifThenCst_bit;"					  ]
[ 717@0,  "command",	  "batcalc",	  "ifthenelse",			  "(b:bat[:any_3,:bit],t:bat[:any_1,:any_2],e:bat[:any_1,:any_2]):bat[:any_1,:any_2] address CMDifThenElse;"	  ]
[ 718@0,  "command",	  "batcalc",	  "ifthen",			  "(b:bat[:any_1,:bit],t:bat[:any_1,:any_2]):bat[:any_1,:any_2] address CMDifThen;"				  ]
[ 719@0,  "command",	  "batcalc",	  "ifthenelse",			  "(b:bat[:any_1,:bit],t:bat[:any_1,:any_2],e:any_2):bat[:any_1,:any_2] address CMDifThenElseCst2;"		  ]
[ 720@0,  "command",	  "batcalc",	  "ifthenelse",			  "(b:bat[:any_1,:bit],e:any_2,t:bat[:any_1,:any_2]):bat[:any_1,:any_2] address CMDifThenElseCst1;"		  ]
[ 721@0,  "command",	  "batcalc",	  "init",			  "(b:bat[:any_1,:any],v:bit):bat[:any_1,:bit] address CMDbatbitinit;"						  ]
[ 722@0,  "command",	  "batcalc",	  "init",			  "(bsize:lng,v:bit):bat[:void,:bit] address CMDbitinit_lng;"							  ]
[ 723@0,  "command",	  "batcalc",	  "init",			  "(bsize:int,v:bit):bat[:void,:bit] address CMDbitinit_int;"							  ]
[ 724@0,  "command",	  "batcalc",	  "init",			  "(bsize:sht,v:bit):bat[:void,:bit] address CMDbitinit_sht;"							  ]
[ 725@0,  "command",	  "batcalc",	  "init",			  "(b:bat[:any_1,:any],v:flt):bat[:any_1,:flt] address CMDbatfltinit;"						  ]
[ 726@0,  "command",	  "batcalc",	  "init",			  "(bsize:lng,v:flt):bat[:void,:flt] address CMDfltinit_lng;"							  ]
[ 727@0,  "command",	  "batcalc",	  "init",			  "(bsize:int,v:flt):bat[:void,:flt] address CMDfltinit_int;"							  ]
[ 728@0,  "command",	  "batcalc",	  "init",			  "(bsize:sht,v:flt):bat[:void,:flt] address CMDfltinit_sht;"							  ]
[ 729@0,  "command",	  "batcalc",	  "init",			  "(b:bat[:any_1,:any],v:dbl):bat[:any_1,:dbl] address CMDbatdblinit;"						  ]
[ 730@0,  "command",	  "batcalc",	  "init",			  "(bsize:lng,v:dbl):bat[:void,:dbl] address CMDdblinit_lng;"							  ]
[ 731@0,  "command",	  "batcalc",	  "init",			  "(bsize:int,v:dbl):bat[:void,:dbl] address CMDdblinit_int;"							  ]
[ 732@0,  "command",	  "batcalc",	  "init",			  "(bsize:sht,v:dbl):bat[:void,:dbl] address CMDdblinit_sht;"							  ]
[ 733@0,  "command",	  "batcalc",	  "init",			  "(b:bat[:any_1,:any],v:lng):bat[:any_1,:lng] address CMDbatlnginit;"						  ]
[ 734@0,  "command",	  "batcalc",	  "init",			  "(bsize:lng,v:lng):bat[:void,:lng] address CMDlnginit_lng;"							  ]
[ 735@0,  "command",	  "batcalc",	  "init",			  "(bsize:int,v:lng):bat[:void,:lng] address CMDlnginit_int;"							  ]
[ 736@0,  "command",	  "batcalc",	  "init",			  "(bsize:sht,v:lng):bat[:void,:lng] address CMDlnginit_sht;"							  ]
[ 737@0,  "command",	  "batcalc",	  "init",			  "(b:bat[:any_1,:any],v:sht):bat[:any_1,:sht] address CMDbatshtinit;"						  ]
[ 738@0,  "command",	  "batcalc",	  "init",			  "(bsize:lng,v:sht):bat[:void,:sht] address CMDshtinit_lng;"							  ]
[ 739@0,  "command",	  "batcalc",	  "init",			  "(bsize:int,v:sht):bat[:void,:sht] address CMDshtinit_int;"							  ]
[ 740@0,  "command",	  "batcalc",	  "init",			  "(bsize:sht,v:sht):bat[:void,:sht] address CMDshtinit_sht;"							  ]
[ 741@0,  "command",	  "batcalc",	  "init",			  "(b:bat[:any_1,:any],v:int):bat[:any_1,:int] address CMDbatintinit;"						  ]
[ 742@0,  "command",	  "batcalc",	  "init",			  "(bsize:lng,v:int):bat[:void,:int] address CMDintinit_lng;"							  ]
[ 743@0,  "command",	  "batcalc",	  "init",			  "(bsize:int,v:int):bat[:void,:int] address CMDintinit_int;"							  ]
[ 744@0,  "command",	  "batcalc",	  "init",			  "(bsize:sht,v:int):bat[:void,:int] address CMDintinit_sht;"							  ]
[ 745@0,  "command",	  "batcalc",	  "init",			  "(b:bat[:any_1,:any],v:oid):bat[:any_1,:oid] address CMDbatoidinit;"						  ]
[ 746@0,  "command",	  "batcalc",	  "init",			  "(bsize:lng,v:oid):bat[:void,:oid] address CMDoidinit_lng;"							  ]
[ 747@0,  "command",	  "batcalc",	  "init",			  "(bsize:int,v:oid):bat[:void,:oid] address CMDoidinit_int;"							  ]
[ 748@0,  "command",	  "batcalc",	  "init",			  "(bsize:sht,v:oid):bat[:void,:oid] address CMDoidinit_sht;"							  ]
[ 749@0,  "command",	  "batcalc",	  "lng",			  "(b:bat[:any_1,:oid]):bat[:any_1,:lng] address CMDconvertlng_int;"						  ]
[ 750@0,  "command",	  "batcalc",	  "lng",			  "(b:bat[:any_1,:dbl]):bat[:any_1,:lng] address CMDconvertdbl_lng;"						  ]
[ 751@0,  "command",	  "batcalc",	  "lng",			  "(b:bat[:any_1,:flt]):bat[:any_1,:lng] address CMDconvertflt_lng;"						  ]
[ 752@0,  "command",	  "batcalc",	  "lng",			  "(b:bat[:any_1,:lng]):bat[:any_1,:lng] address CMDconvertlng_lng;"						  ]
[ 753@0,  "command",	  "batcalc",	  "lng",			  "(b:bat[:any_1,:int]):bat[:any_1,:lng] address CMDconvertint_lng;"						  ]
[ 754@0,  "command",	  "batcalc",	  "lng",			  "(b:bat[:any_1,:sht]):bat[:any_1,:lng] address CMDconvertsht_lng;"						  ]
[ 755@0,  "command",	  "batcalc",	  "not",			  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit]):bat[:any_1,:bit] address CMDbitbataccumNOT;"				  ]
[ 756@0,  "command",	  "batcalc",	  "not",			  "(b:bat[:any_1,:bit]):bat[:any_1,:bit] address CMDbitbatNOT;"							  ]
[ 757@0,  "command",	  "batcalc",	  "oid",			  "(b:bat[:void,:oid]):bat[:void,:oid] address CMDconvertvoid_oid_oid;"						  ]
[ 758@0,  "command",	  "batcalc",	  "oid",			  "(b:bat[:void,:int]):bat[:void,:oid] address CMDconvertvoid_int_oid;"						  ]
[ 759@0,  "command",	  "batcalc",	  "oid",			  "(b:bat[:any_1,:int]):bat[:any_1,:oid] address CMDconvertint_oid;"						  ]
[ 760@0,  "command",	  "batcalc",	  "oid",			  "(b:bat[:oid,:oid]):bat[:oid,:oid] address CMDconvertOIDclass;"						  ]
[ 761@0,  "command",	  "batcalc",	  "oid",			  "(b:bat[:any_1,:dbl]):bat[:any_1,:oid] address CMDconvertdbl_oid;"						  ]
[ 762@0,  "command",	  "batcalc",	  "oid",			  "(b:bat[:any_1,:flt]):bat[:any_1,:oid] address CMDconvertflt_oid;"						  ]
[ 763@0,  "command",	  "batcalc",	  "oid",			  "(b:bat[:any_1,:lng]):bat[:any_1,:oid] address CMDconvertlng_oid;"						  ]
[ 764@0,  "command",	  "batcalc",	  "oid",			  "(b:bat[:any_1,:int]):bat[:any_1,:oid] address CMDconvertint_oid;"						  ]
[ 765@0,  "command",	  "batcalc",	  "oid",			  "(b:bat[:any_1,:sht]):bat[:any_1,:oid] address CMDconvertsht_oid;"						  ]
[ 766@0,  "command",	  "batcalc",	  "or",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] address CMDcmpaccumORcst;"			  ]
[ 767@0,  "command",	  "batcalc",	  "or",				  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] address CMDcmpORcst;"						  ]
[ 768@0,  "command",	  "batcalc",	  "or",				  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] address CMDcmpaccumOR;"		  ]
[ 769@0,  "command",	  "batcalc",	  "or",				  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] address CMDcmpOR;"					  ]
[ 770@0,  "command",	  "batcalc",	  "project",			  "(b:bat[:any_2,:any_1],v:dbl):bat[:any_2,:dbl] address CMDprojecttail_dbl;"					  ]
[ 771@0,  "command",	  "batcalc",	  "project",			  "(v:dbl,b:bat[:any_2,:any_1]):bat[:dbl,:any_1] address CMDprojecthead_dbl;"					  ]
[ 772@0,  "command",	  "batcalc",	  "project",			  "(b:bat[:any_2,:any_1],v:flt):bat[:any_2,:flt] address CMDprojecttail_flt;"					  ]
[ 773@0,  "command",	  "batcalc",	  "project",			  "(v:flt,b:bat[:any_2,:any_1]):bat[:flt,:any_1] address CMDprojecthead_flt;"					  ]
[ 774@0,  "command",	  "batcalc",	  "project",			  "(b:bat[:any_2,:any_1],v:lng):bat[:any_2,:lng] address CMDprojecttail_lng;"					  ]
[ 775@0,  "command",	  "batcalc",	  "project",			  "(v:lng,b:bat[:any_2,:any_1]):bat[:lng,:any_1] address CMDprojecthead_lng;"					  ]
[ 776@0,  "command",	  "batcalc",	  "project",			  "(b:bat[:any_2,:any_1],v:sht):bat[:any_2,:sht] address CMDprojecttail_sht;"					  ]
[ 777@0,  "command",	  "batcalc",	  "project",			  "(v:sht,b:bat[:any_2,:any_1]):bat[:sht,:any_1] address CMDprojecthead_sht;"					  ]
[ 778@0,  "command",	  "batcalc",	  "project",			  "(b:bat[:any_2,:any_1],v:int):bat[:any_2,:int] address CMDprojecttail_int;"					  ]
[ 779@0,  "command",	  "batcalc",	  "project",			  "(v:int,b:bat[:any_2,:any_1]):bat[:int,:any_1] address CMDprojecthead_int;"					  ]
[ 780@0,  "command",	  "batcalc",	  "project",			  "(b:bat[:any_2,:any_1],v:oid):bat[:any_2,:oid] address CMDprojecttail_oid;"					  ]
[ 781@0,  "command",	  "batcalc",	  "project",			  "(v:oid,b:bat[:any_2,:any_1]):bat[:oid,:any_1] address CMDprojecthead_oid;"					  ]
[ 782@0,  "command",	  "batcalc",	  "project",			  "(b:bat[:any_2,:any_1],v:str):bat[:any_2,:str] address CMDprojecttail_str;"					  ]
[ 783@0,  "command",	  "batcalc",	  "project",			  "(v:str,b:bat[:any_2,:any_1]):bat[:str,:any_1] address CMDprojecthead_str;"					  ]
[ 784@0,  "command",	  "batcalc",	  "project",			  "(b:bat[:any_2,:any_1],v:chr):bat[:any_2,:chr] address CMDprojecttail_chr;"					  ]
[ 785@0,  "command",	  "batcalc",	  "project",			  "(v:chr,b:bat[:any_2,:any_1]):bat[:chr,:any_1] address CMDprojecthead_chr;"					  ]
[ 786@0,  "command",	  "batcalc",	  "project",			  "(b:bat[:any_2,:any_1],v:bit):bat[:any_2,:bit] address CMDprojecttail_bit;"					  ]
[ 787@0,  "command",	  "batcalc",	  "project",			  "(v:bit,b:bat[:any_2,:any_1]):bat[:bit,:any_1] address CMDprojecthead_bit;"					  ]
[ 788@0,  "command",	  "batcalc",	  "str",			  "(b:bat[:any_1,:str]):bat[:any_1,:str] address CMDconvertstr_str;"						  ]
[ 789@0,  "command",	  "batcalc",	  "sht",			  "(b:bat[:any_1,:oid]):bat[:any_1,:sht] address CMDconvertsht_int;"						  ]
[ 790@0,  "command",	  "batcalc",	  "sht",			  "(b:bat[:any_1,:dbl]):bat[:any_1,:sht] address CMDconvertdbl_sht;"						  ]
[ 791@0,  "command",	  "batcalc",	  "sht",			  "(b:bat[:any_1,:flt]):bat[:any_1,:sht] address CMDconvertflt_sht;"						  ]
[ 792@0,  "command",	  "batcalc",	  "sht",			  "(b:bat[:any_1,:lng]):bat[:any_1,:sht] address CMDconvertlng_sht;"						  ]
[ 793@0,  "command",	  "batcalc",	  "sht",			  "(b:bat[:any_1,:int]):bat[:any_1,:sht] address CMDconvertint_sht;"						  ]
[ 794@0,  "command",	  "batcalc",	  "sht",			  "(b:bat[:any_1,:sht]):bat[:any_1,:sht] address CMDconvertsht_sht;"						  ]
[ 795@0,  "command",	  "batcalc",	  "xor",			  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:lng] address CMDbatXOR_lng_lng_lng;"			  ]
[ 796@0,  "command",	  "batcalc",	  "xor",			  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:lng] address CMDcstXORbat_lng_lng_lng;"				  ]
[ 797@0,  "command",	  "batcalc",	  "xor",			  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:lng] address CMDbatXORcst_lng_lng_lng;"				  ]
[ 798@0,  "command",	  "batcalc",	  "xor",			  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:lng):void address CMDbataccumXORcst_lng_lng_lng;"			  ]
[ 799@0,  "command",	  "batcalc",	  "xor",			  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:lng]):void address CMDbataccumXORcst2_lng_lng_lng;"		  ]
[ 800@0,  "command",	  "batcalc",	  "xor",			  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void address CMDbataccumXOR_lng_lng_lng;"		  ]
[ 801@0,  "command",	  "batcalc",	  "xor",			  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:int] address CMDbatXOR_int_int_int;"			  ]
[ 802@0,  "command",	  "batcalc",	  "xor",			  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:int] address CMDcstXORbat_int_int_int;"				  ]
[ 803@0,  "command",	  "batcalc",	  "xor",			  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:int] address CMDbatXORcst_int_int_int;"				  ]
[ 804@0,  "command",	  "batcalc",	  "xor",			  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:int):void address CMDbataccumXORcst_int_int_int;"			  ]
[ 805@0,  "command",	  "batcalc",	  "xor",			  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:int]):void address CMDbataccumXORcst2_int_int_int;"		  ]
[ 806@0,  "command",	  "batcalc",	  "xor",			  "(a:bat[:any_1,:int],b:bat[:any_1,:int],c:bat[:any_1,:int]):void address CMDbataccumXOR_int_int_int;"		  ]
[ 807@0,  "command",	  "batcalc",	  "xor",			  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:sht] address CMDbatXOR_sht_sht_sht;"			  ]
[ 808@0,  "command",	  "batcalc",	  "xor",			  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:sht] address CMDcstXORbat_sht_sht_sht;"				  ]
[ 809@0,  "command",	  "batcalc",	  "xor",			  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:sht] address CMDbatXORcst_sht_sht_sht;"				  ]
[ 810@0,  "command",	  "batcalc",	  "xor",			  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void address CMDbataccumXORcst_sht_sht_sht;"			  ]
[ 811@0,  "command",	  "batcalc",	  "xor",			  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void address CMDbataccumXORcst2_sht_sht_sht;"		  ]
[ 812@0,  "command",	  "batcalc",	  "xor",			  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void address CMDbataccumXOR_sht_sht_sht;"		  ]
[ 813@0,  "command",	  "batcalc",	  "xor",			  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:oid] address CMDbatXOR_oid_oid_oid;"			  ]
[ 814@0,  "command",	  "batcalc",	  "xor",			  "(cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:oid] address CMDcstXORbat_oid_oid_oid;"				  ]
[ 815@0,  "command",	  "batcalc",	  "xor",			  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:oid] address CMDbatXORcst_oid_oid_oid;"				  ]
[ 816@0,  "command",	  "batcalc",	  "xor",			  "(a:bat[:any_1,:oid],b:bat[:any_1,:oid],cst:oid):void address CMDbataccumXORcst_oid_oid_oid;"			  ]
[ 817@0,  "command",	  "batcalc",	  "xor",			  "(a:bat[:any_1,:oid],cst:oid,b:bat[:any_1,:oid]):void address CMDbataccumXORcst2_oid_oid_oid;"		  ]
[ 818@0,  "command",	  "batcalc",	  "xor",			  "(a:bat[:any_1,:oid],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):void address CMDbataccumXOR_oid_oid_oid;"		  ]
[ 819@0,  "command",	  "batmath",	  "atan2",			  "(x:bat[:any_1,:dbl],y:dbl):bat[:any_1,:dbl] address CMDscience_atan2;"					  ]
[ 820@0,  "command",	  "batmath",	  "atan",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] address CMDsciencevoid_atan;"						  ]
[ 821@0,  "command",	  "batmath",	  "atan",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] address CMDscience_atan;"						  ]
[ 822@0,  "command",	  "batmath",	  "acos",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] address CMDsciencevoid_acos;"						  ]
[ 823@0,  "command",	  "batmath",	  "acos",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] address CMDscience_acos;"						  ]
[ 824@0,  "command",	  "batmath",	  "asin",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] address CMDsciencevoid_asin;"						  ]
[ 825@0,  "command",	  "batmath",	  "asin",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] address CMDscience_asin;"						  ]
[ 826@0,  "command",	  "batmath",	  "ceil",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] address CMDsciencevoid_ceil;"						  ]
[ 827@0,  "command",	  "batmath",	  "ceil",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] address CMDscience_ceil;"						  ]
[ 828@0,  "command",	  "batmath",	  "cosh",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] address CMDsciencevoid_cosh;"						  ]
[ 829@0,  "command",	  "batmath",	  "cosh",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] address CMDscience_cosh;"						  ]
[ 830@0,  "command",	  "batmath",	  "cos",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] address CMDsciencevoid_cos;"						  ]
[ 831@0,  "command",	  "batmath",	  "cos",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] address CMDscience_cos;"						  ]
[ 832@0,  "command",	  "batmath",	  "exp",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] address CMDsciencevoid_exp;"						  ]
[ 833@0,  "command",	  "batmath",	  "exp",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] address CMDscience_exp;"						  ]
[ 834@0,  "command",	  "batmath",	  "fmod",			  "(x:bat[:any_1,:dbl],y:dbl):bat[:any_1,:dbl] address CMDscience_fmod;"					  ]
[ 835@0,  "command",	  "batmath",	  "floor",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] address CMDsciencevoid_floor;"						  ]
[ 836@0,  "command",	  "batmath",	  "floor",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] address CMDscience_floor;"						  ]
[ 837@0,  "command",	  "batmath",	  "fabs",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] address CMDsciencevoid_fabs;"						  ]
[ 838@0,  "command",	  "batmath",	  "fabs",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] address CMDscience_fabs;"						  ]
[ 839@0,  "command",	  "batmath",	  "log10",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] address CMDsciencevoid_log10;"						  ]
[ 840@0,  "command",	  "batmath",	  "log10",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] address CMDscience_log10;"						  ]
[ 841@0,  "command",	  "batmath",	  "log",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] address CMDsciencevoid_log;"						  ]
[ 842@0,  "command",	  "batmath",	  "log",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] address CMDscience_log;"						  ]
[ 843@0,  "command",	  "batmath",	  "pow",			  "(x:bat[:any_1,:dbl],y:dbl):bat[:any_1,:dbl] address CMDscience_pow;"						  ]
[ 844@0,  "command",	  "batmath",	  "sqrt",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] address CMDsciencevoid_sqrt;"						  ]
[ 845@0,  "command",	  "batmath",	  "sqrt",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] address CMDscience_sqrt;"						  ]
[ 846@0,  "command",	  "batmath",	  "sinh",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] address CMDsciencevoid_sinh;"						  ]
[ 847@0,  "command",	  "batmath",	  "sinh",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] address CMDscience_sinh;"						  ]
[ 848@0,  "command",	  "batmath",	  "sin",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] address CMDsciencevoid_sin;"						  ]
[ 849@0,  "command",	  "batmath",	  "sin",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] address CMDscience_sin;"						  ]
[ 850@0,  "command",	  "batmath",	  "tanh",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] address CMDsciencevoid_tanh;"						  ]
[ 851@0,  "command",	  "batmath",	  "tanh",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] address CMDscience_tanh;"						  ]
[ 852@0,  "command",	  "batmath",	  "tan",			  "(x:bat[:void,:dbl]):bat[:void,:dbl] address CMDsciencevoid_tan;"						  ]
[ 853@0,  "command",	  "batmath",	  "tan",			  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] address CMDscience_tan;"						  ]
[ 854@0,  "command",	  "mapi",	  "epilogue",			  "():void address mapi_epilogue;"										  ]
[ 855@0,  "command",	  "mapi",	  "listen_ssl",			  "(port:int,maxusers:int,keyfile:str,certfile:str,cmd:str):int address MAPIlistenSSL;"				  ]
[ 856@0,  "command",	  "mapi",	  "listen",			  "(port:int,maxusers:int,cmd:str):int address MAPIlisten3;"							  ]
[ 857@0,  "command",	  "mapi",	  "listen",			  "(port:int,maxusers:int):int address MAPIlisten2;"								  ]
[ 858@0,  "command",	  "mapi",	  "listen",			  "(port:int):int address MAPIlisten_port;"									  ]
[ 859@0,  "command",	  "mapi",	  "listen",			  "():int address MAPIlisten_default;"										  ]
[ 860@0,  "command",	  "mapi",	  "prelude",			  "():void address mapi_prelude;"										  ]
[ 861@0,  "command",	  "mapi",	  "resume",			  "(sessionkey:lng):void address MAPIresume;"									  ]
[ 862@0,  "command",	  "mapi",	  "suspend",			  "(sessionkey:lng,timeout:lng):void address MAPIsuspend;"							  ]
[ 863@0,  "command",	  "mapi",	  "stop",			  "(name:str):bit address MAPIstopClient;"									  ]
[ 864@0,  "command",	  "mapi",	  "stop",			  "(id:int):bit address MAPIstop;"										  ]
[ 865@0,  "command",	  "mapi",	  "trace",			  "(flag:bit):void address MAPItrace;"										  ]
[ 866@0,  "command",	  "mapi",	  "trace",			  "(nme:str,flag:bit):void address MAPItrace2;"									  ]
[ 867@0,  "command",	  "array",	  "grid",			  "(b:bat[:void,:lng],i:lng,j:lng,k:lng,l:lng,s:lng):bat[:void,:lng] address ARRAYgridBAT_lng;"			  ]
[ 868@0,  "command",	  "array",	  "grid",			  "(b:bat[:void,:lng],i:lng,j:lng,k:lng,l:lng):bat[:void,:lng] address ARRAYgridBAT_lng;"			  ]
[ 869@0,  "command",	  "array",	  "grid",			  "(i:lng,j:lng,k:lng,l:lng,s:lng):bat[:void,:lng] address ARRAYgridShift_lng;"					  ]
[ 870@0,  "command",	  "array",	  "grid",			  "(i:lng,j:lng,k:lng,l:lng):bat[:void,:lng] address ARRAYgrid_lng;"						  ]
[ 871@0,  "command",	  "array",	  "grid",			  "(b:bat[:void,:int],i:int,j:int,k:int,l:int,s:int):bat[:void,:int] address ARRAYgridBAT_int;"			  ]
[ 872@0,  "command",	  "array",	  "grid",			  "(b:bat[:void,:int],i:int,j:int,k:int,l:int):bat[:void,:int] address ARRAYgridBAT_int;"			  ]
[ 873@0,  "command",	  "array",	  "grid",			  "(i:int,j:int,k:int,l:int,s:int):bat[:void,:int] address ARRAYgridShift_int;"					  ]
[ 874@0,  "command",	  "array",	  "grid",			  "(i:int,j:int,k:int,l:int):bat[:void,:int] address ARRAYgrid_int;"						  ]
[ 875@0,  "pattern",	  "array",	  "print",			  "(a:bat[:any_1,:any_2],b:bat[:any_1,:int]...):void address ARRAYprint;"					  ]
[ 876@0,  "command",	  "array",	  "project",			  "(b:bat[:void,:any_1],i:int):bat[:void,:int] address ARRAYproject;"						  ]
[ 877@0,  "command",	  "array",	  "product",			  "(b:bat[:void,:any_1],c:bat[:void,:any_2]):bat[:any_1,:any_2] address ARRAYproduct;"				  ]
[ 878@0,  "command",	  "group",	  "avg",			  "(b:bat[:any_2,:dbl],e:bat[:any_2,:any_1]):bat[:any_2,:dbl] address GRPavg_dbl;"				  ]
[ 879@0,  "command",	  "group",	  "avg",			  "(b:bat[:any_2,:flt],e:bat[:any_2,:any_1]):bat[:any_2,:flt] address GRPavg_flt;"				  ]
[ 880@0,  "command",	  "group",	  "avg",			  "(b:bat[:any_2,:lng],e:bat[:any_2,:any_1]):bat[:any_2,:lng] address GRPavg_lng;"				  ]
[ 881@0,  "command",	  "group",	  "avg",			  "(b:bat[:any_2,:int],e:bat[:any_2,:any_1]):bat[:any_2,:int] address GRPavg_int;"				  ]
[ 882@0,  "command",	  "group",	  "avg",			  "(b:bat[:any_2,:sht],e:bat[:any_2,:any_1]):bat[:any_2,:sht] address GRPavg_sht;"				  ]
[ 883@0,  "command",	  "group",	  "count",			  "(b:bat[:any_2,:any_1],e:bat[:any_2,:any_3],nonils:bit):bat[:any_2,:int] address GRPaggr_count;"		  ]
[ 884@0,  "command",	  "group",	  "derive",			  "(ct:bat[:any_1,:any_3],attr:bat[:any_1,:any_2]) (histo:bat[:any_1,:oid],grp:bat[:any_1,:oid]) address GRPderive;"  ]
[ 885@0,  "command",	  "group",	  "max",			  "(b:bat[:any_2,:any_1],e:bat[:any_2,:any_3]):bat[:any_2,:any_1] address GRPmax;"				  ]
[ 886@0,  "command",	  "group",	  "min",			  "(b:bat[:any_2,:any_1],e:bat[:any_2,:any_3]):bat[:any_2,:any_1] address GRPmin;"				  ]
[ 887@0,  "command",	  "group",	  "new",			  "(attr:bat[:any_1,:any_2],N:int,rng:int) (histo:bat[:any_1,:int],grp:bat[:any_1,:oid]) address GRPgroup_custom;"  ]
[ 888@0,  "command",	  "group",	  "new",			  "(attr:bat[:any_1,:any_2]) (histo:bat[:any_1,:int],grp:bat[:any_1,:oid]) address GRPgroup;"			  ]
[ 889@0,  "command",	  "group",	  "new",			  "(attr:bat[:any_1,:any_2]) (histo:bat[:any_1,:int],grp:bat[:any_1,:void]) address GRPgroup;"			  ]
[ 890@0,  "command",	  "group",	  "new",			  "(b:bat[:any_1,:any_2],start:int,incr:int,grpsize:int):bat[:any_1,:int] address GRPgroup0;"			  ]
[ 891@0,  "command",	  "group",	  "prelude",			  "():void address GRPprelude;"											  ]
[ 892@0,  "command",	  "group",	  "refine",			  "(b:bat[:any_2,:any_3],a:bat[:any_2,:any_1]):bat[:any_2,:oid] address GRPrefine;"				  ]
[ 893@0,  "command",	  "group",	  "size",			  "(b:bat[:any_2,:bit],e:bat[:any_2,:any_1]):bat[:any_2,:int] address GRPsize;"					  ]
[ 894@0,  "command",	  "group",	  "sum",			  "(b:bat[:any_2,:dbl],size:int,shift:int):bat[:any_2,:dbl] address GRPslidingsum_dbl;"				  ]
[ 895@0,  "command",	  "group",	  "sum",			  "(b:bat[:any_2,:dbl],size:int):bat[:any_2,:dbl] address GRPwindowsum_dbl;"					  ]
[ 896@0,  "command",	  "group",	  "sum",			  "(b:bat[:any_2,:dbl],e:bat[:any_2,:any_1]):bat[:any_2,:dbl] address GRPsum_dbl;"				  ]
[ 897@0,  "command",	  "group",	  "sum",			  "(b:bat[:any_2,:flt],size:int,shift:int):bat[:any_2,:flt] address GRPslidingsum_flt;"				  ]
[ 898@0,  "command",	  "group",	  "sum",			  "(b:bat[:any_2,:flt],size:int):bat[:any_2,:flt] address GRPwindowsum_flt;"					  ]
[ 899@0,  "command",	  "group",	  "sum",			  "(b:bat[:any_2,:flt],e:bat[:any_2,:any_1]):bat[:any_2,:flt] address GRPsum_flt;"				  ]
[ 900@0,  "command",	  "group",	  "sum",			  "(b:bat[:any_2,:lng],size:int,shift:int):bat[:any_2,:lng] address GRPslidingsum_lng;"				  ]
[ 901@0,  "command",	  "group",	  "sum",			  "(b:bat[:any_2,:lng],size:int):bat[:any_2,:lng] address GRPwindowsum_lng;"					  ]
[ 902@0,  "command",	  "group",	  "sum",			  "(b:bat[:any_2,:lng],e:bat[:any_2,:any_1]):bat[:any_2,:lng] address GRPsum_lng;"				  ]
[ 903@0,  "command",	  "group",	  "sum",			  "(b:bat[:any_2,:int],size:int,shift:int):bat[:any_2,:int] address GRPslidingsum_int;"				  ]
[ 904@0,  "command",	  "group",	  "sum",			  "(b:bat[:any_2,:int],size:int):bat[:any_2,:int] address GRPwindowsum_int;"					  ]
[ 905@0,  "command",	  "group",	  "sum",			  "(b:bat[:any_2,:int],e:bat[:any_2,:any_1]):bat[:any_2,:int] address GRPsum_int;"				  ]
[ 906@0,  "command",	  "group",	  "sum",			  "(b:bat[:any_2,:sht],size:int,shift:int):bat[:any_2,:sht] address GRPslidingsum_sht;"				  ]
[ 907@0,  "command",	  "group",	  "sum",			  "(b:bat[:any_2,:sht],size:int):bat[:any_2,:sht] address GRPwindowsum_sht;"					  ]
[ 908@0,  "command",	  "group",	  "sum",			  "(b:bat[:any_2,:sht],e:bat[:any_2,:any_1]):bat[:any_2,:sht] address GRPsum_sht;"				  ]
[ 909@0,  "command",	  "status",	  "cpuStatistics",		  "():bat[:str,:int] address SYScpuStatistics;"									  ]
[ 910@0,  "command",	  "status",	  "gdkThread",			  "():bat[:int,:str] address SYSgdkThread;"									  ]
[ 911@0,  "command",	  "status",	  "gdkEnv",			  "():bat[:str,:str] address SYSgdkEnv;"									  ]
[ 912@0,  "command",	  "status",	  "ioStatistics",		  "():bat[:str,:int] address SYSioStatistics;"									  ]
[ 913@0,  "command",	  "status",	  "mem_maxsize",		  "(v:lng):void address set_mem_maxsize;"									  ]
[ 914@0,  "command",	  "status",	  "mem_maxsize",		  "():lng address SYSgetmem_maxsize;"										  ]
[ 915@0,  "command",	  "status",	  "mem_cursize",		  "():lng address SYSgetmem_cursize;"										  ]
[ 916@0,  "command",	  "status",	  "memUsage",			  "(minsize:lng):bat[:str,:lng] address SYSmem_usage;"								  ]
[ 917@0,  "command",	  "status",	  "memStatistics",		  "():bat[:str,:int] address SYSmemStatistics;"									  ]
[ 918@0,  "command",	  "status",	  "vm_maxsize",			  "(v:lng):void address SYSsetvm_maxsize;"									  ]
[ 919@0,  "command",	  "status",	  "vm_maxsize",			  "():lng address SYSgetvm_maxsize;"										  ]
[ 920@0,  "command",	  "status",	  "vm_cursize",			  "():lng address SYSgetvm_cursize;"										  ]
[ 921@0,  "command",	  "status",	  "vmUsage",			  "(minsize:lng):bat[:str,:lng] address SYSvm_usage;"								  ]
[ 922@0,  "command",	  "calc",	  "!=",				  "(left:str,right:str):bit address CALCcompNEQstrstr;"								  ]
[ 923@0,  "command",	  "calc",	  "!=",				  "(left:lng,right:lng):bit address CALCcompNEQlnglng;"								  ]
[ 924@0,  "command",	  "calc",	  "!=",				  "(left:lng,right:int):bit address CALCcompNEQlngint;"								  ]
[ 925@0,  "command",	  "calc",	  "!=",				  "(left:lng,right:sht):bit address CALCcompNEQlngsht;"								  ]
[ 926@0,  "command",	  "calc",	  "!=",				  "(left:lng,right:chr):bit address CALCcompNEQlngchr;"								  ]
[ 927@0,  "command",	  "calc",	  "!=",				  "(left:int,right:lng):bit address CALCcompNEQintlng;"								  ]
[ 928@0,  "command",	  "calc",	  "!=",				  "(left:int,right:int):bit address CALCcompNEQintint;"								  ]
[ 929@0,  "command",	  "calc",	  "!=",				  "(left:int,right:sht):bit address CALCcompNEQintsht;"								  ]
[ 930@0,  "command",	  "calc",	  "!=",				  "(left:int,right:chr):bit address CALCcompNEQintchr;"								  ]
[ 931@0,  "command",	  "calc",	  "!=",				  "(left:sht,right:lng):bit address CALCcompNEQshtlng;"								  ]
[ 932@0,  "command",	  "calc",	  "!=",				  "(left:sht,right:int):bit address CALCcompNEQshtint;"								  ]
[ 933@0,  "command",	  "calc",	  "!=",				  "(left:sht,right:sht):bit address CALCcompNEQshtsht;"								  ]
[ 934@0,  "command",	  "calc",	  "!=",				  "(left:sht,right:chr):bit address CALCcompNEQshtchr;"								  ]
[ 935@0,  "command",	  "calc",	  "!=",				  "(left:bit,right:lng):bit address CALCcompNEQbitlng;"								  ]
[ 936@0,  "command",	  "calc",	  "!=",				  "(left:bit,right:int):bit address CALCcompNEQbitint;"								  ]
[ 937@0,  "command",	  "calc",	  "!=",				  "(left:bit,right:sht):bit address CALCcompNEQbitsht;"								  ]
[ 938@0,  "command",	  "calc",	  "!=",				  "(left:bit,right:chr):bit address CALCcompNEQbitchr;"								  ]
[ 939@0,  "command",	  "calc",	  "!=",				  "(left:chr,right:lng):bit address CALCcompNEQchrlng;"								  ]
[ 940@0,  "command",	  "calc",	  "!=",				  "(left:chr,right:int):bit address CALCcompNEQchrint;"								  ]
[ 941@0,  "command",	  "calc",	  "!=",				  "(left:chr,right:sht):bit address CALCcompNEQchrsht;"								  ]
[ 942@0,  "command",	  "calc",	  "!=",				  "(left:chr,right:chr):bit address CALCcompNEQchrchr;"								  ]
[ 943@0,  "command",	  "calc",	  "!=",				  "(left:dbl,right:dbl):bit address CALCcompNEQdbldbl;"								  ]
[ 944@0,  "command",	  "calc",	  "!=",				  "(left:flt,right:dbl):bit address CALCcompNEQfltdbl;"								  ]
[ 945@0,  "command",	  "calc",	  "!=",				  "(left:flt,right:flt):bit address CALCcompNEQfltflt;"								  ]
[ 946@0,  "command",	  "calc",	  "!=",				  "(left:oid,right:oid):bit address CALCcompNEQoidoid;"								  ]
[ 947@0,  "command",	  "calc",	  "%",				  "(left:int,right:sht):sht address CALCbinaryMODintsht;"							  ]
[ 948@0,  "command",	  "calc",	  "%",				  "(left:int,right:chr):chr address CALCbinaryMODintchr;"							  ]
[ 949@0,  "command",	  "calc",	  "%",				  "(left:lng,right:lng):lng address CALCbinaryMODlnglng;"							  ]
[ 950@0,  "command",	  "calc",	  "%",				  "(left:lng,right:int):int address CALCbinaryMODlngint;"							  ]
[ 951@0,  "command",	  "calc",	  "%",				  "(left:int,right:int):int address CALCbinaryMODintint;"							  ]
[ 952@0,  "command",	  "calc",	  "%",				  "(left:sht,right:int):int address CALCbinaryMODshtint;"							  ]
[ 953@0,  "command",	  "calc",	  "%",				  "(left:chr,right:int):int address CALCbinaryMODchrint;"							  ]
[ 954@0,  "command",	  "calc",	  "*",				  "(left:lng,right:dbl):dbl address CALCbinaryMULlngdbl;"							  ]
[ 955@0,  "command",	  "calc",	  "*",				  "(left:lng,right:flt):flt address CALCbinaryMULlngflt;"							  ]
[ 956@0,  "command",	  "calc",	  "*",				  "(left:lng,right:lng):lng address CALCbinaryMULlnglng;"							  ]
[ 957@0,  "command",	  "calc",	  "*",				  "(left:lng,right:int):lng address CALCbinaryMULlngint;"							  ]
[ 958@0,  "command",	  "calc",	  "*",				  "(left:lng,right:sht):lng address CALCbinaryMULlngsht;"							  ]
[ 959@0,  "command",	  "calc",	  "*",				  "(left:lng,right:chr):lng address CALCbinaryMULlngchr;"							  ]
[ 960@0,  "command",	  "calc",	  "*",				  "(left:int,right:dbl):dbl address CALCbinaryMULintdbl;"							  ]
[ 961@0,  "command",	  "calc",	  "*",				  "(left:int,right:flt):flt address CALCbinaryMULintflt;"							  ]
[ 962@0,  "command",	  "calc",	  "*",				  "(left:int,right:lng):lng address CALCbinaryMULintlng;"							  ]
[ 963@0,  "command",	  "calc",	  "*",				  "(left:int,right:int):int address CALCbinaryMULintint;"							  ]
[ 964@0,  "command",	  "calc",	  "*",				  "(left:int,right:sht):int address CALCbinaryMULintsht;"							  ]
[ 965@0,  "command",	  "calc",	  "*",				  "(left:int,right:chr):int address CALCbinaryMULintchr;"							  ]
[ 966@0,  "command",	  "calc",	  "*",				  "(left:sht,right:dbl):dbl address CALCbinaryMULshtdbl;"							  ]
[ 967@0,  "command",	  "calc",	  "*",				  "(left:sht,right:flt):flt address CALCbinaryMULshtflt;"							  ]
[ 968@0,  "command",	  "calc",	  "*",				  "(left:sht,right:lng):lng address CALCbinaryMULshtlng;"							  ]
[ 969@0,  "command",	  "calc",	  "*",				  "(left:sht,right:int):int address CALCbinaryMULshtint;"							  ]
[ 970@0,  "command",	  "calc",	  "*",				  "(left:sht,right:sht):sht address CALCbinaryMULshtsht;"							  ]
[ 971@0,  "command",	  "calc",	  "*",				  "(left:sht,right:chr):sht address CALCbinaryMULshtchr;"							  ]
[ 972@0,  "command",	  "calc",	  "*",				  "(left:chr,right:dbl):dbl address CALCbinaryMULchrdbl;"							  ]
[ 973@0,  "command",	  "calc",	  "*",				  "(left:chr,right:flt):flt address CALCbinaryMULchrflt;"							  ]
[ 974@0,  "command",	  "calc",	  "*",				  "(left:chr,right:lng):lng address CALCbinaryMULchrlng;"							  ]
[ 975@0,  "command",	  "calc",	  "*",				  "(left:chr,right:int):int address CALCbinaryMULchrint;"							  ]
[ 976@0,  "command",	  "calc",	  "*",				  "(left:chr,right:sht):sht address CALCbinaryMULchrsht;"							  ]
[ 977@0,  "command",	  "calc",	  "*",				  "(left:chr,right:chr):chr address CALCbinaryMULchrchr;"							  ]
[ 978@0,  "command",	  "calc",	  "*",				  "(left:oid,right:oid):oid address CALCbinaryMULoidoid;"							  ]
[ 979@0,  "command",	  "calc",	  "*",				  "(left:dbl,right:dbl):dbl address CALCbinaryMULdbldbl;"							  ]
[ 980@0,  "command",	  "calc",	  "*",				  "(left:dbl,right:flt):dbl address CALCbinaryMULdblflt;"							  ]
[ 981@0,  "command",	  "calc",	  "*",				  "(left:dbl,right:lng):dbl address CALCbinaryMULdbllng;"							  ]
[ 982@0,  "command",	  "calc",	  "*",				  "(left:dbl,right:int):dbl address CALCbinaryMULdblint;"							  ]
[ 983@0,  "command",	  "calc",	  "*",				  "(left:dbl,right:sht):dbl address CALCbinaryMULdblsht;"							  ]
[ 984@0,  "command",	  "calc",	  "*",				  "(left:dbl,right:chr):dbl address CALCbinaryMULdblchr;"							  ]
[ 985@0,  "command",	  "calc",	  "*",				  "(left:flt,right:dbl):dbl address CALCbinaryMULfltdbl;"							  ]
[ 986@0,  "command",	  "calc",	  "*",				  "(left:flt,right:flt):flt address CALCbinaryMULfltflt;"							  ]
[ 987@0,  "command",	  "calc",	  "*",				  "(left:flt,right:lng):flt address CALCbinaryMULfltlng;"							  ]
[ 988@0,  "command",	  "calc",	  "*",				  "(left:flt,right:int):flt address CALCbinaryMULfltint;"							  ]
[ 989@0,  "command",	  "calc",	  "*",				  "(left:flt,right:sht):flt address CALCbinaryMULfltsht;"							  ]
[ 990@0,  "command",	  "calc",	  "*",				  "(left:flt,right:chr):flt address CALCbinaryMULfltchr;"							  ]
[ 991@0,  "command",	  "calc",	  "+",				  "(left:lng,right:dbl):dbl address CALCbinaryADDlngdbl;"							  ]
[ 992@0,  "command",	  "calc",	  "+",				  "(left:lng,right:flt):flt address CALCbinaryADDlngflt;"							  ]
[ 993@0,  "command",	  "calc",	  "+",				  "(left:lng,right:lng):lng address CALCbinaryADDlnglng;"							  ]
[ 994@0,  "command",	  "calc",	  "+",				  "(left:lng,right:int):lng address CALCbinaryADDlngint;"							  ]
[ 995@0,  "command",	  "calc",	  "+",				  "(left:lng,right:sht):lng address CALCbinaryADDlngsht;"							  ]
[ 996@0,  "command",	  "calc",	  "+",				  "(left:lng,right:chr):lng address CALCbinaryADDlngchr;"							  ]
[ 997@0,  "command",	  "calc",	  "+",				  "(left:int,right:dbl):dbl address CALCbinaryADDintdbl;"							  ]
[ 998@0,  "command",	  "calc",	  "+",				  "(left:int,right:flt):flt address CALCbinaryADDintflt;"							  ]
[ 999@0,  "command",	  "calc",	  "+",				  "(left:int,right:lng):lng address CALCbinaryADDintlng;"							  ]
[ 1000@0, "command",	  "calc",	  "+",				  "(left:int,right:int):int address CALCbinaryADDintint;"							  ]
[ 1001@0, "command",	  "calc",	  "+",				  "(left:int,right:sht):int address CALCbinaryADDintsht;"							  ]
[ 1002@0, "command",	  "calc",	  "+",				  "(left:int,right:chr):int address CALCbinaryADDintchr;"							  ]
[ 1003@0, "command",	  "calc",	  "+",				  "(left:sht,right:dbl):dbl address CALCbinaryADDshtdbl;"							  ]
[ 1004@0, "command",	  "calc",	  "+",				  "(left:sht,right:flt):flt address CALCbinaryADDshtflt;"							  ]
[ 1005@0, "command",	  "calc",	  "+",				  "(left:sht,right:lng):lng address CALCbinaryADDshtlng;"							  ]
[ 1006@0, "command",	  "calc",	  "+",				  "(left:sht,right:int):int address CALCbinaryADDshtint;"							  ]
[ 1007@0, "command",	  "calc",	  "+",				  "(left:sht,right:sht):sht address CALCbinaryADDshtsht;"							  ]
[ 1008@0, "command",	  "calc",	  "+",				  "(left:sht,right:chr):sht address CALCbinaryADDshtchr;"							  ]
[ 1009@0, "command",	  "calc",	  "+",				  "(left:chr,right:dbl):dbl address CALCbinaryADDchrdbl;"							  ]
[ 1010@0, "command",	  "calc",	  "+",				  "(left:chr,right:flt):flt address CALCbinaryADDchrflt;"							  ]
[ 1011@0, "command",	  "calc",	  "+",				  "(left:chr,right:lng):lng address CALCbinaryADDchrlng;"							  ]
[ 1012@0, "command",	  "calc",	  "+",				  "(left:chr,right:int):int address CALCbinaryADDchrint;"							  ]
[ 1013@0, "command",	  "calc",	  "+",				  "(left:chr,right:sht):sht address CALCbinaryADDchrsht;"							  ]
[ 1014@0, "command",	  "calc",	  "+",				  "(left:chr,right:chr):chr address CALCbinaryADDchrchr;"							  ]
[ 1015@0, "command",	  "calc",	  "+",				  "(left:oid,right:oid):oid address CALCbinaryADDoidoid;"							  ]
[ 1016@0, "command",	  "calc",	  "+",				  "(left:dbl,right:dbl):dbl address CALCbinaryADDdbldbl;"							  ]
[ 1017@0, "command",	  "calc",	  "+",				  "(left:dbl,right:flt):dbl address CALCbinaryADDdblflt;"							  ]
[ 1018@0, "command",	  "calc",	  "+",				  "(left:dbl,right:lng):dbl address CALCbinaryADDdbllng;"							  ]
[ 1019@0, "command",	  "calc",	  "+",				  "(left:dbl,right:int):dbl address CALCbinaryADDdblint;"							  ]
[ 1020@0, "command",	  "calc",	  "+",				  "(left:dbl,right:sht):dbl address CALCbinaryADDdblsht;"							  ]
[ 1021@0, "command",	  "calc",	  "+",				  "(left:dbl,right:chr):dbl address CALCbinaryADDdblchr;"							  ]
[ 1022@0, "command",	  "calc",	  "+",				  "(left:flt,right:dbl):dbl address CALCbinaryADDfltdbl;"							  ]
[ 1023@0, "command",	  "calc",	  "+",				  "(left:flt,right:flt):flt address CALCbinaryADDfltflt;"							  ]
[ 1024@0, "command",	  "calc",	  "+",				  "(left:flt,right:lng):flt address CALCbinaryADDfltlng;"							  ]
[ 1025@0, "command",	  "calc",	  "+",				  "(left:flt,right:int):flt address CALCbinaryADDfltint;"							  ]
[ 1026@0, "command",	  "calc",	  "+",				  "(left:flt,right:sht):flt address CALCbinaryADDfltsht;"							  ]
[ 1027@0, "command",	  "calc",	  "+",				  "(left:flt,right:chr):flt address CALCbinaryADDfltchr;"							  ]
[ 1028@0, "command",	  "calc",	  "+",				  "(l:str,r:int):str address CALCstrConcatInt;"									  ]
[ 1029@0, "command",	  "calc",	  "+",				  "(l:str,r:str):str address CALCstrConcat;"									  ]
[ 1030@0, "command",	  "calc",	  "-",				  "(x:lng):lng address CALCunarylngNEG;"									  ]
[ 1031@0, "command",	  "calc",	  "-",				  "(x:int):int address CALCunaryintNEG;"									  ]
[ 1032@0, "command",	  "calc",	  "-",				  "(x:sht):sht address CALCunaryshtNEG;"									  ]
[ 1033@0, "command",	  "calc",	  "-",				  "(x:chr):chr address CALCunarychrNEG;"									  ]
[ 1034@0, "command",	  "calc",	  "-",				  "(x:flt):flt address CALCunaryfltNEG;"									  ]
[ 1035@0, "command",	  "calc",	  "-",				  "(x:dbl):dbl address CALCunarydblNEG;"									  ]
[ 1036@0, "command",	  "calc",	  "-",				  "(left:lng,right:dbl):dbl address CALCbinarySUBlngdbl;"							  ]
[ 1037@0, "command",	  "calc",	  "-",				  "(left:lng,right:flt):flt address CALCbinarySUBlngflt;"							  ]
[ 1038@0, "command",	  "calc",	  "-",				  "(left:lng,right:lng):lng address CALCbinarySUBlnglng;"							  ]
[ 1039@0, "command",	  "calc",	  "-",				  "(left:lng,right:int):lng address CALCbinarySUBlngint;"							  ]
[ 1040@0, "command",	  "calc",	  "-",				  "(left:lng,right:sht):lng address CALCbinarySUBlngsht;"							  ]
[ 1041@0, "command",	  "calc",	  "-",				  "(left:lng,right:chr):lng address CALCbinarySUBlngchr;"							  ]
[ 1042@0, "command",	  "calc",	  "-",				  "(left:int,right:dbl):dbl address CALCbinarySUBintdbl;"							  ]
[ 1043@0, "command",	  "calc",	  "-",				  "(left:int,right:flt):flt address CALCbinarySUBintflt;"							  ]
[ 1044@0, "command",	  "calc",	  "-",				  "(left:int,right:lng):lng address CALCbinarySUBintlng;"							  ]
[ 1045@0, "command",	  "calc",	  "-",				  "(left:int,right:int):int address CALCbinarySUBintint;"							  ]
[ 1046@0, "command",	  "calc",	  "-",				  "(left:int,right:sht):int address CALCbinarySUBintsht;"							  ]
[ 1047@0, "command",	  "calc",	  "-",				  "(left:int,right:chr):int address CALCbinarySUBintchr;"							  ]
[ 1048@0, "command",	  "calc",	  "-",				  "(left:sht,right:dbl):dbl address CALCbinarySUBshtdbl;"							  ]
[ 1049@0, "command",	  "calc",	  "-",				  "(left:sht,right:flt):flt address CALCbinarySUBshtflt;"							  ]
[ 1050@0, "command",	  "calc",	  "-",				  "(left:sht,right:lng):lng address CALCbinarySUBshtlng;"							  ]
[ 1051@0, "command",	  "calc",	  "-",				  "(left:sht,right:int):int address CALCbinarySUBshtint;"							  ]
[ 1052@0, "command",	  "calc",	  "-",				  "(left:sht,right:sht):sht address CALCbinarySUBshtsht;"							  ]
[ 1053@0, "command",	  "calc",	  "-",				  "(left:sht,right:chr):sht address CALCbinarySUBshtchr;"							  ]
[ 1054@0, "command",	  "calc",	  "-",				  "(left:chr,right:dbl):dbl address CALCbinarySUBchrdbl;"							  ]
[ 1055@0, "command",	  "calc",	  "-",				  "(left:chr,right:flt):flt address CALCbinarySUBchrflt;"							  ]
[ 1056@0, "command",	  "calc",	  "-",				  "(left:chr,right:lng):lng address CALCbinarySUBchrlng;"							  ]
[ 1057@0, "command",	  "calc",	  "-",				  "(left:chr,right:int):int address CALCbinarySUBchrint;"							  ]
[ 1058@0, "command",	  "calc",	  "-",				  "(left:chr,right:sht):sht address CALCbinarySUBchrsht;"							  ]
[ 1059@0, "command",	  "calc",	  "-",				  "(left:chr,right:chr):chr address CALCbinarySUBchrchr;"							  ]
[ 1060@0, "command",	  "calc",	  "-",				  "(left:oid,right:oid):oid address CALCbinarySUBoidoid;"							  ]
[ 1061@0, "command",	  "calc",	  "-",				  "(left:dbl,right:dbl):dbl address CALCbinarySUBdbldbl;"							  ]
[ 1062@0, "command",	  "calc",	  "-",				  "(left:dbl,right:flt):dbl address CALCbinarySUBdblflt;"							  ]
[ 1063@0, "command",	  "calc",	  "-",				  "(left:dbl,right:lng):dbl address CALCbinarySUBdbllng;"							  ]
[ 1064@0, "command",	  "calc",	  "-",				  "(left:dbl,right:int):dbl address CALCbinarySUBdblint;"							  ]
[ 1065@0, "command",	  "calc",	  "-",				  "(left:dbl,right:sht):dbl address CALCbinarySUBdblsht;"							  ]
[ 1066@0, "command",	  "calc",	  "-",				  "(left:dbl,right:chr):dbl address CALCbinarySUBdblchr;"							  ]
[ 1067@0, "command",	  "calc",	  "-",				  "(left:flt,right:dbl):dbl address CALCbinarySUBfltdbl;"							  ]
[ 1068@0, "command",	  "calc",	  "-",				  "(left:flt,right:flt):flt address CALCbinarySUBfltflt;"							  ]
[ 1069@0, "command",	  "calc",	  "-",				  "(left:flt,right:lng):flt address CALCbinarySUBfltlng;"							  ]
[ 1070@0, "command",	  "calc",	  "-",				  "(left:flt,right:int):flt address CALCbinarySUBfltint;"							  ]
[ 1071@0, "command",	  "calc",	  "-",				  "(left:flt,right:sht):flt address CALCbinarySUBfltsht;"							  ]
[ 1072@0, "command",	  "calc",	  "-",				  "(left:flt,right:chr):flt address CALCbinarySUBfltchr;"							  ]
[ 1073@0, "command",	  "calc",	  "/",				  "(left:lng,right:dbl):dbl address CALCbinarycheckDIVlngdbl;"							  ]
[ 1074@0, "command",	  "calc",	  "/",				  "(left:lng,right:flt):flt address CALCbinarycheckDIVlngflt;"							  ]
[ 1075@0, "command",	  "calc",	  "/",				  "(left:lng,right:lng):lng address CALCbinarycheckDIVlnglng;"							  ]
[ 1076@0, "command",	  "calc",	  "/",				  "(left:lng,right:int):lng address CALCbinarycheckDIVlngint;"							  ]
[ 1077@0, "command",	  "calc",	  "/",				  "(left:lng,right:sht):lng address CALCbinarycheckDIVlngsht;"							  ]
[ 1078@0, "command",	  "calc",	  "/",				  "(left:lng,right:chr):lng address CALCbinarycheckDIVlngchr;"							  ]
[ 1079@0, "command",	  "calc",	  "/",				  "(left:int,right:dbl):dbl address CALCbinarycheckDIVintdbl;"							  ]
[ 1080@0, "command",	  "calc",	  "/",				  "(left:int,right:flt):flt address CALCbinarycheckDIVintflt;"							  ]
[ 1081@0, "command",	  "calc",	  "/",				  "(left:int,right:lng):lng address CALCbinarycheckDIVintlng;"							  ]
[ 1082@0, "command",	  "calc",	  "/",				  "(left:int,right:int):int address CALCbinarycheckDIVintint;"							  ]
[ 1083@0, "command",	  "calc",	  "/",				  "(left:int,right:sht):int address CALCbinarycheckDIVintsht;"							  ]
[ 1084@0, "command",	  "calc",	  "/",				  "(left:int,right:chr):int address CALCbinarycheckDIVintchr;"							  ]
[ 1085@0, "command",	  "calc",	  "/",				  "(left:sht,right:dbl):dbl address CALCbinarycheckDIVshtdbl;"							  ]
[ 1086@0, "command",	  "calc",	  "/",				  "(left:sht,right:flt):flt address CALCbinarycheckDIVshtflt;"							  ]
[ 1087@0, "command",	  "calc",	  "/",				  "(left:sht,right:lng):lng address CALCbinarycheckDIVshtlng;"							  ]
[ 1088@0, "command",	  "calc",	  "/",				  "(left:sht,right:int):int address CALCbinarycheckDIVshtint;"							  ]
[ 1089@0, "command",	  "calc",	  "/",				  "(left:sht,right:sht):sht address CALCbinarycheckDIVshtsht;"							  ]
[ 1090@0, "command",	  "calc",	  "/",				  "(left:sht,right:chr):sht address CALCbinarycheckDIVshtchr;"							  ]
[ 1091@0, "command",	  "calc",	  "/",				  "(left:chr,right:dbl):dbl address CALCbinarycheckDIVchrdbl;"							  ]
[ 1092@0, "command",	  "calc",	  "/",				  "(left:chr,right:flt):flt address CALCbinarycheckDIVchrflt;"							  ]
[ 1093@0, "command",	  "calc",	  "/",				  "(left:chr,right:lng):lng address CALCbinarycheckDIVchrlng;"							  ]
[ 1094@0, "command",	  "calc",	  "/",				  "(left:chr,right:int):int address CALCbinarycheckDIVchrint;"							  ]
[ 1095@0, "command",	  "calc",	  "/",				  "(left:chr,right:sht):sht address CALCbinarycheckDIVchrsht;"							  ]
[ 1096@0, "command",	  "calc",	  "/",				  "(left:chr,right:chr):chr address CALCbinarycheckDIVchrchr;"							  ]
[ 1097@0, "command",	  "calc",	  "/",				  "(left:oid,right:oid):oid address CALCbinarycheckDIVoidoid;"							  ]
[ 1098@0, "command",	  "calc",	  "/",				  "(left:dbl,right:dbl):dbl address CALCbinarycheckDIVdbldbl;"							  ]
[ 1099@0, "command",	  "calc",	  "/",				  "(left:dbl,right:flt):dbl address CALCbinarycheckDIVdblflt;"							  ]
[ 1100@0, "command",	  "calc",	  "/",				  "(left:dbl,right:lng):dbl address CALCbinarycheckDIVdbllng;"							  ]
[ 1101@0, "command",	  "calc",	  "/",				  "(left:dbl,right:int):dbl address CALCbinarycheckDIVdblint;"							  ]
[ 1102@0, "command",	  "calc",	  "/",				  "(left:dbl,right:sht):dbl address CALCbinarycheckDIVdblsht;"							  ]
[ 1103@0, "command",	  "calc",	  "/",				  "(left:dbl,right:chr):dbl address CALCbinarycheckDIVdblchr;"							  ]
[ 1104@0, "command",	  "calc",	  "/",				  "(left:flt,right:dbl):dbl address CALCbinarycheckDIVfltdbl;"							  ]
[ 1105@0, "command",	  "calc",	  "/",				  "(left:flt,right:flt):flt address CALCbinarycheckDIVfltflt;"							  ]
[ 1106@0, "command",	  "calc",	  "/",				  "(left:flt,right:lng):flt address CALCbinarycheckDIVfltlng;"							  ]
[ 1107@0, "command",	  "calc",	  "/",				  "(left:flt,right:int):flt address CALCbinarycheckDIVfltint;"							  ]
[ 1108@0, "command",	  "calc",	  "/",				  "(left:flt,right:sht):flt address CALCbinarycheckDIVfltsht;"							  ]
[ 1109@0, "command",	  "calc",	  "/",				  "(left:flt,right:chr):flt address CALCbinarycheckDIVfltchr;"							  ]
[ 1110@0, "command",	  "calc",	  "<<",				  "(left:lng,right:int):lng address CALCbinaryLSHlngint;"							  ]
[ 1111@0, "command",	  "calc",	  "<<",				  "(left:int,right:int):int address CALCbinaryLSHintint;"							  ]
[ 1112@0, "command",	  "calc",	  "<<",				  "(left:sht,right:int):sht address CALCbinaryLSHshtint;"							  ]
[ 1113@0, "command",	  "calc",	  "<<",				  "(left:chr,right:int):chr address CALCbinaryLSHchrint;"							  ]
[ 1114@0, "command",	  "calc",	  "<=",				  "(left:str,right:str):bit address CALCcompLEstrstr;"								  ]
[ 1115@0, "command",	  "calc",	  "<",				  "(left:str,right:str):bit address CALCcompLTstrstr;"								  ]
[ 1116@0, "command",	  "calc",	  "<=",				  "(left:lng,right:lng):bit address CALCcompLElnglng;"								  ]
[ 1117@0, "command",	  "calc",	  "<",				  "(left:lng,right:lng):bit address CALCcompLTlnglng;"								  ]
[ 1118@0, "command",	  "calc",	  "<=",				  "(left:lng,right:int):bit address CALCcompLElngint;"								  ]
[ 1119@0, "command",	  "calc",	  "<",				  "(left:lng,right:int):bit address CALCcompLTlngint;"								  ]
[ 1120@0, "command",	  "calc",	  "<=",				  "(left:lng,right:sht):bit address CALCcompLElngsht;"								  ]
[ 1121@0, "command",	  "calc",	  "<",				  "(left:lng,right:sht):bit address CALCcompLTlngsht;"								  ]
[ 1122@0, "command",	  "calc",	  "<=",				  "(left:lng,right:chr):bit address CALCcompLElngchr;"								  ]
[ 1123@0, "command",	  "calc",	  "<",				  "(left:lng,right:chr):bit address CALCcompLTlngchr;"								  ]
[ 1124@0, "command",	  "calc",	  "<=",				  "(left:int,right:lng):bit address CALCcompLEintlng;"								  ]
[ 1125@0, "command",	  "calc",	  "<",				  "(left:int,right:lng):bit address CALCcompLTintlng;"								  ]
[ 1126@0, "command",	  "calc",	  "<=",				  "(left:int,right:int):bit address CALCcompLEintint;"								  ]
[ 1127@0, "command",	  "calc",	  "<",				  "(left:int,right:int):bit address CALCcompLTintint;"								  ]
[ 1128@0, "command",	  "calc",	  "<=",				  "(left:int,right:sht):bit address CALCcompLEintsht;"								  ]
[ 1129@0, "command",	  "calc",	  "<",				  "(left:int,right:sht):bit address CALCcompLTintsht;"								  ]
[ 1130@0, "command",	  "calc",	  "<=",				  "(left:int,right:chr):bit address CALCcompLEintchr;"								  ]
[ 1131@0, "command",	  "calc",	  "<",				  "(left:int,right:chr):bit address CALCcompLTintchr;"								  ]
[ 1132@0, "command",	  "calc",	  "<=",				  "(left:sht,right:lng):bit address CALCcompLEshtlng;"								  ]
[ 1133@0, "command",	  "calc",	  "<",				  "(left:sht,right:lng):bit address CALCcompLTshtlng;"								  ]
[ 1134@0, "command",	  "calc",	  "<=",				  "(left:sht,right:int):bit address CALCcompLEshtint;"								  ]
[ 1135@0, "command",	  "calc",	  "<",				  "(left:sht,right:int):bit address CALCcompLTshtint;"								  ]
[ 1136@0, "command",	  "calc",	  "<=",				  "(left:sht,right:sht):bit address CALCcompLEshtsht;"								  ]
[ 1137@0, "command",	  "calc",	  "<",				  "(left:sht,right:sht):bit address CALCcompLTshtsht;"								  ]
[ 1138@0, "command",	  "calc",	  "<=",				  "(left:sht,right:chr):bit address CALCcompLEshtchr;"								  ]
[ 1139@0, "command",	  "calc",	  "<",				  "(left:sht,right:chr):bit address CALCcompLTshtchr;"								  ]
[ 1140@0, "command",	  "calc",	  "<=",				  "(left:chr,right:lng):bit address CALCcompLEchrlng;"								  ]
[ 1141@0, "command",	  "calc",	  "<",				  "(left:chr,right:lng):bit address CALCcompLTchrlng;"								  ]
[ 1142@0, "command",	  "calc",	  "<=",				  "(left:chr,right:int):bit address CALCcompLEchrint;"								  ]
[ 1143@0, "command",	  "calc",	  "<",				  "(left:chr,right:int):bit address CALCcompLTchrint;"								  ]
[ 1144@0, "command",	  "calc",	  "<=",				  "(left:chr,right:sht):bit address CALCcompLEchrsht;"								  ]
[ 1145@0, "command",	  "calc",	  "<",				  "(left:chr,right:sht):bit address CALCcompLTchrsht;"								  ]
[ 1146@0, "command",	  "calc",	  "<=",				  "(left:chr,right:chr):bit address CALCcompLEchrchr;"								  ]
[ 1147@0, "command",	  "calc",	  "<",				  "(left:chr,right:chr):bit address CALCcompLTchrchr;"								  ]
[ 1148@0, "command",	  "calc",	  "<=",				  "(left:dbl,right:dbl):bit address CALCcompLEdbldbl;"								  ]
[ 1149@0, "command",	  "calc",	  "<",				  "(left:dbl,right:dbl):bit address CALCcompLTdbldbl;"								  ]
[ 1150@0, "command",	  "calc",	  "<=",				  "(left:flt,right:dbl):bit address CALCcompLEfltdbl;"								  ]
[ 1151@0, "command",	  "calc",	  "<",				  "(left:flt,right:dbl):bit address CALCcompLTfltdbl;"								  ]
[ 1152@0, "command",	  "calc",	  "<=",				  "(left:flt,right:flt):bit address CALCcompLEfltflt;"								  ]
[ 1153@0, "command",	  "calc",	  "<",				  "(left:flt,right:flt):bit address CALCcompLTfltflt;"								  ]
[ 1154@0, "command",	  "calc",	  "<=",				  "(left:oid,right:oid):bit address CALCcompLEoidoid;"								  ]
[ 1155@0, "command",	  "calc",	  "<",				  "(left:oid,right:oid):bit address CALCcompLToidoid;"								  ]
[ 1156@0, "command",	  "calc",	  "==",				  "(left:str,right:str):bit address CALCcompEQstrstr;"								  ]
[ 1157@0, "command",	  "calc",	  "==",				  "(left:lng,right:lng):bit address CALCcompEQlnglng;"								  ]
[ 1158@0, "command",	  "calc",	  "==",				  "(left:lng,right:int):bit address CALCcompEQlngint;"								  ]
[ 1159@0, "command",	  "calc",	  "==",				  "(left:lng,right:sht):bit address CALCcompEQlngsht;"								  ]
[ 1160@0, "command",	  "calc",	  "==",				  "(left:lng,right:chr):bit address CALCcompEQlngchr;"								  ]
[ 1161@0, "command",	  "calc",	  "==",				  "(left:int,right:lng):bit address CALCcompEQintlng;"								  ]
[ 1162@0, "command",	  "calc",	  "==",				  "(left:int,right:int):bit address CALCcompEQintint;"								  ]
[ 1163@0, "command",	  "calc",	  "==",				  "(left:int,right:sht):bit address CALCcompEQintsht;"								  ]
[ 1164@0, "command",	  "calc",	  "==",				  "(left:int,right:chr):bit address CALCcompEQintchr;"								  ]
[ 1165@0, "command",	  "calc",	  "==",				  "(left:sht,right:lng):bit address CALCcompEQshtlng;"								  ]
[ 1166@0, "command",	  "calc",	  "==",				  "(left:sht,right:int):bit address CALCcompEQshtint;"								  ]
[ 1167@0, "command",	  "calc",	  "==",				  "(left:sht,right:sht):bit address CALCcompEQshtsht;"								  ]
[ 1168@0, "command",	  "calc",	  "==",				  "(left:sht,right:chr):bit address CALCcompEQshtchr;"								  ]
[ 1169@0, "command",	  "calc",	  "==",				  "(left:bit,right:lng):bit address CALCcompEQbitlng;"								  ]
[ 1170@0, "command",	  "calc",	  "==",				  "(left:bit,right:int):bit address CALCcompEQbitint;"								  ]
[ 1171@0, "command",	  "calc",	  "==",				  "(left:bit,right:sht):bit address CALCcompEQbitsht;"								  ]
[ 1172@0, "command",	  "calc",	  "==",				  "(left:bit,right:chr):bit address CALCcompEQbitchr;"								  ]
[ 1173@0, "command",	  "calc",	  "==",				  "(left:chr,right:lng):bit address CALCcompEQchrlng;"								  ]
[ 1174@0, "command",	  "calc",	  "==",				  "(left:chr,right:int):bit address CALCcompEQchrint;"								  ]
[ 1175@0, "command",	  "calc",	  "==",				  "(left:chr,right:sht):bit address CALCcompEQchrsht;"								  ]
[ 1176@0, "command",	  "calc",	  "==",				  "(left:chr,right:chr):bit address CALCcompEQchrchr;"								  ]
[ 1177@0, "command",	  "calc",	  "==",				  "(left:dbl,right:dbl):bit address CALCcompEQdbldbl;"								  ]
[ 1178@0, "command",	  "calc",	  "==",				  "(left:flt,right:dbl):bit address CALCcompEQfltdbl;"								  ]
[ 1179@0, "command",	  "calc",	  "==",				  "(left:flt,right:flt):bit address CALCcompEQfltflt;"								  ]
[ 1180@0, "command",	  "calc",	  "==",				  "(left:oid,right:oid):bit address CALCcompEQoidoid;"								  ]
[ 1181@0, "command",	  "calc",	  ">>",				  "(left:lng,right:int):lng address CALCbinaryRSHlngint;"							  ]
[ 1182@0, "command",	  "calc",	  ">>",				  "(left:int,right:int):int address CALCbinaryRSHintint;"							  ]
[ 1183@0, "command",	  "calc",	  ">>",				  "(left:sht,right:int):sht address CALCbinaryRSHshtint;"							  ]
[ 1184@0, "command",	  "calc",	  ">>",				  "(left:chr,right:int):chr address CALCbinaryRSHchrint;"							  ]
[ 1185@0, "command",	  "calc",	  ">",				  "(left:str,right:str):bit address CALCcompGTstrstr;"								  ]
[ 1186@0, "command",	  "calc",	  ">=",				  "(left:str,right:str):bit address CALCcompGEstrstr;"								  ]
[ 1187@0, "command",	  "calc",	  ">",				  "(left:lng,right:lng):bit address CALCcompGTlnglng;"								  ]
[ 1188@0, "command",	  "calc",	  ">=",				  "(left:lng,right:lng):bit address CALCcompGElnglng;"								  ]
[ 1189@0, "command",	  "calc",	  ">",				  "(left:lng,right:int):bit address CALCcompGTlngint;"								  ]
[ 1190@0, "command",	  "calc",	  ">=",				  "(left:lng,right:int):bit address CALCcompGElngint;"								  ]
[ 1191@0, "command",	  "calc",	  ">",				  "(left:lng,right:sht):bit address CALCcompGTlngsht;"								  ]
[ 1192@0, "command",	  "calc",	  ">=",				  "(left:lng,right:sht):bit address CALCcompGElngsht;"								  ]
[ 1193@0, "command",	  "calc",	  ">",				  "(left:lng,right:chr):bit address CALCcompGTlngchr;"								  ]
[ 1194@0, "command",	  "calc",	  ">=",				  "(left:lng,right:chr):bit address CALCcompGElngchr;"								  ]
[ 1195@0, "command",	  "calc",	  ">",				  "(left:int,right:lng):bit address CALCcompGTintlng;"								  ]
[ 1196@0, "command",	  "calc",	  ">=",				  "(left:int,right:lng):bit address CALCcompGEintlng;"								  ]
[ 1197@0, "command",	  "calc",	  ">",				  "(left:int,right:int):bit address CALCcompGTintint;"								  ]
[ 1198@0, "command",	  "calc",	  ">=",				  "(left:int,right:int):bit address CALCcompGEintint;"								  ]
[ 1199@0, "command",	  "calc",	  ">",				  "(left:int,right:sht):bit address CALCcompGTintsht;"								  ]
[ 1200@0, "command",	  "calc",	  ">=",				  "(left:int,right:sht):bit address CALCcompGEintsht;"								  ]
[ 1201@0, "command",	  "calc",	  ">",				  "(left:int,right:chr):bit address CALCcompGTintchr;"								  ]
[ 1202@0, "command",	  "calc",	  ">=",				  "(left:int,right:chr):bit address CALCcompGEintchr;"								  ]
[ 1203@0, "command",	  "calc",	  ">",				  "(left:sht,right:lng):bit address CALCcompGTshtlng;"								  ]
[ 1204@0, "command",	  "calc",	  ">=",				  "(left:sht,right:lng):bit address CALCcompGEshtlng;"								  ]
[ 1205@0, "command",	  "calc",	  ">",				  "(left:sht,right:int):bit address CALCcompGTshtint;"								  ]
[ 1206@0, "command",	  "calc",	  ">=",				  "(left:sht,right:int):bit address CALCcompGEshtint;"								  ]
[ 1207@0, "command",	  "calc",	  ">",				  "(left:sht,right:sht):bit address CALCcompGTshtsht;"								  ]
[ 1208@0, "command",	  "calc",	  ">=",				  "(left:sht,right:sht):bit address CALCcompGEshtsht;"								  ]
[ 1209@0, "command",	  "calc",	  ">",				  "(left:sht,right:chr):bit address CALCcompGTshtchr;"								  ]
[ 1210@0, "command",	  "calc",	  ">=",				  "(left:sht,right:chr):bit address CALCcompGEshtchr;"								  ]
[ 1211@0, "command",	  "calc",	  ">",				  "(left:chr,right:lng):bit address CALCcompGTchrlng;"								  ]
[ 1212@0, "command",	  "calc",	  ">=",				  "(left:chr,right:lng):bit address CALCcompGEchrlng;"								  ]
[ 1213@0, "command",	  "calc",	  ">",				  "(left:chr,right:int):bit address CALCcompGTchrint;"								  ]
[ 1214@0, "command",	  "calc",	  ">=",				  "(left:chr,right:int):bit address CALCcompGEchrint;"								  ]
[ 1215@0, "command",	  "calc",	  ">",				  "(left:chr,right:sht):bit address CALCcompGTchrsht;"								  ]
[ 1216@0, "command",	  "calc",	  ">=",				  "(left:chr,right:sht):bit address CALCcompGEchrsht;"								  ]
[ 1217@0, "command",	  "calc",	  ">",				  "(left:chr,right:chr):bit address CALCcompGTchrchr;"								  ]
[ 1218@0, "command",	  "calc",	  ">=",				  "(left:chr,right:chr):bit address CALCcompGEchrchr;"								  ]
[ 1219@0, "command",	  "calc",	  ">",				  "(left:dbl,right:dbl):bit address CALCcompGTdbldbl;"								  ]
[ 1220@0, "command",	  "calc",	  ">=",				  "(left:dbl,right:dbl):bit address CALCcompGEdbldbl;"								  ]
[ 1221@0, "command",	  "calc",	  ">",				  "(left:flt,right:dbl):bit address CALCcompGTfltdbl;"								  ]
[ 1222@0, "command",	  "calc",	  ">=",				  "(left:flt,right:dbl):bit address CALCcompGEfltdbl;"								  ]
[ 1223@0, "command",	  "calc",	  ">",				  "(left:flt,right:flt):bit address CALCcompGTfltflt;"								  ]
[ 1224@0, "command",	  "calc",	  ">=",				  "(left:flt,right:flt):bit address CALCcompGEfltflt;"								  ]
[ 1225@0, "command",	  "calc",	  ">",				  "(left:oid,right:oid):bit address CALCcompGToidoid;"								  ]
[ 1226@0, "command",	  "calc",	  ">=",				  "(left:oid,right:oid):bit address CALCcompGEoidoid;"								  ]
[ 1227@0, "command",	  "calc",	  "and",			  "(left:lng,right:lng):lng address CALCbinaryANDlnglng;"							  ]
[ 1228@0, "command",	  "calc",	  "and",			  "(left:int,right:int):int address CALCbinaryANDintint;"							  ]
[ 1229@0, "command",	  "calc",	  "and",			  "(left:sht,right:sht):sht address CALCbinaryANDshtsht;"							  ]
[ 1230@0, "command",	  "calc",	  "and",			  "(left:chr,right:chr):chr address CALCbinaryANDchrchr;"							  ]
[ 1231@0, "command",	  "calc",	  "and",			  "(left:bit,right:bit):bit address CALCbinaryANDbit;"								  ]
[ 1232@0, "command",	  "calc",	  "abs",			  "(x:lng):lng address CALCunarylngABS;"									  ]
[ 1233@0, "command",	  "calc",	  "abs",			  "(x:int):int address CALCunaryintABS;"									  ]
[ 1234@0, "command",	  "calc",	  "abs",			  "(x:sht):sht address CALCunaryshtABS;"									  ]
[ 1235@0, "command",	  "calc",	  "abs",			  "(x:chr):chr address CALCunarychrABS;"									  ]
[ 1236@0, "command",	  "calc",	  "abs",			  "(x:flt):flt address CALCunaryfltABS;"									  ]
[ 1237@0, "command",	  "calc",	  "abs",			  "(x:dbl):dbl address CALCunarydblABS;"									  ]
[ 1238@0, "command",	  "calc",	  "bat",			  "(v:void):bat[:any_1,:any_2] address CALCnil2bat;"								  ]
[ 1239@0, "command",	  "calc",	  "bat",			  "(v:str):bat[:any_1,:any_2] address CALCstr2bat;"								  ]
[ 1240@0, "command",	  "calc",	  "bit",			  "(v:void):bit address CALCnil2bit;"										  ]
[ 1241@0, "command",	  "calc",	  "bit",			  "(v:str):bit address CALCstr2bit;"										  ]
[ 1242@0, "command",	  "calc",	  "bit",			  "(x:dbl):bit address CALCdbl2bit;"										  ]
[ 1243@0, "command",	  "calc",	  "bit",			  "(x:flt):bit address CALCflt2bit;"										  ]
[ 1244@0, "command",	  "calc",	  "bit",			  "(x:lng):bit address CALClng2bit;"										  ]
[ 1245@0, "command",	  "calc",	  "bit",			  "(x:int):bit address CALCint2bit;"										  ]
[ 1246@0, "command",	  "calc",	  "bit",			  "(x:sht):bit address CALCsht2bit;"										  ]
[ 1247@0, "command",	  "calc",	  "bit",			  "(x:bit):bit address CALCbit2bit;"										  ]
[ 1248@0, "command",	  "calc",	  "bit",			  "(x:oid):bit address CALCoid2bit;"										  ]
[ 1249@0, "command",	  "calc",	  "bit",			  "(x:dbl):bit address CALCdbl2bit;"										  ]
[ 1250@0, "command",	  "calc",	  "bit",			  "(x:flt):bit address CALCflt2bit;"										  ]
[ 1251@0, "command",	  "calc",	  "bit",			  "(x:lng):bit address CALClng2bit;"										  ]
[ 1252@0, "command",	  "calc",	  "bit",			  "(x:int):bit address CALCint2bit;"										  ]
[ 1253@0, "command",	  "calc",	  "bit",			  "(x:sht):bit address CALCsht2bit;"										  ]
[ 1254@0, "command",	  "calc",	  "bit",			  "(x:bit):bit address CALCbit2bit;"										  ]
[ 1255@0, "command",	  "calc",	  "between",			  "(val:str,low:str,high:str):bit address CALCcompBetweenstr;"							  ]
[ 1256@0, "command",	  "calc",	  "between",			  "(val:lng,low:lng,high:lng):bit address CALCcompBetweenlng;"							  ]
[ 1257@0, "command",	  "calc",	  "between",			  "(val:lng,low:lng,high:lng):bit address CALCcompBetweenlng;"							  ]
[ 1258@0, "command",	  "calc",	  "between",			  "(val:lng,low:lng,high:lng):bit address CALCcompBetweenlng;"							  ]
[ 1259@0, "command",	  "calc",	  "between",			  "(val:lng,low:lng,high:lng):bit address CALCcompBetweenlng;"							  ]
[ 1260@0, "command",	  "calc",	  "between",			  "(val:int,low:int,high:int):bit address CALCcompBetweenint;"							  ]
[ 1261@0, "command",	  "calc",	  "between",			  "(val:int,low:int,high:int):bit address CALCcompBetweenint;"							  ]
[ 1262@0, "command",	  "calc",	  "between",			  "(val:int,low:int,high:int):bit address CALCcompBetweenint;"							  ]
[ 1263@0, "command",	  "calc",	  "between",			  "(val:int,low:int,high:int):bit address CALCcompBetweenint;"							  ]
[ 1264@0, "command",	  "calc",	  "between",			  "(val:sht,low:sht,high:sht):bit address CALCcompBetweensht;"							  ]
[ 1265@0, "command",	  "calc",	  "between",			  "(val:sht,low:sht,high:sht):bit address CALCcompBetweensht;"							  ]
[ 1266@0, "command",	  "calc",	  "between",			  "(val:sht,low:sht,high:sht):bit address CALCcompBetweensht;"							  ]
[ 1267@0, "command",	  "calc",	  "between",			  "(val:sht,low:sht,high:sht):bit address CALCcompBetweensht;"							  ]
[ 1268@0, "command",	  "calc",	  "between",			  "(val:chr,low:chr,high:chr):bit address CALCcompBetweenchr;"							  ]
[ 1269@0, "command",	  "calc",	  "between",			  "(val:chr,low:chr,high:chr):bit address CALCcompBetweenchr;"							  ]
[ 1270@0, "command",	  "calc",	  "between",			  "(val:chr,low:chr,high:chr):bit address CALCcompBetweenchr;"							  ]
[ 1271@0, "command",	  "calc",	  "between",			  "(val:chr,low:chr,high:chr):bit address CALCcompBetweenchr;"							  ]
[ 1272@0, "command",	  "calc",	  "between",			  "(val:dbl,low:dbl,high:dbl):bit address CALCcompBetweendbl;"							  ]
[ 1273@0, "command",	  "calc",	  "between",			  "(val:flt,low:flt,high:flt):bit address CALCcompBetweenflt;"							  ]
[ 1274@0, "command",	  "calc",	  "between",			  "(val:flt,low:flt,high:flt):bit address CALCcompBetweenflt;"							  ]
[ 1275@0, "command",	  "calc",	  "between",			  "(val:oid,low:oid,high:oid):bit address CALCcompBetweenoid;"							  ]
[ 1276@0, "command",	  "calc",	  "chr",			  "(v:void):chr address CALCnil2chr;"										  ]
[ 1277@0, "command",	  "calc",	  "chr",			  "(v:str):chr address CALCstr2chr;"										  ]
[ 1278@0, "command",	  "calc",	  "chr",			  "(x:lng):chr address CALClng2chr;"										  ]
[ 1279@0, "command",	  "calc",	  "chr",			  "(x:int):chr address CALCint2chr;"										  ]
[ 1280@0, "command",	  "calc",	  "chr",			  "(x:sht):chr address CALCsht2chr;"										  ]
[ 1281@0, "command",	  "calc",	  "chr",			  "(x:chr):chr address CALCchr2chr;"										  ]
[ 1282@0, "command",	  "calc",	  "chr",			  "(x:dbl):chr address CALCdbl2chr;"										  ]
[ 1283@0, "command",	  "calc",	  "chr",			  "(x:flt):chr address CALCflt2chr;"										  ]
[ 1284@0, "command",	  "calc",	  "chr",			  "(x:lng):chr address CALClng2chr;"										  ]
[ 1285@0, "command",	  "calc",	  "chr",			  "(x:int):chr address CALCint2chr;"										  ]
[ 1286@0, "command",	  "calc",	  "chr",			  "(x:sht):chr address CALCsht2chr;"										  ]
[ 1287@0, "command",	  "calc",	  "chr",			  "(x:bit):chr address CALCbit2chr;"										  ]
[ 1288@0, "command",	  "calc",	  "chr",			  "(x:oid):chr address CALCoid2chr;"										  ]
[ 1289@0, "command",	  "calc",	  "dbl",			  "(v:void):dbl address CALCnil2dbl;"										  ]
[ 1290@0, "command",	  "calc",	  "dbl",			  "(v:str):dbl address CALCstr2dbl;"										  ]
[ 1291@0, "command",	  "calc",	  "dbl",			  "(x:lng):dbl address CALClng2dbl;"										  ]
[ 1292@0, "command",	  "calc",	  "dbl",			  "(x:int):dbl address CALCint2dbl;"										  ]
[ 1293@0, "command",	  "calc",	  "dbl",			  "(x:sht):dbl address CALCsht2dbl;"										  ]
[ 1294@0, "command",	  "calc",	  "dbl",			  "(x:flt):dbl address CALCflt2dbl;"										  ]
[ 1295@0, "command",	  "calc",	  "dbl",			  "(x:dbl):dbl address CALCdbl2dbl;"										  ]
[ 1296@0, "command",	  "calc",	  "flt",			  "(v:void):flt address CALCnil2flt;"										  ]
[ 1297@0, "command",	  "calc",	  "flt",			  "(v:str):flt address CALCstr2flt;"										  ]
[ 1298@0, "command",	  "calc",	  "flt",			  "(x:lng):flt address CALClng2flt;"										  ]
[ 1299@0, "command",	  "calc",	  "flt",			  "(x:int):flt address CALCint2flt;"										  ]
[ 1300@0, "command",	  "calc",	  "flt",			  "(x:sht):flt address CALCsht2flt;"										  ]
[ 1301@0, "command",	  "calc",	  "flt",			  "(x:dbl):flt address CALCdbl2flt;"										  ]
[ 1302@0, "command",	  "calc",	  "flt",			  "(x:flt):flt address CALCflt2flt;"										  ]
[ 1303@0, "command",	  "calc",	  "getBAT",			  "(b:BAT):bat[:any_1,:any_2] address CALCbatid2bat;"								  ]
[ 1304@0, "command",	  "calc",	  "getBATidentifier",		  "(b:bat[:any_1,:any_2]):BAT address CALCbat2batid;"								  ]
[ 1305@0, "command",	  "calc",	  "int",			  "(v:void):int address CALCnil2int;"										  ]
[ 1306@0, "command",	  "calc",	  "int",			  "(v:str):int address CALCstr2int;"										  ]
[ 1307@0, "command",	  "calc",	  "ifthenelse",			  "(b:bit,t:any_1,tpe:any_1,f:any_1):any_1 address CALCswitchbit;"						  ]
[ 1308@0, "command",	  "calc",	  "int",			  "(x:dbl):int address CALCdbl2int;"										  ]
[ 1309@0, "command",	  "calc",	  "int",			  "(x:flt):int address CALCflt2int;"										  ]
[ 1310@0, "command",	  "calc",	  "int",			  "(x:lng):int address CALClng2int;"										  ]
[ 1311@0, "command",	  "calc",	  "int",			  "(x:int):int address CALCint2int;"										  ]
[ 1312@0, "command",	  "calc",	  "int",			  "(x:sht):int address CALCsht2int;"										  ]
[ 1313@0, "command",	  "calc",	  "int",			  "(x:bit):int address CALCbit2int;"										  ]
[ 1314@0, "command",	  "calc",	  "int",			  "(x:oid):int address CALCoid2int;"										  ]
[ 1315@0, "command",	  "calc",	  "inv",			  "(x:lng):lng address CALCunarychecklngINV;"									  ]
[ 1316@0, "command",	  "calc",	  "inv",			  "(x:int):int address CALCunarycheckintINV;"									  ]
[ 1317@0, "command",	  "calc",	  "inv",			  "(x:sht):sht address CALCunarycheckshtINV;"									  ]
[ 1318@0, "command",	  "calc",	  "inv",			  "(x:chr):chr address CALCunarycheckchrINV;"									  ]
[ 1319@0, "command",	  "calc",	  "inv",			  "(x:flt):flt address CALCunarycheckfltINV;"									  ]
[ 1320@0, "command",	  "calc",	  "inv",			  "(x:dbl):dbl address CALCunarycheckdblINV;"									  ]
[ 1321@0, "command",	  "calc",	  "isnotnil",			  "(v:void):bit address CALCisnotnil_void;"									  ]
[ 1322@0, "command",	  "calc",	  "isnil",			  "(v:void):bit address CALCisnil_void;"									  ]
[ 1323@0, "command",	  "calc",	  "isnotnil",			  "(v:str):bit address CALCisnotnil_str;"									  ]
[ 1324@0, "command",	  "calc",	  "isnil",			  "(v:str):bit address CALCisnil_str;"										  ]
[ 1325@0, "command",	  "calc",	  "isnotnil",			  "(v:dbl):bit address CALCisnotnil_dbl;"									  ]
[ 1326@0, "command",	  "calc",	  "isnil",			  "(v:dbl):bit address CALCisnil_dbl;"										  ]
[ 1327@0, "command",	  "calc",	  "isnotnil",			  "(v:lng):bit address CALCisnotnil_lng;"									  ]
[ 1328@0, "command",	  "calc",	  "isnil",			  "(v:lng):bit address CALCisnil_lng;"										  ]
[ 1329@0, "command",	  "calc",	  "isnotnil",			  "(v:flt):bit address CALCisnotnil_flt;"									  ]
[ 1330@0, "command",	  "calc",	  "isnil",			  "(v:flt):bit address CALCisnil_flt;"										  ]
[ 1331@0, "command",	  "calc",	  "isnotnil",			  "(v:oid):bit address CALCisnotnil_oid;"									  ]
[ 1332@0, "command",	  "calc",	  "isnil",			  "(v:oid):bit address CALCisnil_oid;"										  ]
[ 1333@0, "command",	  "calc",	  "isnotnil",			  "(v:int):bit address CALCisnotnil_int;"									  ]
[ 1334@0, "command",	  "calc",	  "isnil",			  "(v:int):bit address CALCisnil_int;"										  ]
[ 1335@0, "command",	  "calc",	  "isnotnil",			  "(v:sht):bit address CALCisnotnil_sht;"									  ]
[ 1336@0, "command",	  "calc",	  "isnil",			  "(v:sht):bit address CALCisnil_sht;"										  ]
[ 1337@0, "command",	  "calc",	  "isnotnil",			  "(v:bit):bit address CALCisnotnil_bit;"									  ]
[ 1338@0, "command",	  "calc",	  "isnil",			  "(v:bit):bit address CALCisnil_bit;"										  ]
[ 1339@0, "command",	  "calc",	  "isnotnil",			  "(v:chr):bit address CALCisnotnil_chr;"									  ]
[ 1340@0, "command",	  "calc",	  "isnil",			  "(v:chr):bit address CALCisnil_chr;"										  ]
[ 1341@0, "command",	  "calc",	  "lng",			  "(v:void):lng address CALCnil2lng;"										  ]
[ 1342@0, "command",	  "calc",	  "lng",			  "(v:str):lng address CALCstr2lng;"										  ]
[ 1343@0, "command",	  "calc",	  "lng",			  "(x:dbl):lng address CALCdbl2lng;"										  ]
[ 1344@0, "command",	  "calc",	  "lng",			  "(x:flt):lng address CALCflt2lng;"										  ]
[ 1345@0, "command",	  "calc",	  "lng",			  "(x:lng):lng address CALClng2lng;"										  ]
[ 1346@0, "command",	  "calc",	  "lng",			  "(x:int):lng address CALCint2lng;"										  ]
[ 1347@0, "command",	  "calc",	  "lng",			  "(x:sht):lng address CALCsht2lng;"										  ]
[ 1348@0, "command",	  "calc",	  "lng",			  "(x:bit):lng address CALCbit2lng;"										  ]
[ 1349@0, "command",	  "calc",	  "lng",			  "(x:oid):lng address CALCoid2lng;"										  ]
[ 1350@0, "command",	  "calc",	  "min",			  "(l:dbl,r:dbl):dbl address CALCbinaryMINdbl;"									  ]
[ 1351@0, "command",	  "calc",	  "max",			  "(l:dbl,r:dbl):dbl address CALCbinaryMAXdbl;"									  ]
[ 1352@0, "command",	  "calc",	  "min",			  "(l:lng,r:lng):lng address CALCbinaryMINlng;"									  ]
[ 1353@0, "command",	  "calc",	  "max",			  "(l:lng,r:lng):lng address CALCbinaryMAXlng;"									  ]
[ 1354@0, "command",	  "calc",	  "min",			  "(l:flt,r:flt):flt address CALCbinaryMINflt;"									  ]
[ 1355@0, "command",	  "calc",	  "max",			  "(l:flt,r:flt):flt address CALCbinaryMAXflt;"									  ]
[ 1356@0, "command",	  "calc",	  "min",			  "(l:oid,r:oid):oid address CALCbinaryMINoid;"									  ]
[ 1357@0, "command",	  "calc",	  "max",			  "(l:oid,r:oid):oid address CALCbinaryMAXoid;"									  ]
[ 1358@0, "command",	  "calc",	  "min",			  "(l:int,r:int):int address CALCbinaryMINint;"									  ]
[ 1359@0, "command",	  "calc",	  "max",			  "(l:int,r:int):int address CALCbinaryMAXint;"									  ]
[ 1360@0, "command",	  "calc",	  "min",			  "(l:sht,r:sht):sht address CALCbinaryMINsht;"									  ]
[ 1361@0, "command",	  "calc",	  "max",			  "(l:sht,r:sht):sht address CALCbinaryMAXsht;"									  ]
[ 1362@0, "command",	  "calc",	  "min",			  "(l:chr,r:chr):chr address CALCbinaryMINchr;"									  ]
[ 1363@0, "command",	  "calc",	  "max",			  "(l:chr,r:chr):chr address CALCbinaryMAXchr;"									  ]
[ 1364@0, "command",	  "calc",	  "newoid",			  "(incr:int):oid address CALCnewoidInc;"									  ]
[ 1365@0, "command",	  "calc",	  "newoid",			  "(incr:lng):oid address CALCnewoidInclng;"									  ]
[ 1366@0, "command",	  "calc",	  "newoid",			  "():oid address CALCnewoidBase;"										  ]
[ 1367@0, "command",	  "calc",	  "not",			  "(left:lng):lng address CALCunarylngNOT;"									  ]
[ 1368@0, "command",	  "calc",	  "not",			  "(left:int):int address CALCunaryintNOT;"									  ]
[ 1369@0, "command",	  "calc",	  "not",			  "(left:sht):sht address CALCunaryshtNOT;"									  ]
[ 1370@0, "command",	  "calc",	  "not",			  "(left:chr):chr address CALCunarychrNOT;"									  ]
[ 1371@0, "command",	  "calc",	  "not",			  "(left:bit):bit address CALCunarybitNOT;"									  ]
[ 1372@0, "command",	  "calc",	  "oid",			  "(v:void):oid address CALCnil2oid;"										  ]
[ 1373@0, "command",	  "calc",	  "oid",			  "(v:str):oid address CALCstr2oid;"										  ]
[ 1374@0, "command",	  "calc",	  "or",				  "(left:lng,right:lng):lng address CALCbinaryORlnglng;"							  ]
[ 1375@0, "command",	  "calc",	  "or",				  "(left:int,right:int):int address CALCbinaryORintint;"							  ]
[ 1376@0, "command",	  "calc",	  "or",				  "(left:sht,right:sht):sht address CALCbinaryORshtsht;"							  ]
[ 1377@0, "command",	  "calc",	  "or",				  "(left:chr,right:chr):chr address CALCbinaryORchrchr;"							  ]
[ 1378@0, "command",	  "calc",	  "or",				  "(left:bit,right:bit):bit address CALCbinaryORbit;"								  ]
[ 1379@0, "command",	  "calc",	  "oid",			  "(x:int):oid address CALCint2oid;"										  ]
[ 1380@0, "command",	  "calc",	  "oid",			  "(x:sht):oid address CALCsht2oid;"										  ]
[ 1381@0, "command",	  "calc",	  "oid",			  "(x:lng):oid address CALClng2oid;"										  ]
[ 1382@0, "command",	  "calc",	  "oid",			  "(x:oid):oid address CALCoid2oid;"										  ]
[ 1383@0, "command",	  "calc",	  "ptr",			  "(v:void):ptr address CALCnil2ptr;"										  ]
[ 1384@0, "command",	  "calc",	  "ptr",			  "(v:str):ptr address CALCstr2ptr;"										  ]
[ 1385@0, "command",	  "calc",	  "ptr",			  "(x:lng):ptr address CALClng2ptr;"										  ]
[ 1386@0, "command",	  "calc",	  "setoid",			  "():oid address CALCsetoidBase;"										  ]
[ 1387@0, "command",	  "calc",	  "setoid",			  "(base:oid):oid address CALCsetoidInc;"									  ]
[ 1388@0, "command",	  "calc",	  "setoid",			  "(v:oid):void address oidSetoidImpl;"										  ]
[ 1389@0, "command",	  "calc",	  "setoid",			  "(v:lng):void address lngSetoidImpl;"										  ]
[ 1390@0, "command",	  "calc",	  "setoid",			  "(v:int):void address intSetoidImpl;"										  ]
[ 1391@0, "command",	  "calc",	  "str",			  "(v:str):str address CALCstr2str;"										  ]
[ 1392@0, "command",	  "calc",	  "str",			  "(v:void):str address CALCnil2str;"										  ]
[ 1393@0, "command",	  "calc",	  "str",			  "(v:bat[:any_1,:any_2]):str address CALCbat2str;"								  ]
[ 1394@0, "command",	  "calc",	  "str",			  "(v:chr):str address CALCchr2str;"										  ]
[ 1395@0, "command",	  "calc",	  "str",			  "(v:ptr):str address CALCptr2str;"										  ]
[ 1396@0, "command",	  "calc",	  "str",			  "(v:bit):str address CALCbit2str;"										  ]
[ 1397@0, "command",	  "calc",	  "str",			  "(v:dbl):str address CALCdbl2str;"										  ]
[ 1398@0, "command",	  "calc",	  "str",			  "(v:flt):str address CALCflt2str;"										  ]
[ 1399@0, "command",	  "calc",	  "str",			  "(v:lng):str address CALClng2str;"										  ]
[ 1400@0, "command",	  "calc",	  "str",			  "(v:int):str address CALCint2str;"										  ]
[ 1401@0, "command",	  "calc",	  "sht",			  "(v:void):sht address CALCnil2sht;"										  ]
[ 1402@0, "command",	  "calc",	  "str",			  "(v:sht):str address CALCsht2str;"										  ]
[ 1403@0, "command",	  "calc",	  "sht",			  "(v:str):sht address CALCstr2sht;"										  ]
[ 1404@0, "command",	  "calc",	  "str",			  "(v:oid):str address CALCoid2str;"										  ]
[ 1405@0, "command",	  "calc",	  "str",			  "(x:dbl):str address CALCdbl2str;"										  ]
[ 1406@0, "command",	  "calc",	  "str",			  "(x:flt):str address CALCflt2str;"										  ]
[ 1407@0, "command",	  "calc",	  "str",			  "(x:lng):str address CALClng2str;"										  ]
[ 1408@0, "command",	  "calc",	  "str",			  "(x:int):str address CALCint2str;"										  ]
[ 1409@0, "command",	  "calc",	  "str",			  "(x:sht):str address CALCsht2str;"										  ]
[ 1410@0, "command",	  "calc",	  "sht",			  "(x:dbl):sht address CALCdbl2sht;"										  ]
[ 1411@0, "command",	  "calc",	  "sht",			  "(x:flt):sht address CALCflt2sht;"										  ]
[ 1412@0, "command",	  "calc",	  "sht",			  "(x:lng):sht address CALClng2sht;"										  ]
[ 1413@0, "command",	  "calc",	  "sht",			  "(x:int):sht address CALCint2sht;"										  ]
[ 1414@0, "command",	  "calc",	  "sht",			  "(x:sht):sht address CALCsht2sht;"										  ]
[ 1415@0, "command",	  "calc",	  "sht",			  "(x:bit):sht address CALCbit2sht;"										  ]
[ 1416@0, "command",	  "calc",	  "sht",			  "(x:oid):sht address CALCoid2sht;"										  ]
[ 1417@0, "command",	  "calc",	  "void",			  "(v:lng):void address CALClng2void;"										  ]
[ 1418@0, "command",	  "calc",	  "void",			  "(v:sht):void address CALCsht2void;"										  ]
[ 1419@0, "command",	  "calc",	  "void",			  "(v:int):void address CALCint2void;"										  ]
[ 1420@0, "command",	  "calc",	  "void",			  "(v:void):void address CALCnil2void;"										  ]
[ 1421@0, "command",	  "calc",	  "xor",			  "(left:lng,right:lng):lng address CALCbinaryXORlnglng;"							  ]
[ 1422@0, "command",	  "calc",	  "xor",			  "(left:int,right:int):int address CALCbinaryXORintint;"							  ]
[ 1423@0, "command",	  "calc",	  "xor",			  "(left:sht,right:sht):sht address CALCbinaryXORshtsht;"							  ]
[ 1424@0, "command",	  "calc",	  "xor",			  "(left:chr,right:chr):chr address CALCbinaryXORchrchr;"							  ]
[ 1425@0, "command",	  "calc",	  "xor",			  "(left:bit,right:bit):bit address CALCbinaryXORbit;"								  ]
[ 1426@0, "command",	  "algebra",	  "antijoin",			  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_4]):bat[:any_1,:any_4] address ALGantijoin;"			  ]
[ 1427@0, "function",	  "algebra",	  "betweenOO",			  "(b:bat[:any_1,:any_2],l:any_2,h:any_2):bat[:any_1,:any_2];"							  ]
[ 1428@0, "function",	  "algebra",	  "betweenOC",			  "(b:bat[:any_1,:any_2],l:any_2,h:any_2):bat[:any_1,:any_2];"							  ]
[ 1429@0, "function",	  "algebra",	  "betweenCO",			  "(b:bat[:any_1,:any_2],l:any_2,h:any_2):bat[:any_1,:any_2];"							  ]
[ 1430@0, "function",	  "algebra",	  "between",			  "(b:bat[:any_1,:any_2],l:any_2,h:any_2):bat[:any_1,:any_2];"							  ]
[ 1431@0, "command",	  "algebra",	  "bandjoin",			  "(outer:bat[:any_1,:any_2],inner:bat[:any_2,:any_3],minus:any_2,plus:any_2):bat[:any_1,:any_3] address ALGbandjoin;"  ]
[ 1432@0, "command",	  "algebra",	  "copy",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] address ALGcopy;"							  ]
[ 1433@0, "command",	  "algebra",	  "difference",			  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] address ALGsdiff;"			  ]
[ 1434@0, "command",	  "algebra",	  "exist",			  "(b:bat[:any_1,:any_2],h:any_1,t:any_2):bit address ALGexistBUN;"						  ]
[ 1435@0, "command",	  "algebra",	  "exist",			  "(b:bat[:any_1,:any_2],h:any_1):bit address ALGexist;"							  ]
[ 1436@0, "command",	  "algebra",	  "fetchjoin",			  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] address ALGfetchjoin;"			  ]
[ 1437@0, "command",	  "algebra",	  "fragment",			  "(b:bat[:any_1,:any_2],hlow:any_1,hhigh:any_1,tlow:any_2,thigh:any_2):bat[:any_1,:any_2] address ALGfragment;"  ]
[ 1438@0, "command",	  "algebra",	  "fetch",			  "(b:bat[:any_1,:any_2],s:bat[:oid,:any_3]):bat[:any_1,:any_2] address ALGfetchbat;"				  ]
[ 1439@0, "command",	  "algebra",	  "fetch",			  "(b:bat[:any_1,:any_2],s:bat[:lng,:any_3]):bat[:any_1,:any_2] address ALGfetchbat;"				  ]
[ 1440@0, "command",	  "algebra",	  "fetch",			  "(b:bat[:any_1,:any_2],s:bat[:int,:any_3]):bat[:any_1,:any_2] address ALGfetchbat;"				  ]
[ 1441@0, "command",	  "algebra",	  "fetch",			  "(b:bat[:any_2,:any_1],x:int):any_1 address ALGfetchint;"							  ]
[ 1442@0, "command",	  "algebra",	  "fetch",			  "(b:bat[:any_2,:any_1],x:lng):any_1 address ALGfetch;"							  ]
[ 1443@0, "command",	  "algebra",	  "fetch",			  "(b:bat[:any_2,:any_1],x:oid):any_1 address ALGfetchoid;"							  ]
[ 1444@0, "command",	  "algebra",	  "find",			  "(b:bat[:any_1,:any_2],h:any_1):any_2 address ALGfind;"							  ]
[ 1445@0, "command",	  "algebra",	  "hashsplit",			  "(b:bat[:any_1,:any_2],buckects:int):bat[:int,:BAT] address ALGhashsplit;"					  ]
[ 1446@0, "command",	  "algebra",	  "hashjoin",			  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] address ALGhashjoin;"			  ]
[ 1447@0, "command",	  "algebra",	  "indexjoin",			  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] address ALGindexjoin;"			  ]
[ 1448@0, "command",	  "algebra",	  "intersect",			  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] address ALGsintersect;"		  ]
[ 1449@0, "pattern",	  "algebra",	  "joinPath",			  "(b:bat[:any_1,:any_2],aliasRemoval:bat[:any_2,:any_3]...):bat[:any_1,:any_3] address QOTjoinPath;"		  ]
[ 1450@0, "command",	  "algebra",	  "join",			  "(left:bat[:any_1,:oid],right:bat[:void,:any_3],estimate:lng):bat[:any_1,:any_3] address ALGjoinestimate;"	  ]
[ 1451@0, "command",	  "algebra",	  "join",			  "(left:bat[:any_1,:void],right:bat[:oid,:any_3],estimate:lng):bat[:any_1,:any_3] address ALGjoinestimate;"	  ]
[ 1452@0, "command",	  "algebra",	  "join",			  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3],estimate:lng):bat[:any_1,:any_3] address ALGjoinestimate;"	  ]
[ 1453@0, "command",	  "algebra",	  "join",			  "(left:bat[:any_1,:oid],right:bat[:void,:any_3]):bat[:any_1,:any_3] address ALGjoin;"				  ]
[ 1454@0, "command",	  "algebra",	  "join",			  "(left:bat[:any_1,:void],right:bat[:oid,:any_3]):bat[:any_1,:any_3] address ALGjoin;"				  ]
[ 1455@0, "command",	  "algebra",	  "join",			  "(left:bat[:void,:any_1],right:bat[:any_1,:void]):bat[:void,:oid] address ALGjoin;"				  ]
[ 1456@0, "command",	  "algebra",	  "join",			  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] address ALGjoin;"			  ]
[ 1457@0, "command",	  "algebra",	  "kunion",			  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] address ALGkunion;"			  ]
[ 1458@0, "command",	  "algebra",	  "kdifference",		  "(left:bat[:void,:any_2],right:bat[:oid,:any]):bat[:oid,:any_2] address ALGkdiff;"				  ]
[ 1459@0, "command",	  "algebra",	  "kdifference",		  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any]):bat[:any_1,:any_2] address ALGkdiff;"			  ]
[ 1460@0, "command",	  "algebra",	  "kintersect",			  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any]):bat[:any_1,:any_2] address ALGsemijoin;"			  ]
[ 1461@0, "command",	  "algebra",	  "kunique",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] address ALGkunique;"						  ]
[ 1462@0, "command",	  "algebra",	  "like",			  "(b:bat[:any_1,:str],substr:str):bat[:any_1,:str] address ALGlike;"						  ]
[ 1463@0, "command",	  "algebra",	  "merge",			  "(b:bat[:oid,:oid]):bat[:lng,:oid] address ALGmerge;"								  ]
[ 1464@0, "command",	  "algebra",	  "markH",			  "(b:bat[:any_1,:any_2],base:oid):bat[:void,:any_1] address ALGmarkHead;"					  ]
[ 1465@0, "command",	  "algebra",	  "markH",			  "(b:bat[:void,:any_2]):bat[:void,:oid] address ALGmarkHead_default1;"						  ]
[ 1466@0, "command",	  "algebra",	  "markH",			  "(b:bat[:any_1,:any_2]):bat[:void,:any_1] address ALGmarkHead_default;"					  ]
[ 1467@0, "command",	  "algebra",	  "markT",			  "(b:bat[:void,:any_1]):bat[:oid,:void] address ALGtmark_default;"						  ]
[ 1468@0, "command",	  "algebra",	  "markT",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:void] address ALGtmark_default;"						  ]
[ 1469@0, "command",	  "algebra",	  "markT",			  "(b:bat[:void,:any_2],base:oid):bat[:oid,:void] address ALGtmark;"						  ]
[ 1470@0, "command",	  "algebra",	  "markT",			  "(b:bat[:any_1,:any_2],base:oid):bat[:any_1,:void] address ALGtmark;"						  ]
[ 1471@0, "command",	  "algebra",	  "mergejoin",			  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] address ALGmergejoin;"			  ]
[ 1472@0, "command",	  "algebra",	  "number",			  "(b:bat[:any_1,:any]):bat[:any_1,:int] address ALGnumber;"							  ]
[ 1473@0, "command",	  "algebra",	  "outerjoin",			  "(outer:bat[:any_1,:any_2],inner:bat[:any_2,:any_3],estimate:lng):bat[:any_1,:any_3] address ALGouterjoinestimate;"  ]
[ 1474@0, "command",	  "algebra",	  "outerjoin",			  "(outer:bat[:any_1,:void],inner:bat[:oid,:any_3]):bat[:any_1,:any_3] address ALGouterjoin;"			  ]
[ 1475@0, "command",	  "algebra",	  "outerjoin",			  "(outer:bat[:any_1,:oid],inner:bat[:void,:any_3]):bat[:any_1,:any_3] address ALGouterjoin;"			  ]
[ 1476@0, "command",	  "algebra",	  "outerjoin",			  "(outer:bat[:any_1,:any_2],inner:bat[:any_2,:any_3]):bat[:any_1,:any_3] address ALGouterjoin;"		  ]
[ 1477@0, "command",	  "algebra",	  "outercrossproduct",		  "(left:bat[:any_1,:any_2],right:bat[:any_3,:any_4]):bat[:any_1,:any_4] address ALGcross;"			  ]
[ 1478@0, "pattern",	  "algebra",	  "project",			  "(b:bat[:any_1,:any_3],val:bat[:any_1,:any_2]):bat[:any_1,:any_2] address CMDBBPproject;"			  ]
[ 1479@0, "pattern",	  "algebra",	  "project",			  "(b:bat[:any_1,:any_3],val:any_2):bat[:any_1,:any_2] address CMDBBPproject;"					  ]
[ 1480@0, "command",	  "algebra",	  "project",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:void] address CMDBBPprojectNil;"						  ]
[ 1481@0, "command",	  "algebra",	  "position",			  "(b:bat[:any_1,:any_2],val:any_1,tval:any_2):int address ALGpositionBUN;"					  ]
[ 1482@0, "command",	  "algebra",	  "position",			  "(b:bat[:any_1,:any_2],v:any_1):int address ALGposition;"							  ]
[ 1483@0, "command",	  "algebra",	  "split",			  "(b:bat[:lng,:oid]):bat[:oid,:oid] address ALGsplit;"								  ]
[ 1484@0, "command",	  "algebra",	  "sunion",			  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] address ALGsunion;"			  ]
[ 1485@0, "command",	  "algebra",	  "sdifference",		  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] address ALGsdiff;"			  ]
[ 1486@0, "command",	  "algebra",	  "semijoin",			  "(left:bat[:oid,:any_2],right:bat[:void,:any]):bat[:oid,:any_2] address ALGsemijoin;"				  ]
[ 1487@0, "command",	  "algebra",	  "semijoin",			  "(left:bat[:void,:any_2],right:bat[:oid,:any]):bat[:oid,:any_2] address ALGsemijoin;"				  ]
[ 1488@0, "command",	  "algebra",	  "semijoin",			  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any]):bat[:any_1,:any_2] address ALGsemijoin;"			  ]
[ 1489@0, "command",	  "algebra",	  "sintersect",			  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] address ALGsintersect;"		  ]
[ 1490@0, "command",	  "algebra",	  "sunique",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] address ALGsunique;"						  ]
[ 1491@0, "command",	  "algebra",	  "sortTH",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] address ALGthsort;"						  ]
[ 1492@0, "command",	  "algebra",	  "sortHT",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] address ALGhtsort;"						  ]
[ 1493@0, "command",	  "algebra",	  "sortT",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] address ALGtsort;"							  ]
[ 1494@0, "command",	  "algebra",	  "sort",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] address ALGhsort;"							  ]
[ 1495@0, "command",	  "algebra",	  "sample",			  "(b:bat[:any_1,:any_2],num:int):bat[:any_1,:any_2] address ALGsample;"					  ]
[ 1496@0, "command",	  "algebra",	  "slice",			  "(b:bat[:any_1,:any_2],x:int,y:int):bat[:any_1,:any_2] address ALGslice;"					  ]
[ 1497@0, "command",	  "algebra",	  "selectH",			  "(b:bat[:any_1,:any_2],value:any_1):bat[:any_1,:any_2] address ALGselect1Head;"				  ]
[ 1498@0, "command",	  "algebra",	  "selectH",			  "(b:bat[:any_1,:any_2],low:any_1,high:any_1,li:bit,hi:bit):bat[:any_1,:any_2] address ALGselectInclusiveHead;"  ]
[ 1499@0, "command",	  "algebra",	  "selectH",			  "(b:bat[:any_1,:any_2],low:any_1,high:any_1):bat[:any_1,:any_2] address ALGselectHead;"			  ]
[ 1500@0, "command",	  "algebra",	  "select",			  "(b:bat[:any_1,:any_2],value:any_2):bat[:any_1,:any_2] address ALGselect1;"					  ]
[ 1501@0, "command",	  "algebra",	  "select",			  "(b:bat[:any_1,:any_2],low:any_2,high:any_2,li:bit,hi:bit):bat[:any_1,:any_2] address ALGselectInclusive;"	  ]
[ 1502@0, "command",	  "algebra",	  "select",			  "(b:bat[:any_1,:any_2],low:any_2,high:any_2):bat[:any_1,:any_2] address ALGselect;"				  ]
[ 1503@0, "command",	  "algebra",	  "thetajoin",			  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3],opname:int,estimate:lng):bat[:any_1,:any_3] address ALGthetajoinEstimate;"  ]
[ 1504@0, "command",	  "algebra",	  "thetajoin",			  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3],opname:int):bat[:any_1,:any_3] address ALGthetajoin;"	  ]
[ 1505@0, "command",	  "algebra",	  "tunique",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] address ALGtunique;"						  ]
[ 1506@0, "command",	  "algebra",	  "topN",			  "(b:bat[:any_1,:any_2],top:lng):bat[:any_1,:any_2] address ALGtopN;"						  ]
[ 1507@0, "command",	  "algebra",	  "uhashsplit",			  "(b:bat[:any_1,:any_2],buckets:int):bat[:int,:BAT] address ALGuhashsplit;"					  ]
[ 1508@0, "command",	  "algebra",	  "union",			  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] address ALGsunion;"			  ]
[ 1509@0, "command",	  "algebra",	  "unique",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] address ALGsunique;"						  ]
[ 1510@0, "command",	  "algebra",	  "uselect",			  "(b:bat[:any_1,:any_2],value:any_2):bat[:any_1,:void] address ALGuselect1;"					  ]
[ 1511@0, "command",	  "algebra",	  "uselect",			  "(b:bat[:any_1,:any_2],low:any_2,high:any_2):bat[:any_1,:void] address ALGuselect;"				  ]
[ 1512@0, "command",	  "algebra",	  "uselect",			  "(b:bat[:any_1,:any_2],low:any_2,high:any_2,li:bit,hi:bit):bat[:any_1,:any_2] address ALGuselectInclusive;"	  ]
[ 1513@0, "command",	  "aggr",	  "avg",			  "(b:bat[:void,:dbl],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:oid,:dbl] address AX3aggrX3_avg3_dbl;"	  ]
[ 1514@0, "command",	  "aggr",	  "avg",			  "(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] address AX3aggrX3_avg3_dbl;"		  ]
[ 1515@0, "command",	  "aggr",	  "avg",			  "(b:bat[:void,:dbl],e:bat[:void,:any_1]):bat[:oid,:dbl] address AX3aggrX3_avg_dbl;"				  ]
[ 1516@0, "command",	  "aggr",	  "avg",			  "(b:bat[:oid,:dbl],e:bat[:oid,:any_1]):bat[:oid,:dbl] address AX3aggrX3_avg_dbl;"				  ]
[ 1517@0, "command",	  "aggr",	  "avg",			  "(b:bat[:void,:flt],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:oid,:dbl] address AX3aggrX3_avg3_flt;"	  ]
[ 1518@0, "command",	  "aggr",	  "avg",			  "(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] address AX3aggrX3_avg3_flt;"		  ]
[ 1519@0, "command",	  "aggr",	  "avg",			  "(b:bat[:void,:flt],e:bat[:void,:any_1]):bat[:oid,:dbl] address AX3aggrX3_avg_flt;"				  ]
[ 1520@0, "command",	  "aggr",	  "avg",			  "(b:bat[:oid,:flt],e:bat[:oid,:any_1]):bat[:oid,:dbl] address AX3aggrX3_avg_flt;"				  ]
[ 1521@0, "command",	  "aggr",	  "avg",			  "(b:bat[:void,:lng],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:oid,:dbl] address AX3aggrX3_avg3_lng;"	  ]
[ 1522@0, "command",	  "aggr",	  "avg",			  "(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] address AX3aggrX3_avg3_lng;"		  ]
[ 1523@0, "command",	  "aggr",	  "avg",			  "(b:bat[:void,:lng],e:bat[:void,:any_1]):bat[:oid,:dbl] address AX3aggrX3_avg_lng;"				  ]
[ 1524@0, "command",	  "aggr",	  "avg",			  "(b:bat[:oid,:lng],e:bat[:oid,:any_1]):bat[:oid,:dbl] address AX3aggrX3_avg_lng;"				  ]
[ 1525@0, "command",	  "aggr",	  "avg",			  "(b:bat[:void,:int],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:oid,:dbl] address AX3aggrX3_avg3_int;"	  ]
[ 1526@0, "command",	  "aggr",	  "avg",			  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] address AX3aggrX3_avg3_int;"		  ]
[ 1527@0, "command",	  "aggr",	  "avg",			  "(b:bat[:void,:int],e:bat[:void,:any_1]):bat[:oid,:dbl] address AX3aggrX3_avg_int;"				  ]
[ 1528@0, "command",	  "aggr",	  "avg",			  "(b:bat[:oid,:int],e:bat[:oid,:any_1]):bat[:oid,:dbl] address AX3aggrX3_avg_int;"				  ]
[ 1529@0, "command",	  "aggr",	  "avg",			  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:oid,:dbl] address AX3aggrX3_avg3_sht;"	  ]
[ 1530@0, "command",	  "aggr",	  "avg",			  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] address AX3aggrX3_avg3_sht;"		  ]
[ 1531@0, "command",	  "aggr",	  "avg",			  "(b:bat[:void,:sht],e:bat[:void,:any_1]):bat[:oid,:dbl] address AX3aggrX3_avg_sht;"				  ]
[ 1532@0, "command",	  "aggr",	  "avg",			  "(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:dbl] address AX3aggrX3_avg_sht;"				  ]
[ 1533@0, "command",	  "aggr",	  "count_no_nil",		  "(b:bat[:void,:any_1],g:bat[:void,:oid],e:bat[:void,:any_2]):bat[:oid,:int] address AX3count_no_nil3;"	  ]
[ 1534@0, "command",	  "aggr",	  "count_no_nil",		  "(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:int] address AX3count_no_nil3;"		  ]
[ 1535@0, "command",	  "aggr",	  "count",			  "(b:bat[:void,:any_1],g:bat[:void,:oid],e:bat[:void,:any_2]):bat[:void,:int] address AX3aggrX3_count3Nils;"	  ]
[ 1536@0, "command",	  "aggr",	  "count",			  "(b:bat[:void,:any_1],g:bat[:oid,:oid],e:bat[:void,:any_2]):bat[:void,:int] address AX3aggrX3_count3Nils;"	  ]
[ 1537@0, "command",	  "aggr",	  "count",			  "(b:bat[:void,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:void,:int] address AX3aggrX3_count3Nils;"	  ]
[ 1538@0, "command",	  "aggr",	  "count_no_nil",		  "(b:bat[:void,:any_1],e:bat[:void,:any_1]):bat[:oid,:int] address AX3count_no_nil2;"				  ]
[ 1539@0, "command",	  "aggr",	  "count_no_nil",		  "(b:bat[:oid,:any_1],e:bat[:oid,:any_1]):bat[:oid,:int] address AX3count_no_nil2;"				  ]
[ 1540@0, "command",	  "aggr",	  "count",			  "(b:bat[:void,:any_1],e:bat[:void,:any_2]):bat[:void,:int] address AX3aggrX3_count2Nils;"			  ]
[ 1541@0, "command",	  "aggr",	  "count",			  "(b:bat[:void,:any_1],e:bat[:oid,:any_2]):bat[:void,:int] address AX3aggrX3_count2Nils;"			  ]
[ 1542@0, "command",	  "aggr",	  "count",			  "(b:bat[:void,:any_1],g:bat[:void,:oid],e:bat[:void,:any_2],nonils:bit):bat[:void,:int] address AX3aggrX3_count3;"  ]
[ 1543@0, "command",	  "aggr",	  "count",			  "(b:bat[:void,:any_1],g:bat[:void,:oid],e:bat[:oid,:any_2],nonils:bit):bat[:void,:int] address AX3aggrX3_count3;"  ]
[ 1544@0, "command",	  "aggr",	  "count",			  "(b:bat[:void,:any_1],g:bat[:void,:oid],e:bat[:void,:any_2],nonils:bit):bat[:void,:int] address AX3aggrX3_count3;"  ]
[ 1545@0, "command",	  "aggr",	  "count",			  "(b:bat[:oid,:any_1],e:bat[:oid,:any_2],ignorenils:bit):bat[:oid,:int] address AX3aggrX3_count;"		  ]
[ 1546@0, "command",	  "aggr",	  "count",			  "(b:bat[:void,:any_1],e:bat[:void,:any_2],ignorenils:bit):bat[:void,:int] address AX3aggrX3_count;"		  ]
[ 1547@0, "command",	  "aggr",	  "cardinality",		  "(b:bat[:any_1,:any_2]):lng address ALGcard;"									  ]
[ 1548@0, "command",	  "aggr",	  "count_no_nil",		  "(b:bat[:any_1,:any_2]):int address ALGcount_no_nil;"								  ]
[ 1549@0, "command",	  "aggr",	  "count",			  "(b:bat[:any_1,:any],ignore_nils:bit):int address ALGcount_nil;"						  ]
[ 1550@0, "command",	  "aggr",	  "count",			  "(b:bat[:any_1,:any]):int address ALGcount_bat;"								  ]
[ 1551@0, "command",	  "aggr",	  "histogram",			  "(b:bat[:any_1,:any_2]):bat[:any_2,:int] address ALGhistogram;"						  ]
[ 1552@0, "command",	  "aggr",	  "max",			  "(b:bat[:void,:any_1],g:bat[:void,:oid],e:bat[:void,:any_2]):bat[:void,:any_1] address AX3aggrX3_max3;"	  ]
[ 1553@0, "command",	  "aggr",	  "max",			  "(b:bat[:void,:any_1],g:bat[:void,:oid],e:bat[:oid,:any_2]):bat[:void,:any_1] address AX3aggrX3_max3;"	  ]
[ 1554@0, "command",	  "aggr",	  "min",			  "(b:bat[:void,:any_1],g:bat[:void,:oid],e:bat[:void,:any_2]):bat[:void,:any_1] address AX3aggrX3_min3;"	  ]
[ 1555@0, "command",	  "aggr",	  "min",			  "(b:bat[:void,:any_1],g:bat[:void,:oid],e:bat[:oid,:any_2]):bat[:void,:any_1] address AX3aggrX3_min3;"	  ]
[ 1556@0, "command",	  "aggr",	  "max",			  "(b:bat[:oid,:any_1],e:bat[:oid,:any_2]):bat[:oid,:any_1] address AX3aggrX3_max;"				  ]
[ 1557@0, "command",	  "aggr",	  "max",			  "(b:bat[:void,:any_1],e:bat[:void,:any_2]):bat[:void,:any_1] address AX3aggrX3_max;"				  ]
[ 1558@0, "command",	  "aggr",	  "min",			  "(b:bat[:oid,:any_1],e:bat[:oid,:any_2]):bat[:oid,:any_1] address AX3aggrX3_min;"				  ]
[ 1559@0, "command",	  "aggr",	  "min",			  "(b:bat[:void,:any_1],e:bat[:void,:any_2]):bat[:void,:any_1] address AX3aggrX3_min;"				  ]
[ 1560@0, "command",	  "aggr",	  "min",			  "(b:bat[:any_1,:lng]):lng address ALGmin_lng;"								  ]
[ 1561@0, "command",	  "aggr",	  "min",			  "(b:bat[:any_1,:dbl]):dbl address ALGmin_dbl;"								  ]
[ 1562@0, "command",	  "aggr",	  "min",			  "(b:bat[:any_1,:flt]):flt address ALGmin_flt;"								  ]
[ 1563@0, "command",	  "aggr",	  "min",			  "(b:bat[:any_1,:int]):int address ALGmin_int;"								  ]
[ 1564@0, "command",	  "aggr",	  "min",			  "(b:bat[:any_1,:sht]):sht address ALGmin_sht;"								  ]
[ 1565@0, "command",	  "aggr",	  "max",			  "(b:bat[:any_1,:lng]):lng address ALGmax_lng;"								  ]
[ 1566@0, "command",	  "aggr",	  "max",			  "(b:bat[:any_1,:dbl]):dbl address ALGmax_dbl;"								  ]
[ 1567@0, "command",	  "aggr",	  "max",			  "(b:bat[:any_1,:flt]):flt address ALGmax_flt;"								  ]
[ 1568@0, "command",	  "aggr",	  "max",			  "(b:bat[:any_1,:int]):int address ALGmax_int;"								  ]
[ 1569@0, "command",	  "aggr",	  "max",			  "(b:bat[:any_1,:sht]):sht address ALGmax_sht;"								  ]
[ 1570@0, "command",	  "aggr",	  "max",			  "(b:bat[:any_1,:any_2]):any_2 address ALGmaxany;"								  ]
[ 1571@0, "command",	  "aggr",	  "min",			  "(b:bat[:any_1,:any_2]):any_2 address ALGminany;"								  ]
[ 1572@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:dbl],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:dbl] address AX3aggrX3_prod3_dbl_dbl;"	  ]
[ 1573@0, "command",	  "aggr",	  "product",			  "(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] address AX3aggrX3_prod3_dbl_dbl;"	  ]
[ 1574@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:dbl],e:bat[:oid,:any_1]):bat[:void,:dbl] address AX3aggrX3_prod3_dbl_dbl;"			  ]
[ 1575@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:flt],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:dbl] address AX3aggrX3_prod3_flt_dbl;"	  ]
[ 1576@0, "command",	  "aggr",	  "product",			  "(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] address AX3aggrX3_prod3_flt_dbl;"	  ]
[ 1577@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:flt],e:bat[:oid,:any_1]):bat[:void,:dbl] address AX3aggrX3_prod3_flt_dbl;"			  ]
[ 1578@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:flt],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:flt] address AX3aggrX3_prod3_flt_flt;"	  ]
[ 1579@0, "command",	  "aggr",	  "product",			  "(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:flt] address AX3aggrX3_prod3_flt_flt;"	  ]
[ 1580@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:flt],e:bat[:oid,:any_1]):bat[:void,:flt] address AX3aggrX3_prod3_flt_flt;"			  ]
[ 1581@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:lng],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:lng] address AX3aggrX3_prod3_lng_lng;"	  ]
[ 1582@0, "command",	  "aggr",	  "product",			  "(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] address AX3aggrX3_prod3_lng_lng;"	  ]
[ 1583@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:lng],e:bat[:oid,:any_1]):bat[:void,:lng] address AX3aggrX3_prod3_lng_lng;"			  ]
[ 1584@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:int],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:lng] address AX3aggrX3_prod3_int_lng;"	  ]
[ 1585@0, "command",	  "aggr",	  "product",			  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] address AX3aggrX3_prod3_int_lng;"	  ]
[ 1586@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:int],e:bat[:oid,:any_1]):bat[:void,:lng] address AX3aggrX3_prod3_int_lng;"			  ]
[ 1587@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:int],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:int] address AX3aggrX3_prod3_int_int;"	  ]
[ 1588@0, "command",	  "aggr",	  "product",			  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] address AX3aggrX3_prod3_int_int;"	  ]
[ 1589@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:int],e:bat[:oid,:any_1]):bat[:void,:int] address AX3aggrX3_prod3_int_int;"			  ]
[ 1590@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:lng] address AX3aggrX3_prod3_sht_lng;"	  ]
[ 1591@0, "command",	  "aggr",	  "product",			  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] address AX3aggrX3_prod3_sht_lng;"	  ]
[ 1592@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:sht],e:bat[:oid,:any_1]):bat[:void,:lng] address AX3aggrX3_prod3_sht_lng;"			  ]
[ 1593@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:int] address AX3aggrX3_prod3_sht_int;"	  ]
[ 1594@0, "command",	  "aggr",	  "product",			  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] address AX3aggrX3_prod3_sht_int;"	  ]
[ 1595@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:sht],e:bat[:oid,:any_1]):bat[:void,:int] address AX3aggrX3_prod3_sht_int;"			  ]
[ 1596@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:sht] address AX3aggrX3_prod3_sht_sht;"	  ]
[ 1597@0, "command",	  "aggr",	  "product",			  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:sht] address AX3aggrX3_prod3_sht_sht;"	  ]
[ 1598@0, "command",	  "aggr",	  "product",			  "(b:bat[:void,:sht],e:bat[:oid,:any_1]):bat[:void,:sht] address AX3aggrX3_prod3_sht_sht;"			  ]
[ 1599@0, "command",	  "aggr",	  "product",			  "(b:bat[:any_1,:dbl]):dbl address ALGprod_dbl_dbl;"								  ]
[ 1600@0, "command",	  "aggr",	  "product",			  "(b:bat[:any_1,:flt]):dbl address ALGprod_flt_dbl;"								  ]
[ 1601@0, "command",	  "aggr",	  "product",			  "(b:bat[:any_1,:flt]):flt address ALGprod_flt_flt;"								  ]
[ 1602@0, "command",	  "aggr",	  "product",			  "(b:bat[:any_1,:lng]):lng address ALGprod_lng_lng;"								  ]
[ 1603@0, "command",	  "aggr",	  "product",			  "(b:bat[:any_1,:int]):lng address ALGprod_int_lng;"								  ]
[ 1604@0, "command",	  "aggr",	  "product",			  "(b:bat[:any_1,:int]):int address ALGprod_int_int;"								  ]
[ 1605@0, "command",	  "aggr",	  "product",			  "(b:bat[:any_1,:sht]):lng address ALGprod_sht_lng;"								  ]
[ 1606@0, "command",	  "aggr",	  "product",			  "(b:bat[:any_1,:sht]):int address ALGprod_sht_int;"								  ]
[ 1607@0, "command",	  "aggr",	  "product",			  "(b:bat[:any_1,:sht]):sht address ALGprod_sht_sht;"								  ]
[ 1608@0, "command",	  "aggr",	  "size",			  "(b:bat[:void,:bit],e:bat[:void,:any_1]):bat[:void,:int] address AX3aggrX3_size;"				  ]
[ 1609@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:dbl],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:dbl] address AX3aggrX3_sum3_dbl_dbl;"	  ]
[ 1610@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:dbl],g:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:dbl] address AX3aggrX3_sum3_dbl_dbl;"	  ]
[ 1611@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:dbl],e:bat[:void,:any_1]):bat[:void,:dbl] address AX3aggrX3_sum_dbl_dbl;"			  ]
[ 1612@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:flt],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:dbl] address AX3aggrX3_sum3_flt_dbl;"	  ]
[ 1613@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:flt],g:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:dbl] address AX3aggrX3_sum3_flt_dbl;"	  ]
[ 1614@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:flt],e:bat[:void,:any_1]):bat[:void,:dbl] address AX3aggrX3_sum_flt_dbl;"			  ]
[ 1615@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:flt],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:flt] address AX3aggrX3_sum3_flt_flt;"	  ]
[ 1616@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:flt],g:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:flt] address AX3aggrX3_sum3_flt_flt;"	  ]
[ 1617@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:flt],e:bat[:void,:any_1]):bat[:void,:flt] address AX3aggrX3_sum_flt_flt;"			  ]
[ 1618@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:lng],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:lng] address AX3aggrX3_sum3_lng_lng;"	  ]
[ 1619@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:lng],g:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:lng] address AX3aggrX3_sum3_lng_lng;"	  ]
[ 1620@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:lng],e:bat[:void,:any_1]):bat[:void,:lng] address AX3aggrX3_sum_lng_lng;"			  ]
[ 1621@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:int],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:lng] address AX3aggrX3_sum3_int_lng;"	  ]
[ 1622@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:int],g:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:lng] address AX3aggrX3_sum3_int_lng;"	  ]
[ 1623@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:int],e:bat[:void,:any_1]):bat[:void,:lng] address AX3aggrX3_sum_int_lng;"			  ]
[ 1624@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:int],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:int] address AX3aggrX3_sum3_int_int;"	  ]
[ 1625@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:int],g:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:int] address AX3aggrX3_sum3_int_int;"	  ]
[ 1626@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:int],e:bat[:void,:any_1]):bat[:void,:int] address AX3aggrX3_sum_int_int;"			  ]
[ 1627@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:lng] address AX3aggrX3_sum3_sht_lng;"	  ]
[ 1628@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:lng] address AX3aggrX3_sum3_sht_lng;"	  ]
[ 1629@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:sht],e:bat[:void,:any_1]):bat[:void,:lng] address AX3aggrX3_sum_sht_lng;"			  ]
[ 1630@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:int] address AX3aggrX3_sum3_sht_int;"	  ]
[ 1631@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:int] address AX3aggrX3_sum3_sht_int;"	  ]
[ 1632@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:sht],e:bat[:void,:any_1]):bat[:void,:int] address AX3aggrX3_sum_sht_int;"			  ]
[ 1633@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:sht] address AX3aggrX3_sum3_sht_sht;"	  ]
[ 1634@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:sht] address AX3aggrX3_sum3_sht_sht;"	  ]
[ 1635@0, "command",	  "aggr",	  "sum",			  "(b:bat[:void,:sht],e:bat[:void,:any_1]):bat[:void,:sht] address AX3aggrX3_sum_sht_sht;"			  ]
[ 1636@0, "command",	  "aggr",	  "sum",			  "(b:bat[:any_1,:dbl]):dbl address ALGsum_dbl_dbl;"								  ]
[ 1637@0, "command",	  "aggr",	  "sum",			  "(b:bat[:any_1,:flt]):dbl address ALGsum_flt_dbl;"								  ]
[ 1638@0, "command",	  "aggr",	  "sum",			  "(b:bat[:any_1,:flt]):flt address ALGsum_flt_flt;"								  ]
[ 1639@0, "command",	  "aggr",	  "sum",			  "(b:bat[:any_1,:lng]):lng address ALGsum_lng_lng;"								  ]
[ 1640@0, "command",	  "aggr",	  "sum",			  "(b:bat[:any_1,:int]):lng address ALGsum_int_lng;"								  ]
[ 1641@0, "command",	  "aggr",	  "sum",			  "(b:bat[:any_1,:int]):int address ALGsum_int_int;"								  ]
[ 1642@0, "command",	  "aggr",	  "sum",			  "(b:bat[:any_1,:sht]):lng address ALGsum_sht_lng;"								  ]
[ 1643@0, "command",	  "aggr",	  "sum",			  "(b:bat[:any_1,:sht]):int address ALGsum_sht_int;"								  ]
[ 1644@0, "command",	  "aggr",	  "sum",			  "(b:bat[:any_1,:sht]):sht address ALGsum_sht_sht;"								  ]
[ 1645@0, "command",	  "pcre",	  "compile",			  "(pat:str):pcre address PCREcompile_wrap;"									  ]
[ 1646@0, "command",	  "pcre",	  "#del",			  "():void address pcre_del;"											  ]
[ 1647@0, "command",	  "pcre",	  "#fromstr",			  "():void address pcre_fromstr;"										  ]
[ 1648@0, "command",	  "pcre",	  "#heap",			  "():void address pcre_heap;"											  ]
[ 1649@0, "command",	  "pcre",	  "#hash",			  "():void address pcre_hash;"											  ]
[ 1650@0, "command",	  "pcre",	  "#length",			  "():void address pcre_length;"										  ]
[ 1651@0, "command",	  "pcre",	  "match",			  "(s:str,pat:str):bit address PCREmatch;"									  ]
[ 1652@0, "command",	  "pcre",	  "match",			  "(pat:pcre,s:str):bit address PCREexec_wrap;"									  ]
[ 1653@0, "command",	  "pcre",	  "null",			  "():void address pcre_null;"											  ]
[ 1654@0, "command",	  "pcre",	  "#nequal",			  "():void address pcre_nequal;"										  ]
[ 1655@0, "command",	  "pcre",	  "#put",			  "():void address pcre_put;"											  ]
[ 1656@0, "command",	  "pcre",	  "replace",			  "(orig:bat[:any_1,:str],pat:str,repl:str,flag:str):bat[:any_1,:str] address PCREreplace_bat_wrap;"		  ]
[ 1657@0, "command",	  "pcre",	  "replace",			  "(origin:str,pat:str,repl:str,flags:str):str address PCREreplace_wrap;"					  ]
[ 1658@0, "command",	  "pcre",	  "select",			  "(pat:str,strs:bat[:any_1,:str]):bat[:any_1,:str] address PCREselect;"					  ]
[ 1659@0, "command",	  "pcre",	  "#tostr",			  "():void address pcre_tostr;"											  ]
[ 1660@0, "command",	  "pcre",	  "uselect",			  "(pat:str,strs:bat[:any_1,:str]):bat[:any_1,:void] address PCREuselect;"					  ]
[ 1661@0, "command",	  "bat",	  "append",			  "(i:bat[:oid,:void],u:bat[:oid,:void]):void address BKCbat_append_oidvoid_bat_wrap;"				  ]
[ 1662@0, "command",	  "bat",	  "append",			  "(i:bat[:void,:any_1],u:bat[:oid,:any_1]):void address BKCbat_append_oid_bat_wrap;"				  ]
[ 1663@0, "command",	  "bat",	  "append",			  "(i:bat[:void,:oid],u:bat[:oid,:void]):void address BKCbat_append_oid_bat_wrap;"				  ]
[ 1664@0, "command",	  "bat",	  "append",			  "(i:bat[:void,:any_1],u:any_1):void address BKCbat_append_val_wrap;"						  ]
[ 1665@0, "command",	  "bat",	  "append",			  "(i:bat[:void,:any_1],u:bat[:void,:any_1]):void address BKCbat_append_void_bat_wrap;"				  ]
[ 1666@0, "command",	  "bat",	  "append",			  "(i:bat[:oid,:any_1],u:any_1):void address BKCoid_bat_append_val_wrap;"					  ]
[ 1667@0, "command",	  "bat",	  "append",			  "(i:bat[:oid,:any_1],u:bat[:oid,:any_1]):void address BKCoid_bat_append_oid_bat_wrap;"			  ]
[ 1668@0, "command",	  "bat",	  "delete",			  "(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2]):void address BKCdelete_bat_bun;"				  ]
[ 1669@0, "command",	  "bat",	  "delete",			  "(b:bat[:any_1,:any_2]):void address BKCdelete_all;"								  ]
[ 1670@0, "command",	  "bat",	  "delete",			  "(b:bat[:void,:any_2],h:oid):void address BKCdelete;"								  ]
[ 1671@0, "command",	  "bat",	  "delete",			  "(b:bat[:any_1,:any_2],h:any_1):void address BKCdelete;"							  ]
[ 1672@0, "command",	  "bat",	  "delete",			  "(b:bat[:void,:any_2],h:oid,t:any_2):void address BKCdelete_bun;"						  ]
[ 1673@0, "command",	  "bat",	  "delete",			  "(b:bat[:any_1,:any_2],h:any_1,t:any_2):void address BKCdelete_bun;"						  ]
[ 1674@0, "command",	  "bat",	  "getHeat",			  "(b:bat[:any_1,:any_2]):lng address BKCheat;"									  ]
[ 1675@0, "command",	  "bat",	  "getName",			  "(b:bat[:any_1,:any_2]):str address BKCgetBBPname;"								  ]
[ 1676@0, "command",	  "bat",	  "getDelta",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] address BKCgetDelta;"						  ]
[ 1677@0, "command",	  "bat",	  "getAlpha",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] address BKCgetAlpha;"						  ]
[ 1678@0, "command",	  "bat",	  "getBatSize",			  "(b:bat[:any_1,:any_2]):int address BKCbatsize;"								  ]
[ 1679@0, "command",	  "bat",	  "getSequenceBase",		  "(b:bat[:oid,:any_1]):oid address BKCgetSequenceBase;"							  ]
[ 1680@0, "command",	  "bat",	  "getSequenceBase",		  "(b:bat[:void,:any_1]):oid address BKCgetSequenceBase;"							  ]
[ 1681@0, "command",	  "bat",	  "getAccess",			  "(b:bat[:any_1,:any_2]):str address BKCgetAccess;"								  ]
[ 1682@0, "command",	  "bat",	  "getRole",			  "(bid:bat[:any_1,:any_2]):str address BKCgetRole;"								  ]
[ 1683@0, "command",	  "bat",	  "getTailType",		  "(b:bat[:any_1,:any_2]):str address BKCgetTailType;"								  ]
[ 1684@0, "command",	  "bat",	  "getHeadType",		  "(b:bat[:any_1,:any_2]):str address BKCgetHeadType;"								  ]
[ 1685@0, "command",	  "bat",	  "getCapacity",		  "(b:bat[:any_1,:any_2]):lng address BKCgetCapacity;"								  ]
[ 1686@0, "command",	  "bat",	  "hasReadMode",		  "(b:bat[:any_1,:any_2]):bit address BKChasReadMode;"								  ]
[ 1687@0, "command",	  "bat",	  "hasWriteMode",		  "(b:bat[:any_1,:any_2]):bit address BKChasWriteMode;"								  ]
[ 1688@0, "command",	  "bat",	  "hasAppendMode",		  "(b:bat[:any_1,:any_2]):bit address BKChasAppendMode;"							  ]
[ 1689@0, "command",	  "bat",	  "isSynced",			  "(b1:bat[:any_1,:any_2],b2:bat[:any_3,:any_4]):bit address BKCisSynced;"					  ]
[ 1690@0, "command",	  "bat",	  "isCached",			  "(b:bat[:any_1,:any_2]):bit address BKCisCached;"								  ]
[ 1691@0, "command",	  "bat",	  "isPersistent",		  "(b:bat[:any_1,:any_2]):bit address BKCisPersistent;"								  ]
[ 1692@0, "command",	  "bat",	  "isTransient",		  "(b:bat[:any_1,:any_2]):bit address BKCisTransient;"								  ]
[ 1693@0, "command",	  "bat",	  "insert",			  "(b:bat[:void,:BAT],z:bat[:any_1,:any_2]):void address BKCinsert_void_bun;"					  ]
[ 1694@0, "command",	  "bat",	  "insert",			  "(b:bat[:any_1,:BAT],v:any_1,z:bat[:any_3,:any_4]):void address BKCinsert_bun;"				  ]
[ 1695@0, "command",	  "bat",	  "insert",			  "(b:bat[:void,:any_1],v:any_1):void address BKCinsert_void_bun;"						  ]
[ 1696@0, "command",	  "bat",	  "insert",			  "(b:bat[:oid,:str],h:oid,t:str):void address BKCinsert_bun_oid_str;"						  ]
[ 1697@0, "command",	  "bat",	  "insert",			  "(b:bat[:void,:str],h:oid,t:str):void address BKCinsert_bun_oid_str;"						  ]
[ 1698@0, "command",	  "bat",	  "insert",			  "(b:bat[:void,:any_2],h:oid,t:any_2):void address BKCinsert_bun_oid_any;"					  ]
[ 1699@0, "command",	  "bat",	  "insert",			  "(b:bat[:oid,:any_2],h:oid,t:any_2):void address BKCinsert_bun_oid_any;"					  ]
[ 1700@0, "command",	  "bat",	  "insert",			  "(b:bat[:int,:int],h:int,t:int):void address BKCinsert_bun_int_int;"						  ]
[ 1701@0, "command",	  "bat",	  "insert",			  "(b:bat[:any_1,:any_2],h:any_1,t:any_2):void address BKCinsert_bun;"						  ]
[ 1702@0, "command",	  "bat",	  "insert",			  "(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2]):void address BKCinsert_bat;"					  ]
[ 1703@0, "command",	  "bat",	  "insert",			  "(b:bat[:oid,:any_2],src:bat[:void,:any_2]):void address BKCinsert_bat;"					  ]
[ 1704@0, "command",	  "bat",	  "insert",			  "(b:bat[:void,:any_2],src:bat[:oid,:any_2]):void address BKCinsert_bat;"					  ]
[ 1705@0, "command",	  "bat",	  "insert",			  "(b:bat[:any_1,:oid],src:bat[:any_1,:void]):void address BKCinsert_bat;"					  ]
[ 1706@0, "command",	  "bat",	  "isSortedReverse",		  "(b:bat[:any_1,:any_2]):bit address BKCisSortedReverse;"							  ]
[ 1707@0, "command",	  "bat",	  "isSorted",			  "(b:bat[:any_1,:any_2]):bit address BKCisSorted;"								  ]
[ 1708@0, "command",	  "bat",	  "isaSet",			  "(b:bat[:any_1,:any_1]):bit address BKCisaSet;"								  ]
[ 1709@0, "command",	  "bat",	  "isaKey",			  "(b:bat[:any_1,:any_2]):bit address BKCgetKey;"								  ]
[ 1710@0, "command",	  "bat",	  "info",			  "(b:bat[:any_1,:any_2]):bat[:str,:str] address BKCinfo;"							  ]
[ 1711@0, "command",	  "bat",	  "load",			  "(name:str):bat[:any_1,:any_2] address BKCload;"								  ]
[ 1712@0, "command",	  "bat",	  "mirror",			  "(b:bat[:void,:any]):bat[:void,:void] address BKCmirror;"							  ]
[ 1713@0, "command",	  "bat",	  "mirror",			  "(b:bat[:any_1,:any]):bat[:any_1,:any_1] address BKCmirror;"							  ]
[ 1714@0, "command",	  "bat",	  "new",			  "(nme:str):bat[:any_1,:any_2] address CMDBATderivedByName;"							  ]
[ 1715@0, "pattern",	  "bat",	  "new",			  "(b:bat[:any_1,:any_2],size:lng):bat[:any_1,:any_2] address CMDBATnewDerived;"				  ]
[ 1716@0, "pattern",	  "bat",	  "new",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] address CMDBATnewDerived;"						  ]
[ 1717@0, "pattern",	  "bat",	  "new",			  "(ht:void,tt:any_2,size:lng):bat[:void,:any_2] address CMDBATnew;"						  ]
[ 1718@0, "pattern",	  "bat",	  "new",			  "(ht:void,tt:any_2,size:int):bat[:void,:any_2] address CMDBATnew;"						  ]
[ 1719@0, "pattern",	  "bat",	  "new",			  "(ht:any_1,tt:any_2,size:lng):bat[:any_1,:any_2] address CMDBATnew;"						  ]
[ 1720@0, "pattern",	  "bat",	  "new",			  "(ht:any_1,tt:any_2,size:int):bat[:any_1,:any_2] address CMDBATnewint;"					  ]
[ 1721@0, "pattern",	  "bat",	  "new",			  "(ht:any_1,tt:any_2):bat[:any_1,:any_2] address CMDBATnew;"							  ]
[ 1722@0, "pattern",	  "bat",	  "new",			  "(ht:any_1,tt:any_2,b:bat[:any_3,:any_4]):bat[:any_1,:any_2] address CMDBATclone;"				  ]
[ 1723@0, "pattern",	  "bat",	  "pack",			  "(h:any_1,t:any_2):bat[:any_1,:any_2] address CMDbatpack;"							  ]
[ 1724@0, "command",	  "bat",	  "replace",			  "(o:bat[:void,:any_1],d:bat[:oid,:any_1]):void address BKCbat_replace_oid_bat_wrap;"				  ]
[ 1725@0, "command",	  "bat",	  "replace",			  "(b:bat[:void,:any_2],h:oid,t:any_2):void address BKCreplace_bun;"						  ]
[ 1726@0, "command",	  "bat",	  "replace",			  "(b:bat[:any_1,:any_2],h:any_1,t:any_2):void address BKCreplace_bun;"						  ]
[ 1727@0, "command",	  "bat",	  "replace",			  "(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2]):void address BKCreplace_bat;"					  ]
[ 1728@0, "command",	  "bat",	  "revert",			  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] address BKCrevert;"						  ]
[ 1729@0, "command",	  "bat",	  "reverse",			  "(b:bat[:any_1,:any_2]):bat[:any_2,:any_1] address BKCreverse;"						  ]
[ 1730@0, "pattern",	  "bat",	  "setGarbage",			  "(b:bat[:any_1,:any_2]):void address CMDbbpgarbage;"								  ]
[ 1731@0, "command",	  "bat",	  "setHash",			  "(b:bat[:any_1,:any_2],prop:bit):bit address BKCsetHash;"							  ]
[ 1732@0, "command",	  "bat",	  "setMemoryAdvise",		  "(b:bat[:any_1,:any_2],mode:int):bit address BKCmadvise2;"							  ]
[ 1733@0, "command",	  "bat",	  "setMemoryAdvise",		  "(b:bat[:any_1,:any_2],buns_mode:int,hheap_mode:int,theap_mode:int):bit address BKCmadvise;"			  ]
[ 1734@0, "command",	  "bat",	  "setMemoryMap",		  "(b:bat[:any_1,:any_2],mode:int):bit address BKCmmap2;"							  ]
[ 1735@0, "command",	  "bat",	  "setMemoryMap",		  "(b:bat[:any_1,:any_2],buns_mode:int,hheap_mode:int,theap_mode:int):bit address BKCmmap;"			  ]
[ 1736@0, "command",	  "bat",	  "setHot",			  "(b:bat[:any_1,:any_2]):void address BKChotBAT;"								  ]
[ 1737@0, "command",	  "bat",	  "setCold",			  "(b:bat[:any_1,:any_1]):void address BKCcoldBAT;"								  ]
[ 1738@0, "command",	  "bat",	  "save",			  "(nme:str):bit address BKCsave;"										  ]
[ 1739@0, "command",	  "bat",	  "save",			  "(nme:bat[:any_1,:any_2]):void address BKCsave2;"								  ]
[ 1740@0, "command",	  "bat",	  "setPersistent",		  "(b:bat[:any_1,:any_2]):void address BKCsetPersistent;"							  ]
[ 1741@0, "command",	  "bat",	  "setPersistent",		  "(b:bat[:any_1,:any_2],f:bit):void address BKCpersists;"							  ]
[ 1742@0, "command",	  "bat",	  "setTransient",		  "(b:bat[:any_1,:any_2]):void address BKCsetTransient;"							  ]
[ 1743@0, "command",	  "bat",	  "setColumn",			  "(b:bat[:any_1,:any_2],h:str,t:str):void address BKCsetColumns;"						  ]
[ 1744@0, "command",	  "bat",	  "setColumn",			  "(b:bat[:any_1,:any_2],t:str):void address BKCsetColumn;"							  ]
[ 1745@0, "command",	  "bat",	  "setRole",			  "(b:bat[:any_1,:any_2],h:str,t:str):void address BKCsetRole;"							  ]
[ 1746@0, "command",	  "bat",	  "setName",			  "(b:bat[:any_1,:any_2],s:str):void address BKCsetName;"							  ]
[ 1747@0, "command",	  "bat",	  "setSorted",			  "(b:bat[:any_1,:any_2]):bit address BKCsetSorted;"								  ]
[ 1748@0, "command",	  "bat",	  "setSequenceBase",		  "(b:bat[:void,:any_1],seqbase:void):bat[:void,:any_1] address BKCsetSequenceBaseNil;"				  ]
[ 1749@0, "command",	  "bat",	  "setSequenceBase",		  "(b:bat[:oid,:any_1],seqbase:oid):bat[:void,:any_1] address BKCsetSequenceBase;"				  ]
[ 1750@0, "command",	  "bat",	  "setSequenceBase",		  "(b:bat[:void,:any_1],seqbase:oid):bat[:void,:any_1] address BKCsetSequenceBase;"				  ]
[ 1751@0, "command",	  "bat",	  "setWriteMode",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] address BKCsetWriteMode;"						  ]
[ 1752@0, "command",	  "bat",	  "setReadMode",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] address BKCsetReadMode;"						  ]
[ 1753@0, "command",	  "bat",	  "setAppendMode",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] address BKCsetAppendMode;"						  ]
[ 1754@0, "command",	  "bat",	  "setAccess",			  "(b:bat[:any_1,:any_2],mode:str):bat[:any_1,:any_2] address BKCsetAccess;"					  ]
[ 1755@0, "command",	  "bat",	  "setSet",			  "(b:bat[:any_1,:any_2],mode:bit):bat[:any_1,:any_2] address BKCsetSet;"					  ]
[ 1756@0, "command",	  "bat",	  "setKey",			  "(b:bat[:any_1,:any_2],mode:bit):bat[:any_1,:any_2] address BKCsetkey;"					  ]
[ 1757@0, "pattern",	  "bat",	  "unpack",			  "(b:bat[:any_1,:any_2]) (h:any_1,t:any_2) address CMDbatunpack;"						  ]
[ 1758@0, "command",	  "bat",	  "unload",			  "(name:str):bit address BKCunload;"										  ]
[ 1759@0, "command",	  "date",	  "!=",				  "(v:date,w:date):bit address MTIMEdate_NEQ;"									  ]
[ 1760@0, "command",	  "date",	  "<=",				  "(v:date,w:date):bit address MTIMEdate_LE;"									  ]
[ 1761@0, "command",	  "date",	  "<",				  "(v:date,w:date):bit address MTIMEdate_LT;"									  ]
[ 1762@0, "command",	  "date",	  "=",				  "(v:date,w:date):bit address MTIMEdate_EQ;"									  ]
[ 1763@0, "command",	  "date",	  ">=",				  "(v:date,w:date):bit address MTIMEdate_GE;"									  ]
[ 1764@0, "command",	  "date",	  ">",				  "(v:date,w:date):bit address MTIMEdate_GT;"									  ]
[ 1765@0, "command",	  "date",	  "#fromstr",			  "():date address date_fromstr;"										  ]
[ 1766@0, "command",	  "date",	  "isnil",			  "(v:date):bit address MTIMEdate_isnil;"									  ]
[ 1767@0, "command",	  "date",	  "#tostr",			  "():str address date_tostr;"											  ]
[ 1768@0, "command",	  "daytime",	  "!=",				  "(v:daytime,w:daytime):bit address MTIMEdaytime_NEQ;"								  ]
[ 1769@0, "command",	  "daytime",	  "<=",				  "(v:daytime,w:daytime):bit address MTIMEdaytime_LE;"								  ]
[ 1770@0, "command",	  "daytime",	  "<",				  "(v:daytime,w:daytime):bit address MTIMEdaytime_LT;"								  ]
[ 1771@0, "command",	  "daytime",	  "=",				  "(v:daytime,w:daytime):bit address MTIMEdaytime_EQ;"								  ]
[ 1772@0, "command",	  "daytime",	  ">=",				  "(v:daytime,w:daytime):bit address MTIMEdaytime_GE;"								  ]
[ 1773@0, "command",	  "daytime",	  ">",				  "(v:daytime,w:daytime):bit address MTIMEdaytime_GT;"								  ]
[ 1774@0, "command",	  "daytime",	  "#fromstr",			  "():daytime address daytime_fromstr;"										  ]
[ 1775@0, "command",	  "daytime",	  "isnil",			  "(v:daytime):bit address MTIMEdaytime_isnil;"									  ]
[ 1776@0, "command",	  "daytime",	  "#tostr",			  "():str address daytime_tostr;"										  ]
[ 1777@0, "command",	  "timestamp",	  "!=",				  "(v:timestamp,w:timestamp):bit address MTIMEtimestamp_NEQ;"							  ]
[ 1778@0, "command",	  "timestamp",	  "<=",				  "(v:timestamp,w:timestamp):bit address MTIMEtimestamp_LE;"							  ]
[ 1779@0, "command",	  "timestamp",	  "<",				  "(v:timestamp,w:timestamp):bit address MTIMEtimestamp_LT;"							  ]
[ 1780@0, "command",	  "timestamp",	  "=",				  "(v:timestamp,w:timestamp):bit address MTIMEtimestamp_EQ;"							  ]
[ 1781@0, "command",	  "timestamp",	  ">=",				  "(v:timestamp,w:timestamp):bit address MTIMEtimestamp_GE;"							  ]
[ 1782@0, "command",	  "timestamp",	  ">",				  "(v:timestamp,w:timestamp):bit address MTIMEtimestamp_GT;"							  ]
[ 1783@0, "command",	  "timestamp",	  "epoch",			  "(t:timestamp):lng address MTIMEepoch2lng;"									  ]
[ 1784@0, "command",	  "timestamp",	  "epoch",			  "():timestamp address MTIMEepoch;"										  ]
[ 1785@0, "command",	  "timestamp",	  "#fromstr",			  "():timestamp address timestamp_fromstr;"									  ]
[ 1786@0, "command",	  "timestamp",	  "isnil",			  "(v:timestamp):bit address MTIMEtimestamp_isnil;"								  ]
[ 1787@0, "command",	  "timestamp",	  "#tostr",			  "():str address timestamp_tostr;"										  ]
[ 1788@0, "command",	  "timestamp",	  "unix_epoch",			  "():timestamp address MTIMEunix_epoch;"									  ]
[ 1789@0, "command",	  "tzone",	  "#fromstr",			  "():tzone address tzone_fromstr;"										  ]
[ 1790@0, "command",	  "tzone",	  "str",			  "():str address MTIMEtzone_tostr;"										  ]
[ 1791@0, "command",	  "tzone",	  "timestamp",			  "(secs:int):timestamp address MTIMEtimestamp;"								  ]
[ 1792@0, "command",	  "tzone",	  "#tostr",			  "():str address tzone_tostr;"											  ]
[ 1793@0, "command",	  "rule",	  "define",			  "(m:int,d:str,w:int,min:int):rule address MTIMEruleDef2;"							  ]
[ 1794@0, "command",	  "rule",	  "define",			  "(m:int,d:str,w:int,h:int,min:int):rule address MTIMEruleDef1;"						  ]
[ 1795@0, "command",	  "rule",	  "define",			  "(m:int,d:int,w:int,h:int,min:int):rule address MTIMEruleDef0;"						  ]
[ 1796@0, "command",	  "rule",	  "#fromstr",			  "():rule address rule_fromstr;"										  ]
[ 1797@0, "command",	  "rule",	  "#tostr",			  "():str address rule_tostr;"											  ]
[ 1798@0, "command",	  "mtime",	  "add",			  "(v:timestamp,msecs:lng):timestamp address MTIMEtimestamp_add;"						  ]
[ 1799@0, "command",	  "mtime",	  "adddays",			  "(value:date,days:int):date address MTIMEdate_adddays;"							  ]
[ 1800@0, "command",	  "mtime",	  "addmonths",			  "(value:date,months:int):date address MTIMEdate_addmonths;"							  ]
[ 1801@0, "command",	  "mtime",	  "addyears",			  "(value:date,years:int):date address MTIMEdate_addyears;"							  ]
[ 1802@0, "command",	  "mtime",	  "current_time",		  "():daytime address MTIMEcurrent_time;"									  ]
[ 1803@0, "command",	  "mtime",	  "current_date",		  "():date address MTIMEcurrent_date;"										  ]
[ 1804@0, "command",	  "mtime",	  "current_timestamp",		  "():timestamp address MTIMEcurrent_timestamp;"								  ]
[ 1805@0, "command",	  "mtime",	  "compute",			  "(r:rule,year:int):date address MTIMEcompute_rule_foryear;"							  ]
[ 1806@0, "command",	  "mtime",	  "daytime",			  "(h:int,m:int,s:int):daytime address MTIMEdaytime3;"								  ]
[ 1807@0, "command",	  "mtime",	  "daytime",			  "(h:int,m:int):daytime address MTIMEdaytime2;"								  ]
[ 1808@0, "command",	  "mtime",	  "daytime",			  "(h:int):daytime address MTIMEdaytime1;"									  ]
[ 1809@0, "command",	  "mtime",	  "dayname",			  "(day:int):str address MTIMEday_to_str;"									  ]
[ 1810@0, "command",	  "mtime",	  "daynum",			  "(day:str):int address MTIMEday_from_str;"									  ]
[ 1811@0, "command",	  "mtime",	  "dst",			  "(t:timestamp,v:tzone):bit address MTIMEtimestamp_inside_dst;"						  ]
[ 1812@0, "command",	  "mtime",	  "diff",			  "(val1:timestamp,val2:timestamp):lng address MTIMEtimestamp_diff;"						  ]
[ 1813@0, "command",	  "mtime",	  "dayofweek",			  "(d:date):int address MTIMEdate_extract_dayofweek;"								  ]
[ 1814@0, "command",	  "mtime",	  "dayofyear",			  "(d:date):int address MTIMEdate_extract_dayofyear;"								  ]
[ 1815@0, "command",	  "mtime",	  "diff",			  "(val1:date,val2:date):int address MTIMEdate_diff;"								  ]
[ 1816@0, "command",	  "mtime",	  "day",			  "(t:rule):int address MTIMErule_extract_day;"									  ]
[ 1817@0, "command",	  "mtime",	  "date",			  "(t:timestamp,v:tzone):date address MTIMEtimestamp_extract_date;"						  ]
[ 1818@0, "command",	  "mtime",	  "date",			  "(t:timestamp):date address MTIMEtimestamp_extract_date_default;"						  ]
[ 1819@0, "command",	  "mtime",	  "daytime",			  "(t:timestamp,v:tzone):daytime address MTIMEtimestamp_extract_daytime;"					  ]
[ 1820@0, "command",	  "mtime",	  "daytime",			  "(t:timestamp):daytime address MTIMEtimestamp_extract_daytime_default;"					  ]
[ 1821@0, "command",	  "mtime",	  "day",			  "(d:bat[:any_1,:date]):bat[:any_1,:int] address MTIMEdate_extract_day_bulk;"					  ]
[ 1822@0, "command",	  "mtime",	  "day",			  "(d:date):int address MTIMEdate_extract_day;"									  ]
[ 1823@0, "command",	  "mtime",	  "daytime",			  "(h:int,m:int,s:int,mi:int):daytime address MTIMEdaytime_create;"						  ]
[ 1824@0, "command",	  "mtime",	  "daytime",			  "(s:str):daytime address MTIMEdaytime_fromstr;"								  ]
[ 1825@0, "command",	  "mtime",	  "date",			  "(yr:int,mo:int,day:int):date address MTIMEdate_create;"							  ]
[ 1826@0, "command",	  "mtime",	  "date",			  "(s:str):date address MTIMEdate_fromstr;"									  ]
[ 1827@0, "command",	  "mtime",	  "date",			  "(_1:void):date address MTIMEnil2date;"									  ]
[ 1828@0, "command",	  "mtime",	  "date",			  "(_1:date):date address MTIMEdate2date;"									  ]
[ 1829@0, "command",	  "mtime",	  "date_add_month_interval",	  "(t:date,s:int):date address MTIMEdate_add_month_interval_wrap;"						  ]
[ 1830@0, "command",	  "mtime",	  "date_add_sec_interval",	  "(t:date,s:int):date address MTIMEdate_add_sec_interval_wrap;"						  ]
[ 1831@0, "command",	  "mtime",	  "date_sub_sec_interval",	  "(t:date,s:int):date address MTIMEdate_sub_sec_interval_wrap;"						  ]
[ 1832@0, "command",	  "mtime",	  "end_dst",			  "(t:tzone):rule address MTIMEtzone_extract_end;"								  ]
[ 1833@0, "command",	  "mtime",	  "hours",			  "(d:bat[:any_1,:date]):bat[:any_1,:int] address MTIMEdaytime_extract_hours_bulk;"				  ]
[ 1834@0, "command",	  "mtime",	  "hours",			  "(h:daytime):int address MTIMEdaytime_extract_hours;"								  ]
[ 1835@0, "command",	  "mtime",	  "msecs",			  "(d:int,h:int,m:int,s:int,ms:int):lng address MTIMEmsecs;"							  ]
[ 1836@0, "command",	  "mtime",	  "monthname",			  "(month:int):str address MTIMEmonth_to_str;"									  ]
[ 1837@0, "command",	  "mtime",	  "monthnum",			  "(month:str):int address MTIMEmonth_from_str;"								  ]
[ 1838@0, "command",	  "mtime",	  "minutes",			  "(t:rule):int address MTIMErule_extract_minutes;"								  ]
[ 1839@0, "command",	  "mtime",	  "month",			  "(t:rule):int address MTIMErule_extract_month;"								  ]
[ 1840@0, "command",	  "mtime",	  "minutes",			  "(t:tzone):int address MTIMEtzone_extract_minutes;"								  ]
[ 1841@0, "command",	  "mtime",	  "milliseconds",		  "(d:bat[:any_1,:date]):bat[:any_1,:int] address MTIMEdaytime_extract_milliseconds_bulk;"			  ]
[ 1842@0, "command",	  "mtime",	  "milliseconds",		  "(d:daytime):int address MTIMEdaytime_extract_milliseconds;"							  ]
[ 1843@0, "command",	  "mtime",	  "minutes",			  "(d:bat[:any_1,:date]):bat[:any_1,:int] address MTIMEdaytime_extract_minutes_bulk;"				  ]
[ 1844@0, "command",	  "mtime",	  "minutes",			  "(d:daytime):int address MTIMEdaytime_extract_minutes;"							  ]
[ 1845@0, "command",	  "mtime",	  "month",			  "(d:bat[:any_1,:date]):bat[:any_1,:int] address MTIMEdate_extract_month_bulk;"				  ]
[ 1846@0, "command",	  "mtime",	  "month",			  "(d:date):int address MTIMEdate_extract_month;"								  ]
[ 1847@0, "command",	  "mtime",	  "oldduration",		  "(format:str):int address MTIMEoldduration;"									  ]
[ 1848@0, "command",	  "mtime",	  "olddate",			  "(format:str):date address MTIMEolddate;"									  ]
[ 1849@0, "command",	  "mtime",	  "prelude",			  "():void address MTIMEprelude;"										  ]
[ 1850@0, "command",	  "mtime",	  "rule",			  "(mo:int,d:int,wkday:int,mi:int):rule address MTIMErule_create;"						  ]
[ 1851@0, "command",	  "mtime",	  "rule",			  "(s:str):rule address MTIMErule_fromstr;"									  ]
[ 1852@0, "command",	  "mtime",	  "start_dst",			  "(t:tzone):rule address MTIMEtzone_extract_start;"								  ]
[ 1853@0, "command",	  "mtime",	  "seconds",			  "(d:bat[:any_1,:date]):bat[:any_1,:int] address MTIMEdaytime_extract_seconds_bulk;"				  ]
[ 1854@0, "command",	  "mtime",	  "seconds",			  "(d:daytime):int address MTIMEdaytime_extract_seconds;"							  ]
[ 1855@0, "command",	  "mtime",	  "time_synonyms",		  "(allow:bit):void address MTIMEsynonyms;"									  ]
[ 1856@0, "command",	  "mtime",	  "timezone",			  "(name:str):tzone address MTIMEtimezone;"									  ]
[ 1857@0, "command",	  "mtime",	  "tzone",			  "(mi:int,s:rule,erule:rule):tzone address MTIMEtzone_create_dst;"						  ]
[ 1858@0, "command",	  "mtime",	  "tzone",			  "(s:lng):tzone address MTIMEtzone_create;"									  ]
[ 1859@0, "command",	  "mtime",	  "tzone",			  "(s:int):tzone address MTIMEtzone_create;"									  ]
[ 1860@0, "command",	  "mtime",	  "tzone",			  "(s:str):tzone address MTIMEtzone_fromstr;"									  ]
[ 1861@0, "command",	  "mtime",	  "timestamp",			  "(d:date,dt:daytime):timestamp address MTIMEtimestamp_create_default;"					  ]
[ 1862@0, "command",	  "mtime",	  "timestamp",			  "(d:date,dt:daytime,t:tzone):timestamp address MTIMEtimestamp_create;"					  ]
[ 1863@0, "command",	  "mtime",	  "tzone_local",		  "():tzone address MTIMEtzone_get_local;"									  ]
[ 1864@0, "command",	  "mtime",	  "tzone_local",		  "(t:tzone):void address MTIMEtzone_set_local;"								  ]
[ 1865@0, "command",	  "mtime",	  "weekofyear",			  "(d:date):int address MTIMEdate_extract_weekofyear;"								  ]
[ 1866@0, "command",	  "mtime",	  "weekday",			  "(t:rule):int address MTIMErule_extract_weekday;"								  ]
[ 1867@0, "command",	  "mtime",	  "year",			  "(d:bat[:any_1,:date]):bat[:any_1,:int] address MTIMEdate_extract_year_bulk;"					  ]
[ 1868@0, "command",	  "mtime",	  "year",			  "(d:date):int address MTIMEdate_extract_year;"								  ]
[ 1869@0, "command",	  "url",	  "#fromstr",			  "():url address URLfromString;"										  ]
[ 1870@0, "command",	  "url",	  "getRobotURL",		  "(u:url):str address URLgetRobotURL;"										  ]
[ 1871@0, "command",	  "url",	  "getUser",			  "(u:url):str address URLgetUser;"										  ]
[ 1872@0, "command",	  "url",	  "getQueryArg",		  "(u:url):bat[:str,:str] address URLgetQueryArg;"								  ]
[ 1873@0, "command",	  "url",	  "getQuery",			  "(u:url):str address URLgetQuery;"										  ]
[ 1874@0, "command",	  "url",	  "getProtocol",		  "(u:url):str address URLgetProtocol;"										  ]
[ 1875@0, "command",	  "url",	  "getPort",			  "(u:url):str address URLgetPort;"										  ]
[ 1876@0, "command",	  "url",	  "getHost",			  "(u:url):str address URLgetHost;"										  ]
[ 1877@0, "command",	  "url",	  "getFile",			  "(u:url):str address URLgetFile;"										  ]
[ 1878@0, "command",	  "url",	  "getExtension",		  "(u:url):str address URLgetExtension;"									  ]
[ 1879@0, "command",	  "url",	  "getDomain",			  "(u:url):str address URLgetDomain;"										  ]
[ 1880@0, "command",	  "url",	  "getDirectory",		  "(u:url):bat[:int,:str] address URLgetDirectory;"								  ]
[ 1881@0, "command",	  "url",	  "getContext",			  "(u:url):str address URLgetContext;"										  ]
[ 1882@0, "command",	  "url",	  "getContent",			  "(u:url):str address URLgetContent;"										  ]
[ 1883@0, "command",	  "url",	  "getBasename",		  "(u:url):str address URLgetBasename;"										  ]
[ 1884@0, "command",	  "url",	  "getAnchor",			  "(u:url):str address URLgetAnchor;"										  ]
[ 1885@0, "command",	  "url",	  "isaURL",			  "(u:url):bit address URLisaURL;"										  ]
[ 1886@0, "command",	  "url",	  "newurl",			  "(prot:str,host:str,fnme:str):url address URLnew3;"								  ]
[ 1887@0, "command",	  "url",	  "newurl",			  "(p:str,h:str,prt:int,f:str):url address URLnew4;"								  ]
[ 1888@0, "command",	  "url",	  "#tostr",			  "():str address URLtoString;"											  ]
[ 1889@0, "command",	  "url",	  "url",			  "(s:str):url address URLnew;"											  ]
[ 1890@0, "command",	  "str",	  "+",				  "(l:str,r:str):str address STRConcat;"									  ]
[ 1891@0, "command",	  "str",	  "STRprelude",			  "():void address strPrelude;"											  ]
[ 1892@0, "command",	  "str",	  "codeset",			  "():str address STRcodeset;"											  ]
[ 1893@0, "command",	  "str",	  "chrAt",			  "(s:str,index:int):chr address STRChrAt;"									  ]
[ 1894@0, "command",	  "str",	  "endsWith",			  "(s:str,suffix:str):bit address STRSuffix;"									  ]
[ 1895@0, "command",	  "str",	  "iconv",			  "(org:str,fromCs:str,toCs:str):str address STRIconv;"								  ]
[ 1896@0, "command",	  "str",	  "ltrim",			  "(s:str):str address STRLtrim;"										  ]
[ 1897@0, "command",	  "str",	  "length",			  "(s:str):int address STRLength;"										  ]
[ 1898@0, "command",	  "str",	  "nbytes",			  "(s:str):int address STRBytes;"										  ]
[ 1899@0, "command",	  "str",	  "rtrim",			  "(s:str):str address STRRtrim;"										  ]
[ 1900@0, "command",	  "str",	  "r_search",			  "(s:str,c:chr):int address STRReverseChrSearch;"								  ]
[ 1901@0, "command",	  "str",	  "r_search",			  "(s:str,c:str):int address STRReverseStrSearch;"								  ]
[ 1902@0, "command",	  "str",	  "substitute",			  "(s:str,src:str,dst:str,rep:bit):str address STRSubstitute;"							  ]
[ 1903@0, "command",	  "str",	  "search",			  "(s:str,c:chr):int address STRchrSearch;"									  ]
[ 1904@0, "command",	  "str",	  "search",			  "(s:str,c:str):int address STRstrSearch;"									  ]
[ 1905@0, "command",	  "str",	  "startsWith",			  "(s:str,prefix:str):bit address STRPrefix;"									  ]
[ 1906@0, "command",	  "str",	  "string",			  "(s:str,offset:int,count:int):str address STRSubString;"							  ]
[ 1907@0, "command",	  "str",	  "string",			  "(s:str,offset:int):str address STRTail;"									  ]
[ 1908@0, "command",	  "str",	  "str",			  "(s:str):str address STRtostr;"										  ]
[ 1909@0, "command",	  "str",	  "trim",			  "(s:str):str address STRStrip;"										  ]
[ 1910@0, "command",	  "str",	  "toUpper",			  "(s:str):str address STRUpper;"										  ]
[ 1911@0, "command",	  "str",	  "toLower",			  "(s:str):str address STRLower;"										  ]
[ 1912@0, "command",	  "str",	  "unicode",			  "(wchar:int):str address STRFromWChr;"									  ]
[ 1913@0, "command",	  "str",	  "unicodeAt",			  "(s:str,index:int):int address STRWChrAt;"									  ]
[ 1914@0, "command",	  "color",	  "blue",			  "(c:color):int address CLRblue;"										  ]
[ 1915@0, "command",	  "color",	  "cb",				  "(c:color):int address CLRcb;"										  ]
[ 1916@0, "command",	  "color",	  "cr",				  "(c:color):int address CLRcr;"										  ]
[ 1917@0, "command",	  "color",	  "color",			  "(s:str):color address CLRcolor;"										  ]
[ 1918@0, "command",	  "color",	  "#fromstr",			  "():color address color_fromstr;"										  ]
[ 1919@0, "command",	  "color",	  "green",			  "(c:color):int address CLRgreen;"										  ]
[ 1920@0, "command",	  "color",	  "hue",			  "(c:color):flt address CLRhue;"										  ]
[ 1921@0, "command",	  "color",	  "hsv",			  "(h:flt,s:flt,v:flt):color address CLRhsv;"									  ]
[ 1922@0, "command",	  "color",	  "hue",			  "(c:color):int address CLRhueInt;"										  ]
[ 1923@0, "command",	  "color",	  "luminance",			  "(c:color):int address CLRluminance;"										  ]
[ 1924@0, "command",	  "color",	  "printf",			  "(s:str,c:color):void address CLRprintf2;"									  ]
[ 1925@0, "command",	  "color",	  "print",			  "(c:color):void address CLRprintf;"										  ]
[ 1926@0, "command",	  "color",	  "red",			  "(c:color):int address CLRred;"										  ]
[ 1927@0, "command",	  "color",	  "rgb",			  "(r:int,g:int,b:int):color address CLRrgb;"									  ]
[ 1928@0, "command",	  "color",	  "saturation",			  "(c:color):flt address CLRsaturation;"									  ]
[ 1929@0, "command",	  "color",	  "saturation",			  "(c:color):int address CLRsaturationInt;"									  ]
[ 1930@0, "command",	  "color",	  "str",			  "(s:color):str address CLRstr;"										  ]
[ 1931@0, "command",	  "color",	  "#tostr",			  "():str address color_tostr;"											  ]
[ 1932@0, "command",	  "color",	  "value",			  "(c:color):flt address CLRvalue;"										  ]
[ 1933@0, "command",	  "color",	  "value",			  "(c:color):int address CLRvalueInt;"										  ]
[ 1934@0, "command",	  "color",	  "ycc",			  "(y:int,cr:int,cb:int):color address CLRycc;"									  ]
[ 1935@0, "command",	  "blob",	  "#convert",			  "():void address BLOBconvert;"										  ]
[ 1936@0, "command",	  "blob",	  "#del",			  "():void address BLOBdel;"											  ]
[ 1937@0, "command",	  "blob",	  "#fromstr",			  "():void address BLOBfromstr;"										  ]
[ 1938@0, "command",	  "blob",	  "#heap",			  "():void address BLOBheap;"											  ]
[ 1939@0, "command",	  "blob",	  "#hash",			  "():void address BLOBhash;"											  ]
[ 1940@0, "command",	  "blob",	  "#length",			  "():void address BLOBlength;"											  ]
[ 1941@0, "command",	  "blob",	  "nitems",			  "(b:blob):int address BLOBnitems;"										  ]
[ 1942@0, "command",	  "blob",	  "null",			  "():void address BLOBnull;"											  ]
[ 1943@0, "command",	  "blob",	  "#nequal",			  "():void address BLOBnequal;"											  ]
[ 1944@0, "command",	  "blob",	  "#put",			  "():void address BLOBput;"											  ]
[ 1945@0, "command",	  "blob",	  "toblob",			  "(v:str):blob address BLOBtoblob;"										  ]
[ 1946@0, "command",	  "blob",	  "tostring",			  "(v:blob,index:int):str address BLOBfromidx;"									  ]
[ 1947@0, "command",	  "blob",	  "tostring",			  "(v:blob):str address BLOBfromblob;"										  ]
[ 1948@0, "command",	  "blob",	  "#tostr",			  "():void address BLOBtostr;"											  ]
[ 1949@0, "command",	  "sqlblob",	  "#fromstr",			  "():void address SQLBLOBfromstr;"										  ]
[ 1950@0, "command",	  "sqlblob",	  "#tostr",			  "():void address SQLBLOBtostr;"										  ]
[ 1951@0, "command",	  "stream",	  "blocked",			  "(s:stream):stream address open_block_streamwrap;"								  ]
[ 1952@0, "command",	  "stream",	  "close",			  "(s:stream):void address stream_close_streamwrap;"								  ]
[ 1953@0, "command",	  "stream",	  "flush",			  "(s:stream):void address stream_flush_streamwrap;"								  ]
[ 1954@0, "command",	  "stream",	  "openWrite",			  "(s:stream):stream address stream_stream_wstreamwrap;"							  ]
[ 1955@0, "command",	  "stream",	  "openRead",			  "(s:stream):stream address stream_stream_rstreamwrap;"							  ]
[ 1956@0, "command",	  "stream",	  "openWrite",			  "(filename:str):stream address stream_open_wastreamwrap;"							  ]
[ 1957@0, "command",	  "stream",	  "openRead",			  "(filename:str):stream address stream_open_rastreamwrap;"							  ]
[ 1958@0, "command",	  "stream",	  "openWriteBytes",		  "(filename:str):stream address stream_open_wstreamwrap;"							  ]
[ 1959@0, "command",	  "stream",	  "openReadBytes",		  "(filename:str):stream address stream_open_rstreamwrap;"							  ]
[ 1960@0, "command",	  "stream",	  "readInt",			  "(s:stream):int address stream_readIntwrap;"									  ]
[ 1961@0, "command",	  "stream",	  "readStr",			  "(s:stream):str address stream_read_stringwrap;"								  ]
[ 1962@0, "command",	  "stream",	  "socketWrite",		  "(skt:int,name:str):stream address stream_socket_wastreamwrap;"						  ]
[ 1963@0, "command",	  "stream",	  "socketRead",			  "(skt:int,name:str):stream address stream_socket_rastreamwrap;"						  ]
[ 1964@0, "command",	  "stream",	  "socketWriteBytes",		  "(skt:int,name:str):stream address stream_socket_wstreamwrap;"						  ]
[ 1965@0, "command",	  "stream",	  "socketReadBytes",		  "(skt:int,name:str):stream address stream_socket_rstreamwrap;"						  ]
[ 1966@0, "command",	  "stream",	  "writeInt",			  "(s:stream,data:int):void address stream_writeIntwrap;"							  ]
[ 1967@0, "command",	  "stream",	  "writeStr",			  "(s:stream,data:str):void address stream_write_stringwrap;"							  ]
[ 1968@0, "command",	  "bstream",	  "create",			  "(s:stream,bufsize:int):bstream address bstream_create_wrapwrap;"						  ]
[ 1969@0, "command",	  "bstream",	  "destroy",			  "(s:bstream):void address bstream_destroy_wrapwrap;"								  ]
[ 1970@0, "command",	  "bstream",	  "read",			  "(s:bstream,size:int):int address bstream_read_wrapwrap;"							  ]
[ 1971@0, "command",	  "mmath",	  "atan2",			  "(x:dbl,y:dbl):dbl address MATHbinary_ATAN2dbl;"								  ]
[ 1972@0, "command",	  "mmath",	  "atan2",			  "(x:flt,y:flt):flt address MATHbinary_ATAN2flt;"								  ]
[ 1973@0, "command",	  "mmath",	  "atan",			  "(x:dbl):dbl address MATHunary_ATANdbl;"									  ]
[ 1974@0, "command",	  "mmath",	  "atan",			  "(x:flt):flt address MATHunary_ATANflt;"									  ]
[ 1975@0, "command",	  "mmath",	  "asin",			  "(x:dbl):dbl address MATHunary_ASINdbl;"									  ]
[ 1976@0, "command",	  "mmath",	  "asin",			  "(x:flt):flt address MATHunary_ASINflt;"									  ]
[ 1977@0, "command",	  "mmath",	  "acos",			  "(x:dbl):dbl address MATHunary_ACOSdbl;"									  ]
[ 1978@0, "command",	  "mmath",	  "acos",			  "(x:flt):flt address MATHunary_ACOSflt;"									  ]
[ 1979@0, "command",	  "mmath",	  "ceil",			  "(y:dbl):dbl address MATHunary_CEILdbl;"									  ]
[ 1980@0, "command",	  "mmath",	  "ceil",			  "(y:flt):flt address MATHunary_CEILflt;"									  ]
[ 1981@0, "command",	  "mmath",	  "cosh",			  "(x:dbl):dbl address MATHunary_COSHdbl;"									  ]
[ 1982@0, "command",	  "mmath",	  "cosh",			  "(x:flt):flt address MATHunary_COSHflt;"									  ]
[ 1983@0, "command",	  "mmath",	  "cos",			  "(x:dbl):dbl address MATHunary_COSdbl;"									  ]
[ 1984@0, "command",	  "mmath",	  "cos",			  "(x:flt):flt address MATHunary_COSflt;"									  ]
[ 1985@0, "command",	  "mmath",	  "exp",			  "(x:dbl):dbl address MATHunary_EXPdbl;"									  ]
[ 1986@0, "command",	  "mmath",	  "exp",			  "(x:flt):flt address MATHunary_EXPflt;"									  ]
[ 1987@0, "command",	  "mmath",	  "finite",			  "(d:dbl):bit address math_unary_FINITE;"									  ]
[ 1988@0, "command",	  "mmath",	  "fmod",			  "(y:dbl,x:dbl):dbl address MATHbinary_FMODdbl;"								  ]
[ 1989@0, "command",	  "mmath",	  "fmod",			  "(y:flt,x:flt):flt address MATHbinary_FMODflt;"								  ]
[ 1990@0, "command",	  "mmath",	  "floor",			  "(y:dbl):dbl address MATHunary_FLOORdbl;"									  ]
[ 1991@0, "command",	  "mmath",	  "floor",			  "(y:flt):flt address MATHunary_FLOORflt;"									  ]
[ 1992@0, "command",	  "mmath",	  "fabs",			  "(y:dbl):dbl address MATHunary_FABSdbl;"									  ]
[ 1993@0, "command",	  "mmath",	  "isinf",			  "(d:dbl):int address math_unary_ISINF;"									  ]
[ 1994@0, "command",	  "mmath",	  "isnan",			  "(d:dbl):bit address math_unary_ISNAN;"									  ]
[ 1995@0, "command",	  "mmath",	  "log10",			  "(x:dbl):dbl address MATHunary_LOG10dbl;"									  ]
[ 1996@0, "command",	  "mmath",	  "log",			  "(x:dbl):dbl address MATHunary_LOGdbl;"									  ]
[ 1997@0, "command",	  "mmath",	  "pow",			  "(x:dbl,y:dbl):dbl address MATHbinary_POWdbl;"								  ]
[ 1998@0, "command",	  "mmath",	  "pow",			  "(x:flt,y:flt):flt address MATHbinary_POWflt;"								  ]
[ 1999@0, "command",	  "mmath",	  "rand",			  "():int address MATHrandint;"											  ]
[ 2000@0, "command",	  "mmath",	  "round",			  "(x:dbl,y:int):dbl address MATHbinary_ROUNDdbl;"								  ]
[ 2001@0, "command",	  "mmath",	  "round",			  "(x:flt,y:int):flt address MATHbinary_ROUNDflt;"								  ]
[ 2002@0, "command",	  "mmath",	  "srand",			  "(seed:int):void address MATHsrandint;"									  ]
[ 2003@0, "command",	  "mmath",	  "sqrt",			  "(y:dbl):dbl address MATHunary_SQRTdbl;"									  ]
[ 2004@0, "command",	  "mmath",	  "sqrt",			  "(y:flt):flt address MATHunary_SQRTflt;"									  ]
[ 2005@0, "command",	  "mmath",	  "sinh",			  "(x:dbl):dbl address MATHunary_SINHdbl;"									  ]
[ 2006@0, "command",	  "mmath",	  "sinh",			  "(x:flt):flt address MATHunary_SINHflt;"									  ]
[ 2007@0, "command",	  "mmath",	  "sin",			  "(x:dbl):dbl address MATHunary_SINdbl;"									  ]
[ 2008@0, "command",	  "mmath",	  "sin",			  "(x:flt):flt address MATHunary_SINflt;"									  ]
[ 2009@0, "command",	  "mmath",	  "tanh",			  "(x:dbl):dbl address MATHunary_TANHdbl;"									  ]
[ 2010@0, "command",	  "mmath",	  "tanh",			  "(x:flt):flt address MATHunary_TANHflt;"									  ]
[ 2011@0, "command",	  "mmath",	  "tan",			  "(x:dbl):dbl address MATHunary_TANdbl;"									  ]
[ 2012@0, "command",	  "mmath",	  "tan",			  "(x:flt):flt address MATHunary_TANflt;"									  ]
[ 2013@0, "command",	  "alarm",	  "alarm",			  "(secs:int,action:str):void address ALARMsetalarm;"								  ]
[ 2014@0, "command",	  "alarm",	  "ctime",			  "():str address ALARMctime;"											  ]
[ 2015@0, "command",	  "alarm",	  "epilogue",			  "():void address ALARMepilogue;"										  ]
[ 2016@0, "command",	  "alarm",	  "epoch",			  "():int address ALARMepoch;"											  ]
[ 2017@0, "command",	  "alarm",	  "prelude",			  "():void address ALARMprelude;"										  ]
[ 2018@0, "command",	  "alarm",	  "sleep",			  "(secs:int):void address ALARMsleep;"										  ]
[ 2019@0, "command",	  "alarm",	  "time",			  "():int address ALARMtime;"											  ]
[ 2020@0, "command",	  "alarm",	  "timers",			  "():bat[:str,:str] address ALARMtimers;"									  ]
[ 2021@0, "command",	  "alarm",	  "usec",			  "():lng address ALARMusec;"											  ]
[ 2022@0, "command",	  "sema",	  "create",			  "(init:int):sema address SEMAcreate;"										  ]
[ 2023@0, "command",	  "sema",	  "destroy",			  "(s:sema):void address SEMAdestroy;"										  ]
[ 2024@0, "command",	  "sema",	  "down",			  "(s:sema):void address SEMAdown;"										  ]
[ 2025@0, "command",	  "sema",	  "up",				  "(s:sema):void address SEMAup;"										  ]
[ 2026@0, "command",	  "lock",	  "create",			  "():lock address LCKcreate;"											  ]
[ 2027@0, "command",	  "lock",	  "destroy",			  "(l:lock):void address LCKdestroy;"										  ]
[ 2028@0, "command",	  "lock",	  "set",			  "(l:lock):void address LCKset;"										  ]
[ 2029@0, "command",	  "lock",	  "tostr",			  "(l:lock):void address lockToStr;"										  ]
[ 2030@0, "command",	  "lock",	  "try",			  "(l:lock):int address LCKtry;"										  ]
[ 2031@0, "command",	  "lock",	  "unset",			  "(l:lock):void address LCKunset;"										  ]
[ 2032@0, "command",	  "unix",	  "getenv",			  "(nme:str):str address UNIXgetenv;"										  ]
[ 2033@0, "command",	  "unix",	  "setenv",			  "(nme:str,val:str):bit address UNIXsetenv;"									  ]
[ 2034@0, "pattern",	  "mdb",	  "List",			  "(M:str,F:str):void address MDBlist3Detail;"									  ]
[ 2035@0, "pattern",	  "mdb",	  "List",			  "():void address MDBlistDetail;"										  ]
[ 2036@0, "pattern",	  "mdb",	  "getDefinition",		  "():bat[:void,:str] address MDBcodeDump;"									  ]
[ 2037@0, "pattern",	  "mdb",	  "getStackTrace",		  "():bat[:void,:str] address MDBStkTrace;"									  ]
[ 2038@0, "pattern",	  "mdb",	  "getStackFrame",		  "():bat[:str,:str] address MDBStkFrame;"									  ]
[ 2039@0, "pattern",	  "mdb",	  "getStackFrame",		  "(i:int):bat[:str,:str] address MDBStkFrameN;"								  ]
[ 2040@0, "pattern",	  "mdb",	  "getStackDepth",		  "():int address MDBStkDepth;"											  ]
[ 2041@0, "command",	  "mdb",	  "getExceptionContext",	  "(s:str):str address MDBgetExceptionContext;"									  ]
[ 2042@0, "command",	  "mdb",	  "getExceptionReason",		  "(s:str):str address MDBgetExceptionReason;"									  ]
[ 2043@0, "command",	  "mdb",	  "getExceptionVariable",	  "(s:str):str address MDBgetExceptionVariable;"								  ]
[ 2044@0, "pattern",	  "mdb",	  "inspect",			  "(mod:str,fcn:str):void address MDBinspect;"									  ]
[ 2045@0, "pattern",	  "mdb",	  "list",			  "(M:str,F:str):void address MDBlist3;"									  ]
[ 2046@0, "pattern",	  "mdb",	  "list",			  "():void address MDBlist;"											  ]
[ 2047@0, "pattern",	  "mdb",	  "setTimer",			  "(b:bit):void address MDBsetTimer;"										  ]
[ 2048@0, "pattern",	  "mdb",	  "setCatch",			  "(b:bit):void address MDBsetCatch;"										  ]
[ 2049@0, "pattern",	  "mdb",	  "setTrace",			  "(b:bit):void address MDBsetTrace;"										  ]
[ 2050@0, "pattern",	  "mdb",	  "stop",			  "():void address MDBstop;"											  ]
[ 2051@0, "pattern",	  "mdb",	  "start",			  "():void address MDBstart;"											  ]
[ 2052@0, "pattern",	  "mdb",	  "var",			  "(M:str,F:str):void address MDBvar3;"										  ]
[ 2053@0, "pattern",	  "mdb",	  "var",			  "():void address MDBvar;"											  ]
[ 2054@0, "command",	  "crackers",	  "crack",			  "(b:bat[:int,:int],c:bat[:int,:int]):int address CRKcrackJoin;"						  ]
[ 2055@0, "command",	  "crackers",	  "crack",			  "(b:bat[:int,:int],low:int,hgh:int):int address CRKcrackRange;"						  ]
[ 2056@0, "command",	  "crackers",	  "dropView",			  "(b:bat[:int,:int]):void address CRKdropView;"								  ]
[ 2057@0, "command",	  "crackers",	  "drop",			  "(b:bat[:int,:int]):void address CRKdropPiece;"								  ]
[ 2058@0, "command",	  "crackers",	  "getPiece",			  "(b:bat[:int,:int],crk:bat[:int,:int],piece:int):void address CRKgetPiece1;"					  ]
[ 2059@0, "command",	  "crackers",	  "getPiece",			  "(b:bat[:int,:int],piece:int):bat[:int,:int] address CRKgetPiece0;"						  ]
[ 2060@0, "command",	  "crackers",	  "hasMoreElements",		  "(b:bat[:int,:int]) (a:lng,x:bat[:int,:int]) address CRKhasMoreElements;"					  ]
[ 2061@0, "command",	  "crackers",	  "info",			  "(b:bat[:int,:int]):void address CRKinfo;"									  ]
[ 2062@0, "command",	  "crackers",	  "newIterator",		  "(b:bat[:int,:int]) (a:lng,x:bat[:int,:int]) address CRKnewIterator;"						  ]
[ 2063@0, "command",	  "crackers",	  "new",			  "(b:bat[:int,:int],granule:int):void address CRKnewGranule;"							  ]
[ 2064@0, "command",	  "crackers",	  "new",			  "(b:bat[:int,:int]):void address CRKnew;"									  ]
[ 2065@0, "command",	  "crackers",	  "select",			  "(b:bat[:int,:int],l:int,h:int,li:bit,hi:bit):bat[:int,:int] address CRKselect;"				  ]
[ 2066@0, "command",	  "crackers",	  "selectPieces",		  "(b:bat[:int,:int],low:int,hgh:int):bat[:void,:int] address CRKselectPieces;"					  ]
[ 2067@0, "pattern",	  "thread",	  "exec",			  "(arg:any...):int address CMDthreadExec;"									  ]
[ 2068@0, "pattern",	  "thread",	  "isDead",			  "(pid:int):bit address CMDthreadIsDead;"									  ]
[ 2069@0, "pattern",	  "thread",	  "kill",			  "(pid:int):void address CMDthreadKill;"									  ]
[ 2070@0, "pattern",	  "thread",	  "suspend",			  "(pid:int):void address CMDthreadSuspend;"									  ]
[ 2071@0, "pattern",	  "thread",	  "terminate",			  "(pid:int):void address CMDthreadTerminate;"									  ]
[ 2072@0, "pattern",	  "thread",	  "wait",			  "(pid:int...):void address CMDthreadWaitList;"								  ]
[ 2073@0, "pattern",	  "thread",	  "wait",			  "():void address CMDthreadWait;"										  ]

# 00:03:55 >  
# 00:03:55 >  Done.
# 00:03:55 >  

