stdout of test 'inspect05` in directory 'src/modules/mal` itself:


# 00:03:55 >  
# 00:03:55 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=33330 --set sql_port=49911 --set xquery_port=56575 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  inspect05.mal </dev/null
# 00:03:55 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information.
##Illustrate the modules loaded after start
#k:= inspect.getKind();
#m:= inspect.getModule();
#f:= inspect.getFunction();
#s:= inspect.getSignature();
#io.print(k,m,f,s);
#

function user.main():void;	# 0  (main:void)
#Illustrate the modules loaded after start 	# 1  (_2:str)
    k := inspect.getKind();	# 2 INSPECTgetkind (k:bat[:void,:str])
    m := inspect.getModule();	# 3 INSPECTgetAllModules (m:bat[:void,:str])
    f := inspect.getFunction();	# 4 INSPECTgetAllFunctions (f:bat[:void,:str])
    f1 := bat.reverse(f);	# 5 BKCreverse (f1:bat[:str,:void])<-(f:bat[:void,:str])
    f2 := algebra.ssort(f1);	# 6 ALGssort (f2:bat[:str,:void])<-(f1:bat[:str,:void])
    fs := bat.reverse(f2);	# 7 BKCreverse (fs:bat[:void,:str])<-(f2:bat[:str,:void])
    s := inspect.getSignatures();	# 8 INSPECTgetAllSignatures (s:bat[:void,:str])
    a := inspect.getAddresses();	# 9 INSPECTgetAllAddresses (a:bat[:void,:str])
    io.table(fs,k,m,s,a);	# 10 IOttable (_10:int)<-(fs:bat[:void,:str])(k:bat[:void,:str])(m:bat[:void,:str])(s:bat[:void,:str])(a:bat[:void,:str])
end main;	# 11  
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
# symbol				symbol		symbol		 symbol												 symbol					  # name
# str				str		str		str												str					  # type
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
[ "!=",				  "command",	  "batstr",	  "(l:bat[:void,:str],r:str):bat[:void,:bit] ",							  "STRbatNotEqualCst;"			  ]
[ "!=",				  "command",	  "batstr",	  "(l:bat[:void,:str],r:bat[:void,:str]):bat[:void,:bit] ",					  "STRbatNotEqual;"			  ]
[ "!=",				  "command",	  "batstr",	  "(l:bat[:void,:str],r:bat[:oid,:str]):bat[:void,:bit] ",					  "STRbatNotEqual;"			  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",				  "CMDcmpaccumNEQcst;"			  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",						  "CMDcmpNEQcst;"			  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",		  "CMDcmpaccumNEQ;"			  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",					  "CMDcmpNEQ;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",				  "CMDcmpaccumNEQcst;"			  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",						  "CMDcmpNEQcst;"			  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",		  "CMDcmpaccumNEQ;"			  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",					  "CMDcmpNEQ;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",				  "CMDcmpaccumNEQcst;"			  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",						  "CMDcmpNEQcst;"			  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",		  "CMDcmpaccumNEQ;"			  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",					  "CMDcmpNEQ;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",				  "CMDcmpaccumNEQcst;"			  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",						  "CMDcmpNEQcst;"			  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",		  "CMDcmpaccumNEQ;"			  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",					  "CMDcmpNEQ;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",				  "CMDcmpaccumNEQcst;"			  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",						  "CMDcmpNEQcst;"			  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",		  "CMDcmpaccumNEQ;"			  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",					  "CMDcmpNEQ;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",				  "CMDcmpaccumNEQcst;"			  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",						  "CMDcmpNEQcst;"			  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",		  "CMDcmpaccumNEQ;"			  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",					  "CMDcmpNEQ;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",				  "CMDcmpaccumNEQcst;"			  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",						  "CMDcmpNEQcst;"			  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",		  "CMDcmpaccumNEQ;"			  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",					  "CMDcmpNEQ;"				  ]
[ "!=",				  "command",	  "calc",	  "(left:str,right:str):bit ",									  "CALCcompNEQstrstr;"			  ]
[ "!=",				  "command",	  "calc",	  "(left:lng,right:lng):bit ",									  "CALCcompNEQlnglng;"			  ]
[ "!=",				  "command",	  "calc",	  "(left:lng,right:int):bit ",									  "CALCcompNEQlngint;"			  ]
[ "!=",				  "command",	  "calc",	  "(left:lng,right:sht):bit ",									  "CALCcompNEQlngsht;"			  ]
[ "!=",				  "command",	  "calc",	  "(left:lng,right:chr):bit ",									  "CALCcompNEQlngchr;"			  ]
[ "!=",				  "command",	  "calc",	  "(left:int,right:lng):bit ",									  "CALCcompNEQintlng;"			  ]
[ "!=",				  "command",	  "calc",	  "(left:int,right:int):bit ",									  "CALCcompNEQintint;"			  ]
[ "!=",				  "command",	  "calc",	  "(left:int,right:sht):bit ",									  "CALCcompNEQintsht;"			  ]
[ "!=",				  "command",	  "calc",	  "(left:int,right:chr):bit ",									  "CALCcompNEQintchr;"			  ]
[ "!=",				  "command",	  "calc",	  "(left:sht,right:lng):bit ",									  "CALCcompNEQshtlng;"			  ]
[ "!=",				  "command",	  "calc",	  "(left:sht,right:int):bit ",									  "CALCcompNEQshtint;"			  ]
[ "!=",				  "command",	  "calc",	  "(left:sht,right:sht):bit ",									  "CALCcompNEQshtsht;"			  ]
[ "!=",				  "command",	  "calc",	  "(left:sht,right:chr):bit ",									  "CALCcompNEQshtchr;"			  ]
[ "!=",				  "command",	  "calc",	  "(left:bit,right:lng):bit ",									  "CALCcompNEQbitlng;"			  ]
[ "!=",				  "command",	  "calc",	  "(left:bit,right:int):bit ",									  "CALCcompNEQbitint;"			  ]
[ "!=",				  "command",	  "calc",	  "(left:bit,right:sht):bit ",									  "CALCcompNEQbitsht;"			  ]
[ "!=",				  "command",	  "calc",	  "(left:bit,right:chr):bit ",									  "CALCcompNEQbitchr;"			  ]
[ "!=",				  "command",	  "calc",	  "(left:bit,right:bit):bit ",									  "CALCcompNEQbitbit;"			  ]
[ "!=",				  "command",	  "calc",	  "(left:chr,right:lng):bit ",									  "CALCcompNEQchrlng;"			  ]
[ "!=",				  "command",	  "calc",	  "(left:chr,right:int):bit ",									  "CALCcompNEQchrint;"			  ]
[ "!=",				  "command",	  "calc",	  "(left:chr,right:sht):bit ",									  "CALCcompNEQchrsht;"			  ]
[ "!=",				  "command",	  "calc",	  "(left:chr,right:chr):bit ",									  "CALCcompNEQchrchr;"			  ]
[ "!=",				  "command",	  "calc",	  "(left:dbl,right:dbl):bit ",									  "CALCcompNEQdbldbl;"			  ]
[ "!=",				  "command",	  "calc",	  "(left:flt,right:dbl):bit ",									  "CALCcompNEQfltdbl;"			  ]
[ "!=",				  "command",	  "calc",	  "(left:flt,right:flt):bit ",									  "CALCcompNEQfltflt;"			  ]
[ "!=",				  "command",	  "calc",	  "(left:oid,right:oid):bit ",									  "CALCcompNEQoidoid;"			  ]
[ "!=",				  "command",	  "inet",	  "(v:inet,w:inet):bit ",									  "INET_comp_NEQ;"			  ]
[ "!=",				  "command",	  "date",	  "(v:date,w:date):bit ",									  "MTIMEdate_NEQ;"			  ]
[ "!=",				  "command",	  "daytime",	  "(v:daytime,w:daytime):bit ",									  "MTIMEdaytime_NEQ;"			  ]
[ "!=",				  "command",	  "timestamp",	  "(v:timestamp,w:timestamp):bit ",								  "MTIMEtimestamp_NEQ;"			  ]
[ "#convert",			  "command",	  "blob",	  "():void ",											  "BLOBconvert;"			  ]
[ "#del",			  "command",	  "pcre",	  "():void ",											  "pcre_del;"				  ]
[ "#del",			  "command",	  "blob",	  "():void ",											  "BLOBdel;"				  ]
[ "#fromstr",			  "command",	  "pcre",	  "():void ",											  "pcre_fromstr;"			  ]
[ "#fromstr",			  "command",	  "inet",	  "():void ",											  "INETfromString;"			  ]
[ "#fromstr",			  "command",	  "date",	  "():date ",											  "date_fromstr;"			  ]
[ "#fromstr",			  "command",	  "daytime",	  "():daytime ",										  "daytime_tz_fromstr;"			  ]
[ "#fromstr",			  "command",	  "timestamp",	  "():timestamp ",										  "timestamp_fromstr;"			  ]
[ "#fromstr",			  "command",	  "timezone",	  "():timezone ",										  "tzone_fromstr;"			  ]
[ "#fromstr",			  "command",	  "zrule",	  "():zrule ",											  "rule_fromstr;"			  ]
[ "#fromstr",			  "command",	  "url",	  "():url ",											  "URLfromString;"			  ]
[ "#fromstr",			  "command",	  "color",	  "():color ",											  "color_fromstr;"			  ]
[ "#fromstr",			  "command",	  "blob",	  "():void ",											  "BLOBfromstr;"			  ]
[ "#fromstr",			  "command",	  "sqlblob",	  "():void ",											  "SQLBLOBfromstr;"			  ]
[ "#hash",			  "command",	  "pcre",	  "():void ",											  "pcre_hash;"				  ]
[ "#hash",			  "command",	  "blob",	  "():void ",											  "BLOBhash;"				  ]
[ "#heap",			  "command",	  "pcre",	  "():void ",											  "pcre_heap;"				  ]
[ "#heap",			  "command",	  "blob",	  "():void ",											  "BLOBheap;"				  ]
[ "#length",			  "command",	  "pcre",	  "():void ",											  "pcre_length;"			  ]
[ "#length",			  "command",	  "blob",	  "():void ",											  "BLOBlength;"				  ]
[ "#nequal",			  "command",	  "pcre",	  "():void ",											  "pcre_nequal;"			  ]
[ "#nequal",			  "command",	  "blob",	  "():void ",											  "BLOBnequal;"				  ]
[ "#null",			  "command",	  "pcre",	  "():void ",											  "pcre_null;"				  ]
[ "#null",			  "command",	  "blob",	  "():void ",											  "BLOBnull;"				  ]
[ "#put",			  "command",	  "pcre",	  "():void ",											  "pcre_put;"				  ]
[ "#put",			  "command",	  "blob",	  "():void ",											  "BLOBput;"				  ]
[ "#read",			  "command",	  "blob",	  "():void ",											  "BLOBread;"				  ]
[ "#tostr",			  "command",	  "pcre",	  "():void ",											  "pcre_tostr;"				  ]
[ "#tostr",			  "command",	  "inet",	  "():void ",											  "INETtoString;"			  ]
[ "#tostr",			  "command",	  "date",	  "():str ",											  "date_tostr;"				  ]
[ "#tostr",			  "command",	  "daytime",	  "():str ",											  "daytime_tostr;"			  ]
[ "#tostr",			  "command",	  "timestamp",	  "():str ",											  "timestamp_tostr;"			  ]
[ "#tostr",			  "command",	  "timezone",	  "():str ",											  "tzone_tostr;"			  ]
[ "#tostr",			  "command",	  "zrule",	  "():str ",											  "rule_tostr;"				  ]
[ "#tostr",			  "command",	  "url",	  "():str ",											  "URLtoString;"			  ]
[ "#tostr",			  "command",	  "color",	  "():str ",											  "color_tostr;"			  ]
[ "#tostr",			  "command",	  "blob",	  "():void ",											  "BLOBtostr;"				  ]
[ "#tostr",			  "command",	  "sqlblob",	  "():void ",											  "SQLBLOBtostr;"			  ]
[ "#write",			  "command",	  "blob",	  "():void ",											  "BLOBwrite;"				  ]
[ "%",				  "command",	  "batcalc",	  "(b:bat[:void,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",					  "CMDbatMOD_lng_lng_lng;"		  ]
[ "%",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",					  "CMDbatMOD_lng_lng_lng;"		  ]
[ "%",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",						  "CMDcstMODbat_lng_lng_lng;"		  ]
[ "%",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:lng] ",						  "CMDbatMODcst_lng_lng_lng;"		  ]
[ "%",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:lng):void ",					  "CMDbataccumMODcst_lng_lng_lng;"	  ]
[ "%",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:lng]):void ",					  "CMDbataccumMODcst2_lng_lng_lng;"	  ]
[ "%",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",				  "CMDbataccumMOD_lng_lng_lng;"		  ]
[ "%",				  "command",	  "batcalc",	  "(b:bat[:void,:int],c:bat[:oid,:int]):bat[:oid,:int] ",					  "CMDbatMOD_int_int_int;"		  ]
[ "%",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:int] ",					  "CMDbatMOD_int_int_int;"		  ]
[ "%",				  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:int] ",						  "CMDcstMODbat_int_int_int;"		  ]
[ "%",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:int] ",						  "CMDbatMODcst_int_int_int;"		  ]
[ "%",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:int):void ",					  "CMDbataccumMODcst_int_int_int;"	  ]
[ "%",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:int]):void ",					  "CMDbataccumMODcst2_int_int_int;"	  ]
[ "%",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",				  "CMDbataccumMOD_int_int_int;"		  ]
[ "%",				  "command",	  "batcalc",	  "(b:bat[:void,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",					  "CMDbatMOD_sht_sht_sht;"		  ]
[ "%",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:sht] ",					  "CMDbatMOD_sht_sht_sht;"		  ]
[ "%",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:sht] ",						  "CMDcstMODbat_sht_sht_sht;"		  ]
[ "%",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:sht] ",						  "CMDbatMODcst_sht_sht_sht;"		  ]
[ "%",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void ",					  "CMDbataccumMODcst_sht_sht_sht;"	  ]
[ "%",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void ",					  "CMDbataccumMODcst2_sht_sht_sht;"	  ]
[ "%",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void ",				  "CMDbataccumMOD_sht_sht_sht;"		  ]
[ "%",				  "command",	  "batcalc",	  "(b:bat[:void,:oid],c:bat[:oid,:oid]):bat[:oid,:oid] ",					  "CMDbatMOD_oid_oid_oid;"		  ]
[ "%",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:oid] ",					  "CMDbatMOD_oid_oid_oid;"		  ]
[ "%",				  "command",	  "batcalc",	  "(cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:oid] ",						  "CMDcstMODbat_oid_oid_oid;"		  ]
[ "%",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:oid] ",						  "CMDbatMODcst_oid_oid_oid;"		  ]
[ "%",				  "command",	  "batcalc",	  "(a:bat[:any_1,:oid],b:bat[:any_1,:oid],cst:oid):void ",					  "CMDbataccumMODcst_oid_oid_oid;"	  ]
[ "%",				  "command",	  "batcalc",	  "(a:bat[:any_1,:oid],cst:oid,b:bat[:any_1,:oid]):void ",					  "CMDbataccumMODcst2_oid_oid_oid;"	  ]
[ "%",				  "command",	  "batcalc",	  "(a:bat[:any_1,:oid],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):void ",				  "CMDbataccumMOD_oid_oid_oid;"		  ]
[ "%",				  "command",	  "calc",	  "(left:int,right:sht):sht ",									  "CALCbinarycheckMODintsht;"		  ]
[ "%",				  "command",	  "calc",	  "(left:int,right:chr):chr ",									  "CALCbinarycheckMODintchr;"		  ]
[ "%",				  "command",	  "calc",	  "(left:lng,right:lng):lng ",									  "CALCbinarycheckMODlnglng;"		  ]
[ "%",				  "command",	  "calc",	  "(left:lng,right:int):int ",									  "CALCbinarycheckMODlngint;"		  ]
[ "%",				  "command",	  "calc",	  "(left:int,right:int):int ",									  "CALCbinarycheckMODintint;"		  ]
[ "%",				  "command",	  "calc",	  "(left:sht,right:int):int ",									  "CALCbinarycheckMODshtint;"		  ]
[ "%",				  "command",	  "calc",	  "(left:chr,right:int):int ",									  "CALCbinarycheckMODchrint;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:void,:int],c:bat[:oid,:int]):bat[:oid,:int] ",					  "CMDbatMUL_int_int_int;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:int] ",					  "CMDbatMUL_int_int_int;"		  ]
[ "*",				  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:int] ",						  "CMDcstMULbat_int_int_int;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:int] ",						  "CMDbatMULcst_int_int_int;"		  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:int):void ",					  "CMDbataccumMULcst_int_int_int;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:int]):void ",					  "CMDbataccumMULcst2_int_int_int;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",				  "CMDbataccumMUL_int_int_int;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:void,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",					  "CMDbatMUL_lng_lng_lng;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",					  "CMDbatMUL_lng_lng_lng;"		  ]
[ "*",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",						  "CMDcstMULbat_lng_lng_lng;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:lng] ",						  "CMDbatMULcst_lng_lng_lng;"		  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:lng):void ",					  "CMDbataccumMULcst_lng_lng_lng;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:lng]):void ",					  "CMDbataccumMULcst2_lng_lng_lng;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",				  "CMDbataccumMUL_lng_lng_lng;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:void,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",					  "CMDbatMUL_sht_sht_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:sht] ",					  "CMDbatMUL_sht_sht_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:sht] ",						  "CMDcstMULbat_sht_sht_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:sht] ",						  "CMDbatMULcst_sht_sht_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void ",					  "CMDbataccumMULcst_sht_sht_sht;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void ",					  "CMDbataccumMULcst2_sht_sht_sht;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void ",				  "CMDbataccumMUL_sht_sht_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:void,:sht],c:bat[:oid,:int]):bat[:oid,:int] ",					  "CMDbatMUL_int_sht_int;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:int]):bat[:any_1,:int] ",					  "CMDbatMUL_int_sht_int;"		  ]
[ "*",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:int]):bat[:any_1,:int] ",						  "CMDcstMULbat_int_sht_int;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:int):bat[:any_1,:int] ",						  "CMDbatMULcst_int_sht_int;"		  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:int):void ",					  "CMDbataccumMULcst_int_sht_int;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:int]):void ",					  "CMDbataccumMULcst2_int_sht_int;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",				  "CMDbataccumMUL_int_sht_int;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:void,:int],c:bat[:oid,:sht]):bat[:oid,:int] ",					  "CMDbatMUL_int_int_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:sht]):bat[:any_1,:int] ",					  "CMDbatMUL_int_int_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:sht]):bat[:any_1,:int] ",						  "CMDcstMULbat_int_int_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:sht):bat[:any_1,:int] ",						  "CMDbatMULcst_int_int_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:sht):void ",					  "CMDbataccumMULcst_int_int_sht;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:sht]):void ",					  "CMDbataccumMULcst2_int_int_sht;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:sht],c:bat[:any_1,:int]):void ",				  "CMDbataccumMUL_int_int_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:void,:sht],c:bat[:oid,:sht]):bat[:oid,:int] ",					  "CMDbatMUL_int_sht_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:int] ",					  "CMDbatMUL_int_sht_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:int] ",						  "CMDcstMULbat_int_sht_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:int] ",						  "CMDbatMULcst_int_sht_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void ",					  "CMDbataccumMULcst_int_sht_sht;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void ",					  "CMDbataccumMULcst2_int_sht_sht;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:int]):void ",				  "CMDbataccumMUL_int_sht_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:void,:int],c:bat[:oid,:int]):bat[:oid,:lng] ",					  "CMDbatMUL_lng_int_int;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:lng] ",					  "CMDbatMUL_lng_int_int;"		  ]
[ "*",				  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:lng] ",						  "CMDcstMULbat_lng_int_int;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:lng] ",						  "CMDbatMULcst_lng_int_int;"		  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:int):void ",					  "CMDbataccumMULcst_lng_int_int;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:int]):void ",					  "CMDbataccumMULcst2_lng_int_int;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],c:bat[:any_1,:lng]):void ",				  "CMDbataccumMUL_lng_int_int;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:void,:int],c:bat[:oid,:lng]):bat[:oid,:lng] ",					  "CMDbatMUL_lng_int_lng;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",					  "CMDbatMUL_lng_int_lng;"		  ]
[ "*",				  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",						  "CMDcstMULbat_lng_int_lng;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:lng):bat[:any_1,:lng] ",						  "CMDbatMULcst_lng_int_lng;"		  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:lng):void ",					  "CMDbataccumMULcst_lng_int_lng;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:lng]):void ",					  "CMDbataccumMULcst2_lng_int_lng;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",				  "CMDbataccumMUL_lng_int_lng;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:void,:lng],c:bat[:oid,:int]):bat[:oid,:lng] ",					  "CMDbatMUL_lng_lng_int;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:int]):bat[:any_1,:lng] ",					  "CMDbatMUL_lng_lng_int;"		  ]
[ "*",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:any_1,:int]):bat[:any_1,:lng] ",						  "CMDcstMULbat_lng_lng_int;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:int):bat[:any_1,:lng] ",						  "CMDbatMULcst_lng_lng_int;"		  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:int):void ",					  "CMDbataccumMULcst_lng_lng_int;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:int]):void ",					  "CMDbataccumMULcst2_lng_lng_int;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:int],c:bat[:any_1,:lng]):void ",				  "CMDbataccumMUL_lng_lng_int;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:void,:sht],c:bat[:oid,:sht]):bat[:oid,:lng] ",					  "CMDbatMUL_lng_sht_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:lng] ",					  "CMDbatMUL_lng_sht_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:lng] ",						  "CMDcstMULbat_lng_sht_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:lng] ",						  "CMDbatMULcst_lng_sht_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void ",					  "CMDbataccumMULcst_lng_sht_sht;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void ",					  "CMDbataccumMULcst2_lng_sht_sht;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:lng]):void ",				  "CMDbataccumMUL_lng_sht_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:void,:sht],c:bat[:oid,:lng]):bat[:oid,:lng] ",					  "CMDbatMUL_lng_sht_lng;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",					  "CMDbatMUL_lng_sht_lng;"		  ]
[ "*",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",						  "CMDcstMULbat_lng_sht_lng;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:lng):bat[:any_1,:lng] ",						  "CMDbatMULcst_lng_sht_lng;"		  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:lng):void ",					  "CMDbataccumMULcst_lng_sht_lng;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:lng]):void ",					  "CMDbataccumMULcst2_lng_sht_lng;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",				  "CMDbataccumMUL_lng_sht_lng;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:void,:lng],c:bat[:oid,:sht]):bat[:oid,:lng] ",					  "CMDbatMUL_lng_lng_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:sht]):bat[:any_1,:lng] ",					  "CMDbatMUL_lng_lng_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:any_1,:sht]):bat[:any_1,:lng] ",						  "CMDcstMULbat_lng_lng_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:sht):bat[:any_1,:lng] ",						  "CMDbatMULcst_lng_lng_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:sht):void ",					  "CMDbataccumMULcst_lng_lng_sht;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:sht]):void ",					  "CMDbataccumMULcst2_lng_lng_sht;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:sht],c:bat[:any_1,:lng]):void ",				  "CMDbataccumMUL_lng_lng_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:void,:sht],c:bat[:oid,:int]):bat[:oid,:lng] ",					  "CMDbatMUL_lng_sht_int;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:int]):bat[:any_1,:lng] ",					  "CMDbatMUL_lng_sht_int;"		  ]
[ "*",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:int]):bat[:any_1,:lng] ",						  "CMDcstMULbat_lng_sht_int;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:int):bat[:any_1,:lng] ",						  "CMDbatMULcst_lng_sht_int;"		  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:int):void ",					  "CMDbataccumMULcst_lng_sht_int;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:int]):void ",					  "CMDbataccumMULcst2_lng_sht_int;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:int],c:bat[:any_1,:lng]):void ",				  "CMDbataccumMUL_lng_sht_int;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:void,:int],c:bat[:oid,:sht]):bat[:oid,:lng] ",					  "CMDbatMUL_lng_int_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:sht]):bat[:any_1,:lng] ",					  "CMDbatMUL_lng_int_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:sht]):bat[:any_1,:lng] ",						  "CMDcstMULbat_lng_int_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:sht):bat[:any_1,:lng] ",						  "CMDbatMULcst_lng_int_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:sht):void ",					  "CMDbataccumMULcst_lng_int_sht;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:sht]):void ",					  "CMDbataccumMULcst2_lng_int_sht;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:sht],c:bat[:any_1,:lng]):void ",				  "CMDbataccumMUL_lng_int_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:void,:flt],c:bat[:oid,:flt]):bat[:oid,:flt] ",					  "CMDbatMUL_flt_flt_flt;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:flt] ",					  "CMDbatMUL_flt_flt_flt;"		  ]
[ "*",				  "command",	  "batcalc",	  "(cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:flt] ",						  "CMDcstMULbat_flt_flt_flt;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:flt] ",						  "CMDbatMULcst_flt_flt_flt;"		  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:flt],b:bat[:any_1,:flt],cst:flt):void ",					  "CMDbataccumMULcst_flt_flt_flt;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:flt],cst:flt,b:bat[:any_1,:flt]):void ",					  "CMDbataccumMULcst2_flt_flt_flt;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:flt],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):void ",				  "CMDbataccumMUL_flt_flt_flt;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:void,:dbl],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",					  "CMDbatMUL_dbl_dbl_dbl;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",					  "CMDbatMUL_dbl_dbl_dbl;"		  ]
[ "*",				  "command",	  "batcalc",	  "(cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",						  "CMDcstMULbat_dbl_dbl_dbl;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:dbl] ",						  "CMDbatMULcst_dbl_dbl_dbl;"		  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:dbl],b:bat[:any_1,:dbl],cst:dbl):void ",					  "CMDbataccumMULcst_dbl_dbl_dbl;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:dbl],cst:dbl,b:bat[:any_1,:dbl]):void ",					  "CMDbataccumMULcst2_dbl_dbl_dbl;"	  ]
[ "*",				  "command",	  "batcalc",	  "(a:bat[:any_1,:dbl],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):void ",				  "CMDbataccumMUL_dbl_dbl_dbl;"		  ]
[ "*",				  "command",	  "calc",	  "(left:lng,right:dbl):dbl ",									  "CALCbinaryMULlngdbl;"		  ]
[ "*",				  "command",	  "calc",	  "(left:lng,right:flt):flt ",									  "CALCbinaryMULlngflt;"		  ]
[ "*",				  "command",	  "calc",	  "(left:lng,right:lng):lng ",									  "CALCbinaryMULlnglng;"		  ]
[ "*",				  "command",	  "calc",	  "(left:lng,right:int):lng ",									  "CALCbinaryMULlngint;"		  ]
[ "*",				  "command",	  "calc",	  "(left:lng,right:sht):lng ",									  "CALCbinaryMULlngsht;"		  ]
[ "*",				  "command",	  "calc",	  "(left:lng,right:chr):lng ",									  "CALCbinaryMULlngchr;"		  ]
[ "*",				  "command",	  "calc",	  "(left:int,right:dbl):dbl ",									  "CALCbinaryMULintdbl;"		  ]
[ "*",				  "command",	  "calc",	  "(left:int,right:flt):flt ",									  "CALCbinaryMULintflt;"		  ]
[ "*",				  "command",	  "calc",	  "(left:int,right:lng):lng ",									  "CALCbinaryMULintlng;"		  ]
[ "*",				  "command",	  "calc",	  "(left:int,right:int):int ",									  "CALCbinaryMULintint;"		  ]
[ "*",				  "command",	  "calc",	  "(left:int,right:sht):int ",									  "CALCbinaryMULintsht;"		  ]
[ "*",				  "command",	  "calc",	  "(left:int,right:chr):int ",									  "CALCbinaryMULintchr;"		  ]
[ "*",				  "command",	  "calc",	  "(left:sht,right:dbl):dbl ",									  "CALCbinaryMULshtdbl;"		  ]
[ "*",				  "command",	  "calc",	  "(left:sht,right:flt):flt ",									  "CALCbinaryMULshtflt;"		  ]
[ "*",				  "command",	  "calc",	  "(left:sht,right:lng):lng ",									  "CALCbinaryMULshtlng;"		  ]
[ "*",				  "command",	  "calc",	  "(left:sht,right:int):int ",									  "CALCbinaryMULshtint;"		  ]
[ "*",				  "command",	  "calc",	  "(left:sht,right:sht):sht ",									  "CALCbinaryMULshtsht;"		  ]
[ "*",				  "command",	  "calc",	  "(left:sht,right:chr):sht ",									  "CALCbinaryMULshtchr;"		  ]
[ "*",				  "command",	  "calc",	  "(left:chr,right:dbl):dbl ",									  "CALCbinaryMULchrdbl;"		  ]
[ "*",				  "command",	  "calc",	  "(left:chr,right:flt):flt ",									  "CALCbinaryMULchrflt;"		  ]
[ "*",				  "command",	  "calc",	  "(left:chr,right:lng):lng ",									  "CALCbinaryMULchrlng;"		  ]
[ "*",				  "command",	  "calc",	  "(left:chr,right:int):int ",									  "CALCbinaryMULchrint;"		  ]
[ "*",				  "command",	  "calc",	  "(left:chr,right:sht):sht ",									  "CALCbinaryMULchrsht;"		  ]
[ "*",				  "command",	  "calc",	  "(left:chr,right:chr):chr ",									  "CALCbinaryMULchrchr;"		  ]
[ "*",				  "command",	  "calc",	  "(left:oid,right:oid):oid ",									  "CALCbinaryMULoidoid;"		  ]
[ "*",				  "command",	  "calc",	  "(left:dbl,right:dbl):dbl ",									  "CALCbinaryMULdbldbl;"		  ]
[ "*",				  "command",	  "calc",	  "(left:dbl,right:flt):dbl ",									  "CALCbinaryMULdblflt;"		  ]
[ "*",				  "command",	  "calc",	  "(left:dbl,right:lng):dbl ",									  "CALCbinaryMULdbllng;"		  ]
[ "*",				  "command",	  "calc",	  "(left:dbl,right:int):dbl ",									  "CALCbinaryMULdblint;"		  ]
[ "*",				  "command",	  "calc",	  "(left:dbl,right:sht):dbl ",									  "CALCbinaryMULdblsht;"		  ]
[ "*",				  "command",	  "calc",	  "(left:dbl,right:chr):dbl ",									  "CALCbinaryMULdblchr;"		  ]
[ "*",				  "command",	  "calc",	  "(left:flt,right:dbl):dbl ",									  "CALCbinaryMULfltdbl;"		  ]
[ "*",				  "command",	  "calc",	  "(left:flt,right:flt):flt ",									  "CALCbinaryMULfltflt;"		  ]
[ "*",				  "command",	  "calc",	  "(left:flt,right:lng):flt ",									  "CALCbinaryMULfltlng;"		  ]
[ "*",				  "command",	  "calc",	  "(left:flt,right:int):flt ",									  "CALCbinaryMULfltint;"		  ]
[ "*",				  "command",	  "calc",	  "(left:flt,right:sht):flt ",									  "CALCbinaryMULfltsht;"		  ]
[ "*",				  "command",	  "calc",	  "(left:flt,right:chr):flt ",									  "CALCbinaryMULfltchr;"		  ]
[ "+",				  "command",	  "batstr",	  "(l:str,r:bat[:void,:str]):bat[:void,:str] ",							  "STRcstConcatbat;"			  ]
[ "+",				  "command",	  "batstr",	  "(l:bat[:void,:str],r:str):bat[:void,:str] ",							  "STRbatConcatcst;"			  ]
[ "+",				  "command",	  "batstr",	  "(l:bat[:void,:str],r:bat[:void,:str]):bat[:void,:str] ",					  "STRbatConcat;"			  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:void,:sht],c:bat[:oid,:int]):bat[:oid,:int] ",					  "CMDbatADD_int_sht_int;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:int]):bat[:any_1,:int] ",					  "CMDbatADD_int_sht_int;"		  ]
[ "+",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:int]):bat[:any_1,:int] ",						  "CMDcstADDbat_int_sht_int;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:int):bat[:any_1,:int] ",						  "CMDbatADDcst_int_sht_int;"		  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:int):void ",					  "CMDbataccumADDcst_int_sht_int;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:int]):void ",					  "CMDbataccumADDcst2_int_sht_int;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",				  "CMDbataccumADD_int_sht_int;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:void,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",					  "CMDbatADD_lng_lng_lng;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",					  "CMDbatADD_lng_lng_lng;"		  ]
[ "+",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",						  "CMDcstADDbat_lng_lng_lng;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:lng] ",						  "CMDbatADDcst_lng_lng_lng;"		  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:lng):void ",					  "CMDbataccumADDcst_lng_lng_lng;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:lng]):void ",					  "CMDbataccumADDcst2_lng_lng_lng;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",				  "CMDbataccumADD_lng_lng_lng;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:void,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",					  "CMDbatADD_sht_sht_sht;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:sht] ",					  "CMDbatADD_sht_sht_sht;"		  ]
[ "+",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:sht] ",						  "CMDcstADDbat_sht_sht_sht;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:sht] ",						  "CMDbatADDcst_sht_sht_sht;"		  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void ",					  "CMDbataccumADDcst_sht_sht_sht;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void ",					  "CMDbataccumADDcst2_sht_sht_sht;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void ",				  "CMDbataccumADD_sht_sht_sht;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:void,:int],c:bat[:oid,:sht]):bat[:oid,:int] ",					  "CMDbatADD_int_int_sht;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:sht]):bat[:any_1,:int] ",					  "CMDbatADD_int_int_sht;"		  ]
[ "+",				  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:sht]):bat[:any_1,:int] ",						  "CMDcstADDbat_int_int_sht;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:sht):bat[:any_1,:int] ",						  "CMDbatADDcst_int_int_sht;"		  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:sht):void ",					  "CMDbataccumADDcst_int_int_sht;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:sht]):void ",					  "CMDbataccumADDcst2_int_int_sht;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:sht],c:bat[:any_1,:int]):void ",				  "CMDbataccumADD_int_int_sht;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:void,:sht],c:bat[:oid,:sht]):bat[:oid,:int] ",					  "CMDbatADD_int_sht_sht;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:int] ",					  "CMDbatADD_int_sht_sht;"		  ]
[ "+",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:int] ",						  "CMDcstADDbat_int_sht_sht;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:int] ",						  "CMDbatADDcst_int_sht_sht;"		  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void ",					  "CMDbataccumADDcst_int_sht_sht;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void ",					  "CMDbataccumADDcst2_int_sht_sht;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:int]):void ",				  "CMDbataccumADD_int_sht_sht;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:void,:int],c:bat[:oid,:int]):bat[:oid,:int] ",					  "CMDbatADD_int_int_int;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:int] ",					  "CMDbatADD_int_int_int;"		  ]
[ "+",				  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:int] ",						  "CMDcstADDbat_int_int_int;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:int] ",						  "CMDbatADDcst_int_int_int;"		  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:int):void ",					  "CMDbataccumADDcst_int_int_int;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:int]):void ",					  "CMDbataccumADDcst2_int_int_int;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",				  "CMDbataccumADD_int_int_int;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:void,:int],c:bat[:oid,:int]):bat[:oid,:lng] ",					  "CMDbatADD_lng_int_int;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:lng] ",					  "CMDbatADD_lng_int_int;"		  ]
[ "+",				  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:lng] ",						  "CMDcstADDbat_lng_int_int;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:lng] ",						  "CMDbatADDcst_lng_int_int;"		  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:int):void ",					  "CMDbataccumADDcst_lng_int_int;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:int]):void ",					  "CMDbataccumADDcst2_lng_int_int;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],c:bat[:any_1,:lng]):void ",				  "CMDbataccumADD_lng_int_int;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:void,:int],c:bat[:oid,:lng]):bat[:oid,:lng] ",					  "CMDbatADD_lng_int_lng;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",					  "CMDbatADD_lng_int_lng;"		  ]
[ "+",				  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",						  "CMDcstADDbat_lng_int_lng;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:lng):bat[:any_1,:lng] ",						  "CMDbatADDcst_lng_int_lng;"		  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:lng):void ",					  "CMDbataccumADDcst_lng_int_lng;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:lng]):void ",					  "CMDbataccumADDcst2_lng_int_lng;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",				  "CMDbataccumADD_lng_int_lng;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:void,:lng],c:bat[:oid,:int]):bat[:oid,:lng] ",					  "CMDbatADD_lng_lng_int;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:int]):bat[:any_1,:lng] ",					  "CMDbatADD_lng_lng_int;"		  ]
[ "+",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:any_1,:int]):bat[:any_1,:lng] ",						  "CMDcstADDbat_lng_lng_int;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:int):bat[:any_1,:lng] ",						  "CMDbatADDcst_lng_lng_int;"		  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:int):void ",					  "CMDbataccumADDcst_lng_lng_int;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:int]):void ",					  "CMDbataccumADDcst2_lng_lng_int;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:int],c:bat[:any_1,:lng]):void ",				  "CMDbataccumADD_lng_lng_int;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:void,:sht],c:bat[:oid,:lng]):bat[:oid,:lng] ",					  "CMDbatADD_lng_sht_lng;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",					  "CMDbatADD_lng_sht_lng;"		  ]
[ "+",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",						  "CMDcstADDbat_lng_sht_lng;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:lng):bat[:any_1,:lng] ",						  "CMDbatADDcst_lng_sht_lng;"		  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:lng):void ",					  "CMDbataccumADDcst_lng_sht_lng;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:lng]):void ",					  "CMDbataccumADDcst2_lng_sht_lng;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",				  "CMDbataccumADD_lng_sht_lng;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:void,:lng],c:bat[:oid,:sht]):bat[:oid,:lng] ",					  "CMDbatADD_lng_lng_sht;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:sht]):bat[:any_1,:lng] ",					  "CMDbatADD_lng_lng_sht;"		  ]
[ "+",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:any_1,:sht]):bat[:any_1,:lng] ",						  "CMDcstADDbat_lng_lng_sht;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:sht):bat[:any_1,:lng] ",						  "CMDbatADDcst_lng_lng_sht;"		  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:sht):void ",					  "CMDbataccumADDcst_lng_lng_sht;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:sht]):void ",					  "CMDbataccumADDcst2_lng_lng_sht;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:sht],c:bat[:any_1,:lng]):void ",				  "CMDbataccumADD_lng_lng_sht;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:void,:sht],c:bat[:oid,:int]):bat[:oid,:lng] ",					  "CMDbatADD_lng_sht_int;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:int]):bat[:any_1,:lng] ",					  "CMDbatADD_lng_sht_int;"		  ]
[ "+",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:int]):bat[:any_1,:lng] ",						  "CMDcstADDbat_lng_sht_int;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:int):bat[:any_1,:lng] ",						  "CMDbatADDcst_lng_sht_int;"		  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:int):void ",					  "CMDbataccumADDcst_lng_sht_int;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:int]):void ",					  "CMDbataccumADDcst2_lng_sht_int;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:int],c:bat[:any_1,:lng]):void ",				  "CMDbataccumADD_lng_sht_int;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:void,:int],c:bat[:oid,:sht]):bat[:oid,:lng] ",					  "CMDbatADD_lng_int_sht;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:sht]):bat[:any_1,:lng] ",					  "CMDbatADD_lng_int_sht;"		  ]
[ "+",				  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:sht]):bat[:any_1,:lng] ",						  "CMDcstADDbat_lng_int_sht;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:sht):bat[:any_1,:lng] ",						  "CMDbatADDcst_lng_int_sht;"		  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:sht):void ",					  "CMDbataccumADDcst_lng_int_sht;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:sht]):void ",					  "CMDbataccumADDcst2_lng_int_sht;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:sht],c:bat[:any_1,:lng]):void ",				  "CMDbataccumADD_lng_int_sht;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:void,:flt],c:bat[:oid,:flt]):bat[:oid,:flt] ",					  "CMDbatADD_flt_flt_flt;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:flt] ",					  "CMDbatADD_flt_flt_flt;"		  ]
[ "+",				  "command",	  "batcalc",	  "(cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:flt] ",						  "CMDcstADDbat_flt_flt_flt;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:flt] ",						  "CMDbatADDcst_flt_flt_flt;"		  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:flt],b:bat[:any_1,:flt],cst:flt):void ",					  "CMDbataccumADDcst_flt_flt_flt;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:flt],cst:flt,b:bat[:any_1,:flt]):void ",					  "CMDbataccumADDcst2_flt_flt_flt;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:flt],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):void ",				  "CMDbataccumADD_flt_flt_flt;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:void,:dbl],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",					  "CMDbatADD_dbl_dbl_dbl;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",					  "CMDbatADD_dbl_dbl_dbl;"		  ]
[ "+",				  "command",	  "batcalc",	  "(cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",						  "CMDcstADDbat_dbl_dbl_dbl;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:dbl] ",						  "CMDbatADDcst_dbl_dbl_dbl;"		  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:dbl],b:bat[:any_1,:dbl],cst:dbl):void ",					  "CMDbataccumADDcst_dbl_dbl_dbl;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:dbl],cst:dbl,b:bat[:any_1,:dbl]):void ",					  "CMDbataccumADDcst2_dbl_dbl_dbl;"	  ]
[ "+",				  "command",	  "batcalc",	  "(a:bat[:any_1,:dbl],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):void ",				  "CMDbataccumADD_dbl_dbl_dbl;"		  ]
[ "+",				  "command",	  "calc",	  "(left:lng,right:dbl):dbl ",									  "CALCbinaryADDlngdbl;"		  ]
[ "+",				  "command",	  "calc",	  "(left:lng,right:flt):flt ",									  "CALCbinaryADDlngflt;"		  ]
[ "+",				  "command",	  "calc",	  "(left:lng,right:lng):lng ",									  "CALCbinaryADDlnglng;"		  ]
[ "+",				  "command",	  "calc",	  "(left:lng,right:int):lng ",									  "CALCbinaryADDlngint;"		  ]
[ "+",				  "command",	  "calc",	  "(left:lng,right:sht):lng ",									  "CALCbinaryADDlngsht;"		  ]
[ "+",				  "command",	  "calc",	  "(left:lng,right:chr):lng ",									  "CALCbinaryADDlngchr;"		  ]
[ "+",				  "command",	  "calc",	  "(left:int,right:dbl):dbl ",									  "CALCbinaryADDintdbl;"		  ]
[ "+",				  "command",	  "calc",	  "(left:int,right:flt):flt ",									  "CALCbinaryADDintflt;"		  ]
[ "+",				  "command",	  "calc",	  "(left:int,right:lng):lng ",									  "CALCbinaryADDintlng;"		  ]
[ "+",				  "command",	  "calc",	  "(left:int,right:int):int ",									  "CALCbinaryADDintint;"		  ]
[ "+",				  "command",	  "calc",	  "(left:int,right:sht):int ",									  "CALCbinaryADDintsht;"		  ]
[ "+",				  "command",	  "calc",	  "(left:int,right:chr):int ",									  "CALCbinaryADDintchr;"		  ]
[ "+",				  "command",	  "calc",	  "(left:sht,right:dbl):dbl ",									  "CALCbinaryADDshtdbl;"		  ]
[ "+",				  "command",	  "calc",	  "(left:sht,right:flt):flt ",									  "CALCbinaryADDshtflt;"		  ]
[ "+",				  "command",	  "calc",	  "(left:sht,right:lng):lng ",									  "CALCbinaryADDshtlng;"		  ]
[ "+",				  "command",	  "calc",	  "(left:sht,right:int):int ",									  "CALCbinaryADDshtint;"		  ]
[ "+",				  "command",	  "calc",	  "(left:sht,right:sht):sht ",									  "CALCbinaryADDshtsht;"		  ]
[ "+",				  "command",	  "calc",	  "(left:sht,right:chr):sht ",									  "CALCbinaryADDshtchr;"		  ]
[ "+",				  "command",	  "calc",	  "(left:chr,right:dbl):dbl ",									  "CALCbinaryADDchrdbl;"		  ]
[ "+",				  "command",	  "calc",	  "(left:chr,right:flt):flt ",									  "CALCbinaryADDchrflt;"		  ]
[ "+",				  "command",	  "calc",	  "(left:chr,right:lng):lng ",									  "CALCbinaryADDchrlng;"		  ]
[ "+",				  "command",	  "calc",	  "(left:chr,right:int):int ",									  "CALCbinaryADDchrint;"		  ]
[ "+",				  "command",	  "calc",	  "(left:chr,right:sht):sht ",									  "CALCbinaryADDchrsht;"		  ]
[ "+",				  "command",	  "calc",	  "(left:chr,right:chr):chr ",									  "CALCbinaryADDchrchr;"		  ]
[ "+",				  "command",	  "calc",	  "(left:oid,right:oid):oid ",									  "CALCbinaryADDoidoid;"		  ]
[ "+",				  "command",	  "calc",	  "(left:dbl,right:dbl):dbl ",									  "CALCbinaryADDdbldbl;"		  ]
[ "+",				  "command",	  "calc",	  "(left:dbl,right:flt):dbl ",									  "CALCbinaryADDdblflt;"		  ]
[ "+",				  "command",	  "calc",	  "(left:dbl,right:lng):dbl ",									  "CALCbinaryADDdbllng;"		  ]
[ "+",				  "command",	  "calc",	  "(left:dbl,right:int):dbl ",									  "CALCbinaryADDdblint;"		  ]
[ "+",				  "command",	  "calc",	  "(left:dbl,right:sht):dbl ",									  "CALCbinaryADDdblsht;"		  ]
[ "+",				  "command",	  "calc",	  "(left:dbl,right:chr):dbl ",									  "CALCbinaryADDdblchr;"		  ]
[ "+",				  "command",	  "calc",	  "(left:flt,right:dbl):dbl ",									  "CALCbinaryADDfltdbl;"		  ]
[ "+",				  "command",	  "calc",	  "(left:flt,right:flt):flt ",									  "CALCbinaryADDfltflt;"		  ]
[ "+",				  "command",	  "calc",	  "(left:flt,right:lng):flt ",									  "CALCbinaryADDfltlng;"		  ]
[ "+",				  "command",	  "calc",	  "(left:flt,right:int):flt ",									  "CALCbinaryADDfltint;"		  ]
[ "+",				  "command",	  "calc",	  "(left:flt,right:sht):flt ",									  "CALCbinaryADDfltsht;"		  ]
[ "+",				  "command",	  "calc",	  "(left:flt,right:chr):flt ",									  "CALCbinaryADDfltchr;"		  ]
[ "+",				  "command",	  "calc",	  "(l:str,r:int):str ",										  "CALCstrConcatInt;"			  ]
[ "+",				  "command",	  "calc",	  "(l:str,r:str):str ",										  "CALCstrConcat;"			  ]
[ "+",				  "command",	  "str",	  "(l:str,r:str):str ",										  "STRConcat;"				  ]
[ "++",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",							  "CMDunaryPLUSPLUS;"			  ]
[ "++",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:flt] ",							  "CMDunaryPLUSPLUS;"			  ]
[ "++",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:sht] ",							  "CMDunaryPLUSPLUS;"			  ]
[ "++",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:lng] ",							  "CMDunaryPLUSPLUS;"			  ]
[ "++",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:int] ",							  "CMDunaryPLUSPLUS;"			  ]
[ "++",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid]):bat[:any_1,:oid] ",							  "CMDunaryPLUSPLUS;"			  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",							  "CMDunaryMIN;"			  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:flt] ",							  "CMDunaryMIN;"			  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:sht] ",							  "CMDunaryMIN;"			  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:lng] ",							  "CMDunaryMIN;"			  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:int] ",							  "CMDunaryMIN;"			  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid]):bat[:any_1,:oid] ",							  "CMDunaryMIN;"			  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:void,:int],c:bat[:oid,:int]):bat[:oid,:int] ",					  "CMDbatSUB_int_int_int;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:int] ",					  "CMDbatSUB_int_int_int;"		  ]
[ "-",				  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:int] ",						  "CMDcstSUBbat_int_int_int;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:int] ",						  "CMDbatSUBcst_int_int_int;"		  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:int):void ",					  "CMDbataccumSUBcst_int_int_int;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:int]):void ",					  "CMDbataccumSUBcst2_int_int_int;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",				  "CMDbataccumSUB_int_int_int;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:void,:lng],c:bat[:oid,:int]):bat[:oid,:lng] ",					  "CMDbatSUB_lng_lng_int;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:int]):bat[:any_1,:lng] ",					  "CMDbatSUB_lng_lng_int;"		  ]
[ "-",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:any_1,:int]):bat[:any_1,:lng] ",						  "CMDcstSUBbat_lng_lng_int;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:int):bat[:any_1,:lng] ",						  "CMDbatSUBcst_lng_lng_int;"		  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:int):void ",					  "CMDbataccumSUBcst_lng_lng_int;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:int]):void ",					  "CMDbataccumSUBcst2_lng_lng_int;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:int],c:bat[:any_1,:lng]):void ",				  "CMDbataccumSUB_lng_lng_int;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:void,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",					  "CMDbatSUB_sht_sht_sht;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:sht] ",					  "CMDbatSUB_sht_sht_sht;"		  ]
[ "-",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:sht] ",						  "CMDcstSUBbat_sht_sht_sht;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:sht] ",						  "CMDbatSUBcst_sht_sht_sht;"		  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void ",					  "CMDbataccumSUBcst_sht_sht_sht;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void ",					  "CMDbataccumSUBcst2_sht_sht_sht;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void ",				  "CMDbataccumSUB_sht_sht_sht;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:void,:sht],c:bat[:oid,:int]):bat[:oid,:int] ",					  "CMDbatSUB_int_sht_int;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:int]):bat[:any_1,:int] ",					  "CMDbatSUB_int_sht_int;"		  ]
[ "-",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:int]):bat[:any_1,:int] ",						  "CMDcstSUBbat_int_sht_int;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:int):bat[:any_1,:int] ",						  "CMDbatSUBcst_int_sht_int;"		  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:int):void ",					  "CMDbataccumSUBcst_int_sht_int;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:int]):void ",					  "CMDbataccumSUBcst2_int_sht_int;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",				  "CMDbataccumSUB_int_sht_int;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:void,:int],c:bat[:oid,:sht]):bat[:oid,:int] ",					  "CMDbatSUB_int_int_sht;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:sht]):bat[:any_1,:int] ",					  "CMDbatSUB_int_int_sht;"		  ]
[ "-",				  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:sht]):bat[:any_1,:int] ",						  "CMDcstSUBbat_int_int_sht;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:sht):bat[:any_1,:int] ",						  "CMDbatSUBcst_int_int_sht;"		  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:sht):void ",					  "CMDbataccumSUBcst_int_int_sht;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:sht]):void ",					  "CMDbataccumSUBcst2_int_int_sht;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:sht],c:bat[:any_1,:int]):void ",				  "CMDbataccumSUB_int_int_sht;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:void,:sht],c:bat[:oid,:sht]):bat[:oid,:int] ",					  "CMDbatSUB_int_sht_sht;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:int] ",					  "CMDbatSUB_int_sht_sht;"		  ]
[ "-",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:int] ",						  "CMDcstSUBbat_int_sht_sht;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:int] ",						  "CMDbatSUBcst_int_sht_sht;"		  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void ",					  "CMDbataccumSUBcst_int_sht_sht;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void ",					  "CMDbataccumSUBcst2_int_sht_sht;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:int]):void ",				  "CMDbataccumSUB_int_sht_sht;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:void,:int],c:bat[:oid,:int]):bat[:oid,:lng] ",					  "CMDbatSUB_lng_int_int;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:lng] ",					  "CMDbatSUB_lng_int_int;"		  ]
[ "-",				  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:lng] ",						  "CMDcstSUBbat_lng_int_int;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:lng] ",						  "CMDbatSUBcst_lng_int_int;"		  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:int):void ",					  "CMDbataccumSUBcst_lng_int_int;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:int]):void ",					  "CMDbataccumSUBcst2_lng_int_int;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],c:bat[:any_1,:lng]):void ",				  "CMDbataccumSUB_lng_int_int;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:void,:int],c:bat[:oid,:lng]):bat[:oid,:lng] ",					  "CMDbatSUB_lng_int_lng;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",					  "CMDbatSUB_lng_int_lng;"		  ]
[ "-",				  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",						  "CMDcstSUBbat_lng_int_lng;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:lng):bat[:any_1,:lng] ",						  "CMDbatSUBcst_lng_int_lng;"		  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:lng):void ",					  "CMDbataccumSUBcst_lng_int_lng;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:lng]):void ",					  "CMDbataccumSUBcst2_lng_int_lng;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",				  "CMDbataccumSUB_lng_int_lng;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:void,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",					  "CMDbatSUB_lng_lng_lng;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",					  "CMDbatSUB_lng_lng_lng;"		  ]
[ "-",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",						  "CMDcstSUBbat_lng_lng_lng;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:lng] ",						  "CMDbatSUBcst_lng_lng_lng;"		  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:lng):void ",					  "CMDbataccumSUBcst_lng_lng_lng;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:lng]):void ",					  "CMDbataccumSUBcst2_lng_lng_lng;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",				  "CMDbataccumSUB_lng_lng_lng;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:void,:sht],c:bat[:oid,:lng]):bat[:oid,:lng] ",					  "CMDbatSUB_lng_sht_lng;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",					  "CMDbatSUB_lng_sht_lng;"		  ]
[ "-",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",						  "CMDcstSUBbat_lng_sht_lng;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:lng):bat[:any_1,:lng] ",						  "CMDbatSUBcst_lng_sht_lng;"		  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:lng):void ",					  "CMDbataccumSUBcst_lng_sht_lng;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:lng]):void ",					  "CMDbataccumSUBcst2_lng_sht_lng;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",				  "CMDbataccumSUB_lng_sht_lng;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:void,:lng],c:bat[:oid,:sht]):bat[:oid,:lng] ",					  "CMDbatSUB_lng_lng_sht;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:sht]):bat[:any_1,:lng] ",					  "CMDbatSUB_lng_lng_sht;"		  ]
[ "-",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:any_1,:sht]):bat[:any_1,:lng] ",						  "CMDcstSUBbat_lng_lng_sht;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:sht):bat[:any_1,:lng] ",						  "CMDbatSUBcst_lng_lng_sht;"		  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:sht):void ",					  "CMDbataccumSUBcst_lng_lng_sht;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:sht]):void ",					  "CMDbataccumSUBcst2_lng_lng_sht;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:sht],c:bat[:any_1,:lng]):void ",				  "CMDbataccumSUB_lng_lng_sht;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:void,:sht],c:bat[:oid,:int]):bat[:oid,:lng] ",					  "CMDbatSUB_lng_sht_int;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:int]):bat[:any_1,:lng] ",					  "CMDbatSUB_lng_sht_int;"		  ]
[ "-",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:int]):bat[:any_1,:lng] ",						  "CMDcstSUBbat_lng_sht_int;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:int):bat[:any_1,:lng] ",						  "CMDbatSUBcst_lng_sht_int;"		  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:int):void ",					  "CMDbataccumSUBcst_lng_sht_int;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:int]):void ",					  "CMDbataccumSUBcst2_lng_sht_int;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:int],c:bat[:any_1,:lng]):void ",				  "CMDbataccumSUB_lng_sht_int;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:void,:int],c:bat[:oid,:sht]):bat[:oid,:lng] ",					  "CMDbatSUB_lng_int_sht;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:sht]):bat[:any_1,:lng] ",					  "CMDbatSUB_lng_int_sht;"		  ]
[ "-",				  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:sht]):bat[:any_1,:lng] ",						  "CMDcstSUBbat_lng_int_sht;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:sht):bat[:any_1,:lng] ",						  "CMDbatSUBcst_lng_int_sht;"		  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:sht):void ",					  "CMDbataccumSUBcst_lng_int_sht;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:sht]):void ",					  "CMDbataccumSUBcst2_lng_int_sht;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:sht],c:bat[:any_1,:lng]):void ",				  "CMDbataccumSUB_lng_int_sht;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:void,:flt],c:bat[:oid,:flt]):bat[:oid,:flt] ",					  "CMDbatSUB_flt_flt_flt;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:flt] ",					  "CMDbatSUB_flt_flt_flt;"		  ]
[ "-",				  "command",	  "batcalc",	  "(cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:flt] ",						  "CMDcstSUBbat_flt_flt_flt;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:flt] ",						  "CMDbatSUBcst_flt_flt_flt;"		  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:flt],b:bat[:any_1,:flt],cst:flt):void ",					  "CMDbataccumSUBcst_flt_flt_flt;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:flt],cst:flt,b:bat[:any_1,:flt]):void ",					  "CMDbataccumSUBcst2_flt_flt_flt;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:flt],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):void ",				  "CMDbataccumSUB_flt_flt_flt;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:void,:dbl],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",					  "CMDbatSUB_dbl_dbl_dbl;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",					  "CMDbatSUB_dbl_dbl_dbl;"		  ]
[ "-",				  "command",	  "batcalc",	  "(cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",						  "CMDcstSUBbat_dbl_dbl_dbl;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:dbl] ",						  "CMDbatSUBcst_dbl_dbl_dbl;"		  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:dbl],b:bat[:any_1,:dbl],cst:dbl):void ",					  "CMDbataccumSUBcst_dbl_dbl_dbl;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:dbl],cst:dbl,b:bat[:any_1,:dbl]):void ",					  "CMDbataccumSUBcst2_dbl_dbl_dbl;"	  ]
[ "-",				  "command",	  "batcalc",	  "(a:bat[:any_1,:dbl],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):void ",				  "CMDbataccumSUB_dbl_dbl_dbl;"		  ]
[ "-",				  "command",	  "calc",	  "(x:lng):lng ",										  "CALCunarylngNEG;"			  ]
[ "-",				  "command",	  "calc",	  "(x:int):int ",										  "CALCunaryintNEG;"			  ]
[ "-",				  "command",	  "calc",	  "(x:sht):sht ",										  "CALCunaryshtNEG;"			  ]
[ "-",				  "command",	  "calc",	  "(x:chr):chr ",										  "CALCunarychrNEG;"			  ]
[ "-",				  "command",	  "calc",	  "(x:flt):flt ",										  "CALCunaryfltNEG;"			  ]
[ "-",				  "command",	  "calc",	  "(x:dbl):dbl ",										  "CALCunarydblNEG;"			  ]
[ "-",				  "command",	  "calc",	  "(left:lng,right:dbl):dbl ",									  "CALCbinarySUBlngdbl;"		  ]
[ "-",				  "command",	  "calc",	  "(left:lng,right:flt):flt ",									  "CALCbinarySUBlngflt;"		  ]
[ "-",				  "command",	  "calc",	  "(left:lng,right:lng):lng ",									  "CALCbinarySUBlnglng;"		  ]
[ "-",				  "command",	  "calc",	  "(left:lng,right:int):lng ",									  "CALCbinarySUBlngint;"		  ]
[ "-",				  "command",	  "calc",	  "(left:lng,right:sht):lng ",									  "CALCbinarySUBlngsht;"		  ]
[ "-",				  "command",	  "calc",	  "(left:lng,right:chr):lng ",									  "CALCbinarySUBlngchr;"		  ]
[ "-",				  "command",	  "calc",	  "(left:int,right:dbl):dbl ",									  "CALCbinarySUBintdbl;"		  ]
[ "-",				  "command",	  "calc",	  "(left:int,right:flt):flt ",									  "CALCbinarySUBintflt;"		  ]
[ "-",				  "command",	  "calc",	  "(left:int,right:lng):lng ",									  "CALCbinarySUBintlng;"		  ]
[ "-",				  "command",	  "calc",	  "(left:int,right:int):int ",									  "CALCbinarySUBintint;"		  ]
[ "-",				  "command",	  "calc",	  "(left:int,right:sht):int ",									  "CALCbinarySUBintsht;"		  ]
[ "-",				  "command",	  "calc",	  "(left:int,right:chr):int ",									  "CALCbinarySUBintchr;"		  ]
[ "-",				  "command",	  "calc",	  "(left:sht,right:dbl):dbl ",									  "CALCbinarySUBshtdbl;"		  ]
[ "-",				  "command",	  "calc",	  "(left:sht,right:flt):flt ",									  "CALCbinarySUBshtflt;"		  ]
[ "-",				  "command",	  "calc",	  "(left:sht,right:lng):lng ",									  "CALCbinarySUBshtlng;"		  ]
[ "-",				  "command",	  "calc",	  "(left:sht,right:int):int ",									  "CALCbinarySUBshtint;"		  ]
[ "-",				  "command",	  "calc",	  "(left:sht,right:sht):sht ",									  "CALCbinarySUBshtsht;"		  ]
[ "-",				  "command",	  "calc",	  "(left:sht,right:chr):sht ",									  "CALCbinarySUBshtchr;"		  ]
[ "-",				  "command",	  "calc",	  "(left:chr,right:dbl):dbl ",									  "CALCbinarySUBchrdbl;"		  ]
[ "-",				  "command",	  "calc",	  "(left:chr,right:flt):flt ",									  "CALCbinarySUBchrflt;"		  ]
[ "-",				  "command",	  "calc",	  "(left:chr,right:lng):lng ",									  "CALCbinarySUBchrlng;"		  ]
[ "-",				  "command",	  "calc",	  "(left:chr,right:int):int ",									  "CALCbinarySUBchrint;"		  ]
[ "-",				  "command",	  "calc",	  "(left:chr,right:sht):sht ",									  "CALCbinarySUBchrsht;"		  ]
[ "-",				  "command",	  "calc",	  "(left:chr,right:chr):chr ",									  "CALCbinarySUBchrchr;"		  ]
[ "-",				  "command",	  "calc",	  "(left:oid,right:oid):oid ",									  "CALCbinarySUBoidoid;"		  ]
[ "-",				  "command",	  "calc",	  "(left:dbl,right:dbl):dbl ",									  "CALCbinarySUBdbldbl;"		  ]
[ "-",				  "command",	  "calc",	  "(left:dbl,right:flt):dbl ",									  "CALCbinarySUBdblflt;"		  ]
[ "-",				  "command",	  "calc",	  "(left:dbl,right:lng):dbl ",									  "CALCbinarySUBdbllng;"		  ]
[ "-",				  "command",	  "calc",	  "(left:dbl,right:int):dbl ",									  "CALCbinarySUBdblint;"		  ]
[ "-",				  "command",	  "calc",	  "(left:dbl,right:sht):dbl ",									  "CALCbinarySUBdblsht;"		  ]
[ "-",				  "command",	  "calc",	  "(left:dbl,right:chr):dbl ",									  "CALCbinarySUBdblchr;"		  ]
[ "-",				  "command",	  "calc",	  "(left:flt,right:dbl):dbl ",									  "CALCbinarySUBfltdbl;"		  ]
[ "-",				  "command",	  "calc",	  "(left:flt,right:flt):flt ",									  "CALCbinarySUBfltflt;"		  ]
[ "-",				  "command",	  "calc",	  "(left:flt,right:lng):flt ",									  "CALCbinarySUBfltlng;"		  ]
[ "-",				  "command",	  "calc",	  "(left:flt,right:int):flt ",									  "CALCbinarySUBfltint;"		  ]
[ "-",				  "command",	  "calc",	  "(left:flt,right:sht):flt ",									  "CALCbinarySUBfltsht;"		  ]
[ "-",				  "command",	  "calc",	  "(left:flt,right:chr):flt ",									  "CALCbinarySUBfltchr;"		  ]
[ "--",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",							  "CMDunaryMINMIN;"			  ]
[ "--",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:flt] ",							  "CMDunaryMINMIN;"			  ]
[ "--",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:sht] ",							  "CMDunaryMINMIN;"			  ]
[ "--",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:lng] ",							  "CMDunaryMINMIN;"			  ]
[ "--",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:int] ",							  "CMDunaryMINMIN;"			  ]
[ "--",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid]):bat[:any_1,:oid] ",							  "CMDunaryMINMIN;"			  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:void,:int],c:bat[:oid,:int]):bat[:oid,:int] ",					  "CMDbatDIV_int_int_int;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:int] ",					  "CMDbatDIV_int_int_int;"		  ]
[ "/",				  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:int] ",						  "CMDcstDIVbat_int_int_int;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:int] ",						  "CMDbatDIVcst_int_int_int;"		  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:int):void ",					  "CMDbataccumDIVcst_int_int_int;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:int]):void ",					  "CMDbataccumDIVcst2_int_int_int;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",				  "CMDbataccumDIV_int_int_int;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:void,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",					  "CMDbatDIV_lng_lng_lng;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",					  "CMDbatDIV_lng_lng_lng;"		  ]
[ "/",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",						  "CMDcstDIVbat_lng_lng_lng;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:lng] ",						  "CMDbatDIVcst_lng_lng_lng;"		  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:lng):void ",					  "CMDbataccumDIVcst_lng_lng_lng;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:lng]):void ",					  "CMDbataccumDIVcst2_lng_lng_lng;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",				  "CMDbataccumDIV_lng_lng_lng;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:void,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",					  "CMDbatDIV_sht_sht_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:sht] ",					  "CMDbatDIV_sht_sht_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:sht] ",						  "CMDcstDIVbat_sht_sht_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:sht] ",						  "CMDbatDIVcst_sht_sht_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void ",					  "CMDbataccumDIVcst_sht_sht_sht;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void ",					  "CMDbataccumDIVcst2_sht_sht_sht;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void ",				  "CMDbataccumDIV_sht_sht_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:void,:sht],c:bat[:oid,:int]):bat[:oid,:int] ",					  "CMDbatDIV_int_sht_int;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:int]):bat[:any_1,:int] ",					  "CMDbatDIV_int_sht_int;"		  ]
[ "/",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:int]):bat[:any_1,:int] ",						  "CMDcstDIVbat_int_sht_int;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:int):bat[:any_1,:int] ",						  "CMDbatDIVcst_int_sht_int;"		  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:int):void ",					  "CMDbataccumDIVcst_int_sht_int;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:int]):void ",					  "CMDbataccumDIVcst2_int_sht_int;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",				  "CMDbataccumDIV_int_sht_int;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:void,:int],c:bat[:oid,:sht]):bat[:oid,:int] ",					  "CMDbatDIV_int_int_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:sht]):bat[:any_1,:int] ",					  "CMDbatDIV_int_int_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:sht]):bat[:any_1,:int] ",						  "CMDcstDIVbat_int_int_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:sht):bat[:any_1,:int] ",						  "CMDbatDIVcst_int_int_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:sht):void ",					  "CMDbataccumDIVcst_int_int_sht;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:sht]):void ",					  "CMDbataccumDIVcst2_int_int_sht;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:sht],c:bat[:any_1,:int]):void ",				  "CMDbataccumDIV_int_int_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:void,:sht],c:bat[:oid,:sht]):bat[:oid,:int] ",					  "CMDbatDIV_int_sht_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:int] ",					  "CMDbatDIV_int_sht_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:int] ",						  "CMDcstDIVbat_int_sht_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:int] ",						  "CMDbatDIVcst_int_sht_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void ",					  "CMDbataccumDIVcst_int_sht_sht;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void ",					  "CMDbataccumDIVcst2_int_sht_sht;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:int]):void ",				  "CMDbataccumDIV_int_sht_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:void,:int],c:bat[:oid,:int]):bat[:oid,:lng] ",					  "CMDbatDIV_lng_int_int;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:lng] ",					  "CMDbatDIV_lng_int_int;"		  ]
[ "/",				  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:lng] ",						  "CMDcstDIVbat_lng_int_int;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:lng] ",						  "CMDbatDIVcst_lng_int_int;"		  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:int):void ",					  "CMDbataccumDIVcst_lng_int_int;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:int]):void ",					  "CMDbataccumDIVcst2_lng_int_int;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],c:bat[:any_1,:lng]):void ",				  "CMDbataccumDIV_lng_int_int;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:void,:int],c:bat[:oid,:lng]):bat[:oid,:lng] ",					  "CMDbatDIV_lng_int_lng;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",					  "CMDbatDIV_lng_int_lng;"		  ]
[ "/",				  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",						  "CMDcstDIVbat_lng_int_lng;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:lng):bat[:any_1,:lng] ",						  "CMDbatDIVcst_lng_int_lng;"		  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:lng):void ",					  "CMDbataccumDIVcst_lng_int_lng;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:lng]):void ",					  "CMDbataccumDIVcst2_lng_int_lng;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",				  "CMDbataccumDIV_lng_int_lng;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:void,:lng],c:bat[:oid,:int]):bat[:oid,:lng] ",					  "CMDbatDIV_lng_lng_int;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:int]):bat[:any_1,:lng] ",					  "CMDbatDIV_lng_lng_int;"		  ]
[ "/",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:any_1,:int]):bat[:any_1,:lng] ",						  "CMDcstDIVbat_lng_lng_int;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:int):bat[:any_1,:lng] ",						  "CMDbatDIVcst_lng_lng_int;"		  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:int):void ",					  "CMDbataccumDIVcst_lng_lng_int;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:int]):void ",					  "CMDbataccumDIVcst2_lng_lng_int;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:int],c:bat[:any_1,:lng]):void ",				  "CMDbataccumDIV_lng_lng_int;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:void,:sht],c:bat[:oid,:sht]):bat[:oid,:lng] ",					  "CMDbatDIV_lng_sht_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:lng] ",					  "CMDbatDIV_lng_sht_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:lng] ",						  "CMDcstDIVbat_lng_sht_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:lng] ",						  "CMDbatDIVcst_lng_sht_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void ",					  "CMDbataccumDIVcst_lng_sht_sht;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void ",					  "CMDbataccumDIVcst2_lng_sht_sht;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:lng]):void ",				  "CMDbataccumDIV_lng_sht_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:void,:sht],c:bat[:oid,:lng]):bat[:oid,:lng] ",					  "CMDbatDIV_lng_sht_lng;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",					  "CMDbatDIV_lng_sht_lng;"		  ]
[ "/",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",						  "CMDcstDIVbat_lng_sht_lng;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:lng):bat[:any_1,:lng] ",						  "CMDbatDIVcst_lng_sht_lng;"		  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:lng):void ",					  "CMDbataccumDIVcst_lng_sht_lng;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:lng]):void ",					  "CMDbataccumDIVcst2_lng_sht_lng;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",				  "CMDbataccumDIV_lng_sht_lng;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:void,:lng],c:bat[:oid,:sht]):bat[:oid,:lng] ",					  "CMDbatDIV_lng_lng_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:sht]):bat[:any_1,:lng] ",					  "CMDbatDIV_lng_lng_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:any_1,:sht]):bat[:any_1,:lng] ",						  "CMDcstDIVbat_lng_lng_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:sht):bat[:any_1,:lng] ",						  "CMDbatDIVcst_lng_lng_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:sht):void ",					  "CMDbataccumDIVcst_lng_lng_sht;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:sht]):void ",					  "CMDbataccumDIVcst2_lng_lng_sht;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:sht],c:bat[:any_1,:lng]):void ",				  "CMDbataccumDIV_lng_lng_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:void,:sht],c:bat[:oid,:int]):bat[:oid,:lng] ",					  "CMDbatDIV_lng_sht_int;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:int]):bat[:any_1,:lng] ",					  "CMDbatDIV_lng_sht_int;"		  ]
[ "/",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:int]):bat[:any_1,:lng] ",						  "CMDcstDIVbat_lng_sht_int;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:int):bat[:any_1,:lng] ",						  "CMDbatDIVcst_lng_sht_int;"		  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:int):void ",					  "CMDbataccumDIVcst_lng_sht_int;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:int]):void ",					  "CMDbataccumDIVcst2_lng_sht_int;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:int],c:bat[:any_1,:lng]):void ",				  "CMDbataccumDIV_lng_sht_int;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:void,:int],c:bat[:oid,:sht]):bat[:oid,:lng] ",					  "CMDbatDIV_lng_int_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:sht]):bat[:any_1,:lng] ",					  "CMDbatDIV_lng_int_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:sht]):bat[:any_1,:lng] ",						  "CMDcstDIVbat_lng_int_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:sht):bat[:any_1,:lng] ",						  "CMDbatDIVcst_lng_int_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:sht):void ",					  "CMDbataccumDIVcst_lng_int_sht;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:sht]):void ",					  "CMDbataccumDIVcst2_lng_int_sht;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:sht],c:bat[:any_1,:lng]):void ",				  "CMDbataccumDIV_lng_int_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:void,:flt],c:bat[:oid,:flt]):bat[:oid,:flt] ",					  "CMDbatDIV_flt_flt_flt;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:flt] ",					  "CMDbatDIV_flt_flt_flt;"		  ]
[ "/",				  "command",	  "batcalc",	  "(cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:flt] ",						  "CMDcstDIVbat_flt_flt_flt;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:flt] ",						  "CMDbatDIVcst_flt_flt_flt;"		  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:flt],b:bat[:any_1,:flt],cst:flt):void ",					  "CMDbataccumDIVcst_flt_flt_flt;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:flt],cst:flt,b:bat[:any_1,:flt]):void ",					  "CMDbataccumDIVcst2_flt_flt_flt;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:flt],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):void ",				  "CMDbataccumDIV_flt_flt_flt;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:void,:dbl],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",					  "CMDbatDIV_dbl_dbl_dbl;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",					  "CMDbatDIV_dbl_dbl_dbl;"		  ]
[ "/",				  "command",	  "batcalc",	  "(cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",						  "CMDcstDIVbat_dbl_dbl_dbl;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:dbl] ",						  "CMDbatDIVcst_dbl_dbl_dbl;"		  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:dbl],b:bat[:any_1,:dbl],cst:dbl):void ",					  "CMDbataccumDIVcst_dbl_dbl_dbl;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:dbl],cst:dbl,b:bat[:any_1,:dbl]):void ",					  "CMDbataccumDIVcst2_dbl_dbl_dbl;"	  ]
[ "/",				  "command",	  "batcalc",	  "(a:bat[:any_1,:dbl],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):void ",				  "CMDbataccumDIV_dbl_dbl_dbl;"		  ]
[ "/",				  "command",	  "calc",	  "(left:lng,right:dbl):dbl ",									  "CALCbinarycheckDIVlngdbl;"		  ]
[ "/",				  "command",	  "calc",	  "(left:lng,right:flt):flt ",									  "CALCbinarycheckDIVlngflt;"		  ]
[ "/",				  "command",	  "calc",	  "(left:lng,right:lng):lng ",									  "CALCbinarycheckDIVlnglng;"		  ]
[ "/",				  "command",	  "calc",	  "(left:lng,right:int):lng ",									  "CALCbinarycheckDIVlngint;"		  ]
[ "/",				  "command",	  "calc",	  "(left:lng,right:sht):lng ",									  "CALCbinarycheckDIVlngsht;"		  ]
[ "/",				  "command",	  "calc",	  "(left:lng,right:chr):lng ",									  "CALCbinarycheckDIVlngchr;"		  ]
[ "/",				  "command",	  "calc",	  "(left:int,right:dbl):dbl ",									  "CALCbinarycheckDIVintdbl;"		  ]
[ "/",				  "command",	  "calc",	  "(left:int,right:flt):flt ",									  "CALCbinarycheckDIVintflt;"		  ]
[ "/",				  "command",	  "calc",	  "(left:int,right:lng):lng ",									  "CALCbinarycheckDIVintlng;"		  ]
[ "/",				  "command",	  "calc",	  "(left:int,right:int):int ",									  "CALCbinarycheckDIVintint;"		  ]
[ "/",				  "command",	  "calc",	  "(left:int,right:sht):int ",									  "CALCbinarycheckDIVintsht;"		  ]
[ "/",				  "command",	  "calc",	  "(left:int,right:chr):int ",									  "CALCbinarycheckDIVintchr;"		  ]
[ "/",				  "command",	  "calc",	  "(left:sht,right:dbl):dbl ",									  "CALCbinarycheckDIVshtdbl;"		  ]
[ "/",				  "command",	  "calc",	  "(left:sht,right:flt):flt ",									  "CALCbinarycheckDIVshtflt;"		  ]
[ "/",				  "command",	  "calc",	  "(left:sht,right:lng):lng ",									  "CALCbinarycheckDIVshtlng;"		  ]
[ "/",				  "command",	  "calc",	  "(left:sht,right:int):int ",									  "CALCbinarycheckDIVshtint;"		  ]
[ "/",				  "command",	  "calc",	  "(left:sht,right:sht):sht ",									  "CALCbinarycheckDIVshtsht;"		  ]
[ "/",				  "command",	  "calc",	  "(left:sht,right:chr):sht ",									  "CALCbinarycheckDIVshtchr;"		  ]
[ "/",				  "command",	  "calc",	  "(left:chr,right:dbl):dbl ",									  "CALCbinarycheckDIVchrdbl;"		  ]
[ "/",				  "command",	  "calc",	  "(left:chr,right:flt):flt ",									  "CALCbinarycheckDIVchrflt;"		  ]
[ "/",				  "command",	  "calc",	  "(left:chr,right:lng):lng ",									  "CALCbinarycheckDIVchrlng;"		  ]
[ "/",				  "command",	  "calc",	  "(left:chr,right:int):int ",									  "CALCbinarycheckDIVchrint;"		  ]
[ "/",				  "command",	  "calc",	  "(left:chr,right:sht):sht ",									  "CALCbinarycheckDIVchrsht;"		  ]
[ "/",				  "command",	  "calc",	  "(left:chr,right:chr):chr ",									  "CALCbinarycheckDIVchrchr;"		  ]
[ "/",				  "command",	  "calc",	  "(left:oid,right:oid):oid ",									  "CALCbinarycheckDIVoidoid;"		  ]
[ "/",				  "command",	  "calc",	  "(left:dbl,right:dbl):dbl ",									  "CALCbinarycheckDIVdbldbl;"		  ]
[ "/",				  "command",	  "calc",	  "(left:dbl,right:flt):dbl ",									  "CALCbinarycheckDIVdblflt;"		  ]
[ "/",				  "command",	  "calc",	  "(left:dbl,right:lng):dbl ",									  "CALCbinarycheckDIVdbllng;"		  ]
[ "/",				  "command",	  "calc",	  "(left:dbl,right:int):dbl ",									  "CALCbinarycheckDIVdblint;"		  ]
[ "/",				  "command",	  "calc",	  "(left:dbl,right:sht):dbl ",									  "CALCbinarycheckDIVdblsht;"		  ]
[ "/",				  "command",	  "calc",	  "(left:dbl,right:chr):dbl ",									  "CALCbinarycheckDIVdblchr;"		  ]
[ "/",				  "command",	  "calc",	  "(left:flt,right:dbl):dbl ",									  "CALCbinarycheckDIVfltdbl;"		  ]
[ "/",				  "command",	  "calc",	  "(left:flt,right:flt):flt ",									  "CALCbinarycheckDIVfltflt;"		  ]
[ "/",				  "command",	  "calc",	  "(left:flt,right:lng):flt ",									  "CALCbinarycheckDIVfltlng;"		  ]
[ "/",				  "command",	  "calc",	  "(left:flt,right:int):flt ",									  "CALCbinarycheckDIVfltint;"		  ]
[ "/",				  "command",	  "calc",	  "(left:flt,right:sht):flt ",									  "CALCbinarycheckDIVfltsht;"		  ]
[ "/",				  "command",	  "calc",	  "(left:flt,right:chr):flt ",									  "CALCbinarycheckDIVfltchr;"		  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",				  "CMDcmpaccumLTcst;"			  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",						  "CMDcmpLTcst;"			  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",		  "CMDcmpaccumLT;"			  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",					  "CMDcmpLT;"				  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",				  "CMDcmpaccumLTcst;"			  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",						  "CMDcmpLTcst;"			  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",		  "CMDcmpaccumLT;"			  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",					  "CMDcmpLT;"				  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",				  "CMDcmpaccumLTcst;"			  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",						  "CMDcmpLTcst;"			  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",		  "CMDcmpaccumLT;"			  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",					  "CMDcmpLT;"				  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",				  "CMDcmpaccumLTcst;"			  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",						  "CMDcmpLTcst;"			  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",		  "CMDcmpaccumLT;"			  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",					  "CMDcmpLT;"				  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",				  "CMDcmpaccumLTcst;"			  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",						  "CMDcmpLTcst;"			  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",		  "CMDcmpaccumLT;"			  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",					  "CMDcmpLT;"				  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",				  "CMDcmpaccumLTcst;"			  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",						  "CMDcmpLTcst;"			  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",		  "CMDcmpaccumLT;"			  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",					  "CMDcmpLT;"				  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",				  "CMDcmpaccumLTcst;"			  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",						  "CMDcmpLTcst;"			  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",		  "CMDcmpaccumLT;"			  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",					  "CMDcmpLT;"				  ]
[ "<",				  "command",	  "calc",	  "(left:str,right:str):bit ",									  "CALCcompLTstrstr;"			  ]
[ "<",				  "command",	  "calc",	  "(left:lng,right:lng):bit ",									  "CALCcompLTlnglng;"			  ]
[ "<",				  "command",	  "calc",	  "(left:lng,right:int):bit ",									  "CALCcompLTlngint;"			  ]
[ "<",				  "command",	  "calc",	  "(left:lng,right:sht):bit ",									  "CALCcompLTlngsht;"			  ]
[ "<",				  "command",	  "calc",	  "(left:lng,right:chr):bit ",									  "CALCcompLTlngchr;"			  ]
[ "<",				  "command",	  "calc",	  "(left:int,right:lng):bit ",									  "CALCcompLTintlng;"			  ]
[ "<",				  "command",	  "calc",	  "(left:int,right:int):bit ",									  "CALCcompLTintint;"			  ]
[ "<",				  "command",	  "calc",	  "(left:int,right:sht):bit ",									  "CALCcompLTintsht;"			  ]
[ "<",				  "command",	  "calc",	  "(left:int,right:chr):bit ",									  "CALCcompLTintchr;"			  ]
[ "<",				  "command",	  "calc",	  "(left:sht,right:lng):bit ",									  "CALCcompLTshtlng;"			  ]
[ "<",				  "command",	  "calc",	  "(left:sht,right:int):bit ",									  "CALCcompLTshtint;"			  ]
[ "<",				  "command",	  "calc",	  "(left:sht,right:sht):bit ",									  "CALCcompLTshtsht;"			  ]
[ "<",				  "command",	  "calc",	  "(left:sht,right:chr):bit ",									  "CALCcompLTshtchr;"			  ]
[ "<",				  "command",	  "calc",	  "(left:chr,right:lng):bit ",									  "CALCcompLTchrlng;"			  ]
[ "<",				  "command",	  "calc",	  "(left:chr,right:int):bit ",									  "CALCcompLTchrint;"			  ]
[ "<",				  "command",	  "calc",	  "(left:chr,right:sht):bit ",									  "CALCcompLTchrsht;"			  ]
[ "<",				  "command",	  "calc",	  "(left:chr,right:chr):bit ",									  "CALCcompLTchrchr;"			  ]
[ "<",				  "command",	  "calc",	  "(left:dbl,right:dbl):bit ",									  "CALCcompLTdbldbl;"			  ]
[ "<",				  "command",	  "calc",	  "(left:flt,right:dbl):bit ",									  "CALCcompLTfltdbl;"			  ]
[ "<",				  "command",	  "calc",	  "(left:flt,right:flt):bit ",									  "CALCcompLTfltflt;"			  ]
[ "<",				  "command",	  "calc",	  "(left:oid,right:oid):bit ",									  "CALCcompLToidoid;"			  ]
[ "<",				  "command",	  "inet",	  "(v:inet,w:inet):bit ",									  "INET_comp_LT;"			  ]
[ "<",				  "command",	  "date",	  "(v:date,w:date):bit ",									  "MTIMEdate_LT;"			  ]
[ "<",				  "command",	  "daytime",	  "(v:daytime,w:daytime):bit ",									  "MTIMEdaytime_LT;"			  ]
[ "<",				  "command",	  "timestamp",	  "(v:timestamp,w:timestamp):bit ",								  "MTIMEtimestamp_LT;"			  ]
[ "<<",				  "command",	  "calc",	  "(left:lng,right:int):lng ",									  "CALCbinaryLSHlngint;"		  ]
[ "<<",				  "command",	  "calc",	  "(left:int,right:int):int ",									  "CALCbinaryLSHintint;"		  ]
[ "<<",				  "command",	  "calc",	  "(left:sht,right:int):sht ",									  "CALCbinaryLSHshtint;"		  ]
[ "<<",				  "command",	  "calc",	  "(left:chr,right:int):chr ",									  "CALCbinaryLSHchrint;"		  ]
[ "<<",				  "command",	  "inet",	  "(v:inet,w:inet):bit ",									  "INET_comp_CW;"			  ]
[ "<<=",			  "command",	  "inet",	  "(v:inet,w:inet):bit ",									  "INET_comp_CWE;"			  ]
[ "<=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",				  "CMDcmpaccumLEcst;"			  ]
[ "<=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",						  "CMDcmpLEcst;"			  ]
[ "<=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",		  "CMDcmpaccumLE;"			  ]
[ "<=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",					  "CMDcmpLE;"				  ]
[ "<=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",				  "CMDcmpaccumLEcst;"			  ]
[ "<=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",						  "CMDcmpLEcst;"			  ]
[ "<=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",		  "CMDcmpaccumLE;"			  ]
[ "<=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",					  "CMDcmpLE;"				  ]
[ "<=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",				  "CMDcmpaccumLEcst;"			  ]
[ "<=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",						  "CMDcmpLEcst;"			  ]
[ "<=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",		  "CMDcmpaccumLE;"			  ]
[ "<=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",					  "CMDcmpLE;"				  ]
[ "<=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",				  "CMDcmpaccumLEcst;"			  ]
[ "<=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",						  "CMDcmpLEcst;"			  ]
[ "<=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",		  "CMDcmpaccumLE;"			  ]
[ "<=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",					  "CMDcmpLE;"				  ]
[ "<=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",				  "CMDcmpaccumLEcst;"			  ]
[ "<=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",						  "CMDcmpLEcst;"			  ]
[ "<=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",		  "CMDcmpaccumLE;"			  ]
[ "<=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",					  "CMDcmpLE;"				  ]
[ "<=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",				  "CMDcmpaccumLEcst;"			  ]
[ "<=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",						  "CMDcmpLEcst;"			  ]
[ "<=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",		  "CMDcmpaccumLE;"			  ]
[ "<=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",					  "CMDcmpLE;"				  ]
[ "<=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",				  "CMDcmpaccumLEcst;"			  ]
[ "<=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",						  "CMDcmpLEcst;"			  ]
[ "<=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",		  "CMDcmpaccumLE;"			  ]
[ "<=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",					  "CMDcmpLE;"				  ]
[ "<=",				  "command",	  "calc",	  "(left:str,right:str):bit ",									  "CALCcompLEstrstr;"			  ]
[ "<=",				  "command",	  "calc",	  "(left:lng,right:lng):bit ",									  "CALCcompLElnglng;"			  ]
[ "<=",				  "command",	  "calc",	  "(left:lng,right:int):bit ",									  "CALCcompLElngint;"			  ]
[ "<=",				  "command",	  "calc",	  "(left:lng,right:sht):bit ",									  "CALCcompLElngsht;"			  ]
[ "<=",				  "command",	  "calc",	  "(left:lng,right:chr):bit ",									  "CALCcompLElngchr;"			  ]
[ "<=",				  "command",	  "calc",	  "(left:int,right:lng):bit ",									  "CALCcompLEintlng;"			  ]
[ "<=",				  "command",	  "calc",	  "(left:int,right:int):bit ",									  "CALCcompLEintint;"			  ]
[ "<=",				  "command",	  "calc",	  "(left:int,right:sht):bit ",									  "CALCcompLEintsht;"			  ]
[ "<=",				  "command",	  "calc",	  "(left:int,right:chr):bit ",									  "CALCcompLEintchr;"			  ]
[ "<=",				  "command",	  "calc",	  "(left:sht,right:lng):bit ",									  "CALCcompLEshtlng;"			  ]
[ "<=",				  "command",	  "calc",	  "(left:sht,right:int):bit ",									  "CALCcompLEshtint;"			  ]
[ "<=",				  "command",	  "calc",	  "(left:sht,right:sht):bit ",									  "CALCcompLEshtsht;"			  ]
[ "<=",				  "command",	  "calc",	  "(left:sht,right:chr):bit ",									  "CALCcompLEshtchr;"			  ]
[ "<=",				  "command",	  "calc",	  "(left:chr,right:lng):bit ",									  "CALCcompLEchrlng;"			  ]
[ "<=",				  "command",	  "calc",	  "(left:chr,right:int):bit ",									  "CALCcompLEchrint;"			  ]
[ "<=",				  "command",	  "calc",	  "(left:chr,right:sht):bit ",									  "CALCcompLEchrsht;"			  ]
[ "<=",				  "command",	  "calc",	  "(left:chr,right:chr):bit ",									  "CALCcompLEchrchr;"			  ]
[ "<=",				  "command",	  "calc",	  "(left:dbl,right:dbl):bit ",									  "CALCcompLEdbldbl;"			  ]
[ "<=",				  "command",	  "calc",	  "(left:flt,right:dbl):bit ",									  "CALCcompLEfltdbl;"			  ]
[ "<=",				  "command",	  "calc",	  "(left:flt,right:flt):bit ",									  "CALCcompLEfltflt;"			  ]
[ "<=",				  "command",	  "calc",	  "(left:oid,right:oid):bit ",									  "CALCcompLEoidoid;"			  ]
[ "<=",				  "command",	  "inet",	  "(v:inet,w:inet):bit ",									  "INET_comp_LE;"			  ]
[ "<=",				  "command",	  "date",	  "(v:date,w:date):bit ",									  "MTIMEdate_LE;"			  ]
[ "<=",				  "command",	  "daytime",	  "(v:daytime,w:daytime):bit ",									  "MTIMEdaytime_LE;"			  ]
[ "<=",				  "command",	  "timestamp",	  "(v:timestamp,w:timestamp):bit ",								  "MTIMEtimestamp_LE;"			  ]
[ "=",				  "command",	  "inet",	  "(v:inet,w:inet):bit ",									  "INET_comp_EQ;"			  ]
[ "=",				  "command",	  "date",	  "(v:date,w:date):bit ",									  "MTIMEdate_EQ;"			  ]
[ "=",				  "command",	  "daytime",	  "(v:daytime,w:daytime):bit ",									  "MTIMEdaytime_EQ;"			  ]
[ "=",				  "command",	  "timestamp",	  "(v:timestamp,w:timestamp):bit ",								  "MTIMEtimestamp_EQ;"			  ]
[ "==",				  "command",	  "batstr",	  "(l:bat[:void,:str],r:str):bat[:void,:bit] ",							  "STRbatEqualCst;"			  ]
[ "==",				  "command",	  "batstr",	  "(l:bat[:void,:str],r:bat[:void,:str]):bat[:void,:bit] ",					  "STRbatEqual;"			  ]
[ "==",				  "command",	  "batcalc",	  "(left:bat[:void,:any_1],right:bat[:void,:any_1]):bat[:void,:bit] ",				  "CMDcmpEQ;"				  ]
[ "==",				  "command",	  "batcalc",	  "(left:bat[:oid,:any_1],right:bat[:void,:any_1]):bat[:void,:bit] ",				  "CMDcmpEQ;"				  ]
[ "==",				  "command",	  "batcalc",	  "(left:bat[:void,:any_1],right:bat[:oid,:any_1]):bat[:void,:bit] ",				  "CMDcmpEQ;"				  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",				  "CMDcmpaccumEQcst;"			  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",						  "CMDcmpEQcst;"			  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",		  "CMDcmpaccumEQ;"			  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",					  "CMDcmpEQ;"				  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",				  "CMDcmpaccumEQcst;"			  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",						  "CMDcmpEQcst;"			  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",		  "CMDcmpaccumEQ;"			  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",					  "CMDcmpEQ;"				  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",				  "CMDcmpaccumEQcst;"			  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",						  "CMDcmpEQcst;"			  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",		  "CMDcmpaccumEQ;"			  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",					  "CMDcmpEQ;"				  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",				  "CMDcmpaccumEQcst;"			  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",						  "CMDcmpEQcst;"			  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",		  "CMDcmpaccumEQ;"			  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",					  "CMDcmpEQ;"				  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",				  "CMDcmpaccumEQcst;"			  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",						  "CMDcmpEQcst;"			  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",		  "CMDcmpaccumEQ;"			  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",					  "CMDcmpEQ;"				  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",				  "CMDcmpaccumEQcst;"			  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",						  "CMDcmpEQcst;"			  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",		  "CMDcmpaccumEQ;"			  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",					  "CMDcmpEQ;"				  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",				  "CMDcmpaccumEQcst;"			  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",						  "CMDcmpEQcst;"			  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",		  "CMDcmpaccumEQ;"			  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",					  "CMDcmpEQ;"				  ]
[ "==",				  "command",	  "calc",	  "(left:str,right:str):bit ",									  "CALCcompEQstrstr;"			  ]
[ "==",				  "command",	  "calc",	  "(left:lng,right:lng):bit ",									  "CALCcompEQlnglng;"			  ]
[ "==",				  "command",	  "calc",	  "(left:lng,right:int):bit ",									  "CALCcompEQlngint;"			  ]
[ "==",				  "command",	  "calc",	  "(left:lng,right:sht):bit ",									  "CALCcompEQlngsht;"			  ]
[ "==",				  "command",	  "calc",	  "(left:lng,right:chr):bit ",									  "CALCcompEQlngchr;"			  ]
[ "==",				  "command",	  "calc",	  "(left:int,right:lng):bit ",									  "CALCcompEQintlng;"			  ]
[ "==",				  "command",	  "calc",	  "(left:int,right:int):bit ",									  "CALCcompEQintint;"			  ]
[ "==",				  "command",	  "calc",	  "(left:int,right:sht):bit ",									  "CALCcompEQintsht;"			  ]
[ "==",				  "command",	  "calc",	  "(left:int,right:chr):bit ",									  "CALCcompEQintchr;"			  ]
[ "==",				  "command",	  "calc",	  "(left:sht,right:lng):bit ",									  "CALCcompEQshtlng;"			  ]
[ "==",				  "command",	  "calc",	  "(left:sht,right:int):bit ",									  "CALCcompEQshtint;"			  ]
[ "==",				  "command",	  "calc",	  "(left:sht,right:sht):bit ",									  "CALCcompEQshtsht;"			  ]
[ "==",				  "command",	  "calc",	  "(left:sht,right:chr):bit ",									  "CALCcompEQshtchr;"			  ]
[ "==",				  "command",	  "calc",	  "(left:bit,right:lng):bit ",									  "CALCcompEQbitlng;"			  ]
[ "==",				  "command",	  "calc",	  "(left:bit,right:int):bit ",									  "CALCcompEQbitint;"			  ]
[ "==",				  "command",	  "calc",	  "(left:bit,right:sht):bit ",									  "CALCcompEQbitsht;"			  ]
[ "==",				  "command",	  "calc",	  "(left:bit,right:chr):bit ",									  "CALCcompEQbitchr;"			  ]
[ "==",				  "command",	  "calc",	  "(left:bit,right:bit):bit ",									  "CALCcompEQbitbit;"			  ]
[ "==",				  "command",	  "calc",	  "(left:chr,right:lng):bit ",									  "CALCcompEQchrlng;"			  ]
[ "==",				  "command",	  "calc",	  "(left:chr,right:int):bit ",									  "CALCcompEQchrint;"			  ]
[ "==",				  "command",	  "calc",	  "(left:chr,right:sht):bit ",									  "CALCcompEQchrsht;"			  ]
[ "==",				  "command",	  "calc",	  "(left:chr,right:chr):bit ",									  "CALCcompEQchrchr;"			  ]
[ "==",				  "command",	  "calc",	  "(left:dbl,right:dbl):bit ",									  "CALCcompEQdbldbl;"			  ]
[ "==",				  "command",	  "calc",	  "(left:flt,right:dbl):bit ",									  "CALCcompEQfltdbl;"			  ]
[ "==",				  "command",	  "calc",	  "(left:flt,right:flt):bit ",									  "CALCcompEQfltflt;"			  ]
[ "==",				  "command",	  "calc",	  "(left:oid,right:oid):bit ",									  "CALCcompEQoidoid;"			  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",				  "CMDcmpaccumGTcst;"			  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",						  "CMDcmpGTcst;"			  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",		  "CMDcmpaccumGT;"			  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",					  "CMDcmpGT;"				  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",				  "CMDcmpaccumGTcst;"			  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",						  "CMDcmpGTcst;"			  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",		  "CMDcmpaccumGT;"			  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",					  "CMDcmpGT;"				  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",				  "CMDcmpaccumGTcst;"			  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",						  "CMDcmpGTcst;"			  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",		  "CMDcmpaccumGT;"			  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",					  "CMDcmpGT;"				  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",				  "CMDcmpaccumGTcst;"			  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",						  "CMDcmpGTcst;"			  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",		  "CMDcmpaccumGT;"			  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",					  "CMDcmpGT;"				  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",				  "CMDcmpaccumGTcst;"			  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",						  "CMDcmpGTcst;"			  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",		  "CMDcmpaccumGT;"			  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",					  "CMDcmpGT;"				  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",				  "CMDcmpaccumGTcst;"			  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",						  "CMDcmpGTcst;"			  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",		  "CMDcmpaccumGT;"			  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",					  "CMDcmpGT;"				  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",				  "CMDcmpaccumGTcst;"			  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",						  "CMDcmpGTcst;"			  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",		  "CMDcmpaccumGT;"			  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",					  "CMDcmpGT;"				  ]
[ ">",				  "command",	  "calc",	  "(left:str,right:str):bit ",									  "CALCcompGTstrstr;"			  ]
[ ">",				  "command",	  "calc",	  "(left:lng,right:lng):bit ",									  "CALCcompGTlnglng;"			  ]
[ ">",				  "command",	  "calc",	  "(left:lng,right:int):bit ",									  "CALCcompGTlngint;"			  ]
[ ">",				  "command",	  "calc",	  "(left:lng,right:sht):bit ",									  "CALCcompGTlngsht;"			  ]
[ ">",				  "command",	  "calc",	  "(left:lng,right:chr):bit ",									  "CALCcompGTlngchr;"			  ]
[ ">",				  "command",	  "calc",	  "(left:int,right:lng):bit ",									  "CALCcompGTintlng;"			  ]
[ ">",				  "command",	  "calc",	  "(left:int,right:int):bit ",									  "CALCcompGTintint;"			  ]
[ ">",				  "command",	  "calc",	  "(left:int,right:sht):bit ",									  "CALCcompGTintsht;"			  ]
[ ">",				  "command",	  "calc",	  "(left:int,right:chr):bit ",									  "CALCcompGTintchr;"			  ]
[ ">",				  "command",	  "calc",	  "(left:sht,right:lng):bit ",									  "CALCcompGTshtlng;"			  ]
[ ">",				  "command",	  "calc",	  "(left:sht,right:int):bit ",									  "CALCcompGTshtint;"			  ]
[ ">",				  "command",	  "calc",	  "(left:sht,right:sht):bit ",									  "CALCcompGTshtsht;"			  ]
[ ">",				  "command",	  "calc",	  "(left:sht,right:chr):bit ",									  "CALCcompGTshtchr;"			  ]
[ ">",				  "command",	  "calc",	  "(left:chr,right:lng):bit ",									  "CALCcompGTchrlng;"			  ]
[ ">",				  "command",	  "calc",	  "(left:chr,right:int):bit ",									  "CALCcompGTchrint;"			  ]
[ ">",				  "command",	  "calc",	  "(left:chr,right:sht):bit ",									  "CALCcompGTchrsht;"			  ]
[ ">",				  "command",	  "calc",	  "(left:chr,right:chr):bit ",									  "CALCcompGTchrchr;"			  ]
[ ">",				  "command",	  "calc",	  "(left:dbl,right:dbl):bit ",									  "CALCcompGTdbldbl;"			  ]
[ ">",				  "command",	  "calc",	  "(left:flt,right:dbl):bit ",									  "CALCcompGTfltdbl;"			  ]
[ ">",				  "command",	  "calc",	  "(left:flt,right:flt):bit ",									  "CALCcompGTfltflt;"			  ]
[ ">",				  "command",	  "calc",	  "(left:oid,right:oid):bit ",									  "CALCcompGToidoid;"			  ]
[ ">",				  "command",	  "inet",	  "(v:inet,w:inet):bit ",									  "INET_comp_GT;"			  ]
[ ">",				  "command",	  "date",	  "(v:date,w:date):bit ",									  "MTIMEdate_GT;"			  ]
[ ">",				  "command",	  "daytime",	  "(v:daytime,w:daytime):bit ",									  "MTIMEdaytime_GT;"			  ]
[ ">",				  "command",	  "timestamp",	  "(v:timestamp,w:timestamp):bit ",								  "MTIMEtimestamp_GT;"			  ]
[ ">=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",				  "CMDcmpaccumGEcst;"			  ]
[ ">=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",						  "CMDcmpGEcst;"			  ]
[ ">=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",		  "CMDcmpaccumGE;"			  ]
[ ">=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",					  "CMDcmpGE;"				  ]
[ ">=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",				  "CMDcmpaccumGEcst;"			  ]
[ ">=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",						  "CMDcmpGEcst;"			  ]
[ ">=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",		  "CMDcmpaccumGE;"			  ]
[ ">=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",					  "CMDcmpGE;"				  ]
[ ">=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",				  "CMDcmpaccumGEcst;"			  ]
[ ">=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",						  "CMDcmpGEcst;"			  ]
[ ">=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",		  "CMDcmpaccumGE;"			  ]
[ ">=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",					  "CMDcmpGE;"				  ]
[ ">=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",				  "CMDcmpaccumGEcst;"			  ]
[ ">=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",						  "CMDcmpGEcst;"			  ]
[ ">=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",		  "CMDcmpaccumGE;"			  ]
[ ">=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",					  "CMDcmpGE;"				  ]
[ ">=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",				  "CMDcmpaccumGEcst;"			  ]
[ ">=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",						  "CMDcmpGEcst;"			  ]
[ ">=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",		  "CMDcmpaccumGE;"			  ]
[ ">=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",					  "CMDcmpGE;"				  ]
[ ">=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",				  "CMDcmpaccumGEcst;"			  ]
[ ">=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",						  "CMDcmpGEcst;"			  ]
[ ">=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",		  "CMDcmpaccumGE;"			  ]
[ ">=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",					  "CMDcmpGE;"				  ]
[ ">=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",				  "CMDcmpaccumGEcst;"			  ]
[ ">=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",						  "CMDcmpGEcst;"			  ]
[ ">=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",		  "CMDcmpaccumGE;"			  ]
[ ">=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",					  "CMDcmpGE;"				  ]
[ ">=",				  "command",	  "calc",	  "(left:str,right:str):bit ",									  "CALCcompGEstrstr;"			  ]
[ ">=",				  "command",	  "calc",	  "(left:lng,right:lng):bit ",									  "CALCcompGElnglng;"			  ]
[ ">=",				  "command",	  "calc",	  "(left:lng,right:int):bit ",									  "CALCcompGElngint;"			  ]
[ ">=",				  "command",	  "calc",	  "(left:lng,right:sht):bit ",									  "CALCcompGElngsht;"			  ]
[ ">=",				  "command",	  "calc",	  "(left:lng,right:chr):bit ",									  "CALCcompGElngchr;"			  ]
[ ">=",				  "command",	  "calc",	  "(left:int,right:lng):bit ",									  "CALCcompGEintlng;"			  ]
[ ">=",				  "command",	  "calc",	  "(left:int,right:int):bit ",									  "CALCcompGEintint;"			  ]
[ ">=",				  "command",	  "calc",	  "(left:int,right:sht):bit ",									  "CALCcompGEintsht;"			  ]
[ ">=",				  "command",	  "calc",	  "(left:int,right:chr):bit ",									  "CALCcompGEintchr;"			  ]
[ ">=",				  "command",	  "calc",	  "(left:sht,right:lng):bit ",									  "CALCcompGEshtlng;"			  ]
[ ">=",				  "command",	  "calc",	  "(left:sht,right:int):bit ",									  "CALCcompGEshtint;"			  ]
[ ">=",				  "command",	  "calc",	  "(left:sht,right:sht):bit ",									  "CALCcompGEshtsht;"			  ]
[ ">=",				  "command",	  "calc",	  "(left:sht,right:chr):bit ",									  "CALCcompGEshtchr;"			  ]
[ ">=",				  "command",	  "calc",	  "(left:chr,right:lng):bit ",									  "CALCcompGEchrlng;"			  ]
[ ">=",				  "command",	  "calc",	  "(left:chr,right:int):bit ",									  "CALCcompGEchrint;"			  ]
[ ">=",				  "command",	  "calc",	  "(left:chr,right:sht):bit ",									  "CALCcompGEchrsht;"			  ]
[ ">=",				  "command",	  "calc",	  "(left:chr,right:chr):bit ",									  "CALCcompGEchrchr;"			  ]
[ ">=",				  "command",	  "calc",	  "(left:dbl,right:dbl):bit ",									  "CALCcompGEdbldbl;"			  ]
[ ">=",				  "command",	  "calc",	  "(left:flt,right:dbl):bit ",									  "CALCcompGEfltdbl;"			  ]
[ ">=",				  "command",	  "calc",	  "(left:flt,right:flt):bit ",									  "CALCcompGEfltflt;"			  ]
[ ">=",				  "command",	  "calc",	  "(left:oid,right:oid):bit ",									  "CALCcompGEoidoid;"			  ]
[ ">=",				  "command",	  "inet",	  "(v:inet,w:inet):bit ",									  "INET_comp_GE;"			  ]
[ ">=",				  "command",	  "date",	  "(v:date,w:date):bit ",									  "MTIMEdate_GE;"			  ]
[ ">=",				  "command",	  "daytime",	  "(v:daytime,w:daytime):bit ",									  "MTIMEdaytime_GE;"			  ]
[ ">=",				  "command",	  "timestamp",	  "(v:timestamp,w:timestamp):bit ",								  "MTIMEtimestamp_GE;"			  ]
[ ">>",				  "command",	  "calc",	  "(left:lng,right:int):lng ",									  "CALCbinaryRSHlngint;"		  ]
[ ">>",				  "command",	  "calc",	  "(left:int,right:int):int ",									  "CALCbinaryRSHintint;"		  ]
[ ">>",				  "command",	  "calc",	  "(left:sht,right:int):sht ",									  "CALCbinaryRSHshtint;"		  ]
[ ">>",				  "command",	  "calc",	  "(left:chr,right:int):chr ",									  "CALCbinaryRSHchrint;"		  ]
[ ">>",				  "command",	  "inet",	  "(v:inet,w:inet):bit ",									  "INET_comp_CS;"			  ]
[ ">>=",			  "command",	  "inet",	  "(v:inet,w:inet):bit ",									  "INET_comp_CSE;"			  ]
[ "List",			  "pattern",	  "mdb",	  "(M:str,F:str):void ",									  "MDBlist3Detail;"			  ]
[ "List",			  "pattern",	  "mdb",	  "():void ",											  "MDBlistDetail;"			  ]
[ "STRepilogue",		  "command",	  "str",	  "():void ",											  "strEpilogue;"			  ]
[ "STRprelude",			  "command",	  "str",	  "():void ",											  "strPrelude;"				  ]
[ "abbrev",			  "command",	  "inet",	  "(_1:inet):str ",										  "INETabbrev;"				  ]
[ "abort",			  "pattern",	  "transaction",  "(c:any...):void ",										  "TRNtrans_abort;"			  ]
[ "abort",			  "command",	  "transaction",  "():void ",											  "TRNglobal_abort;"			  ]
[ "abs",			  "command",	  "calc",	  "(x:lng):lng ",										  "CALCunarylngABS;"			  ]
[ "abs",			  "command",	  "calc",	  "(x:int):int ",										  "CALCunaryintABS;"			  ]
[ "abs",			  "command",	  "calc",	  "(x:sht):sht ",										  "CALCunaryshtABS;"			  ]
[ "abs",			  "command",	  "calc",	  "(x:chr):chr ",										  "CALCunarychrABS;"			  ]
[ "abs",			  "command",	  "calc",	  "(x:flt):flt ",										  "CALCunaryfltABS;"			  ]
[ "abs",			  "command",	  "calc",	  "(x:dbl):dbl ",										  "CALCunarydblABS;"			  ]
[ "accumulators",		  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",									  "QOTAEoptimizer;"			  ]
[ "accumulators",		  "pattern",	  "optimizer",	  "():str ",											  "QOTAEoptimizer;"			  ]
[ "acos",			  "command",	  "batmath",	  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",							  "CMDsciencevoid_acos;"		  ]
[ "acos",			  "command",	  "batmath",	  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",							  "CMDscience_acos;"			  ]
[ "acos",			  "command",	  "mmath",	  "(x:dbl):dbl ",										  "MATHunary_ACOSdbl;"			  ]
[ "acos",			  "command",	  "mmath",	  "(x:flt):flt ",										  "MATHunary_ACOSflt;"			  ]
[ "activate",			  "command",	  "profiler",	  "(name:str):void ",										  "CMDactivateProfiler;"		  ]
[ "add",			  "command",	  "mtime",	  "(v:timestamp,msecs:lng):timestamp ",								  "MTIMEtimestamp_add;"			  ]
[ "addScenario",		  "command",	  "clients",	  "(usr:str,sc:str):void ",									  "CLTaddScenario;"			  ]
[ "addUser",			  "command",	  "clients",	  "(nme:str,pw:str,scen:bat[:str,:any_1]):oid ",						  "CLTaddUser;"				  ]
[ "adddays",			  "command",	  "mtime",	  "(value:date,days:int):date ",								  "MTIMEdate_adddays;"			  ]
[ "addmonths",			  "command",	  "mtime",	  "(value:date,months:int):date ",								  "MTIMEdate_addmonths;"		  ]
[ "addyears",			  "command",	  "mtime",	  "(value:date,years:int):date ",								  "MTIMEdate_addyears;"			  ]
[ "alarm",			  "command",	  "alarm",	  "(secs:int,action:str):void ",								  "ALARMsetalarm;"			  ]
[ "aliasRemoval",		  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",									  "QOTARoptimizer;"			  ]
[ "aliasRemoval",		  "pattern",	  "optimizer",	  "():str ",											  "QOTARoptimizer;"			  ]
[ "alpha",			  "command",	  "transaction",  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",							  "TRNtrans_alpha;"			  ]
[ "and",			  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",				  "CMDcmpaccumANDcst;"			  ]
[ "and",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",						  "CMDcmpANDcst;"			  ]
[ "and",			  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",		  "CMDcmpaccumAND;"			  ]
[ "and",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",					  "CMDcmpAND;"				  ]
[ "and",			  "command",	  "batcalc",	  "(b:bat[:void,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",									  "CMDbatAND_lng_lng_lng;"		  ]
[ "and",			  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",									  "CMDbatAND_lng_lng_lng;"		  ]
[ "and",			  "command",	  "batcalc",	  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",										  "CMDcstANDbat_lng_lng_lng;"		  ]
[ "and",			  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:lng] ",										  "CMDbatANDcst_lng_lng_lng;"		  ]
[ "and",			  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:lng):void ",									  "CMDbataccumANDcst_lng_lng_lng;"	  ]
[ "and",			  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:lng]):void ",									  "CMDbataccumANDcst2_lng_lng_lng;"	  ]
[ "and",			  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",								  "CMDbataccumAND_lng_lng_lng;"		  ]
[ "and",			  "command",	  "batcalc",	  "(b:bat[:void,:int],c:bat[:oid,:int]):bat[:oid,:int] ",									  "CMDbatAND_int_int_int;"		  ]
[ "and",			  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:int] ",									  "CMDbatAND_int_int_int;"		  ]
[ "and",			  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:int] ",										  "CMDcstANDbat_int_int_int;"		  ]
[ "and",			  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:int] ",										  "CMDbatANDcst_int_int_int;"		  ]
[ "and",			  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:int):void ",									  "CMDbataccumANDcst_int_int_int;"	  ]
[ "and",			  "command",	  "batcalc",	  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:int]):void ",									  "CMDbataccumANDcst2_int_int_int;"	  ]
[ "and",			  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",								  "CMDbataccumAND_int_int_int;"		  ]
[ "and",			  "command",	  "batcalc",	  "(b:bat[:void,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",									  "CMDbatAND_sht_sht_sht;"		  ]
[ "and",			  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:sht] ",									  "CMDbatAND_sht_sht_sht;"		  ]
[ "and",			  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:sht] ",										  "CMDcstANDbat_sht_sht_sht;"		  ]
[ "and",			  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:sht] ",										  "CMDbatANDcst_sht_sht_sht;"		  ]
[ "and",			  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void ",									  "CMDbataccumANDcst_sht_sht_sht;"	  ]
[ "and",			  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void ",									  "CMDbataccumANDcst2_sht_sht_sht;"	  ]
[ "and",			  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void ",								  "CMDbataccumAND_sht_sht_sht;"		  ]
[ "and",			  "command",	  "batcalc",	  "(b:bat[:void,:oid],c:bat[:oid,:oid]):bat[:oid,:oid] ",									  "CMDbatAND_oid_oid_oid;"		  ]
[ "and",			  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:oid] ",									  "CMDbatAND_oid_oid_oid;"		  ]
[ "and",			  "command",	  "batcalc",	  "(cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:oid] ",										  "CMDcstANDbat_oid_oid_oid;"		  ]
[ "and",			  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:oid] ",										  "CMDbatANDcst_oid_oid_oid;"		  ]
[ "and",			  "command",	  "batcalc",	  "(a:bat[:any_1,:oid],b:bat[:any_1,:oid],cst:oid):void ",									  "CMDbataccumANDcst_oid_oid_oid;"	  ]
[ "and",			  "command",	  "batcalc",	  "(a:bat[:any_1,:oid],cst:oid,b:bat[:any_1,:oid]):void ",									  "CMDbataccumANDcst2_oid_oid_oid;"	  ]
[ "and",			  "command",	  "batcalc",	  "(a:bat[:any_1,:oid],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):void ",								  "CMDbataccumAND_oid_oid_oid;"		  ]
[ "and",			  "command",	  "calc",	  "(left:lng,right:lng):lng ",									  "CALCbinaryANDlnglng;"		  ]
[ "and",			  "command",	  "calc",	  "(left:int,right:int):int ",									  "CALCbinaryANDintint;"		  ]
[ "and",			  "command",	  "calc",	  "(left:sht,right:sht):sht ",									  "CALCbinaryANDshtsht;"		  ]
[ "and",			  "command",	  "calc",	  "(left:chr,right:chr):chr ",									  "CALCbinaryANDchrchr;"		  ]
[ "and",			  "command",	  "calc",	  "(left:bit,right:bit):bit ",									  "CALCbinaryANDbit;"			  ]
[ "antijoin",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_4]):bat[:any_1,:any_4] ",			  "ALGantijoin;"			  ]
[ "append",			  "command",	  "bat",	  "(i:bat[:void,:any_1],u:any_1,force:bit):void ",						  "BKCappend_val_force_wrap;"		  ]
[ "append",			  "command",	  "bat",	  "(i:bat[:void,:any_1],u:any_1):void ",							  "BKCappend_val_wrap;"			  ]
[ "append",			  "command",	  "bat",	  "(i:bat[:oid,:any_1],u:any_1,force:bit):void ",						  "BKCappend_val_force_wrap;"		  ]
[ "append",			  "command",	  "bat",	  "(i:bat[:oid,:any_1],u:any_1):void ",								  "BKCappend_val_wrap;"			  ]
[ "append",			  "command",	  "bat",	  "(i:bat[:void,:any_1],u:bat[:oid,:any_1],force:bit):void ",					  "BKCappend_force_wrap;"		  ]
[ "append",			  "command",	  "bat",	  "(i:bat[:void,:any_1],u:bat[:oid,:any_1]):void ",						  "BKCappend_wrap;"			  ]
[ "append",			  "command",	  "bat",	  "(i:bat[:void,:any_1],u:bat[:void,:any_1],force:bit):void ",					  "BKCappend_force_wrap;"		  ]
[ "append",			  "command",	  "bat",	  "(i:bat[:void,:any_1],u:bat[:void,:any_1]):void ",						  "BKCappend_wrap;"			  ]
[ "append",			  "command",	  "bat",	  "(i:bat[:oid,:any_1],u:bat[:oid,:any_1],force:bit):void ",					  "BKCappend_force_wrap;"		  ]
[ "append",			  "command",	  "bat",	  "(i:bat[:oid,:any_1],u:bat[:oid,:any_1]):void ",						  "BKCappend_wrap;"			  ]
[ "ascii",			  "command",	  "str",	  "(s:str):int ",										  "STRascii;"				  ]
[ "asin",			  "command",	  "batmath",	  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",							  "CMDsciencevoid_asin;"		  ]
[ "asin",			  "command",	  "batmath",	  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",							  "CMDscience_asin;"			  ]
[ "asin",			  "command",	  "mmath",	  "(x:dbl):dbl ",										  "MATHunary_ASINdbl;"			  ]
[ "asin",			  "command",	  "mmath",	  "(x:flt):flt ",										  "MATHunary_ASINflt;"			  ]
[ "assert",			  "pattern",	  "language",	  "(v:any_1,pname:str,oper:str,val:any_2):void ",						  "MALassertTriple;"			  ]
[ "assert",			  "command",	  "language",	  "(v:oid,term:str):void ",									  "MALassertOid;"			  ]
[ "assert",			  "command",	  "language",	  "(v:str,term:str):void ",									  "MALassertStr;"			  ]
[ "assert",			  "command",	  "language",	  "(v:lng,term:str):void ",									  "MALassertLng;"			  ]
[ "assert",			  "command",	  "language",	  "(v:int,term:str):void ",									  "MALassertInt;"			  ]
[ "assert",			  "command",	  "language",	  "(v:sht,term:str):void ",									  "MALassertSht;"			  ]
[ "assert",			  "command",	  "language",	  "(v:bit,term:str):void ",									  "MALassertBit;"			  ]
[ "atan",			  "command",	  "batmath",	  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",							  "CMDsciencevoid_atan;"		  ]
[ "atan",			  "command",	  "batmath",	  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",							  "CMDscience_atan;"			  ]
[ "atan",			  "command",	  "mmath",	  "(x:dbl):dbl ",										  "MATHunary_ATANdbl;"			  ]
[ "atan",			  "command",	  "mmath",	  "(x:flt):flt ",										  "MATHunary_ATANflt;"			  ]
[ "atan2",			  "command",	  "batmath",	  "(x:bat[:any_1,:dbl],y:dbl):bat[:any_1,:dbl] ",						  "CMDscience_atan2;"			  ]
[ "atan2",			  "command",	  "mmath",	  "(x:dbl,y:dbl):dbl ",										  "MATHbinary_ATAN2dbl;"		  ]
[ "atan2",			  "command",	  "mmath",	  "(x:flt,y:flt):flt ",										  "MATHbinary_ATAN2flt;"		  ]
[ "avg",			  "command",	  "group",	  "(b:bat[:any_2,:dbl],e:bat[:any_2,:any_1]):bat[:any_2,:dbl] ",				  "GRPavg_dbl;"				  ]
[ "avg",			  "command",	  "group",	  "(b:bat[:any_2,:flt],e:bat[:any_2,:any_1]):bat[:any_2,:flt] ",				  "GRPavg_flt;"				  ]
[ "avg",			  "command",	  "group",	  "(b:bat[:any_2,:lng],e:bat[:any_2,:any_1]):bat[:any_2,:lng] ",				  "GRPavg_lng;"				  ]
[ "avg",			  "command",	  "group",	  "(b:bat[:any_2,:int],e:bat[:any_2,:any_1]):bat[:any_2,:int] ",				  "GRPavg_int;"				  ]
[ "avg",			  "command",	  "group",	  "(b:bat[:any_2,:sht],e:bat[:any_2,:any_1]):bat[:any_2,:sht] ",				  "GRPavg_sht;"				  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:void,:dbl],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:oid,:dbl] ",			  "AX3aggrX3_avg3_dbl;"			  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",			  "AX3aggrX3_avg3_dbl;"			  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:void,:dbl],e:bat[:void,:any_1]):bat[:oid,:dbl] ",					  "AX3aggrX3_avg_dbl;"			  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:oid,:dbl],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",					  "AX3aggrX3_avg_dbl;"			  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:void,:flt],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:oid,:dbl] ",			  "AX3aggrX3_avg3_flt;"			  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",			  "AX3aggrX3_avg3_flt;"			  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:void,:flt],e:bat[:void,:any_1]):bat[:oid,:dbl] ",					  "AX3aggrX3_avg_flt;"			  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:oid,:flt],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",					  "AX3aggrX3_avg_flt;"			  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:void,:lng],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:oid,:dbl] ",			  "AX3aggrX3_avg3_lng;"			  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",			  "AX3aggrX3_avg3_lng;"			  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:void,:lng],e:bat[:void,:any_1]):bat[:oid,:dbl] ",					  "AX3aggrX3_avg_lng;"			  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:oid,:lng],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",					  "AX3aggrX3_avg_lng;"			  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:void,:int],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:oid,:dbl] ",			  "AX3aggrX3_avg3_int;"			  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",			  "AX3aggrX3_avg3_int;"			  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:void,:int],e:bat[:void,:any_1]):bat[:oid,:dbl] ",					  "AX3aggrX3_avg_int;"			  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:oid,:int],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",					  "AX3aggrX3_avg_int;"			  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:oid,:dbl] ",			  "AX3aggrX3_avg3_sht;"			  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",			  "AX3aggrX3_avg3_sht;"			  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:void,:sht],e:bat[:void,:any_1]):bat[:oid,:dbl] ",					  "AX3aggrX3_avg_sht;"			  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",					  "AX3aggrX3_avg_sht;"			  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:any_1,:dbl]):dbl ",									  "ALGavg_dbl;"				  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:any_1,:flt]):dbl ",									  "ALGavg_flt;"				  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:any_1,:lng]):dbl ",									  "ALGavg_lng;"				  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:any_1,:int]):dbl ",									  "ALGavg_int;"				  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:any_1,:sht]):dbl ",									  "ALGavg_sht;"				  ]
[ "bandjoin",			  "command",	  "algebra",	  "(outer:bat[:any_1,:any_2],inner:bat[:any_2,:any_3],minus:any_2,plus:any_2):bat[:any_1,:any_3] ", "ALGbandjoin;"			  ]
[ "bat",			  "command",	  "calc",	  "(b:BAT):bat[:any_1,:any_2] ",								  "CALCBAT2bat;"			  ]
[ "bat",			  "command",	  "calc",	  "(b:bat[:any_1,:any_2]):BAT ",								  "CALCbat2BAT;"			  ]
[ "bat",			  "command",	  "calc",	  "(v:void):bat[:any_1,:any_2] ",								  "CALCnil2bat;"			  ]
[ "bat",			  "command",	  "calc",	  "(v:str):bat[:any_1,:any_2] ",								  "CALCstr2bat;"			  ]
[ "bat",			  "command",	  "calc",	  "(v:void):BAT ",										  "CALCnil2bat;"			  ]
[ "bat",			  "command",	  "calc",	  "(v:str):BAT ",										  "CALCstr2bat;"			  ]
[ "batStatistics",		  "command",	  "status",	  "():bat[:str,:str] ",										  "SYSgdkEnv;"				  ]
[ "between",			  "command",	  "calc",	  "(val:str,low:str,high:str):bit ",								  "CALCcompBetweenstr;"			  ]
[ "between",			  "command",	  "calc",	  "(val:lng,low:lng,high:lng):bit ",								  "CALCcompBetweenlng;"			  ]
[ "between",			  "command",	  "calc",	  "(val:lng,low:lng,high:lng):bit ",								  "CALCcompBetweenlng;"			  ]
[ "between",			  "command",	  "calc",	  "(val:lng,low:lng,high:lng):bit ",								  "CALCcompBetweenlng;"			  ]
[ "between",			  "command",	  "calc",	  "(val:lng,low:lng,high:lng):bit ",								  "CALCcompBetweenlng;"			  ]
[ "between",			  "command",	  "calc",	  "(val:int,low:int,high:int):bit ",								  "CALCcompBetweenint;"			  ]
[ "between",			  "command",	  "calc",	  "(val:int,low:int,high:int):bit ",								  "CALCcompBetweenint;"			  ]
[ "between",			  "command",	  "calc",	  "(val:int,low:int,high:int):bit ",								  "CALCcompBetweenint;"			  ]
[ "between",			  "command",	  "calc",	  "(val:int,low:int,high:int):bit ",								  "CALCcompBetweenint;"			  ]
[ "between",			  "command",	  "calc",	  "(val:sht,low:sht,high:sht):bit ",								  "CALCcompBetweensht;"			  ]
[ "between",			  "command",	  "calc",	  "(val:sht,low:sht,high:sht):bit ",								  "CALCcompBetweensht;"			  ]
[ "between",			  "command",	  "calc",	  "(val:sht,low:sht,high:sht):bit ",								  "CALCcompBetweensht;"			  ]
[ "between",			  "command",	  "calc",	  "(val:sht,low:sht,high:sht):bit ",								  "CALCcompBetweensht;"			  ]
[ "between",			  "command",	  "calc",	  "(val:chr,low:chr,high:chr):bit ",								  "CALCcompBetweenchr;"			  ]
[ "between",			  "command",	  "calc",	  "(val:chr,low:chr,high:chr):bit ",								  "CALCcompBetweenchr;"			  ]
[ "between",			  "command",	  "calc",	  "(val:chr,low:chr,high:chr):bit ",								  "CALCcompBetweenchr;"			  ]
[ "between",			  "command",	  "calc",	  "(val:chr,low:chr,high:chr):bit ",								  "CALCcompBetweenchr;"			  ]
[ "between",			  "command",	  "calc",	  "(val:dbl,low:dbl,high:dbl):bit ",								  "CALCcompBetweendbl;"			  ]
[ "between",			  "command",	  "calc",	  "(val:flt,low:flt,high:flt):bit ",								  "CALCcompBetweenflt;"			  ]
[ "between",			  "command",	  "calc",	  "(val:flt,low:flt,high:flt):bit ",								  "CALCcompBetweenflt;"			  ]
[ "between",			  "command",	  "calc",	  "(val:oid,low:oid,high:oid):bit ",								  "CALCcompBetweenoid;"			  ]
[ "bind",			  "pattern",	  "mserver",	  "(key:int,remoteName:str):bat[:any_1,:any_2] ",						  "SERVERbindBAT;"			  ]
[ "bind",			  "pattern",	  "mserver",	  "(key:int,rschema:str,rtable:str,i:int):bat[:any_1,:any_2] ",					  "SERVERbindBAT;"			  ]
[ "bind",			  "pattern",	  "mserver",	  "(key:int,rschema:str,rtable:str,rcolumn:str,i:int):bat[:any_1,:any_2] ",			  "SERVERbindBAT;"			  ]
[ "bind",			  "command",	  "bbp",	  "(idx:int):bat[:any_1,:any_2] ",								  "CMDbbpbindindex;"			  ]
[ "bind",			  "command",	  "bbp",	  "(head:str,tail:str):bat[:any_1,:any_2] ",							  "CMDbbpbind2;"			  ]
[ "bind",			  "pattern",	  "bbp",	  "(name:str):bat[:any_1,:any_2] ",								  "CMDbbpbind;"				  ]
[ "bit",			  "command",	  "batcalc",	  "(b:bat[:any_1,:str]):bat[:any_1,:bit] ",							  "CMDconvertstr_bit;"			  ]
[ "bit",			  "command",	  "calc",	  "(v:void):bit ",										  "CALCnil2bit;"			  ]
[ "bit",			  "command",	  "calc",	  "(v:str):bit ",										  "CALCstr2bit;"			  ]
[ "bit",			  "command",	  "calc",	  "(x:dbl):bit ",										  "CALCdbl2bit;"			  ]
[ "bit",			  "command",	  "calc",	  "(x:flt):bit ",										  "CALCflt2bit;"			  ]
[ "bit",			  "command",	  "calc",	  "(x:lng):bit ",										  "CALClng2bit;"			  ]
[ "bit",			  "command",	  "calc",	  "(x:int):bit ",										  "CALCint2bit;"			  ]
[ "bit",			  "command",	  "calc",	  "(x:sht):bit ",										  "CALCsht2bit;"			  ]
[ "bit",			  "command",	  "calc",	  "(x:chr):bit ",														  "CALCchr2bit;"				  ]
[ "bit",			  "command",	  "calc",	  "(x:bit):bit ",										  "CALCbit2bit;"			  ]
[ "bit",			  "command",	  "calc",	  "(x:oid):bit ",										  "CALCoid2bit;"			  ]
[ "bit",			  "command",	  "calc",	  "(x:dbl):bit ",										  "CALCdbl2bit;"			  ]
[ "bit",			  "command",	  "calc",	  "(x:flt):bit ",										  "CALCflt2bit;"			  ]
[ "bit",			  "command",	  "calc",	  "(x:lng):bit ",										  "CALClng2bit;"			  ]
[ "bit",			  "command",	  "calc",	  "(x:int):bit ",										  "CALCint2bit;"			  ]
[ "bit",			  "command",	  "calc",	  "(x:sht):bit ",										  "CALCsht2bit;"			  ]
[ "bit",			  "command",	  "calc",	  "(x:bit):bit ",										  "CALCbit2bit;"			  ]
[ "blocked",			  "command",	  "streams",	  "(s:streams):streams ",									  "open_block_streamwrap;"		  ]
[ "blue",			  "command",	  "batcolor",	  "(c:bat[:void,:color]):bat[:void,:int] ",							  "CLRbatBlue;"				  ]
[ "blue",			  "command",	  "color",	  "(c:color):int ",										  "CLRblue;"				  ]
[ "broadcast",			  "command",	  "inet",	  "(_1:inet):inet ",										  "INETbroadcast;"			  ]
[ "bulk_rotate_xor_hash",	  "command",	  "mkey",	  "(h:bat[:oid,:int],nbits:int,b:bat[:void,:any_1]):bat[:oid,:int] ",				  "MKEYbulk_rotate_xor_hash;"		  ]
[ "bulk_rotate_xor_hash",	  "command",	  "mkey",	  "(h:bat[:void,:int],nbits:int,b:bat[:void,:any_1]):bat[:void,:int] ",				  "MKEYbulk_rotate_xor_hash;"		  ]
[ "bulk_rotate_xor_hash",	  "command",	  "mkey",	  "(h:bat[:void,:int],nbits:int,b:bat[:oid,:any_1]):bat[:void,:int] ",				  "MKEYbulk_rotate_xor_hash;"		  ]
[ "bulk_rotate_xor_hash",	  "command",	  "mkey",	  "(h:bat[:oid,:int],nbits:int,b:bat[:oid,:any_1]):bat[:void,:int] ",								  "MKEYbulk_rotate_xor_hash;"		  ]
[ "bulk_rotate_xor_hash",	  "command",	  "mkey",	  "(h:bat[:oid,:int],nbits:int,b:bat[:oid,:any_1]):bat[:oid,:int] ",				  "MKEYbulk_rotate_xor_hash;"		  ]
[ "bulk_rotate_xor_hash",	  "pattern",	  "mkey",	  "(h:int,nbits:int,v:any):int ",								  "MKEYrotate_xor_hash;"		  ]
[ "bytes",			  "command",	  "batstr",	  "(s:bat[:void,:str]):bat[:void,:int] ",							  "STRbatBytes;"			  ]
[ "call",			  "pattern",	  "language",	  "(s:bat[:any_1,:str]):void ",									  "CMDcallBAT;"				  ]
[ "call",			  "pattern",	  "language",	  "(s:str):void ",										  "CMDcallString;"			  ]
[ "cardinality",		  "command",	  "aggr",	  "(b:bat[:any_1,:any_2]):lng ",								  "ALGcard;"				  ]
[ "cascade",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",													  "QOTCRoptimizer;"				  ]
[ "cascade",			  "pattern",	  "optimizer",	  "():str ",															  "QOTCRoptimizer;"				  ]
[ "cb",				  "command",	  "batcolor",	  "(c:bat[:void,:color]):bat[:void,:int] ",							  "CLRbatCb;"				  ]
[ "cb",				  "command",	  "color",	  "(c:color):int ",										  "CLRcb;"				  ]
[ "ceil",			  "command",	  "batmath",	  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",							  "CMDsciencevoid_ceil;"		  ]
[ "ceil",			  "command",	  "batmath",	  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",							  "CMDscience_ceil;"			  ]
[ "ceil",			  "command",	  "mmath",	  "(y:dbl):dbl ",										  "MATHunary_CEILdbl;"			  ]
[ "ceil",			  "command",	  "mmath",	  "(y:flt):flt ",										  "MATHunary_CEILflt;"			  ]
[ "changePassword",		  "command",	  "clients",	  "(old:str,new:str):void ",									  "CLTchangePassword;"			  ]
[ "changeUsername",		  "command",	  "clients",	  "(old:str,new:str):void ",									  "CLTchangeUsername;"			  ]
[ "checkPermission",		  "command",	  "clients",	  "(usr:str,pw:str,sc:str):void ",								  "CLTcheckPermission;"			  ]
[ "chr",			  "command",	  "calc",	  "(v:void):chr ",										  "CALCnil2chr;"			  ]
[ "chr",			  "command",	  "calc",	  "(v:str):chr ",										  "CALCstr2chr;"			  ]
[ "chr",			  "command",	  "calc",	  "(x:lng):chr ",										  "CALClng2chr;"			  ]
[ "chr",			  "command",	  "calc",	  "(x:int):chr ",										  "CALCint2chr;"			  ]
[ "chr",			  "command",	  "calc",	  "(x:sht):chr ",										  "CALCsht2chr;"			  ]
[ "chr",			  "command",	  "calc",	  "(x:chr):chr ",										  "CALCchr2chr;"			  ]
[ "chr",			  "command",	  "calc",	  "(x:dbl):chr ",										  "CALCdbl2chr;"			  ]
[ "chr",			  "command",	  "calc",	  "(x:flt):chr ",										  "CALCflt2chr;"			  ]
[ "chr",			  "command",	  "calc",	  "(x:lng):chr ",										  "CALClng2chr;"			  ]
[ "chr",			  "command",	  "calc",	  "(x:int):chr ",										  "CALCint2chr;"			  ]
[ "chr",			  "command",	  "calc",	  "(x:sht):chr ",										  "CALCsht2chr;"			  ]
[ "chr",			  "command",	  "calc",	  "(x:chr):chr ",														  "CALCchr2chr;"				  ]
[ "chr",			  "command",	  "calc",	  "(x:bit):chr ",										  "CALCbit2chr;"			  ]
[ "chr",			  "command",	  "calc",	  "(x:oid):chr ",										  "CALCoid2chr;"			  ]
[ "chrAt",			  "command",	  "batstr",	  "(s:bat[:void,:str],index:int):bat[:void,:chr] ",						  "STRbatChrAtcst;"			  ]
[ "chrAt",			  "command",	  "batstr",	  "(s:bat[:void,:str],index:bat[:void,:int]):bat[:void,:chr] ",					  "STRbatChrAt;"			  ]
[ "chrAt",			  "command",	  "str",	  "(s:str,index:int):chr ",									  "STRChrAt;"				  ]
[ "clean",			  "pattern",	  "transaction",  "(c:any...):void ",										  "TRNtrans_clean;"			  ]
[ "cleanup",			  "command",	  "profiler",	  "():void ",											  "CMDcleanup;"				  ]
[ "clearTrace",			  "command",	  "profiler",	  "():void ",											  "CMDclearTrace;"			  ]
[ "close",			  "command",	  "partitions",	  "():void ",											  "BPTclose;"				  ]
[ "close",			  "pattern",	  "statistics",	  "():void ",											  "STATclose;"				  ]
[ "close",			  "command",	  "pbm",	  "():void ",											  "PBMclose;"				  ]
[ "close",			  "pattern",	  "box",	  "(bname:str):void ",										  "BOXclose;"				  ]
[ "close",			  "command",	  "bbp",	  "():void ",											  "CMDbbpclose;"			  ]
[ "close",			  "pattern",	  "const",	  "():void ",											  "CSTclose;"				  ]
[ "close",			  "command",	  "streams",	  "(s:streams):void ",										  "stream_close_streamwrap;"		  ]
[ "closeStream",		  "command",	  "profiler",	  "():void ",											  "CMDcloseProfilerStream;"		  ]
[ "clrDebug",			  "pattern",	  "optimizer",	  "():void ",											  "QOTclrdebugOptimizers;"		  ]
[ "clrFilter",			  "command",	  "profiler",	  "(mod:str,fcn:str):void ",									  "CMDclrFilterProfiler;"		  ]
[ "codeset",			  "command",	  "str",	  "():str ",											  "STRcodeset;"				  ]
[ "coercions",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",									  "QOTCOoptimizer;"			  ]
[ "coercions",			  "pattern",	  "optimizer",	  "():str ",											  "QOTCOoptimizer;"			  ]
[ "color",			  "command",	  "batcolor",	  "(s:bat[:void,:str]):bat[:void,:color] ",							  "CLRbatColor;"			  ]
[ "color",			  "command",	  "color",	  "(s:str):color ",										  "CLRcolor;"				  ]
[ "commit",			  "pattern",	  "transaction",  "(c:any...):void ",										  "TRNtrans_commit;"			  ]
[ "commit",			  "command",	  "transaction",  "():void ",											  "TRNglobal_commit;"			  ]
[ "commit",			  "pattern",	  "bbp",	  "():void ",											  "CMDbbpReleaseAll;"			  ]
[ "commonTerms",		  "pattern",	  "optimizer",	  "(mod:any_1,fcn:any_2):str ",									  "QOTCToptimizer;"			  ]
[ "commonTerms",		  "pattern",	  "optimizer",	  "():str ",											  "QOTCToptimizer;"			  ]
[ "compile",			  "command",	  "pcre",	  "(pat:str):pcre ",										  "PCREcompile_wrap;"			  ]
[ "compress",			  "command",	  "partitions",	  "(b:bat[:void,:any_1]):bat[:void,:any_1] ",							  "BPTcompress;"			  ]
[ "compress",			  "command",	  "pbm",	  "(grp:str):void ",										  "PBMcompress;"			  ]
[ "compute",			  "command",	  "mtime",	  "(r:zrule,year:int):date ",									  "MTIMEcompute_rule_foryear;"		  ]
[ "connect",			  "command",	  "mserver",	  "(host:str,port:int,usr:str,passwd:str,lang:str):int ",					  "SERVERconnect;"			  ]
[ "connect_ssl",		  "command",	  "mserver",	  "(host:str,port:int,usr:str,passwd:str,lang:str):int ",					  "SERVERconnectssl;"			  ]
[ "constantExpression",		  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",									  "QOTCXoptimizer;"			  ]
[ "constantExpression",		  "pattern",	  "optimizer",	  "():str ",											  "QOTCXoptimizer;"			  ]
[ "copy",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",							  "ALGcopy;"				  ]
[ "cos",			  "command",	  "batmath",	  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",							  "CMDsciencevoid_cos;"			  ]
[ "cos",			  "command",	  "batmath",	  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",							  "CMDscience_cos;"			  ]
[ "cos",			  "command",	  "mmath",	  "(x:dbl):dbl ",										  "MATHunary_COSdbl;"			  ]
[ "cos",			  "command",	  "mmath",	  "(x:flt):flt ",										  "MATHunary_COSflt;"			  ]
[ "cosh",			  "command",	  "batmath",	  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",							  "CMDsciencevoid_cosh;"		  ]
[ "cosh",			  "command",	  "batmath",	  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",							  "CMDscience_cosh;"			  ]
[ "cosh",			  "command",	  "mmath",	  "(x:dbl):dbl ",										  "MATHunary_COSHdbl;"			  ]
[ "cosh",			  "command",	  "mmath",	  "(x:flt):flt ",										  "MATHunary_COSHflt;"			  ]
[ "costModel",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",									  "QOTRMoptimizer;"			  ]
[ "costModel",			  "pattern",	  "optimizer",	  "():str ",											  "QOTRMoptimizer;"			  ]
[ "count",			  "command",	  "group",	  "(b:bat[:any_2,:any_1],e:bat[:any_2,:any_3],nonils:bit):bat[:any_2,:int] ",			  "GRPaggr_count;"			  ]
[ "count",			  "command",	  "aggr",	  "(b:bat[:void,:any_1],g:bat[:void,:oid],e:bat[:void,:any_2]):bat[:void,:int] ",		  "AX3aggrX3_count3Nils;"		  ]
[ "count",			  "command",	  "aggr",	  "(b:bat[:void,:any_1],g:bat[:oid,:oid],e:bat[:void,:any_2]):bat[:void,:int] ",		  "AX3aggrX3_count3Nils;"		  ]
[ "count",			  "command",	  "aggr",	  "(b:bat[:void,:any_1],g:bat[:void,:oid],e:bat[:oid,:any_2]):bat[:void,:int] ",		  "AX3aggrX3_count3Nils;"		  ]
[ "count",			  "command",	  "aggr",	  "(b:bat[:void,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:void,:int] ",			  "AX3aggrX3_count3Nils;"		  ]
[ "count",			  "command",	  "aggr",	  "(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:int] ",			  "AX3aggrX3_count3Nils;"		  ]
[ "count",			  "command",	  "aggr",	  "(b:bat[:void,:any_1],e:bat[:void,:any_2]):bat[:void,:int] ",					  "AX3aggrX3_count2Nils;"		  ]
[ "count",			  "command",	  "aggr",	  "(b:bat[:void,:any_1],e:bat[:oid,:any_2]):bat[:void,:int] ",					  "AX3aggrX3_count2Nils;"		  ]
[ "count",			  "command",	  "aggr",	  "(b:bat[:void,:any_1],g:bat[:void,:oid],e:bat[:void,:any_2],nonils:bit):bat[:void,:int] ",	  "AX3aggrX3_count3;"			  ]
[ "count",			  "command",	  "aggr",	  "(b:bat[:void,:any_1],g:bat[:void,:oid],e:bat[:oid,:any_2],nonils:bit):bat[:void,:int] ",	  "AX3aggrX3_count3;"			  ]
[ "count",			  "command",	  "aggr",	  "(b:bat[:void,:any_1],g:bat[:void,:oid],e:bat[:void,:any_2],nonils:bit):bat[:void,:int] ",	  "AX3aggrX3_count3;"			  ]
[ "count",			  "command",	  "aggr",	  "(b:bat[:oid,:any_1],e:bat[:oid,:any_2],ignorenils:bit):bat[:oid,:int] ",			  "AX3aggrX3_count;"			  ]
[ "count",			  "command",	  "aggr",	  "(b:bat[:void,:any_1],e:bat[:void,:any_2],ignorenils:bit):bat[:void,:int] ",			  "AX3aggrX3_count;"			  ]
[ "count",			  "command",	  "aggr",	  "(b:bat[:any_1,:any],ignore_nils:bit):int ",							  "ALGcount_nil;"			  ]
[ "count",			  "command",	  "aggr",	  "(b:bat[:any_1,:any]):int ",									  "ALGcount_bat;"			  ]
[ "count_no_nil",		  "command",	  "aggr",	  "(b:bat[:void,:any_1],g:bat[:void,:oid],e:bat[:void,:any_2]):bat[:oid,:int] ",		  "AX3count_no_nil3;"			  ]
[ "count_no_nil",		  "command",	  "aggr",	  "(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:int] ",			  "AX3count_no_nil3;"			  ]
[ "count_no_nil",		  "command",	  "aggr",	  "(b:bat[:void,:any_1],e:bat[:void,:any_1]):bat[:oid,:int] ",					  "AX3count_no_nil2;"			  ]
[ "count_no_nil",		  "command",	  "aggr",	  "(b:bat[:oid,:any_1],e:bat[:oid,:any_1]):bat[:oid,:int] ",					  "AX3count_no_nil2;"			  ]
[ "count_no_nil",		  "command",	  "aggr",	  "(b:bat[:any_1,:any_2]):int ",								  "ALGcount_no_nil;"			  ]
[ "cpuStatistics",		  "command",	  "status",	  "():bat[:str,:int] ",										  "SYScpuStatistics;"			  ]
[ "cr",				  "command",	  "batcolor",	  "(c:bat[:void,:color]):bat[:void,:int] ",							  "CLRbatCr;"				  ]
[ "cr",				  "command",	  "color",	  "(c:color):int ",										  "CLRcr;"				  ]
[ "crack",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",									  "QOTCRKoptimizer;"			  ]
[ "crack",			  "pattern",	  "optimizer",	  "():str ",											  "QOTCRKoptimizer;"			  ]
[ "crackOrdered",		  "command",	  "crackers",	  "(b:bat[:oid,:dbl],low:dbl,hgh:dbl):bat[:oid,:dbl] ",						  "CRKcrackOrderedTwo_dbl;"		  ]
[ "crackOrdered",		  "command",	  "crackers",	  "(b:bat[:oid,:dbl],mid:dbl):bat[:oid,:dbl] ",							  "CRKcrackOrderedOne_dbl;"		  ]
[ "crackOrdered",		  "command",	  "crackers",	  "(b:bat[:oid,:flt],low:flt,hgh:flt):bat[:oid,:flt] ",						  "CRKcrackOrderedTwo_flt;"		  ]
[ "crackOrdered",		  "command",	  "crackers",	  "(b:bat[:oid,:flt],mid:flt):bat[:oid,:flt] ",							  "CRKcrackOrderedOne_flt;"		  ]
[ "crackOrdered",		  "command",	  "crackers",	  "(b:bat[:oid,:lng],low:lng,hgh:lng):bat[:oid,:lng] ",						  "CRKcrackOrderedTwo_lng;"		  ]
[ "crackOrdered",		  "command",	  "crackers",	  "(b:bat[:oid,:lng],mid:lng):bat[:oid,:lng] ",							  "CRKcrackOrderedOne_lng;"		  ]
[ "crackOrdered",		  "command",	  "crackers",	  "(b:bat[:oid,:int],low:int,hgh:int):bat[:oid,:int] ",						  "CRKcrackOrderedTwo_int;"		  ]
[ "crackOrdered",		  "command",	  "crackers",	  "(b:bat[:oid,:int],mid:int):bat[:oid,:int] ",							  "CRKcrackOrderedOne_int;"		  ]
[ "crackOrdered",		  "command",	  "crackers",	  "(b:bat[:oid,:sht],low:sht,hgh:sht):bat[:oid,:sht] ",						  "CRKcrackOrderedTwo_sht;"		  ]
[ "crackOrdered",		  "command",	  "crackers",	  "(b:bat[:oid,:sht],mid:sht):bat[:oid,:sht] ",							  "CRKcrackOrderedOne_sht;"		  ]
[ "crackOrdered",		  "command",	  "crackers",	  "(b:bat[:oid,:chr],low:chr,hgh:chr):bat[:oid,:chr] ",						  "CRKcrackOrderedTwo_chr;"		  ]
[ "crackOrdered",		  "command",	  "crackers",	  "(b:bat[:oid,:chr],mid:chr):bat[:oid,:chr] ",							  "CRKcrackOrderedOne_chr;"		  ]
[ "crackOrdered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:dbl],low:dbl,hgh:dbl):bit ",							  "CRKcrackOrderedTwo_validate_dbl;"	  ]
[ "crackOrdered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:dbl],mid:dbl):bit ",								  "CRKcrackOrderedOne_validate_dbl;"	  ]
[ "crackOrdered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:flt],low:flt,hgh:flt):bit ",							  "CRKcrackOrderedTwo_validate_flt;"	  ]
[ "crackOrdered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:flt],mid:flt):bit ",								  "CRKcrackOrderedOne_validate_flt;"	  ]
[ "crackOrdered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:lng],low:lng,hgh:lng):bit ",							  "CRKcrackOrderedTwo_validate_lng;"	  ]
[ "crackOrdered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:lng],mid:lng):bit ",								  "CRKcrackOrderedOne_validate_lng;"	  ]
[ "crackOrdered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:int],low:int,hgh:int):bit ",							  "CRKcrackOrderedTwo_validate_int;"	  ]
[ "crackOrdered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:int],mid:int):bit ",								  "CRKcrackOrderedOne_validate_int;"	  ]
[ "crackOrdered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:sht],low:sht,hgh:sht):bit ",							  "CRKcrackOrderedTwo_validate_sht;"	  ]
[ "crackOrdered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:sht],mid:sht):bit ",								  "CRKcrackOrderedOne_validate_sht;"	  ]
[ "crackOrdered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:chr],low:chr,hgh:chr):bit ",							  "CRKcrackOrderedTwo_validate_chr;"	  ]
[ "crackOrdered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:chr],mid:chr):bit ",								  "CRKcrackOrderedOne_validate_chr;"	  ]
[ "create",			  "command",	  "bstream",	  "(s:streams,bufsize:int):bstream ",								  "bstream_create_wrapwrap;"		  ]
[ "create",			  "command",	  "sema",	  "(init:int):sema ",										  "SEMAcreate;"				  ]
[ "create",			  "command",	  "lock",	  "():lock ",											  "LCKcreate;"				  ]
[ "createXML",			  "command",	  "manual",	  "():void ",											  "MANUALcreate0;"			  ]
[ "createXML",			  "command",	  "manual",	  "(mod:str):void ",										  "MANUALcreate1;"			  ]
[ "crossproduct",		  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_3,:any_4]):bat[:any_1,:any_4] ",			  "ALGcross;"				  ]
[ "ctime",			  "command",	  "alarm",	  "():str ",											  "ALARMctime;"				  ]
[ "current_date",		  "command",	  "mtime",	  "():date ",											  "MTIMEcurrent_date;"			  ]
[ "current_time",		  "command",	  "mtime",	  "():daytime ",										  "MTIMEcurrent_time;"			  ]
[ "current_timestamp",		  "command",	  "mtime",	  "():timestamp ",										  "MTIMEcurrent_timestamp;"		  ]
[ "date",			  "command",	  "date",	  "(s:date):date ",										  "MTIMEdate_date;"			  ]
[ "date",			  "command",	  "mtime",	  "(t:timestamp,v:timezone):date ",								  "MTIMEtimestamp_extract_date;"	  ]
[ "date",			  "command",	  "mtime",	  "(t:timestamp):date ",									  "MTIMEtimestamp_extract_date_default;"  ]
[ "date",			  "command",	  "mtime",	  "(yr:int,mo:int,day:int):date ",								  "MTIMEdate_create;"			  ]
[ "date",			  "command",	  "mtime",	  "(s:str):date ",										  "MTIMEdate_fromstr;"			  ]
[ "date",			  "command",	  "mtime",	  "(_1:void):date ",										  "MTIMEnil2date;"			  ]
[ "date",			  "command",	  "mtime",	  "(_1:date):date ",										  "MTIMEdate2date;"			  ]
[ "date_add_month_interval",	  "command",	  "mtime",	  "(t:date,s:int):date ",									  "MTIMEdate_add_month_interval_wrap;"	  ]
[ "date_add_sec_interval",	  "command",	  "mtime",	  "(t:date,s:lng):date ",									  "MTIMEdate_add_sec_interval_lng_wrap;"  ]
[ "date_add_sec_interval",	  "command",	  "mtime",	  "(t:date,s:int):date ",									  "MTIMEdate_add_sec_interval_wrap;"	  ]
[ "date_sub_sec_interval",	  "command",	  "mtime",	  "(t:date,s:lng):date ",									  "MTIMEdate_sub_sec_interval_lng_wrap;"  ]
[ "date_sub_sec_interval",	  "command",	  "mtime",	  "(t:date,s:int):date ",									  "MTIMEdate_sub_sec_interval_wrap;"	  ]
[ "day",			  "command",	  "mtime",	  "(secs:lng):int ",										  "MTIMEsql_day;"			  ]
[ "day",			  "command",	  "mtime",	  "(t:timestamp):int ",										  "MTIMEtimestamp_day;"			  ]
[ "day",			  "command",	  "mtime",	  "(t:zrule):int ",										  "MTIMErule_extract_day;"		  ]
[ "day",			  "command",	  "mtime",	  "(d:bat[:any_1,:date]):bat[:any_1,:int] ",							  "MTIMEdate_extract_day_bulk;"		  ]
[ "day",			  "command",	  "mtime",	  "(d:date):int ",										  "MTIMEdate_extract_day;"		  ]
[ "dayname",			  "command",	  "mtime",	  "(day:int):str ",										  "MTIMEday_to_str;"			  ]
[ "daynum",			  "command",	  "mtime",	  "(day:str):int ",										  "MTIMEday_from_str;"			  ]
[ "dayofweek",			  "command",	  "mtime",	  "(d:date):int ",										  "MTIMEdate_extract_dayofweek;"	  ]
[ "dayofyear",			  "command",	  "mtime",	  "(d:date):int ",										  "MTIMEdate_extract_dayofyear;"	  ]
[ "daytime",			  "command",	  "mtime",	  "(h:int,m:int,s:int):daytime ",								  "MTIMEdaytime3;"			  ]
[ "daytime",			  "command",	  "mtime",	  "(h:int,m:int):daytime ",									  "MTIMEdaytime2;"			  ]
[ "daytime",			  "command",	  "mtime",	  "(h:int):daytime ",										  "MTIMEdaytime1;"			  ]
[ "daytime",			  "command",	  "mtime",	  "(t:timestamp,v:timezone):daytime ",								  "MTIMEtimestamp_extract_daytime;"	  ]
[ "daytime",			  "command",	  "mtime",	  "(t:timestamp):daytime ",									  "MTIMEtimestamp_extract_daytime_default;"  ]
[ "daytime",			  "command",	  "mtime",	  "(h:int,m:int,s:int,mi:int):daytime ",							  "MTIMEdaytime_create;"		  ]
[ "daytime",			  "command",	  "mtime",	  "(_1:lng):daytime ",										  "MTIMEsecs2daytime;"			  ]
[ "daytime",			  "command",	  "mtime",	  "(_1:daytime):daytime ",									  "MTIMEdaytime2daytime;"		  ]
[ "daytime",			  "command",	  "mtime",	  "(s:str):daytime ",										  "MTIMEdaytime_fromstr;"		  ]
[ "dbl",			  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",							  "CMDconvertdbl_dbl;"			  ]
[ "dbl",			  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:dbl] ",							  "CMDconvertflt_dbl;"			  ]
[ "dbl",			  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:dbl] ",							  "CMDconvertlng_dbl;"			  ]
[ "dbl",			  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:dbl] ",							  "CMDconvertint_dbl;"			  ]
[ "dbl",			  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:dbl] ",							  "CMDconvertsht_dbl;"			  ]
[ "dbl",			  "command",	  "calc",	  "(v:void):dbl ",										  "CALCnil2dbl;"			  ]
[ "dbl",			  "command",	  "calc",	  "(v:str):dbl ",										  "CALCstr2dbl;"			  ]
[ "dbl",			  "command",	  "calc",	  "(x:lng):dbl ",										  "CALClng2dbl;"			  ]
[ "dbl",			  "command",	  "calc",	  "(x:int):dbl ",										  "CALCint2dbl;"			  ]
[ "dbl",			  "command",	  "calc",	  "(x:sht):dbl ",										  "CALCsht2dbl;"			  ]
[ "dbl",			  "command",	  "calc",	  "(x:flt):dbl ",										  "CALCflt2dbl;"			  ]
[ "dbl",			  "command",	  "calc",	  "(x:dbl):dbl ",										  "CALCdbl2dbl;"			  ]
[ "deactivate",			  "command",	  "profiler",	  "(name:str):void ",										  "CMDdeactivateProfiler;"		  ]
[ "deadCodeRemoval",		  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",									  "QOTDCoptimizer;"			  ]
[ "deadCodeRemoval",		  "pattern",	  "optimizer",	  "():str ",											  "QOTDCoptimizer;"			  ]
[ "define",			  "command",	  "zrule",	  "(m:int,d:str,w:int,min:int):zrule ",								  "MTIMEruleDef2;"			  ]
[ "define",			  "command",	  "zrule",	  "(m:int,d:str,w:int,h:int,min:int):zrule ",							  "MTIMEruleDef1;"			  ]
[ "define",			  "command",	  "zrule",	  "(m:int,d:int,w:int,h:int,min:int):zrule ",							  "MTIMEruleDef0;"			  ]
[ "delete",			  "command",	  "partitions",	  "(b:bat[:void,:any_1],p:bat[:void,:any_1]):bat[:void,:any_1] ",				  "BPTdeleteBAT;"			  ]
[ "delete",			  "command",	  "partitions",	  "(b:bat[:void,:any_1],h:oid):bat[:void,:any_1] ",						  "BPTdelete_oid;"			  ]
[ "delete",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2]):void ",					  "BKCdelete_bat_bun;"			  ]
[ "delete",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):void ",								  "BKCdelete_all;"			  ]
[ "delete",			  "command",	  "bat",	  "(b:bat[:void,:any_2],h:oid):void ",								  "BKCdelete;"				  ]
[ "delete",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:any_1):void ",							  "BKCdelete;"				  ]
[ "delete",			  "command",	  "bat",	  "(b:bat[:void,:any_2],h:oid,t:any_2):void ",							  "BKCdelete_bun;"			  ]
[ "delete",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:any_1,t:any_2):void ",						  "BKCdelete_bun;"			  ]
[ "delta",			  "command",	  "transaction",  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",							  "TRNtrans_delta;"			  ]
[ "deposit",			  "command",	  "partitions",	  "(b:str,p:str,cap:int):void ",								  "BPTdepositPartition;"		  ]
[ "deposit",			  "command",	  "partitions",	  "(b:bat[:void,:any_1],p:bat[:void,:any_1]):void ",						  "BPTdeposit2;"			  ]
[ "deposit",			  "command",	  "partitions",	  "(b:bat[:void,:any_1]):void ",								  "BPTdeposit;"				  ]
[ "deposit",			  "command",	  "statistics",	  "(name:bat[:any_1,:any_2]):void ",								  "STATdeposit;"			  ]
[ "deposit",			  "command",	  "statistics",	  "(name:str):void ",										  "STATdepositStr;"			  ]
[ "deposit",			  "command",	  "pbm",	  "(nme:str,b:bat[:any_1,:any_2]):void ",							  "PBMdepositIndexed;"			  ]
[ "deposit",			  "command",	  "pbm",	  "(nme:str,elm:str,b:bat[:any_1,:any_2]):void ",						  "PBMdeposit;"				  ]
[ "deposit",			  "command",	  "pbm",	  "(nme:str,elm:str,b:str):void ",								  "PBMdepositByName;"			  ]
[ "deposit",			  "command",	  "pbm",	  "(nme:str,elm:str,idx:int):void ",								  "PBMdeposit;"				  ]
[ "deposit",			  "pattern",	  "box",	  "(bname:str,name:str,v:any_1):void ",								  "BOXdeposit;"				  ]
[ "deposit",			  "pattern",	  "bbp",	  "(name:str,loc:str):bat[:any_1,:any_2] ",							  "CMDbbpbindDefinition;"		  ]
[ "deposit",			  "pattern",	  "bbp",	  "(name:str,v:bat[:any_1,:any_2]):void ",							  "CMDbbpdeposit;"			  ]
[ "deposit",			  "pattern",	  "const",	  "(name:str,val:any_1):void ",									  "CSTdeposit;"				  ]
[ "dequeue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:any_1]):void ",									  "PQdequeue_anymax;"			  ]
[ "dequeue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:dbl]):void ",									  "PQdequeue_dblmax;"			  ]
[ "dequeue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:flt]):void ",									  "PQdequeue_fltmax;"			  ]
[ "dequeue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:lng]):void ",									  "PQdequeue_lngmax;"			  ]
[ "dequeue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:ptr]):void ",									  "PQdequeue_ptrmax;"			  ]
[ "dequeue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:oid]):void ",									  "PQdequeue_oidmax;"			  ]
[ "dequeue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:int]):void ",									  "PQdequeue_intmax;"			  ]
[ "dequeue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:sht]):void ",									  "PQdequeue_shtmax;"			  ]
[ "dequeue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:chr]):void ",									  "PQdequeue_chrmax;"			  ]
[ "dequeue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:any_1]):void ",									  "PQdequeue_anymin;"			  ]
[ "dequeue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:dbl]):void ",									  "PQdequeue_dblmin;"			  ]
[ "dequeue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:flt]):void ",									  "PQdequeue_fltmin;"			  ]
[ "dequeue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:lng]):void ",									  "PQdequeue_lngmin;"			  ]
[ "dequeue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:ptr]):void ",									  "PQdequeue_ptrmin;"			  ]
[ "dequeue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:oid]):void ",									  "PQdequeue_oidmin;"			  ]
[ "dequeue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:int]):void ",									  "PQdequeue_intmin;"			  ]
[ "dequeue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:sht]):void ",									  "PQdequeue_shtmin;"			  ]
[ "dequeue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:chr]):void ",									  "PQdequeue_chrmin;"			  ]
[ "derive",			  "command",	  "group",	  "(histo:bat[:void,:int],map:bat[:void,:oid],attr:bat[:oid,:any_2]) (hist:bat[:oid,:int],grp:bat[:oid,:oid]) ", "GRPderive;"				  ]
[ "derive",			  "command",	  "group",	  "(hist:bat[:any_1,:int],map:bat[:any_1,:oid],attr:bat[:any_1,:any_2]) (histo:bat[:any_1,:int],grp:bat[:any_1,:oid]) ", "GRPderive;"				  ]
[ "destroy",			  "command",	  "partitions",	  "():void ",											  "BPTdestroy;"				  ]
[ "destroy",			  "pattern",	  "statistics",	  "():void ",											  "STATdestroy;"			  ]
[ "destroy",			  "command",	  "mserver",	  "(mid:int):void ",										  "SERVERdestroy;"			  ]
[ "destroy",			  "command",	  "pbm",	  "():void ",											  "PBMdestroy;"				  ]
[ "destroy",			  "pattern",	  "box",	  "(bname:str):void ",										  "BOXdestroy;"				  ]
[ "destroy",			  "pattern",	  "bbp",	  "(b:bat[:any_1,:any_2],immediate:bit):void ",							  "CMDbbpdestroyBAT;"			  ]
[ "destroy",			  "pattern",	  "bbp",	  "(b:bat[:any_1,:any_2]):void ",								  "CMDbbpdestroyBAT1;"			  ]
[ "destroy",			  "command",	  "bbp",	  "():void ",											  "CMDbbpdestroy;"			  ]
[ "destroy",			  "pattern",	  "const",	  "():void ",											  "CSTdestroy;"				  ]
[ "destroy",			  "command",	  "bstream",	  "(s:bstream):void ",										  "bstream_destroy_wrapwrap;"		  ]
[ "destroy",			  "command",	  "sema",	  "(s:sema):void ",										  "SEMAdestroy;"			  ]
[ "destroy",			  "command",	  "lock",	  "(l:lock):void ",										  "LCKdestroy;"				  ]
[ "diff",			  "command",	  "mtime",	  "(val1:timestamp,val2:timestamp):lng ",							  "MTIMEtimestamp_diff;"		  ]
[ "diff",			  "command",	  "mtime",	  "(val1:date,val2:date):int ",									  "MTIMEdate_diff;"			  ]
[ "difference",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",			  "ALGsdiff;"				  ]
[ "discard",			  "command",	  "partitions",	  "(name:bat[:void,:any_1]):void ",								  "BPTdiscard;"				  ]
[ "discard",			  "command",	  "statistics",	  "(name:bat[:any_1,:any_2]):void ",								  "STATdiscard2;"			  ]
[ "discard",			  "pattern",	  "statistics",	  "(name:str):void ",										  "STATdiscard;"			  ]
[ "discard",			  "command",	  "pbm",	  "(nme:str,b:bat[:void,:any_1]):void ",							  "PBMdiscardComponent;"		  ]
[ "discard",			  "command",	  "pbm",	  "(name:str):void ",										  "PBMdiscard;"				  ]
[ "discard",			  "command",	  "pbm",	  "():void ",											  "PBMdiscardAll;"			  ]
[ "discard",			  "pattern",	  "box",	  "(bname:str,name:str):void ",									  "BOXdiscard;"				  ]
[ "discard",			  "pattern",	  "bbp",	  "(name:str):void ",										  "CMDbbpdiscard;"			  ]
[ "discard",			  "pattern",	  "const",	  "(name:any_1):void ",										  "CSTdiscard;"				  ]
[ "disconnect",			  "command",	  "mserver",	  "(mid:int):void ",										  "SERVERdisconnect;"			  ]
[ "display",			  "pattern",	  "tablet",	  "(v:bat[:any_1,:any]...):int ",								  "TABdisplayTable;"			  ]
[ "display",			  "pattern",	  "tablet",	  "(v:any...):int ",										  "TABdisplayRow;"			  ]
[ "down",			  "command",	  "sema",	  "(s:sema):void ",										  "SEMAdown;"				  ]
[ "dst",			  "command",	  "mtime",	  "(t:timestamp,v:timezone):bit ",								  "MTIMEtimestamp_inside_dst;"		  ]
[ "dump",			  "command",	  "partitions",	  "():void ",											  "BPTdump;"				  ]
[ "dump",			  "command",	  "statistics",	  "():void ",											  "STATdump;"				  ]
[ "dump",			  "command",	  "pbm",	  "():void ",											  "PBMdump;"				  ]
[ "dump",			  "pattern",	  "tablet",	  "(s:streams,b:bat[:any,:any]...):int ",							  "TABdump;"				  ]
[ "dump",			  "command",	  "tablet",	  "(names:bat[:void,:str],seps:bat[:void,:str],bats:bat[:void,:BAT],datafile:str,nr:int):void ",  "CMDtablet_dump;"			  ]
[ "dumpQEP",			  "pattern",	  "optimizer",	  "():void ",											  "QEPtreedump;"			  ]
[ "dumpTrace",			  "command",	  "profiler",	  "():void ",											  "CMDdumpTrace;"			  ]
[ "emptySet",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",									  "QOTESoptimizer;"			  ]
[ "emptySet",			  "pattern",	  "optimizer",	  "():str ",											  "QOTESoptimizer;"			  ]
[ "end_dst",			  "command",	  "mtime",	  "(t:timezone):zrule ",									  "MTIMEtzone_extract_end;"		  ]
[ "endsWith",			  "command",	  "batstr",	  "(s:bat[:void,:str],suffix:str):bat[:void,:bit] ",						  "STRbatSuffixcst;"			  ]
[ "endsWith",			  "command",	  "batstr",	  "(s:bat[:void,:str],suffix:bat[:void,:str]):bat[:void,:bit] ",				  "STRbatSuffix;"			  ]
[ "endsWith",			  "command",	  "str",	  "(s:str,suffix:str):bit ",									  "STRSuffix;"				  ]
[ "enqueue_max",		  "pattern",	  "pqueue",	  "(h:bat[:oid,:any_1],id:oid,value:any_1):void ",						  "PQenqueue_anymax;"			  ]
[ "enqueue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:dbl],id:oid,value:dbl):void ",							  "PQenqueue_dblmax;"			  ]
[ "enqueue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:flt],id:oid,value:flt):void ",							  "PQenqueue_fltmax;"			  ]
[ "enqueue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:lng],id:oid,value:lng):void ",							  "PQenqueue_lngmax;"			  ]
[ "enqueue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:ptr],id:oid,value:ptr):void ",							  "PQenqueue_ptrmax;"			  ]
[ "enqueue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:oid],id:oid,value:oid):void ",							  "PQenqueue_oidmax;"			  ]
[ "enqueue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:int],id:oid,value:int):void ",							  "PQenqueue_intmax;"			  ]
[ "enqueue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:sht],id:oid,value:sht):void ",							  "PQenqueue_shtmax;"			  ]
[ "enqueue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:chr],id:oid,value:chr):void ",							  "PQenqueue_chrmax;"			  ]
[ "enqueue_min",		  "pattern",	  "pqueue",	  "(h:bat[:oid,:any_1],id:oid,value:any_1):void ",						  "PQenqueue_anymin;"			  ]
[ "enqueue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:dbl],id:oid,value:dbl):void ",							  "PQenqueue_dblmin;"			  ]
[ "enqueue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:flt],id:oid,value:flt):void ",							  "PQenqueue_fltmin;"			  ]
[ "enqueue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:lng],id:oid,value:lng):void ",							  "PQenqueue_lngmin;"			  ]
[ "enqueue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:ptr],id:oid,value:ptr):void ",							  "PQenqueue_ptrmin;"			  ]
[ "enqueue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:oid],id:oid,value:oid):void ",							  "PQenqueue_oidmin;"			  ]
[ "enqueue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:int],id:oid,value:int):void ",							  "PQenqueue_intmin;"			  ]
[ "enqueue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:sht],id:oid,value:sht):void ",							  "PQenqueue_shtmin;"			  ]
[ "enqueue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:chr],id:oid,value:chr):void ",							  "PQenqueue_chrmin;"			  ]
[ "epilogue",			  "command",	  "partitions",	  "():void ",											  "BPTepilogue;"			  ]
[ "epilogue",			  "command",	  "statistics",	  "():void ",											  "STATepilogue;"			  ]
[ "epilogue",			  "command",	  "mserver",	  "():void ",											  "SERVERepilogue;"			  ]
[ "epilogue",			  "command",	  "pbm",	  "():void ",											  "PBMepilogue;"			  ]
[ "epilogue",			  "command",	  "sabaoth",	  "():void ",															  "SABAOTHepilogue;"				  ]
[ "epilogue",			  "command",	  "mtime",	  "():void ",											  "MTIMEepilogue;"			  ]
[ "epilogue",			  "command",	  "alarm",	  "():void ",											  "ALARMepilogue;"			  ]
[ "epiloque",			  "command",	  "const",	  "():void ",											  "CSTepilogue;"			  ]
[ "epoch",			  "command",	  "timestamp",	  "(t:timestamp):lng ",										  "MTIMEepoch2lng;"			  ]
[ "epoch",			  "command",	  "timestamp",	  "():timestamp ",										  "MTIMEepoch;"				  ]
[ "epoch",			  "command",	  "alarm",	  "():int ",											  "ALARMepoch;"				  ]
[ "error",			  "command",	  "mserver",	  "(mid:int):int ",										  "SERVERerror;"			  ]
[ "exist",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],h:any_1,t:any_2):bit ",						  "ALGexistBUN;"			  ]
[ "exist",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],h:any_1):bit ",							  "ALGexist;"				  ]
[ "exit",			  "command",	  "clients",	  "():void ",															  "CLTexit;"					  ]
[ "exp",			  "command",	  "batmath",	  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",							  "CMDsciencevoid_exp;"			  ]
[ "exp",			  "command",	  "batmath",	  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",							  "CMDscience_exp;"			  ]
[ "exp",			  "command",	  "mmath",	  "(x:dbl):dbl ",										  "MATHunary_EXPdbl;"			  ]
[ "exp",			  "command",	  "mmath",	  "(x:flt):flt ",										  "MATHunary_EXPflt;"			  ]
[ "expand",			  "command",	  "mat",	  "(grp:str):bat[:any_1,:any_2] ",								  "MATdummy;"				  ]
[ "explain",			  "command",	  "mserver",	  "(mid:int):str ",										  "SERVERexplain;"			  ]
[ "export",			  "command",	  "io",		  "(b:bat[:any_1,:any_2],filepath:str):bit ",							  "IOexport;"				  ]
[ "fabs",			  "command",	  "batmath",	  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",							  "CMDsciencevoid_fabs;"		  ]
[ "fabs",			  "command",	  "batmath",	  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",							  "CMDscience_fabs;"			  ]
[ "fabs",			  "command",	  "mmath",	  "(y:dbl):dbl ",										  "MATHunary_FABSdbl;"			  ]
[ "factorize",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",									  "QOTFToptimizer;"			  ]
[ "factorize",			  "pattern",	  "optimizer",	  "():str ",											  "QOTFToptimizer;"			  ]
[ "fetch",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],s:bat[:oid,:any_3]):bat[:any_1,:any_2] ",				  "ALGfetchbat;"			  ]
[ "fetch",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],s:bat[:lng,:any_3]):bat[:any_1,:any_2] ",				  "ALGfetchbat;"			  ]
[ "fetch",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],s:bat[:int,:any_3]):bat[:any_1,:any_2] ",				  "ALGfetchbat;"			  ]
[ "fetch",			  "command",	  "algebra",	  "(b:bat[:any_2,:any_1],x:int):any_1 ",							  "ALGfetchint;"			  ]
[ "fetch",			  "command",	  "algebra",	  "(b:bat[:any_2,:any_1],x:lng):any_1 ",							  "ALGfetch;"				  ]
[ "fetch",			  "command",	  "algebra",	  "(b:bat[:any_2,:any_1],x:oid):any_1 ",							  "ALGfetchoid;"			  ]
[ "fetch_all_rows",		  "command",	  "mserver",	  "(hdl:int):int ",										  "SERVERfetch_all_rows;"		  ]
[ "fetch_field",		  "command",	  "mserver",	  "(hdl:int,fnr:int):chr ",									  "SERVERfetch_field_chr;"		  ]
[ "fetch_field",		  "command",	  "mserver",	  "(hdl:int,fnr:int):oid ",									  "SERVERfetch_field_oid;"		  ]
[ "fetch_field",		  "command",	  "mserver",	  "(hdl:int,fnr:int):void ",									  "SERVERfetch_field_void;"		  ]
[ "fetch_field",		  "command",	  "mserver",	  "(hdl:int,fnr:int):sht ",									  "SERVERfetch_field_sht;"		  ]
[ "fetch_field",		  "command",	  "mserver",	  "(hdl:int,fnr:int):lng ",									  "SERVERfetch_field_lng;"		  ]
[ "fetch_field",		  "command",	  "mserver",	  "(hdl:int,fnr:int):int ",									  "SERVERfetch_field_int;"		  ]
[ "fetch_field",		  "command",	  "mserver",	  "(hdl:int,fnr:int):str ",									  "SERVERfetch_field_str;"		  ]
[ "fetch_field_array",		  "command",	  "mserver",	  "(hdl:int):bat[:int,:str] ",									  "SERVERfetch_field_bat;"		  ]
[ "fetch_line",			  "command",	  "mserver",	  "(hdl:int):str ",										  "SERVERfetch_line;"			  ]
[ "fetch_reset",		  "command",	  "mserver",	  "(hdl:int):int ",										  "SERVERfetch_reset;"			  ]
[ "fetch_row",			  "command",	  "mserver",	  "(hdl:int):int ",										  "SERVERfetch_row;"			  ]
[ "fetch_row",			  "command",	  "mserver",	  "(hdl:int):int ",										  "SERVERrows_affected;"		  ]
[ "fetchjoin",			  "command",	  "algebra",	  "(left:bat[:any_1,:oid],right:bat[:void,:any_3]):bat[:any_1,:any_3] ",			  "ALGfetchjoin;"			  ]
[ "fetchjoin",			  "command",	  "algebra",	  "(left:bat[:void,:any_2],right:bat[:any_2,:any_3]):bat[:void,:any_3] ",							  "ALGjoin;"				  ]
[ "find",			  "command",	  "algebra",	  "(b:bat[:void,:any_2],h:oid):any_2 ",								  "ALGfind;"				  ]
[ "find",			  "command",	  "algebra",	  "(b:bat[:oid,:any_2],h:void):any_2 ",								  "ALGfind;"				  ]
[ "find",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],h:any_1):any_2 ",							  "ALGfind;"				  ]
[ "finish",			  "command",	  "mserver",	  "(hdl:int):int ",										  "SERVERfinish;"			  ]
[ "finish",			  "command",	  "tablet",	  "():void ",											  "TABfinishReport;"			  ]
[ "finite",			  "command",	  "mmath",	  "(d:dbl):bit ",										  "math_unary_FINITE;"			  ]
[ "firstPage",			  "command",	  "tablet",	  "():void ",											  "TABfirstPage;"			  ]
[ "floor",			  "command",	  "batmath",	  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",							  "CMDsciencevoid_floor;"		  ]
[ "floor",			  "command",	  "batmath",	  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",							  "CMDscience_floor;"			  ]
[ "floor",			  "command",	  "mmath",	  "(y:dbl):dbl ",										  "MATHunary_FLOORdbl;"			  ]
[ "floor",			  "command",	  "mmath",	  "(y:flt):flt ",										  "MATHunary_FLOORflt;"			  ]
[ "flt",			  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:flt] ",							  "CMDconvertdbl_flt;"			  ]
[ "flt",			  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:flt] ",							  "CMDconvertflt_flt;"			  ]
[ "flt",			  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:flt] ",							  "CMDconvertlng_flt;"			  ]
[ "flt",			  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:flt] ",							  "CMDconvertint_flt;"			  ]
[ "flt",			  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:flt] ",							  "CMDconvertsht_flt;"			  ]
[ "flt",			  "command",	  "calc",	  "(v:void):flt ",										  "CALCnil2flt;"			  ]
[ "flt",			  "command",	  "calc",	  "(v:str):flt ",										  "CALCstr2flt;"			  ]
[ "flt",			  "command",	  "calc",	  "(x:lng):flt ",										  "CALClng2flt;"			  ]
[ "flt",			  "command",	  "calc",	  "(x:int):flt ",										  "CALCint2flt;"			  ]
[ "flt",			  "command",	  "calc",	  "(x:sht):flt ",										  "CALCsht2flt;"			  ]
[ "flt",			  "command",	  "calc",	  "(x:dbl):flt ",										  "CALCdbl2flt;"			  ]
[ "flt",			  "command",	  "calc",	  "(x:flt):flt ",										  "CALCflt2flt;"			  ]
[ "flush",			  "command",	  "streams",	  "(s:streams):void ",										  "stream_flush_streamwrap;"		  ]
[ "fmod",			  "command",	  "batmath",	  "(x:bat[:any_1,:dbl],y:dbl):bat[:any_1,:dbl] ",						  "CMDscience_fmod;"			  ]
[ "fmod",			  "command",	  "mmath",	  "(y:dbl,x:dbl):dbl ",										  "MATHbinary_FMODdbl;"			  ]
[ "fmod",			  "command",	  "mmath",	  "(y:flt,x:flt):flt ",										  "MATHbinary_FMODflt;"			  ]
[ "forceUpdate",		  "command",	  "statistics",	  "(bnme:str):void ",										  "STATforceUpdate;"			  ]
[ "forceUpdate",		  "command",	  "statistics",	  "():void ",											  "STATforceUpdateAll;"			  ]
[ "fragment",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],hlow:any_1,hhigh:any_1,tlow:any_2,thigh:any_2):bat[:any_1,:any_2] ",	  "ALGfragment;"			  ]
[ "ftable",			  "pattern",	  "io",		  "(fp:streams,order:int,b1:bat[:any_1,:any],b:bat[:any_1,:any]...):void ",			  "IOfotable;"				  ]
[ "ftable",			  "pattern",	  "io",		  "(filep:streams,b1:bat[:any_1,:any],b:bat[:any_1,:any]...):int ",				  "IOftable;"				  ]
[ "garbageCollector",		  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",									  "QOTGCoptimizer;"			  ]
[ "garbageCollector",		  "pattern",	  "optimizer",	  "():str ",											  "QOTGCoptimizer;"			  ]
[ "generator",			  "command",	  "pbm",	  "(s:str):bat[:any_1,:any_2] ",								  "PBMdummy;"				  ]
[ "generators",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",									  "QOTBGoptimizer;"			  ]
[ "generators",			  "pattern",	  "optimizer",	  "():str ",											  "QOTBGoptimizer;"			  ]
[ "getAccess",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):str ",								  "BKCgetAccess;"			  ]
[ "getAddress",			  "command",	  "inspect",	  "(mod:str,fcn:str):bat[:str,:str] ",								  "INSPECTgetAddress;"			  ]
[ "getAddresses",		  "command",	  "inspect",	  "():bat[:void,:str] ",									  "INSPECTgetAllAddresses;"		  ]
[ "getAlpha",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",							  "BKCgetAlpha;"			  ]
[ "getAnchor",			  "command",	  "url",	  "(u:url):str ",										  "URLgetAnchor;"			  ]
[ "getAtomNames",		  "command",	  "inspect",	  "():bat[:int,:str] ",										  "INSPECTatom_names;"			  ]
[ "getAtomSizes",		  "command",	  "inspect",	  "():bat[:int,:int] ",										  "INSPECTatom_sizes;"			  ]
[ "getAtomSuper",		  "command",	  "inspect",	  "():bat[:int,:str] ",										  "INSPECTatom_sup_names;"		  ]
[ "getBAT",			  "command",	  "calc",	  "(b:BAT):bat[:any_1,:any_2] ",								  "CALCbatid2bat;"			  ]
[ "getBATidentifier",		  "command",	  "calc",	  "(b:bat[:any_1,:any_2]):BAT ",								  "CALCbat2batid;"			  ]
[ "getBasename",		  "command",	  "url",	  "(u:url):str ",										  "URLgetBasename;"			  ]
[ "getBatSize",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):lng ",								  "BKCbatsize;"				  ]
[ "getBoxNames",		  "command",	  "box",	  "():bat[:int,:str] ",										  "BOXgetBoxNames;"			  ]
[ "getCaller",			  "command",	  "factory",	  "():int ",											  "FCTgetCaller;"			  ]
[ "getCapacity",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):lng ",								  "BKCgetCapacity;"			  ]
[ "getComment",			  "command",	  "inspect",	  "(mod:str,fcn:str):bat[:str,:str] ",								  "INSPECTgetComment;"			  ]
[ "getComponents",		  "command",	  "pbm",	  "(grp:str):bat[:str,:str] ",									  "PBMgetComponents;"			  ]
[ "getContent",			  "command",	  "url",	  "(u:url):str ",										  "URLgetContent;"			  ]
[ "getContext",			  "command",	  "url",	  "(u:url):str ",										  "URLgetContext;"			  ]
[ "getContext",			  "command",	  "mdb",	  "(s:str):str ",										  "MDBgetExceptionContext;"		  ]
[ "getCount",			  "command",	  "statistics",	  "(nme:str):lng ",										  "STATgetCount;"			  ]
[ "getCount",			  "command",	  "bbp",	  "():bat[:int,:lng] ",										  "CMDbbpCount;"			  ]
[ "getDatabases",		  "command",	  "status",	  "():bat[:str,:str] ",										  "SYSgetDatabases;"			  ]
[ "getDebug",			  "command",	  "mdb",	  "():int ",														  "MDBgetDebug;"			  ]
[ "getDefinition",		  "command",	  "inspect",	  "(mod:str,fcn:str):bat[:str,:str] ",								  "INSPECTgetDefinition;"		  ]
[ "getDefinition",		  "pattern",	  "mdb",	  "():bat[:void,:str] ",									  "MDBgetDefinition;"			  ]
[ "getDelta",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",							  "BKCgetDelta;"			  ]
[ "getDirectory",		  "command",	  "url",	  "(u:url):bat[:int,:str] ",									  "URLgetDirectory;"			  ]
[ "getDirty",			  "command",	  "bbp",	  "():bat[:int,:str] ",										  "CMDbbpDirty;"			  ]
[ "getDomain",			  "command",	  "url",	  "(u:url):str ",										  "URLgetDomain;"			  ]
[ "getEnvironment",		  "command",	  "inspect",	  "():bat[:str,:str] ",										  "INSPECTgetEnvironment;"		  ]
[ "getError",			  "command",	  "mserver",	  "(mid:int):str ",										  "SERVERgetError;"			  ]
[ "getException",		  "command",	  "mdb",	  "(s:str):str ",										  "MDBgetExceptionVariable;"		  ]
[ "getExtension",		  "command",	  "url",	  "(u:url):str ",										  "URLgetExtension;"			  ]
[ "getFile",			  "command",	  "url",	  "(u:url):str ",										  "URLgetFile;"				  ]
[ "getFunction",		  "command",	  "inspect",	  "():bat[:void,:str] ",									  "INSPECTgetAllFunctions;"		  ]
[ "getHead",			  "pattern",	  "bat",	  "(b:bat[:any_1,:any],i:lng):any_1 ",								  "CHPgetHead;"				  ]
[ "getHeadType",		  "command",	  "bbp",	  "():bat[:int,:str] ",										  "CMDbbpHeadType;"			  ]
[ "getHeadType",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):str ",								  "BKCgetHeadType;"			  ]
[ "getHeat",			  "command",	  "bbp",	  "():bat[:int,:int] ",										  "CMDbbpHeat;"				  ]
[ "getHeat",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):lng ",								  "BKCheat;"				  ]
[ "getHistogram",		  "command",	  "statistics",	  "(nme:str):bat[:any_1,:any_2] ",								  "STATgetHistogram;"			  ]
[ "getHost",			  "command",	  "url",	  "(u:url):str ",										  "URLgetHost;"				  ]
[ "getHotset",			  "command",	  "statistics",	  "():bat[:int,:str] ",										  "STATgetHotset;"			  ]
[ "getId",			  "command",	  "clients",	  "():int ",											  "CLTgetClientId;"			  ]
[ "getInfo",			  "command",	  "clients",	  "():bat[:str,:str] ",										  "CLTInfo;"				  ]
[ "getKind",			  "command",	  "inspect",	  "():bat[:void,:str] ",									  "INSPECTgetkind;"			  ]
[ "getKind",			  "command",	  "bbp",	  "():bat[:int,:str] ",										  "CMDbbpKind;"				  ]
[ "getLRefCount",		  "command",	  "bbp",	  "(b:bat[:any_1,:any_2]):int ",								  "CMDgetBATlrefcnt;"			  ]
[ "getLRefCount",		  "command",	  "bbp",	  "():bat[:int,:int] ",										  "CMDbbpLRefCount;"			  ]
[ "getLast",			  "command",	  "pbm",	  "(grp:str):bat[:any_1,:any_2] ",								  "PBMgetLast;"				  ]
[ "getLastPartition",		  "command",	  "partitions",	  "(b:bat[:void,:any_1]):bat[:void,:any_1] ",							  "BPTgetLastPartition;"		  ]
[ "getLocation",		  "command",	  "bbp",	  "():bat[:int,:str] ",										  "CMDbbpLocation;"			  ]
[ "getLocations",		  "command",	  "factory",	  "():bat[:int,:str] ",										  "FCTgetLocations;"			  ]
[ "getLogins",			  "command",	  "clients",	  "():bat[:int,:str] ",										  "CLTLogin;"				  ]
[ "getMax",			  "command",	  "statistics",	  "(nme:str):lng ",										  "STATgetMax;"				  ]
[ "getMin",			  "command",	  "statistics",	  "(nme:str):lng ",										  "STATgetMin;"				  ]
[ "getModule",			  "command",	  "inspect",	  "():bat[:void,:str] ",									  "INSPECTgetAllModules;"		  ]
[ "getName",			  "command",	  "bbp",	  "(b:bat[:any_1,:any_2]):str ",								  "CMDbbpName;"				  ]
[ "getName",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):str ",								  "BKCgetBBPname;"			  ]
[ "getNames",			  "command",	  "pbm",	  "():bat[:str,:str] ",										  "PBMgetNames;"			  ]
[ "getNames",			  "command",	  "bbp",	  "():bat[:int,:str] ",										  "CMDbbpNames;"			  ]
[ "getNextElement",		  "command",	  "pbm",	  "(grp:str,first:oid,last:oid):bat[:any_1,:any_2] ",						  "PBMgetNextElementRng;"		  ]
[ "getNextElement",		  "command",	  "pbm",	  "(grp:str):bat[:any_2,:any_1] ",								  "PBMgetNextElement;"			  ]
[ "getNextName",		  "command",	  "pbm",	  "() (_1:int,_2:str,_3:str) ",									  "PBMgetNextName;"			  ]
[ "getObjects",			  "command",	  "statistics",	  "():bat[:int,:str] ",										  "STATgetObjects;"			  ]
[ "getObjects",			  "pattern",	  "bbp",	  "():bat[:int,:str] ",										  "CMDbbpGetObjects;"			  ]
[ "getOwners",			  "command",	  "factory",	  "():bat[:int,:str] ",										  "FCTgetOwners;"			  ]
[ "getPage",			  "command",	  "tablet",	  "(i:int):void ",										  "TABgetPage;"				  ]
[ "getPageCnt",			  "command",	  "tablet",	  "():void ",											  "TABgetPageCnt;"			  ]
[ "getPlants",			  "command",	  "factory",	  "():bat[:str,:str] ",										  "FCTgetPlants;"			  ]
[ "getPort",			  "command",	  "url",	  "(u:url):str ",										  "URLgetPort;"				  ]
[ "getPorts",			  "command",	  "status",	  "(lang:str):bat[:str,:int] ",									  "SYSgetPorts;"			  ]
[ "getProtocol",		  "command",	  "url",	  "(u:url):str ",										  "URLgetProtocol;"			  ]
[ "getQuery",			  "command",	  "url",	  "(u:url):str ",										  "URLgetQuery;"			  ]
[ "getQueryArg",		  "command",	  "url",	  "(u:url):bat[:str,:str] ",									  "URLgetQueryArg;"			  ]
[ "getRNames",			  "command",	  "bbp",	  "():bat[:int,:str] ",										  "CMDbbpRNames;"			  ]
[ "getRange",			  "command",	  "partitions",	  "(b:bat[:void,:any_1]) (first:oid,last:oid) ",						  "BPTgetRange;"			  ]
[ "getRange",			  "command",	  "pbm",	  "(b:bat[:void,:any_1]) (first:oid,last:oid) ",						  "PBMgetRange;"			  ]
[ "getReason",			  "command",	  "mdb",	  "(s:str):str ",										  "MDBgetExceptionReason;"		  ]
[ "getRefCount",		  "command",	  "bbp",	  "(b:bat[:any_1,:any_2]):int ",								  "CMDgetBATrefcnt;"			  ]
[ "getRefCount",		  "command",	  "bbp",	  "():bat[:int,:int] ",										  "CMDbbpRefCount;"			  ]
[ "getRobotURL",		  "command",	  "url",	  "(u:url):str ",										  "URLgetRobotURL;"			  ]
[ "getRole",			  "command",	  "bat",	  "(bid:bat[:any_1,:any_2]):str ",								  "BKCgetRole;"				  ]
[ "getScenario",		  "command",	  "clients",	  "():str ",											  "CLTgetScenario;"			  ]
[ "getSequenceBase",		  "command",	  "bat",	  "(b:bat[:oid,:any_1]):oid ",									  "BKCgetSequenceBase;"			  ]
[ "getSequenceBase",		  "command",	  "bat",	  "(b:bat[:void,:any_1]):oid ",									  "BKCgetSequenceBase;"			  ]
[ "getSignature",		  "command",	  "inspect",	  "(mod:str,fcn:str):bat[:str,:str] ",								  "INSPECTgetSignature;"		  ]
[ "getSignatures",		  "command",	  "inspect",	  "():bat[:void,:str] ",									  "INSPECTgetAllSignatures;"		  ]
[ "getSize",			  "command",	  "statistics",	  "(nme:str):lng ",										  "STATgetSize;"			  ]
[ "getSize",			  "command",	  "inspect",	  "(mod:str,fcn:str):lng ",									  "INSPECTgetFunctionSize;"		  ]
[ "getSize",			  "command",	  "inspect",	  "(mod:str):bat[:str,:lng] ",									  "INSPECTgetModuleSize;"		  ]
[ "getSize",			  "pattern",	  "inspect",	  "():lng ",											  "INSPECTgetSize;"			  ]
[ "getSource",			  "command",	  "inspect",	  "(mod:str,fcn:str):str ",									  "INSPECTgetSource;"			  ]
[ "getStackDepth",		  "pattern",	  "mdb",	  "():int ",											  "MDBStkDepth;"			  ]
[ "getStackFrame",		  "pattern",	  "mdb",	  "():bat[:str,:str] ",										  "MDBgetStackFrame;"			  ]
[ "getStackFrame",		  "pattern",	  "mdb",	  "(i:int):bat[:str,:str] ",									  "MDBgetStackFrameN;"			  ]
[ "getStackTrace",		  "pattern",	  "mdb",	  "():bat[:void,:str] ",									  "MDBStkTrace;"			  ]
[ "getStatus",			  "command",	  "bbp",	  "():bat[:int,:str] ",										  "CMDbbpStatus;"			  ]
[ "getTail",			  "pattern",	  "bat",	  "(b:bat[:any_2,:any_1],i:lng):any_1 ",							  "CHPgetTail;"				  ]
[ "getTailType",		  "command",	  "bbp",	  "():bat[:int,:str] ",										  "CMDbbpTailType;"			  ]
[ "getTailType",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):str ",								  "BKCgetTailType;"			  ]
[ "getThreads",			  "command",	  "status",	  "():bat[:int,:str] ",										  "SYSgdkThread;"			  ]
[ "getTimeIn",			  "command",	  "factory",	  "():date ",											  "FCTgetTimeStampIn;"			  ]
[ "getTimeOut",			  "command",	  "factory",	  "():date ",											  "FCTgetTimeStampOut;"			  ]
[ "getTrace",			  "command",	  "profiler",	  "(e:str):bat[:int,:any_1] ",									  "CMDgetTrace;"			  ]
[ "getType",			  "pattern",	  "inspect",	  "(v:any_1):str ",										  "INSPECTtypeName;"			  ]
[ "getType",			  "pattern",	  "inspect",	  "(v:bat[:any_1,:any_2]) (ht:str,tt:str) ",							  "INSPECTtypeName;"			  ]
[ "getTypeIndex",		  "pattern",	  "inspect",	  "(v:any_1):int ",										  "INSPECTtypeIndex;"			  ]
[ "getTypeName",		  "command",	  "inspect",	  "(v:int):str ",										  "INSPECTtypename;"			  ]
[ "getUser",			  "command",	  "url",	  "(u:url):str ",										  "URLgetUser;"				  ]
[ "getUsers",			  "command",	  "clients",	  "(s:bat[:str,:any_1]):bat[:oid,:str] ",							  "CLTgetUsers;"			  ]
[ "getUsers",			  "command",	  "clients",	  "():bat[:int,:str] ",										  "CLTusers;"				  ]
[ "get_field_count",		  "command",	  "mserver",	  "(hdl:int):int ",										  "SERVERget_field_count;"		  ]
[ "get_row_count",		  "command",	  "mserver",	  "(hdl:int):int ",										  "SERVERget_row_count;"		  ]
[ "getenv",			  "command",	  "unix",	  "(nme:str):str ",										  "UNIXgetenv;"				  ]
[ "green",			  "command",	  "batcolor",	  "(c:bat[:void,:color]):bat[:void,:int] ",							  "CLRbatGreen;"			  ]
[ "green",			  "command",	  "color",	  "(c:color):int ",										  "CLRgreen;"				  ]
[ "grid",			  "command",	  "array",	  "(b:bat[:void,:lng],i:lng,j:lng,k:lng,l:lng,s:lng):bat[:void,:lng] ",				  "ARRAYgridBAT_lng;"			  ]
[ "grid",			  "command",	  "array",	  "(b:bat[:void,:lng],i:lng,j:lng,k:lng,l:lng):bat[:void,:lng] ",				  "ARRAYgridBAT_lng;"			  ]
[ "grid",			  "command",	  "array",	  "(i:lng,j:lng,k:lng,l:lng,s:lng):bat[:void,:lng] ",						  "ARRAYgridShift_lng;"			  ]
[ "grid",			  "command",	  "array",	  "(i:lng,j:lng,k:lng,l:lng):bat[:void,:lng] ",							  "ARRAYgrid_lng;"			  ]
[ "grid",			  "command",	  "array",	  "(b:bat[:void,:int],i:int,j:int,k:int,l:int,s:int):bat[:void,:int] ",				  "ARRAYgridBAT_int;"			  ]
[ "grid",			  "command",	  "array",	  "(b:bat[:void,:int],i:int,j:int,k:int,l:int):bat[:void,:int] ",				  "ARRAYgridBAT_int;"			  ]
[ "grid",			  "command",	  "array",	  "(i:int,j:int,k:int,l:int,s:int):bat[:void,:int] ",						  "ARRAYgridShift_int;"			  ]
[ "grid",			  "command",	  "array",	  "(i:int,j:int,k:int,l:int):bat[:void,:int] ",							  "ARRAYgrid_int;"			  ]
[ "groupby",			  "command",	  "algebra",	  "(b:bat[:any_1,:int]):bat[:any_1,:void] ",							  "ALGgroupby;"				  ]
[ "hasAppendMode",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",								  "BKChasAppendMode;"			  ]
[ "hasMoreElements",		  "command",	  "partitions",	  "(b:bat[:void,:any_1],first:oid,last:oid) (_4:int,_5:bat[:void,:any_1]) ",			  "BPThasMoreElementsRng;"		  ]
[ "hasMoreElements",		  "command",	  "partitions",	  "(b:bat[:void,:any_1]) (_2:int,_3:bat[:void,:any_1]) ",					  "BPThasMoreElements;"			  ]
[ "hasMoreElements",		  "command",	  "partitions",	  "():int ",											  "BPThasMoreElementsBase;"		  ]
[ "hasMoreElements",		  "pattern",	  "statistics",	  "() (_1:lng,_2:str) ",									  "STAThasMoreElements;"		  ]
[ "hasMoreElements",		  "pattern",	  "const",	  "() (_1:lng,_2:str) ",									  "CSThasMoreElements;"			  ]
[ "hasMoreElements",		  "pattern",	  "bat",	  "(b:bat[:void,:any_2]) (_2:lng,h:oid,t:any_2) ",						  "CHPbunHasMoreElements;"		  ]
[ "hasMoreElements",		  "pattern",	  "bat",	  "(b:bat[:any_1,:any_2]) (_2:lng,h:any_1,t:any_2) ",						  "CHPbunHasMoreElements;"		  ]
[ "hasMoreElements",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2],size:lng) (_3:lng,_4:bat[:any_1,:any_2]) ",				  "CHPhasMoreChunks;"			  ]
[ "hasReadMode",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",								  "BKChasReadMode;"			  ]
[ "hasWriteMode",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",								  "BKChasWriteMode;"			  ]
[ "hash",			  "command",	  "mkey",	  "(v:str):int ",										  "MKEYhash_str;"			  ]
[ "hash",			  "command",	  "mkey",	  "(v:lng):int ",										  "MKEYhash_lng;"			  ]
[ "hash",			  "command",	  "mkey",	  "(v:dbl):int ",										  "MKEYhash_dbl;"			  ]
[ "hash",			  "command",	  "mkey",	  "(v:flt):int ",										  "MKEYhash_flt;"			  ]
[ "hash",			  "command",	  "mkey",	  "(v:int):int ",										  "MKEYhash_int;"			  ]
[ "hash",			  "command",	  "mkey",	  "(v:sht):int ",										  "MKEYhash_sht;"			  ]
[ "hash",			  "command",	  "mkey",	  "(v:chr):int ",										  "MKEYhash_chr;"			  ]
[ "hash",			  "pattern",	  "mkey",	  "(v:any):int ",										  "MKEYhash;"				  ]
[ "hashjoin",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",			  "ALGhashjoin;"			  ]
[ "hashsplit",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],buckects:int):bat[:int,:BAT] ",					  "ALGhashsplit;"			  ]
[ "header",			  "pattern",	  "tablet",	  "(b:any...):int ",										  "TABheader;"				  ]
[ "help",			  "command",	  "manual",	  "(text:str):void ",										  "MANUALhelp;"				  ]
[ "heuristics",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",									  "QOTHRoptimizer;"			  ]
[ "heuristics",			  "pattern",	  "optimizer",	  "():str ",											  "QOTHRoptimizer;"			  ]
[ "histogram",			  "command",	  "aggr",	  "(b:bat[:any_1,:any_2]):bat[:any_2,:int] ",							  "ALGhistogram;"			  ]
[ "host",			  "command",	  "inet",	  "(_1:inet):str ",										  "INEThost;"				  ]
[ "hostmask",			  "command",	  "inet",	  "(_1:inet):inet ",										  "INEThostmask;"			  ]
[ "hours",			  "command",	  "mtime",	  "(secs:lng):int ",										  "MTIMEsql_hours;"			  ]
[ "hours",			  "command",	  "mtime",	  "(t:timestamp):int ",										  "MTIMEtimestamp_hours;"		  ]
[ "hours",			  "command",	  "mtime",	  "(d:bat[:any_1,:date]):bat[:any_1,:int] ",							  "MTIMEdaytime_extract_hours_bulk;"	  ]
[ "hours",			  "command",	  "mtime",	  "(h:daytime):int ",										  "MTIMEdaytime_extract_hours;"		  ]
[ "hsv",			  "command",	  "batcolor",	  "(h:bat[:void,:flt],s:bat[:void,:flt],v:bat[:void,:flt]):bat[:void,:color] ",			  "CLRbatHsv;"				  ]
[ "hsv",			  "command",	  "color",	  "(h:flt,s:flt,v:flt):color ",									  "CLRhsv;"				  ]
[ "hue",			  "command",	  "batcolor",	  "(c:bat[:void,:color]):bat[:void,:flt] ",							  "CLRbatHue;"				  ]
[ "hue",			  "command",	  "batcolor",	  "(c:bat[:void,:color]):bat[:void,:int] ",							  "CLRbatHueInt;"			  ]
[ "hue",			  "command",	  "color",	  "(c:color):flt ",										  "CLRhue;"				  ]
[ "hue",			  "command",	  "color",	  "(c:color):int ",										  "CLRhueInt;"				  ]
[ "iconv",			  "command",	  "str",	  "(org:str,fromCs:str,toCs:str):str ",								  "STRIconv;"				  ]
[ "ifthen",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],v:dbl):bat[:any_1,:dbl] ",						  "CMDifThenCst_dbl;"			  ]
[ "ifthen",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],v:flt):bat[:any_1,:flt] ",						  "CMDifThenCst_flt;"			  ]
[ "ifthen",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],v:lng):bat[:any_1,:lng] ",						  "CMDifThenCst_lng;"			  ]
[ "ifthen",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],v:sht):bat[:any_1,:sht] ",						  "CMDifThenCst_sht;"			  ]
[ "ifthen",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],v:int):bat[:any_1,:int] ",						  "CMDifThenCst_int;"			  ]
[ "ifthen",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],v:oid):bat[:any_1,:oid] ",						  "CMDifThenCst_oid;"			  ]
[ "ifthen",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],v:str):bat[:any_1,:str] ",						  "CMDifThenCst_str;"			  ]
[ "ifthen",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],v:chr):bat[:any_1,:chr] ",						  "CMDifThenCst_chr;"			  ]
[ "ifthen",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],v:bit):bat[:any_1,:bit] ",						  "CMDifThenCst_bit;"			  ]
[ "ifthen",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],t:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",				  "CMDifThen;"				  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],v:dbl,w:dbl):bat[:any_1,:dbl] ",						  "CMDifThenElseCst_dbl;"		  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],v:flt,w:flt):bat[:any_1,:flt] ",						  "CMDifThenElseCst_flt;"		  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],v:lng,w:lng):bat[:any_1,:lng] ",						  "CMDifThenElseCst_lng;"		  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],v:sht,w:sht):bat[:any_1,:sht] ",						  "CMDifThenElseCst_sht;"		  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],v:int,w:int):bat[:any_1,:int] ",						  "CMDifThenElseCst_int;"		  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],v:oid,w:oid):bat[:any_1,:oid] ",						  "CMDifThenElseCst_oid;"		  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],v:str,w:str):bat[:any_1,:str] ",						  "CMDifThenElseCst_str;"		  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],v:chr,w:chr):bat[:any_1,:chr] ",						  "CMDifThenElseCst_chr;"		  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],v:bit,w:bit):bat[:any_1,:bit] ",						  "CMDifThenElseCst_bit;"		  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:any_3,:bit],t:bat[:any_1,:any_2],e:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",		  "CMDifThenElse;"			  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],t:bat[:any_1,:any_2],e:any_2):bat[:any_1,:any_2] ",			  "CMDifThenElseCst2;"			  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],e:any_2,t:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",			  "CMDifThenElseCst1;"			  ]
[ "ifthenelse",			  "pattern",	  "calc",	  "(b:bit,t:any_1,f:any_1):any_1 ",								  "CALCswitchbit;"			  ]
[ "import",			  "command",	  "io",		  "(b:bat[:any_1,:any_2],filepath:str):bit ",							  "IOimport;"				  ]
[ "index",			  "command",	  "manual",	  "():void ",											  "MANUALcreateIndex;"			  ]
[ "indexjoin",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",			  "ALGindexjoin;"			  ]
[ "info",			  "command",	  "mat",	  "(g:str,e:str):bat[:any_1,:any_2] ",								  "MATinfo;"				  ]
[ "info",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:str,:str] ",							  "BKCinfo;"				  ]
[ "init",			  "command",	  "batcalc",	  "(b:bat[:any_1,:any],v:bit):bat[:any_1,:bit] ",						  "CMDbatbitinit;"			  ]
[ "init",			  "command",	  "batcalc",	  "(bsize:lng,v:bit):bat[:void,:bit] ",								  "CMDbitinit_lng;"			  ]
[ "init",			  "command",	  "batcalc",	  "(bsize:int,v:bit):bat[:void,:bit] ",								  "CMDbitinit_int;"			  ]
[ "init",			  "command",	  "batcalc",	  "(bsize:sht,v:bit):bat[:void,:bit] ",								  "CMDbitinit_sht;"			  ]
[ "init",			  "command",	  "batcalc",	  "(b:bat[:any_1,:any],v:flt):bat[:any_1,:flt] ",						  "CMDbatfltinit;"			  ]
[ "init",			  "command",	  "batcalc",	  "(bsize:lng,v:flt):bat[:void,:flt] ",								  "CMDfltinit_lng;"			  ]
[ "init",			  "command",	  "batcalc",	  "(bsize:int,v:flt):bat[:void,:flt] ",								  "CMDfltinit_int;"			  ]
[ "init",			  "command",	  "batcalc",	  "(bsize:sht,v:flt):bat[:void,:flt] ",								  "CMDfltinit_sht;"			  ]
[ "init",			  "command",	  "batcalc",	  "(b:bat[:any_1,:any],v:dbl):bat[:any_1,:dbl] ",						  "CMDbatdblinit;"			  ]
[ "init",			  "command",	  "batcalc",	  "(bsize:lng,v:dbl):bat[:void,:dbl] ",								  "CMDdblinit_lng;"			  ]
[ "init",			  "command",	  "batcalc",	  "(bsize:int,v:dbl):bat[:void,:dbl] ",								  "CMDdblinit_int;"			  ]
[ "init",			  "command",	  "batcalc",	  "(bsize:sht,v:dbl):bat[:void,:dbl] ",								  "CMDdblinit_sht;"			  ]
[ "init",			  "command",	  "batcalc",	  "(b:bat[:any_1,:any],v:lng):bat[:any_1,:lng] ",						  "CMDbatlnginit;"			  ]
[ "init",			  "command",	  "batcalc",	  "(bsize:lng,v:lng):bat[:void,:lng] ",								  "CMDlnginit_lng;"			  ]
[ "init",			  "command",	  "batcalc",	  "(bsize:int,v:lng):bat[:void,:lng] ",								  "CMDlnginit_int;"			  ]
[ "init",			  "command",	  "batcalc",	  "(bsize:sht,v:lng):bat[:void,:lng] ",								  "CMDlnginit_sht;"			  ]
[ "init",			  "command",	  "batcalc",	  "(b:bat[:any_1,:any],v:sht):bat[:any_1,:sht] ",						  "CMDbatshtinit;"			  ]
[ "init",			  "command",	  "batcalc",	  "(bsize:lng,v:sht):bat[:void,:sht] ",								  "CMDshtinit_lng;"			  ]
[ "init",			  "command",	  "batcalc",	  "(bsize:int,v:sht):bat[:void,:sht] ",								  "CMDshtinit_int;"			  ]
[ "init",			  "command",	  "batcalc",	  "(bsize:sht,v:sht):bat[:void,:sht] ",								  "CMDshtinit_sht;"			  ]
[ "init",			  "command",	  "batcalc",	  "(b:bat[:any_1,:any],v:int):bat[:any_1,:int] ",						  "CMDbatintinit;"			  ]
[ "init",			  "command",	  "batcalc",	  "(bsize:lng,v:int):bat[:void,:int] ",								  "CMDintinit_lng;"			  ]
[ "init",			  "command",	  "batcalc",	  "(bsize:int,v:int):bat[:void,:int] ",								  "CMDintinit_int;"			  ]
[ "init",			  "command",	  "batcalc",	  "(bsize:sht,v:int):bat[:void,:int] ",								  "CMDintinit_sht;"			  ]
[ "init",			  "command",	  "batcalc",	  "(b:bat[:any_1,:any],v:oid):bat[:any_1,:oid] ",						  "CMDbatoidinit;"			  ]
[ "init",			  "command",	  "batcalc",	  "(bsize:lng,v:oid):bat[:void,:oid] ",								  "CMDoidinit_lng;"			  ]
[ "init",			  "command",	  "batcalc",	  "(bsize:int,v:oid):bat[:void,:oid] ",								  "CMDoidinit_int;"			  ]
[ "init",			  "command",	  "batcalc",	  "(bsize:sht,v:oid):bat[:void,:oid] ",								  "CMDoidinit_sht;"			  ]
[ "init",			  "command",	  "pqueue",	  "(a:bat[:void,:any_1],maxsize:int):bat[:oid,:any_1] ",					  "PQinit;"				  ]
[ "inliners",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",									  "QOTIXoptimizer;"			  ]
[ "inliners",			  "pattern",	  "optimizer",	  "():str ",											  "QOTIXoptimizer;"			  ]
[ "inplace",			  "command",	  "bat",	  "(o:bat[:void,:any_1],d:bat[:void,:any_1],force:bit):void ",					  "BKCbat_inplace_force;"		  ]
[ "inplace",			  "command",	  "bat",	  "(o:bat[:void,:any_1],d:bat[:oid,:any_1],force:bit):void ",					  "BKCbat_inplace_force;"		  ]
[ "inplace",			  "command",	  "bat",	  "(o:bat[:void,:any_1],id:oid,t:any_1,force:bit):void ",					  "BKCbun_inplace_force;"		  ]
[ "inplace",			  "command",	  "bat",	  "(o:bat[:void,:any_1],d:bat[:void,:any_1]):void ",						  "BKCbat_inplace;"			  ]
[ "inplace",			  "command",	  "bat",	  "(o:bat[:void,:any_1],d:bat[:oid,:any_1]):void ",						  "BKCbat_inplace;"			  ]
[ "inplace",			  "command",	  "bat",	  "(o:bat[:void,:any_1],id:oid,t:any_1):void ",							  "BKCbun_inplace;"			  ]
[ "input",			  "command",	  "tablet",	  "(names:bat[:void,:str],seps:bat[:void,:str],types:bat[:void,:str],s:streams,nr:int):bat[:str,:BAT] ", "CMDtablet_input;"			  ]
[ "insert",			  "command",	  "partitions",	  "(b:bat[:void,:any_1],p:bat[:void,:any_1]):bat[:void,:any_1] ",				  "BPTinsertBAT;"			  ]
[ "insert",			  "command",	  "partitions",	  "(b:bat[:void,:any_1],t:any_1):bat[:void,:any_1] ",						  "BPTinsert_void_bun;"			  ]
[ "insert",			  "command",	  "partitions",	  "(b:bat[:void,:any_1],h:void,t:any_1):bat[:void,:any_1] ",					  "BPTinsert;"				  ]
[ "insert",			  "command",	  "bat",	  "(b:bat[:void,:any_2],h:oid,t:any_2,force:bit):void ",					  "BKCinsert_bun_force;"		  ]
[ "insert",			  "command",	  "bat",	  "(b:bat[:oid,:any_2],h:oid,t:any_2,force:bit):void ",						  "BKCinsert_bun_force;"		  ]
[ "insert",			  "command",	  "bat",	  "(b:bat[:void,:any_2],h:oid,t:any_2):void ",							  "BKCinsert_bun;"			  ]
[ "insert",			  "command",	  "bat",	  "(b:bat[:oid,:any_2],h:oid,t:any_2):void ",							  "BKCinsert_bun;"			  ]
[ "insert",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:any_1,t:any_2,force:bit):void ",					  "BKCinsert_bun_force;"		  ]
[ "insert",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:any_1,t:any_2):void ",						  "BKCinsert_bun;"			  ]
[ "insert",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2],force:bit):void ",				  "BKCinsert_bat_force;"		  ]
[ "insert",			  "command",	  "bat",	  "(b:bat[:oid,:any_2],src:bat[:void,:any_2],force:bit):void ",					  "BKCinsert_bat_force;"		  ]
[ "insert",			  "command",	  "bat",	  "(b:bat[:void,:any_2],src:bat[:oid,:any_2],force:bit):void ",					  "BKCinsert_bat_force;"		  ]
[ "insert",			  "command",	  "bat",	  "(b:bat[:any_1,:oid],src:bat[:any_1,:void],force:bit):void ",					  "BKCinsert_bat_force;"		  ]
[ "insert",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2]):void ",					  "BKCinsert_bat;"			  ]
[ "insert",			  "command",	  "bat",	  "(b:bat[:oid,:any_2],src:bat[:void,:any_2]):void ",						  "BKCinsert_bat;"			  ]
[ "insert",			  "command",	  "bat",	  "(b:bat[:void,:any_2],src:bat[:oid,:any_2]):void ",						  "BKCinsert_bat;"			  ]
[ "insert",			  "command",	  "bat",	  "(b:bat[:any_1,:oid],src:bat[:any_1,:void]):void ",						  "BKCinsert_bat;"			  ]
[ "insert",			  "command",	  "str",	  "(s:str,start:int,l:int,s2:str):str ",							  "STRinsert;"				  ]
[ "inspect",			  "pattern",	  "mdb",	  "(mod:str,fcn:str):void ",									  "MDBinspect;"				  ]
[ "int",			  "command",	  "batcalc",	  "(b:bat[:any_1,:oid]):bat[:any_1,:int] ",							  "CMDconvertoid_int;"			  ]
[ "int",			  "command",	  "batcalc",	  "(b:bat[:any_1,:str]):bat[:any_1,:int] ",							  "CMDconvertstr_int;"			  ]
[ "int",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit]):bat[:any_1,:int] ",							  "CMDconvertbit_int;"			  ]
[ "int",			  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:int] ",							  "CMDconvertdbl_int;"			  ]
[ "int",			  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:int] ",							  "CMDconvertflt_int;"			  ]
[ "int",			  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:int] ",							  "CMDconvertlng_int;"			  ]
[ "int",			  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:int] ",							  "CMDconvertint_int;"			  ]
[ "int",			  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:int] ",							  "CMDconvertsht_int;"			  ]
[ "int",			  "command",	  "calc",	  "(v:void):int ",										  "CALCnil2int;"			  ]
[ "int",			  "command",	  "calc",	  "(v:str):int ",										  "CALCstr2int;"			  ]
[ "int",			  "command",	  "calc",	  "(x:dbl):int ",										  "CALCdbl2int;"			  ]
[ "int",			  "command",	  "calc",	  "(x:flt):int ",										  "CALCflt2int;"			  ]
[ "int",			  "command",	  "calc",	  "(x:lng):int ",										  "CALClng2int;"			  ]
[ "int",			  "command",	  "calc",	  "(x:int):int ",										  "CALCint2int;"			  ]
[ "int",			  "command",	  "calc",	  "(x:sht):int ",										  "CALCsht2int;"			  ]
[ "int",			  "command",	  "calc",	  "(x:chr):int ",														  "CALCchr2int;"				  ]
[ "int",			  "command",	  "calc",	  "(x:bit):int ",										  "CALCbit2int;"			  ]
[ "int",			  "command",	  "calc",	  "(x:oid):int ",										  "CALCoid2int;"			  ]
[ "intersect",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",			  "ALGsintersect;"			  ]
[ "inv",			  "command",	  "calc",	  "(x:lng):lng ",										  "CALCunarychecklngINV;"		  ]
[ "inv",			  "command",	  "calc",	  "(x:int):int ",										  "CALCunarycheckintINV;"		  ]
[ "inv",			  "command",	  "calc",	  "(x:sht):sht ",										  "CALCunarycheckshtINV;"		  ]
[ "inv",			  "command",	  "calc",	  "(x:chr):chr ",										  "CALCunarycheckchrINV;"		  ]
[ "inv",			  "command",	  "calc",	  "(x:flt):flt ",										  "CALCunarycheckfltINV;"		  ]
[ "inv",			  "command",	  "calc",	  "(x:dbl):dbl ",										  "CALCunarycheckdblINV;"		  ]
[ "ioStatistics",		  "command",	  "status",	  "():bat[:str,:int] ",										  "SYSioStatistics;"			  ]
[ "isCached",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",								  "BKCisCached;"			  ]
[ "isPersistent",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",								  "BKCisPersistent;"			  ]
[ "isSorted",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",								  "BKCisSorted;"			  ]
[ "isSortedReverse",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",								  "BKCisSortedReverse;"			  ]
[ "isSynced",			  "command",	  "bat",	  "(b1:bat[:any_1,:any_2],b2:bat[:any_3,:any_4]):bit ",						  "BKCisSynced;"			  ]
[ "isTransient",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",								  "BKCisTransient;"			  ]
[ "isaKey",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",								  "BKCgetKey;"				  ]
[ "isaSet",			  "command",	  "bat",	  "(b:bat[:any_1,:any_1]):bit ",								  "BKCisaSet;"				  ]
[ "isaURL",			  "command",	  "url",	  "(u:url):bit ",										  "URLisaURL;"				  ]
[ "isinf",			  "command",	  "mmath",	  "(d:dbl):int ",										  "math_unary_ISINF;"			  ]
[ "isnan",			  "command",	  "mmath",	  "(d:dbl):bit ",										  "math_unary_ISNAN;"			  ]
[ "isnil",			  "command",	  "calc",	  "(v:void):bit ",										  "CALCisnil_void;"			  ]
[ "isnil",			  "command",	  "calc",	  "(v:str):bit ",										  "CALCisnil_str;"			  ]
[ "isnil",			  "command",	  "calc",	  "(v:dbl):bit ",										  "CALCisnil_dbl;"			  ]
[ "isnil",			  "command",	  "calc",	  "(v:lng):bit ",										  "CALCisnil_lng;"			  ]
[ "isnil",			  "command",	  "calc",	  "(v:flt):bit ",										  "CALCisnil_flt;"			  ]
[ "isnil",			  "command",	  "calc",	  "(v:oid):bit ",										  "CALCisnil_oid;"			  ]
[ "isnil",			  "command",	  "calc",	  "(v:int):bit ",										  "CALCisnil_int;"			  ]
[ "isnil",			  "command",	  "calc",	  "(v:sht):bit ",										  "CALCisnil_sht;"			  ]
[ "isnil",			  "command",	  "calc",	  "(v:bit):bit ",										  "CALCisnil_bit;"			  ]
[ "isnil",			  "command",	  "calc",	  "(v:chr):bit ",										  "CALCisnil_chr;"			  ]
[ "isnil",			  "command",	  "inet",	  "(v:inet):bit ",										  "INET_isnil;"				  ]
[ "isnil",			  "command",	  "date",	  "(v:date):bit ",										  "MTIMEdate_isnil;"			  ]
[ "isnil",			  "command",	  "date",	  "(v:date):bit ",										  "MTIMEdate_isnil;"			  ]
[ "isnil",			  "command",	  "daytime",	  "(v:daytime):bit ",										  "MTIMEdaytime_isnil;"			  ]
[ "isnil",			  "command",	  "daytime",	  "(v:daytime):bit ",										  "MTIMEdaytime_isnil;"			  ]
[ "isnil",			  "command",	  "timestamp",	  "(v:timestamp):bit ",										  "MTIMEtimestamp_isnil;"		  ]
[ "isnil",			  "command",	  "timestamp",	  "(v:timestamp):bit ",										  "MTIMEtimestamp_isnil;"		  ]
[ "isnotnil",			  "command",	  "calc",	  "(v:void):bit ",										  "CALCisnotnil_void;"			  ]
[ "isnotnil",			  "command",	  "calc",	  "(v:str):bit ",										  "CALCisnotnil_str;"			  ]
[ "isnotnil",			  "command",	  "calc",	  "(v:dbl):bit ",										  "CALCisnotnil_dbl;"			  ]
[ "isnotnil",			  "command",	  "calc",	  "(v:lng):bit ",										  "CALCisnotnil_lng;"			  ]
[ "isnotnil",			  "command",	  "calc",	  "(v:flt):bit ",										  "CALCisnotnil_flt;"			  ]
[ "isnotnil",			  "command",	  "calc",	  "(v:oid):bit ",										  "CALCisnotnil_oid;"			  ]
[ "isnotnil",			  "command",	  "calc",	  "(v:int):bit ",										  "CALCisnotnil_int;"			  ]
[ "isnotnil",			  "command",	  "calc",	  "(v:sht):bit ",										  "CALCisnotnil_sht;"			  ]
[ "isnotnil",			  "command",	  "calc",	  "(v:bit):bit ",										  "CALCisnotnil_bit;"			  ]
[ "isnotnil",			  "command",	  "calc",	  "(v:chr):bit ",										  "CALCisnotnil_chr;"			  ]
[ "iterator",			  "command",	  "mat",	  "(grp:str):bat[:any_1,:any_2] ",								  "MATdummy;"				  ]
[ "iterator",			  "pattern",	  "box",	  "(nme:str):lng ",										  "BOXiterator;"			  ]
[ "iterator",			  "pattern",	  "bbp",	  "(nme:str):lng ",										  "CMDbbpiterator;"			  ]
[ "join",			  "command",	  "algebra",	  "(left:bat[:any_1,:oid],right:bat[:void,:any_3],estimate:lng):bat[:any_1,:any_3] ",		  "ALGjoinestimate;"			  ]
[ "join",			  "command",	  "algebra",	  "(left:bat[:any_1,:void],right:bat[:oid,:any_3],estimate:lng):bat[:any_1,:any_3] ",		  "ALGjoinestimate;"			  ]
[ "join",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3],estimate:lng):bat[:any_1,:any_3] ",	  "ALGjoinestimate;"			  ]
[ "join",			  "command",	  "algebra",	  "(left:bat[:any_1,:oid],right:bat[:void,:any_3]):bat[:any_1,:any_3] ",			  "ALGjoin;"				  ]
[ "join",			  "command",	  "algebra",	  "(left:bat[:any_1,:void],right:bat[:oid,:any_3]):bat[:any_1,:any_3] ",			  "ALGjoin;"				  ]
[ "join",			  "command",	  "algebra",	  "(left:bat[:void,:any_1],right:bat[:any_1,:void]):bat[:void,:oid] ",				  "ALGjoin;"				  ]
[ "join",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",			  "ALGjoin;"				  ]
[ "joinPath",			  "pattern",	  "algebra",	  "(b:bat[:any_1,:any_2],aliasRemoval:bat[:any_2,:any_3]...):bat[:any_1,:any_3] ",		  "QOTjoinPath;"			  ]
[ "joinselect",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",									  "QOTJSoptimizer;"			  ]
[ "joinselect",			  "pattern",	  "optimizer",	  "():str ",											  "QOTJSoptimizer;"			  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:oid,:date],l:date,h:date,li:bit,hi:bit,left:bat[:oid,:void],inPlace:bit,isForeignKey:bit):bat[:oid,:void] ", "CRKjoinSelectBounds_date;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:oid,:date],l:date,h:date,li:bit,hi:bit,left:bat[:oid,:void]):bat[:oid,:void] ",			  "CRKjoinSelectDefault_date;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:oid,:date],l:date,h:date,li:bit,hi:bit,left:bat[:void,:void],inPlace:bit,isForeignKey:bit):bat[:oid,:void] ", "CRKjoinSelectBounds_date;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:oid,:date],l:date,h:date,li:bit,hi:bit,left:bat[:void,:void]):bat[:oid,:void] ",			  "CRKjoinSelectDefault_date;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:void,:date],l:date,h:date,li:bit,hi:bit,left:bat[:oid,:void],inPlace:bit,isForeignKey:bit):bat[:oid,:void] ", "CRKjoinSelectBounds_date;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:void,:date],l:date,h:date,li:bit,hi:bit,left:bat[:oid,:void]):bat[:oid,:void] ",			  "CRKjoinSelectDefault_date;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:void,:date],l:date,h:date,li:bit,hi:bit,left:bat[:void,:void],inPlace:bit,isForeignKey:bit):bat[:oid,:void] ", "CRKjoinSelectBounds_date;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:void,:date],l:date,h:date,li:bit,hi:bit,left:bat[:void,:void]):bat[:oid,:void] ",		  "CRKjoinSelectDefault_date;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:oid,:dbl],l:dbl,h:dbl,li:bit,hi:bit,left:bat[:oid,:void],inPlace:bit,isForeignKey:bit):bat[:oid,:void] ", "CRKjoinSelectBounds_dbl;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:oid,:dbl],l:dbl,h:dbl,li:bit,hi:bit,left:bat[:oid,:void]):bat[:oid,:void] ",			  "CRKjoinSelectDefault_dbl;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:oid,:dbl],l:dbl,h:dbl,li:bit,hi:bit,left:bat[:void,:void],inPlace:bit,isForeignKey:bit):bat[:oid,:void] ", "CRKjoinSelectBounds_dbl;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:oid,:dbl],l:dbl,h:dbl,li:bit,hi:bit,left:bat[:void,:void]):bat[:oid,:void] ",			  "CRKjoinSelectDefault_dbl;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:void,:dbl],l:dbl,h:dbl,li:bit,hi:bit,left:bat[:oid,:void],inPlace:bit,isForeignKey:bit):bat[:oid,:void] ", "CRKjoinSelectBounds_dbl;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:void,:dbl],l:dbl,h:dbl,li:bit,hi:bit,left:bat[:oid,:void]):bat[:oid,:void] ",			  "CRKjoinSelectDefault_dbl;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:void,:dbl],l:dbl,h:dbl,li:bit,hi:bit,left:bat[:void,:void],inPlace:bit,isForeignKey:bit):bat[:oid,:void] ", "CRKjoinSelectBounds_dbl;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:void,:dbl],l:dbl,h:dbl,li:bit,hi:bit,left:bat[:void,:void]):bat[:oid,:void] ",			  "CRKjoinSelectDefault_dbl;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:oid,:flt],l:flt,h:flt,li:bit,hi:bit,left:bat[:oid,:void],inPlace:bit,isForeignKey:bit):bat[:oid,:void] ", "CRKjoinSelectBounds_flt;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:oid,:flt],l:flt,h:flt,li:bit,hi:bit,left:bat[:oid,:void]):bat[:oid,:void] ",			  "CRKjoinSelectDefault_flt;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:oid,:flt],l:flt,h:flt,li:bit,hi:bit,left:bat[:void,:void],inPlace:bit,isForeignKey:bit):bat[:oid,:void] ", "CRKjoinSelectBounds_flt;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:oid,:flt],l:flt,h:flt,li:bit,hi:bit,left:bat[:void,:void]):bat[:oid,:void] ",			  "CRKjoinSelectDefault_flt;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:void,:flt],l:flt,h:flt,li:bit,hi:bit,left:bat[:oid,:void],inPlace:bit,isForeignKey:bit):bat[:oid,:void] ", "CRKjoinSelectBounds_flt;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:void,:flt],l:flt,h:flt,li:bit,hi:bit,left:bat[:oid,:void]):bat[:oid,:void] ",			  "CRKjoinSelectDefault_flt;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:void,:flt],l:flt,h:flt,li:bit,hi:bit,left:bat[:void,:void],inPlace:bit,isForeignKey:bit):bat[:oid,:void] ", "CRKjoinSelectBounds_flt;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:void,:flt],l:flt,h:flt,li:bit,hi:bit,left:bat[:void,:void]):bat[:oid,:void] ",			  "CRKjoinSelectDefault_flt;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:oid,:lng],l:lng,h:lng,li:bit,hi:bit,left:bat[:oid,:void],inPlace:bit,isForeignKey:bit):bat[:oid,:void] ", "CRKjoinSelectBounds_lng;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:oid,:lng],l:lng,h:lng,li:bit,hi:bit,left:bat[:oid,:void]):bat[:oid,:void] ",			  "CRKjoinSelectDefault_lng;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:oid,:lng],l:lng,h:lng,li:bit,hi:bit,left:bat[:void,:void],inPlace:bit,isForeignKey:bit):bat[:oid,:void] ", "CRKjoinSelectBounds_lng;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:oid,:lng],l:lng,h:lng,li:bit,hi:bit,left:bat[:void,:void]):bat[:oid,:void] ",			  "CRKjoinSelectDefault_lng;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:void,:lng],l:lng,h:lng,li:bit,hi:bit,left:bat[:oid,:void],inPlace:bit,isForeignKey:bit):bat[:oid,:void] ", "CRKjoinSelectBounds_lng;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:void,:lng],l:lng,h:lng,li:bit,hi:bit,left:bat[:oid,:void]):bat[:oid,:void] ",			  "CRKjoinSelectDefault_lng;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:void,:lng],l:lng,h:lng,li:bit,hi:bit,left:bat[:void,:void],inPlace:bit,isForeignKey:bit):bat[:oid,:void] ", "CRKjoinSelectBounds_lng;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:void,:lng],l:lng,h:lng,li:bit,hi:bit,left:bat[:void,:void]):bat[:oid,:void] ",			  "CRKjoinSelectDefault_lng;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:oid,:int],l:int,h:int,li:bit,hi:bit,left:bat[:oid,:void],inPlace:bit,isForeignKey:bit):bat[:oid,:void] ", "CRKjoinSelectBounds_int;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:oid,:int],l:int,h:int,li:bit,hi:bit,left:bat[:oid,:void]):bat[:oid,:void] ",			  "CRKjoinSelectDefault_int;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:oid,:int],l:int,h:int,li:bit,hi:bit,left:bat[:void,:void],inPlace:bit,isForeignKey:bit):bat[:oid,:void] ", "CRKjoinSelectBounds_int;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:oid,:int],l:int,h:int,li:bit,hi:bit,left:bat[:void,:void]):bat[:oid,:void] ",			  "CRKjoinSelectDefault_int;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:void,:int],l:int,h:int,li:bit,hi:bit,left:bat[:oid,:void],inPlace:bit,isForeignKey:bit):bat[:oid,:void] ", "CRKjoinSelectBounds_int;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:void,:int],l:int,h:int,li:bit,hi:bit,left:bat[:oid,:void]):bat[:oid,:void] ",			  "CRKjoinSelectDefault_int;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:void,:int],l:int,h:int,li:bit,hi:bit,left:bat[:void,:void],inPlace:bit,isForeignKey:bit):bat[:oid,:void] ", "CRKjoinSelectBounds_int;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:void,:int],l:int,h:int,li:bit,hi:bit,left:bat[:void,:void]):bat[:oid,:void] ",			  "CRKjoinSelectDefault_int;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:oid,:sht],l:sht,h:sht,li:bit,hi:bit,left:bat[:oid,:void],inPlace:bit,isForeignKey:bit):bat[:oid,:void] ", "CRKjoinSelectBounds_sht;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:oid,:sht],l:sht,h:sht,li:bit,hi:bit,left:bat[:oid,:void]):bat[:oid,:void] ",			  "CRKjoinSelectDefault_sht;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:oid,:sht],l:sht,h:sht,li:bit,hi:bit,left:bat[:void,:void],inPlace:bit,isForeignKey:bit):bat[:oid,:void] ", "CRKjoinSelectBounds_sht;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:oid,:sht],l:sht,h:sht,li:bit,hi:bit,left:bat[:void,:void]):bat[:oid,:void] ",			  "CRKjoinSelectDefault_sht;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:void,:sht],l:sht,h:sht,li:bit,hi:bit,left:bat[:oid,:void],inPlace:bit,isForeignKey:bit):bat[:oid,:void] ", "CRKjoinSelectBounds_sht;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:void,:sht],l:sht,h:sht,li:bit,hi:bit,left:bat[:oid,:void]):bat[:oid,:void] ",			  "CRKjoinSelectDefault_sht;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:void,:sht],l:sht,h:sht,li:bit,hi:bit,left:bat[:void,:void],inPlace:bit,isForeignKey:bit):bat[:oid,:void] ", "CRKjoinSelectBounds_sht;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:void,:sht],l:sht,h:sht,li:bit,hi:bit,left:bat[:void,:void]):bat[:oid,:void] ",			  "CRKjoinSelectDefault_sht;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:oid,:chr],l:chr,h:chr,li:bit,hi:bit,left:bat[:oid,:void],inPlace:bit,isForeignKey:bit):bat[:oid,:void] ", "CRKjoinSelectBounds_chr;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:oid,:chr],l:chr,h:chr,li:bit,hi:bit,left:bat[:oid,:void]):bat[:oid,:void] ",			  "CRKjoinSelectDefault_chr;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:oid,:chr],l:chr,h:chr,li:bit,hi:bit,left:bat[:void,:void],inPlace:bit,isForeignKey:bit):bat[:oid,:void] ", "CRKjoinSelectBounds_chr;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:oid,:chr],l:chr,h:chr,li:bit,hi:bit,left:bat[:void,:void]):bat[:oid,:void] ",			  "CRKjoinSelectDefault_chr;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:void,:chr],l:chr,h:chr,li:bit,hi:bit,left:bat[:oid,:void],inPlace:bit,isForeignKey:bit):bat[:oid,:void] ", "CRKjoinSelectBounds_chr;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:void,:chr],l:chr,h:chr,li:bit,hi:bit,left:bat[:oid,:void]):bat[:oid,:void] ",			  "CRKjoinSelectDefault_chr;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:void,:chr],l:chr,h:chr,li:bit,hi:bit,left:bat[:void,:void],inPlace:bit,isForeignKey:bit):bat[:oid,:void] ", "CRKjoinSelectBounds_chr;"		  ]
[ "joinuselect",		  "command",	  "crackers",	  "(right:bat[:void,:chr],l:chr,h:chr,li:bit,hi:bit,left:bat[:void,:void]):bat[:oid,:void] ",			  "CRKjoinSelectDefault_chr;"		  ]
[ "kdifference",		  "command",	  "algebra",	  "(left:bat[:oid,:any_2],right:bat[:void,:any]):bat[:oid,:any_2] ",				  "ALGkdiff;"				  ]
[ "kdifference",		  "command",	  "algebra",	  "(left:bat[:void,:any_2],right:bat[:oid,:any]):bat[:oid,:any_2] ",				  "ALGkdiff;"				  ]
[ "kdifference",		  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any]):bat[:any_1,:any_2] ",			  "ALGkdiff;"				  ]
[ "kintersect",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any]):bat[:any_1,:any_2] ",			  "ALGsemijoin;"			  ]
[ "kunion",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",			  "ALGkunion;"				  ]
[ "kunion",			  "command",	  "algebra",	  "(left:bat[:void,:any_2],right:bat[:oid,:any_2]):bat[:oid,:any_2] ",				  "ALGkunion;"				  ]
[ "kunion",			  "command",	  "algebra",	  "(left:bat[:oid,:any_2],right:bat[:void,:any_2]):bat[:oid,:any_2] ",				  "ALGkunion;"				  ]
[ "kunique",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",							  "ALGkunique;"				  ]
[ "lastPage",			  "command",	  "tablet",	  "():void ",											  "TABlastPage;"			  ]
[ "leftfetchjoin",		  "command",	  "algebra",	  "(left:bat[:any_1,:oid],right:bat[:void,:any_3]):bat[:any_1,:any_3] ",			  "ALGleftfetchjoin;"			  ]
[ "length",			  "command",	  "batstr",	  "(s:bat[:void,:str]):bat[:void,:int] ",							  "STRbatLength;"			  ]
[ "length",			  "command",	  "calc",	  "(x:str):int ",										  "CALClengthstr;"			  ]
[ "length",			  "command",	  "calc",	  "(x:lng):int ",										  "CALClengthlng;"			  ]
[ "length",			  "command",	  "calc",	  "(x:int):int ",										  "CALClengthint;"			  ]
[ "length",			  "command",	  "calc",	  "(x:sht):int ",										  "CALClengthsht;"			  ]
[ "length",			  "command",	  "calc",	  "(x:chr):int ",										  "CALClengthchr;"			  ]
[ "length",			  "command",	  "calc",	  "(x:flt):int ",										  "CALClengthflt;"			  ]
[ "length",			  "command",	  "calc",	  "(x:dbl):int ",										  "CALClengthdbl;"			  ]
[ "length",			  "command",	  "str",	  "(s:str):int ",										  "STRLength;"				  ]
[ "like",			  "command",	  "batstr",	  "(s:bat[:any_1,:str],pat:str):bat[:any_1,:void] ",						  "STRbatlike2;"			  ]
[ "like",			  "command",	  "batstr",	  "(s:bat[:any_1,:str],pat:str,esc:str):bat[:any_1,:void] ",					  "STRbatlike;"				  ]
[ "like",			  "command",	  "algebra",	  "(b:bat[:any_1,:str],substr:str):bat[:any_1,:str] ",						  "ALGlike;"				  ]
[ "like",			  "command",	  "pcre",	  "(s:bat[:any_1,:str],pat:str,esc:str):bat[:any_1,:bit] ",					  "PCRElike_uselect_pcre;"		  ]
[ "like",			  "command",	  "pcre",	  "(s:str,pat:str):bit ",									  "PCRElike2;"				  ]
[ "like",			  "command",	  "pcre",	  "(s:str,pat:str,esc:str):bit ",								  "PCRElike3;"				  ]
[ "like",			  "command",	  "str",	  "(s:str,pat:str,esc:str):bit ",								  "STRlikewrap;"			  ]
[ "like",			  "command",	  "str",	  "(s:str,pat:str):bit ",									  "STRlikewrap2;"			  ]
[ "list",			  "pattern",	  "mdb",	  "(M:str,F:str):void ",									  "MDBlist3;"				  ]
[ "list",			  "pattern",	  "mdb",	  "():void ",											  "MDBlist;"				  ]
[ "listen",			  "command",	  "mserver",	  "(port:int,maxusers:int,cmd:str):int ",							  "SERVERlisten3;"			  ]
[ "listen",			  "command",	  "mserver",	  "(port:int,maxusers:int):int ",								  "SERVERlisten2;"			  ]
[ "listen",			  "command",	  "mserver",	  "(port:int):int ",										  "SERVERlisten_port;"			  ]
[ "listen",			  "command",	  "mserver",	  "():int ",											  "SERVERlisten_default;"		  ]
[ "listen_ssl",			  "command",	  "mserver",	  "(port:int,maxusers:int,keyfile:str,certfile:str,cmd:str):int ",				  "SERVERlistenSSL;"			  ]
[ "lng",			  "command",	  "batcalc",	  "(b:bat[:any_1,:oid]):bat[:any_1,:lng] ",							  "CMDconvertoid_lng;"			  ]
[ "lng",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit]):bat[:any_1,:lng] ",							  "CMDconvertbit_lng;"			  ]
[ "lng",			  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:lng] ",							  "CMDconvertdbl_lng;"			  ]
[ "lng",			  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:lng] ",							  "CMDconvertflt_lng;"			  ]
[ "lng",			  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:lng] ",							  "CMDconvertlng_lng;"			  ]
[ "lng",			  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:lng] ",							  "CMDconvertint_lng;"			  ]
[ "lng",			  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:lng] ",							  "CMDconvertsht_lng;"			  ]
[ "lng",			  "command",	  "calc",	  "(v:void):lng ",										  "CALCnil2lng;"			  ]
[ "lng",			  "command",	  "calc",	  "(v:str):lng ",										  "CALCstr2lng;"			  ]
[ "lng",			  "command",	  "calc",	  "(x:ptr):lng ",														  "CALCptr2lng;"			  ]
[ "lng",			  "command",	  "calc",	  "(x:dbl):lng ",										  "CALCdbl2lng;"			  ]
[ "lng",			  "command",	  "calc",	  "(x:flt):lng ",										  "CALCflt2lng;"			  ]
[ "lng",			  "command",	  "calc",	  "(x:lng):lng ",										  "CALClng2lng;"			  ]
[ "lng",			  "command",	  "calc",	  "(x:int):lng ",										  "CALCint2lng;"			  ]
[ "lng",			  "command",	  "calc",	  "(x:sht):lng ",										  "CALCsht2lng;"			  ]
[ "lng",			  "command",	  "calc",	  "(x:chr):lng ",														  "CALCchr2lng;"				  ]
[ "lng",			  "command",	  "calc",	  "(x:bit):lng ",										  "CALCbit2lng;"			  ]
[ "lng",			  "command",	  "calc",	  "(x:oid):lng ",										  "CALCoid2lng;"			  ]
[ "load",			  "command",	  "tablet",	  "(names:bat[:void,:str],seps:bat[:void,:str],types:bat[:void,:str],datafile:str,nr:int):bat[:str,:BAT] ", "CMDtablet_load;"			  ]
[ "load",			  "command",	  "bat",	  "(name:str):bat[:any_1,:any_2] ",								  "BKCload;"				  ]
[ "local_timezone",		  "command",	  "mtime",	  "():lng ",											  "MTIMElocal_timezone;"		  ]
[ "locate",			  "command",	  "str",	  "(s1:str,s2:str,start:int):void ",								  "STRlocate2;"				  ]
[ "locate",			  "command",	  "str",	  "(s1:str,s2:str):int ",									  "STRlocate;"				  ]
[ "log",			  "command",	  "batmath",	  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",							  "CMDsciencevoid_log;"			  ]
[ "log",			  "command",	  "batmath",	  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",							  "CMDscience_log;"			  ]
[ "log",			  "command",	  "mmath",	  "(x:dbl):dbl ",										  "MATHunary_LOGdbl;"			  ]
[ "log10",			  "command",	  "batmath",	  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",							  "CMDsciencevoid_log10;"		  ]
[ "log10",			  "command",	  "batmath",	  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",							  "CMDscience_log10;"			  ]
[ "log10",			  "command",	  "mmath",	  "(x:dbl):dbl ",										  "MATHunary_LOG10dbl;"			  ]
[ "lookup",			  "command",	  "mserver",	  "(dbalias:str):int ",										  "SERVERlookup;"			  ]
[ "ltrim",			  "command",	  "batstr",	  "(s:bat[:void,:str]):bat[:void,:str] ",							  "STRbatLtrim;"			  ]
[ "ltrim",			  "command",	  "str",	  "(s:str):str ",										  "STRLtrim;"				  ]
[ "luminance",			  "command",	  "batcolor",	  "(c:bat[:void,:color]):bat[:void,:int] ",							  "CLRbatLuminance;"			  ]
[ "luminance",			  "command",	  "color",	  "(c:color):int ",										  "CLRluminance;"			  ]
[ "macroContraction",		  "pattern",	  "optimizer",	  "(mod:str,fcn:str):void ",									  "QOTMCoptimizerSymbol;"		  ]
[ "macroContraction",		  "pattern",	  "optimizer",	  "(mod:str):void ",										  "QOTMCoptimizerModule;"		  ]
[ "macroContraction",		  "pattern",	  "optimizer",	  "():void ",											  "QOTMCoptimizer;"			  ]
[ "macroExpansion",		  "pattern",	  "optimizer",	  "(mod:str,fcn:str):void ",									  "QOTMEoptimizerSymbol;"		  ]
[ "macroExpansion",		  "pattern",	  "optimizer",	  "(mod:str):void ",										  "QOTMEoptimizerModule;"		  ]
[ "macroExpansion",		  "pattern",	  "optimizer",	  "():void ",											  "QOTMEoptimizer;"			  ]
[ "main",			  "function",	  "user",	  "():void;",											  "nil"					  ]
[ "main",			  "function",	  "user",	  "():void;",											  "nil"					  ]
[ "malclient",			  "command",	  "mserver",	  "(in:streams,out:streams):void ",								  "SERVERclient;"			  ]
[ "marchConnection",		  "command",	  "sabaoth",	  "(host:str,port:int,ssl:bit):void ",												  "SABAOTHmarchConnection;"			  ]
[ "marchScenario",		  "command",	  "sabaoth",	  "(lang:str):void ",														  "SABAOTHmarchScenario;"			  ]
[ "markH",			  "command",	  "algebra",	  "(b:bat[:void,:any_2],base:oid):bat[:void,:oid] ",						  "ALGmarkHead;"			  ]
[ "markH",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],base:oid):bat[:void,:any_2] ",						  "ALGmarkHead;"			  ]
[ "markH",			  "command",	  "algebra",	  "(b:bat[:void,:any_2]):bat[:void,:oid] ",							  "ALGmarkHead_default;"		  ]
[ "markH",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:void,:any_2] ",							  "ALGmarkHead_default;"		  ]
[ "markT",			  "command",	  "algebra",	  "(b:bat[:void,:any_1]):bat[:oid,:void] ",							  "ALGtmark_default;"			  ]
[ "markT",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:void] ",							  "ALGtmark_default;"			  ]
[ "markT",			  "command",	  "algebra",	  "(b:bat[:void,:any_2],base:oid):bat[:oid,:void] ",						  "ALGtmark;"				  ]
[ "markT",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],base:oid):bat[:any_1,:void] ",						  "ALGtmark;"				  ]
[ "masklen",			  "command",	  "inet",	  "(_1:inet):int ",										  "INETmasklen;"			  ]
[ "match",			  "command",	  "batstr",	  "(b:bat[:void,:str],pat:str):bat[:void,:bit] ",						  "STRbatmatchCst;"			  ]
[ "match",			  "command",	  "pcre",	  "(s:str,pat:str):bit ",									  "PCREmatch;"				  ]
[ "match",			  "command",	  "pcre",	  "(pat:pcre,s:str):bit ",									  "PCREexec_wrap;"			  ]
[ "max",			  "command",	  "group",	  "(b:bat[:oid,:dbl]):bat[:oid,:dbl] ",								  "GRPmax_oid_dbl;"			  ]
[ "max",			  "command",	  "group",	  "(b:bat[:oid,:flt]):bat[:oid,:flt] ",								  "GRPmax_oid_flt;"			  ]
[ "max",			  "command",	  "group",	  "(b:bat[:oid,:lng]):bat[:oid,:lng] ",								  "GRPmax_oid_lng;"			  ]
[ "max",			  "command",	  "group",	  "(b:bat[:oid,:int]):bat[:oid,:int] ",								  "GRPmax_oid_int;"			  ]
[ "max",			  "command",	  "group",	  "(b:bat[:oid,:sht]):bat[:oid,:sht] ",								  "GRPmax_oid_sht;"			  ]
[ "max",			  "command",	  "group",	  "(b:bat[:oid,:oid]):bat[:oid,:oid] ",								  "GRPmax_oid_oid;"			  ]
[ "max",			  "command",	  "group",	  "(b:bat[:any_2,:any_1],e:bat[:any_2,:any_3]):bat[:any_2,:any_1] ",				  "GRPmax;"				  ]
[ "max",			  "command",	  "calc",	  "(l:dbl,r:dbl):dbl ",										  "CALCbinaryMAXdbl;"			  ]
[ "max",			  "command",	  "calc",	  "(l:lng,r:lng):lng ",										  "CALCbinaryMAXlng;"			  ]
[ "max",			  "command",	  "calc",	  "(l:flt,r:flt):flt ",										  "CALCbinaryMAXflt;"			  ]
[ "max",			  "command",	  "calc",	  "(l:oid,r:oid):oid ",										  "CALCbinaryMAXoid;"			  ]
[ "max",			  "command",	  "calc",	  "(l:int,r:int):int ",										  "CALCbinaryMAXint;"			  ]
[ "max",			  "command",	  "calc",	  "(l:sht,r:sht):sht ",										  "CALCbinaryMAXsht;"			  ]
[ "max",			  "command",	  "calc",	  "(l:chr,r:chr):chr ",										  "CALCbinaryMAXchr;"			  ]
[ "max",			  "command",	  "aggr",	  "(b:bat[:void,:any_1],g:bat[:void,:oid],e:bat[:void,:any_2]):bat[:void,:any_1] ",		  "AX3aggrX3_max3;"			  ]
[ "max",			  "command",	  "aggr",	  "(b:bat[:void,:any_1],g:bat[:void,:oid],e:bat[:oid,:any_2]):bat[:void,:any_1] ",		  "AX3aggrX3_max3;"			  ]
[ "max",			  "command",	  "aggr",	  "(b:bat[:oid,:any_1],e:bat[:oid,:any_2]):bat[:oid,:any_1] ",					  "AX3aggrX3_max;"			  ]
[ "max",			  "command",	  "aggr",	  "(b:bat[:void,:any_1],e:bat[:void,:any_2]):bat[:void,:any_1] ",				  "AX3aggrX3_max;"			  ]
[ "max",			  "command",	  "aggr",	  "(b:bat[:any_1,:lng]):lng ",									  "ALGmax_lng;"				  ]
[ "max",			  "command",	  "aggr",	  "(b:bat[:any_1,:dbl]):dbl ",									  "ALGmax_dbl;"				  ]
[ "max",			  "command",	  "aggr",	  "(b:bat[:any_1,:flt]):flt ",									  "ALGmax_flt;"				  ]
[ "max",			  "command",	  "aggr",	  "(b:bat[:any_1,:int]):int ",									  "ALGmax_int;"				  ]
[ "max",			  "command",	  "aggr",	  "(b:bat[:any_1,:sht]):sht ",									  "ALGmax_sht;"				  ]
[ "max",			  "command",	  "aggr",	  "(b:bat[:any_1,:any_2]):any_2 ",								  "ALGmaxany;"				  ]
[ "memStatistics",		  "command",	  "status",	  "():bat[:str,:int] ",										  "SYSmemStatistics;"			  ]
[ "memUsage",			  "command",	  "status",	  "(minsize:lng):bat[:str,:lng] ",								  "SYSmem_usage;"			  ]
[ "mem_cursize",		  "command",	  "status",	  "():lng ",											  "SYSgetmem_cursize;"			  ]
[ "mem_maxsize",		  "command",	  "status",	  "(v:lng):void ",										  "set_mem_maxsize;"			  ]
[ "mem_maxsize",		  "command",	  "status",	  "():lng ",											  "SYSgetmem_maxsize;"			  ]
[ "merge",			  "command",	  "algebra",	  "(b:bat[:oid,:oid]):bat[:lng,:oid] ",								  "ALGmerge;"				  ]
[ "mergeInsForget",		  "command",	  "crackers",	  "(b:bat[:any_1,:date],c:bat[:any_1,:date]):void ",						  "mergeInsertions_Forget;"		  ]
[ "mergeInsForget",		  "command",	  "crackers",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):void ",						  "mergeInsertions_Forget;"		  ]
[ "mergeInsForget",		  "command",	  "crackers",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):void ",						  "mergeInsertions_Forget;"		  ]
[ "mergeInsForget",		  "command",	  "crackers",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",						  "mergeInsertions_Forget;"		  ]
[ "mergeInsForget",		  "command",	  "crackers",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",						  "mergeInsertions_Forget;"		  ]
[ "mergeInsForget",		  "command",	  "crackers",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void ",						  "mergeInsertions_Forget;"		  ]
[ "mergeInsForget",		  "command",	  "crackers",	  "(b:bat[:any_1,:chr],c:bat[:any_1,:chr]):void ",						  "mergeInsertions_Forget;"		  ]
[ "mergejoin",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",			  "ALGmergejoin;"			  ]
[ "milliseconds",		  "command",	  "mtime",	  "(t:timestamp):int ",										  "MTIMEtimestamp_milliseconds;"	  ]
[ "milliseconds",		  "command",	  "mtime",	  "(d:bat[:any_1,:date]):bat[:any_1,:int] ",							  "MTIMEdaytime_extract_milliseconds_bulk;"  ]
[ "milliseconds",		  "command",	  "mtime",	  "(d:daytime):int ",										  "MTIMEdaytime_extract_milliseconds;"	  ]
[ "min",			  "command",	  "group",	  "(b:bat[:oid,:dbl]):bat[:oid,:dbl] ",								  "GRPmin_oid_dbl;"			  ]
[ "min",			  "command",	  "group",	  "(b:bat[:oid,:flt]):bat[:oid,:flt] ",								  "GRPmin_oid_flt;"			  ]
[ "min",			  "command",	  "group",	  "(b:bat[:oid,:lng]):bat[:oid,:lng] ",								  "GRPmin_oid_lng;"			  ]
[ "min",			  "command",	  "group",	  "(b:bat[:oid,:int]):bat[:oid,:int] ",								  "GRPmin_oid_int;"			  ]
[ "min",			  "command",	  "group",	  "(b:bat[:oid,:sht]):bat[:oid,:sht] ",								  "GRPmin_oid_sht;"			  ]
[ "min",			  "command",	  "group",	  "(b:bat[:oid,:oid]):bat[:oid,:oid] ",								  "GRPmin_oid_oid;"			  ]
[ "min",			  "command",	  "group",	  "(b:bat[:any_2,:any_1],e:bat[:any_2,:any_3]):bat[:any_2,:any_1] ",				  "GRPmin;"				  ]
[ "min",			  "command",	  "calc",	  "(l:dbl,r:dbl):dbl ",										  "CALCbinaryMINdbl;"			  ]
[ "min",			  "command",	  "calc",	  "(l:lng,r:lng):lng ",										  "CALCbinaryMINlng;"			  ]
[ "min",			  "command",	  "calc",	  "(l:flt,r:flt):flt ",										  "CALCbinaryMINflt;"			  ]
[ "min",			  "command",	  "calc",	  "(l:oid,r:oid):oid ",										  "CALCbinaryMINoid;"			  ]
[ "min",			  "command",	  "calc",	  "(l:int,r:int):int ",										  "CALCbinaryMINint;"			  ]
[ "min",			  "command",	  "calc",	  "(l:sht,r:sht):sht ",										  "CALCbinaryMINsht;"			  ]
[ "min",			  "command",	  "calc",	  "(l:chr,r:chr):chr ",										  "CALCbinaryMINchr;"			  ]
[ "min",			  "command",	  "aggr",	  "(b:bat[:void,:any_1],g:bat[:void,:oid],e:bat[:void,:any_2]):bat[:void,:any_1] ",		  "AX3aggrX3_min3;"			  ]
[ "min",			  "command",	  "aggr",	  "(b:bat[:void,:any_1],g:bat[:void,:oid],e:bat[:oid,:any_2]):bat[:void,:any_1] ",		  "AX3aggrX3_min3;"			  ]
[ "min",			  "command",	  "aggr",	  "(b:bat[:oid,:any_1],e:bat[:oid,:any_2]):bat[:oid,:any_1] ",					  "AX3aggrX3_min;"			  ]
[ "min",			  "command",	  "aggr",	  "(b:bat[:void,:any_1],e:bat[:void,:any_2]):bat[:void,:any_1] ",				  "AX3aggrX3_min;"			  ]
[ "min",			  "command",	  "aggr",	  "(b:bat[:any_1,:lng]):lng ",									  "ALGmin_lng;"				  ]
[ "min",			  "command",	  "aggr",	  "(b:bat[:any_1,:dbl]):dbl ",									  "ALGmin_dbl;"				  ]
[ "min",			  "command",	  "aggr",	  "(b:bat[:any_1,:flt]):flt ",									  "ALGmin_flt;"				  ]
[ "min",			  "command",	  "aggr",	  "(b:bat[:any_1,:int]):int ",									  "ALGmin_int;"				  ]
[ "min",			  "command",	  "aggr",	  "(b:bat[:any_1,:sht]):sht ",									  "ALGmin_sht;"				  ]
[ "min",			  "command",	  "aggr",	  "(b:bat[:any_1,:any_2]):any_2 ",								  "ALGminany;"				  ]
[ "minutes",			  "command",	  "mtime",	  "(secs:lng):int ",										  "MTIMEsql_minutes;"			  ]
[ "minutes",			  "command",	  "mtime",	  "(t:timestamp):int ",										  "MTIMEtimestamp_minutes;"		  ]
[ "minutes",			  "command",	  "mtime",	  "(t:zrule):int ",										  "MTIMErule_extract_minutes;"		  ]
[ "minutes",			  "command",	  "mtime",	  "(t:timezone):int ",										  "MTIMEtzone_extract_minutes;"		  ]
[ "minutes",			  "command",	  "mtime",	  "(d:bat[:any_1,:date]):bat[:any_1,:int] ",							  "MTIMEdaytime_extract_minutes_bulk;"	  ]
[ "minutes",			  "command",	  "mtime",	  "(d:daytime):int ",										  "MTIMEdaytime_extract_minutes;"	  ]
[ "mirror",			  "command",	  "bat",	  "(b:bat[:void,:any]):bat[:void,:void] ",							  "BKCmirror;"				  ]
[ "mirror",			  "command",	  "bat",	  "(b:bat[:any_1,:any]):bat[:any_1,:any_1] ",							  "BKCmirror;"				  ]
[ "month",			  "command",	  "mtime",	  "(months:int):int ",										  "MTIMEsql_month;"			  ]
[ "month",			  "command",	  "mtime",	  "(t:timestamp):int ",										  "MTIMEtimestamp_month;"		  ]
[ "month",			  "command",	  "mtime",	  "(t:zrule):int ",										  "MTIMErule_extract_month;"		  ]
[ "month",			  "command",	  "mtime",	  "(d:bat[:any_1,:date]):bat[:any_1,:int] ",							  "MTIMEdate_extract_month_bulk;"	  ]
[ "month",			  "command",	  "mtime",	  "(d:date):int ",										  "MTIMEdate_extract_month;"		  ]
[ "monthname",			  "command",	  "mtime",	  "(month:int):str ",										  "MTIMEmonth_to_str;"			  ]
[ "monthnum",			  "command",	  "mtime",	  "(month:str):int ",										  "MTIMEmonth_from_str;"		  ]
[ "msec",			  "command",	  "mtime",	  "():lng ",											  "MTIMEmsec;"				  ]
[ "msecs",			  "command",	  "mtime",	  "(d:int,h:int,m:int,s:int,ms:int):lng ",							  "MTIMEmsecs;"				  ]
[ "multiplex",			  "pattern",	  "optimizer",	  "(CMD:str,a:any...):any ",									  "OPTmultiplex;"			  ]
[ "multitable",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",									  "QOTMToptimizer;"			  ]
[ "multitable",			  "pattern",	  "optimizer",	  "():str ",											  "QOTMToptimizer;"			  ]
[ "nbytes",			  "command",	  "str",	  "(s:str):int ",										  "STRBytes;"				  ]
[ "netmask",			  "command",	  "inet",	  "(_1:inet):inet ",										  "INETnetmask;"			  ]
[ "network",			  "command",	  "inet",	  "(_1:inet):inet ",										  "INETnetwork;"			  ]
[ "new",			  "pattern",	  "mat",	  "(b:bat[:any_1,:any_2]...):bat[:any_1,:any_2] ",						  "MATnew;"				  ]
[ "new",			  "command",	  "group",	  "(attr:bat[:any_1,:any_2],N:int,rng:int) (histo:bat[:any_1,:int],grp:bat[:any_1,:oid]) ",	  "GRPgroup_custom;"			  ]
[ "new",			  "command",	  "group",	  "(attr:bat[:any_1,:any_2]) (histo:bat[:any_1,:int],grp:bat[:any_1,:oid]) ",			  "GRPgroup;"				  ]
[ "new",			  "command",	  "group",	  "(attr:bat[:any_1,:any_2]) (histo:bat[:any_1,:int],grp:bat[:any_1,:void]) ",			  "GRPgroup;"				  ]
[ "new",			  "command",	  "group",	  "(b:bat[:any_1,:any_2],start:int,incr:int,grpsize:int):bat[:any_1,:int] ",			  "GRPgroup0;"				  ]
[ "new",			  "command",	  "bat",	  "(nme:str):bat[:any_1,:any_2] ",								  "CMDBATderivedByName;"		  ]
[ "new",			  "pattern",	  "bat",	  "(b:bat[:any_1,:any_2],size:lng):bat[:any_1,:any_2] ",					  "CMDBATnewDerived;"			  ]
[ "new",			  "pattern",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",							  "CMDBATnewDerived;"			  ]
[ "new",			  "pattern",	  "bat",	  "(ht:void,tt:any_2,size:lng):bat[:void,:any_2] ",						  "CMDBATnew;"				  ]
[ "new",			  "pattern",	  "bat",	  "(ht:void,tt:any_2,size:int):bat[:void,:any_2] ",										  "CMDBATnewint;"			  ]
[ "new",			  "pattern",	  "bat",	  "(ht:any_1,tt:any_2,size:lng):bat[:any_1,:any_2] ",						  "CMDBATnew;"				  ]
[ "new",			  "pattern",	  "bat",	  "(ht:any_1,tt:any_2,size:int):bat[:any_1,:any_2] ",						  "CMDBATnewint;"			  ]
[ "new",			  "pattern",	  "bat",	  "(ht:any_1,tt:any_2):bat[:any_1,:any_2] ",							  "CMDBATnew;"				  ]
[ "new",			  "pattern",	  "bat",	  "(ht:any_1,tt:any_2,b:bat[:any_3,:any_4]):bat[:any_1,:any_2] ",				  "CMDBATclone;"			  ]
[ "new",			  "command",	  "inet",	  "(s:str):inet ",										  "INETnew;"				  ]
[ "new",			  "command",	  "url",	  "(prot:str,host:str,fnme:str):url ",								  "URLnew3;"				  ]
[ "new",			  "command",	  "url",	  "(p:str,h:str,prt:int,f:str):url ",								  "URLnew4;"				  ]
[ "newIterator",		  "command",	  "partitions",	  "(b:bat[:void,:any_1],first:oid,last:oid) (_4:int,_5:bat[:void,:any_1]) ",			  "BPTnewIteratorRng;"			  ]
[ "newIterator",		  "command",	  "partitions",	  "(b:bat[:void,:any_1]) (_2:int,_3:bat[:void,:any_1]) ",					  "BPTnewIterator;"			  ]
[ "newIterator",		  "command",	  "partitions",	  "():int ",											  "BPTnewIteratorBase;"			  ]
[ "newIterator",		  "pattern",	  "statistics",	  "() (_1:lng,_2:str) ",									  "STATnewIterator;"			  ]
[ "newIterator",		  "command",	  "pbm",	  "(grp:str,first:oid,last:oid):bat[:any_1,:any_2] ",						  "PBMnewIteratorRng;"			  ]
[ "newIterator",		  "command",	  "pbm",	  "(grp:str):bat[:any_1,:any_2] ",								  "PBMnewIterator;"			  ]
[ "newIterator",		  "command",	  "pbm",	  "() (_1:int,_2:str,_3:str) ",									  "PBMnewIteratorBase;"			  ]
[ "newIterator",		  "pattern",	  "const",	  "() (_1:lng,_2:str) ",									  "CSTnewIterator;"			  ]
[ "newIterator",		  "pattern",	  "bat",	  "(b:bat[:void,:any_2]) (_2:lng,h:oid,t:any_2) ",						  "CHPbunIterator;"			  ]
[ "newIterator",		  "pattern",	  "bat",	  "(b:bat[:any_1,:any_2]) (_2:lng,h:any_1,t:any_2) ",						  "CHPbunIterator;"			  ]
[ "newIterator",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2],size:lng) (_3:lng,_4:bat[:any_1,:any_2]) ",				  "CHPnewChunkIterator;"		  ]
[ "newRange",			  "command",	  "language",	  "(v:dbl) (_2:bit,_3:dbl) ",									  "RNGnewRange_dbl;"			  ]
[ "newRange",			  "command",	  "language",	  "(v:flt) (_2:bit,_3:flt) ",									  "RNGnewRange_flt;"			  ]
[ "newRange",			  "command",	  "language",	  "(v:lng) (_2:bit,_3:lng) ",									  "RNGnewRange_lng;"			  ]
[ "newRange",			  "command",	  "language",	  "(v:int) (_2:bit,_3:int) ",									  "RNGnewRange_int;"			  ]
[ "newRange",			  "command",	  "language",	  "(v:sht) (_2:bit,_3:sht) ",									  "RNGnewRange_sht;"			  ]
[ "newRange",			  "command",	  "language",	  "(v:oid) (_2:bit,_3:oid) ",									  "RNGnewRange_oid;"			  ]
[ "newoid",			  "command",	  "calc",	  "(incr:int):oid ",										  "CALCnewoidInc;"			  ]
[ "newoid",			  "command",	  "calc",	  "(incr:lng):oid ",										  "CALCnewoidInclng;"			  ]
[ "newoid",			  "command",	  "calc",	  "():oid ",											  "CALCnewoidBase;"			  ]
[ "nextElement",		  "command",	  "language",	  "(step:dbl,last:dbl) (_3:bit,_4:dbl) ",							  "RNGnextElement_dbl;"			  ]
[ "nextElement",		  "command",	  "language",	  "(step:flt,last:flt) (_3:bit,_4:flt) ",							  "RNGnextElement_flt;"			  ]
[ "nextElement",		  "command",	  "language",	  "(step:lng,last:lng) (_3:bit,_4:lng) ",							  "RNGnextElement_lng;"			  ]
[ "nextElement",		  "command",	  "language",	  "(step:int,last:int) (_3:bit,_4:int) ",							  "RNGnextElement_int;"			  ]
[ "nextElement",		  "command",	  "language",	  "(step:sht,last:sht) (_3:bit,_4:sht) ",							  "RNGnextElement_sht;"			  ]
[ "nextElement",		  "command",	  "language",	  "(step:oid,last:oid) (_3:bit,_4:oid) ",							  "RNGnextElement_oid;"			  ]
[ "nextPage",			  "command",	  "tablet",	  "():void ",											  "TABnextPage;"			  ]
[ "next_result",		  "command",	  "mserver",	  "(hdl:int):int ",										  "SERVERnext_result;"			  ]
[ "nitems",			  "command",	  "blob",	  "(b:blob):int ",										  "BLOBnitems;"				  ]
[ "not",			  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit]):bat[:any_1,:bit] ",					  "CMDbitbataccumNOT;"			  ]
[ "not",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit]):bat[:any_1,:bit] ",							  "CMDbitbatNOT;"			  ]
[ "not",			  "command",	  "calc",	  "(left:lng):lng ",										  "CALCunarylngNOT;"			  ]
[ "not",			  "command",	  "calc",	  "(left:int):int ",										  "CALCunaryintNOT;"			  ]
[ "not",			  "command",	  "calc",	  "(left:sht):sht ",										  "CALCunaryshtNOT;"			  ]
[ "not",			  "command",	  "calc",	  "(left:chr):chr ",										  "CALCunarychrNOT;"			  ]
[ "not",			  "command",	  "calc",	  "(left:bit):bit ",										  "CALCunarybitNOT;"			  ]
[ "number",			  "command",	  "algebra",	  "(b:bat[:any_1,:any]):bat[:any_1,:int] ",							  "ALGnumber;"				  ]
[ "oid",			  "command",	  "batcalc",	  "(b:bat[:void,:oid]):bat[:void,:oid] ",							  "CMDconvertvoid_oid_oid;"		  ]
[ "oid",			  "command",	  "batcalc",	  "(b:bat[:void,:int]):bat[:void,:oid] ",							  "CMDconvertvoid_int_oid;"		  ]
[ "oid",			  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:oid] ",							  "CMDconvertint_oid;"			  ]
[ "oid",			  "command",	  "batcalc",	  "(b:bat[:oid,:oid]):bat[:oid,:oid] ",								  "CMDconvertOIDclass;"			  ]
[ "oid",			  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:oid] ",							  "CMDconvertdbl_oid;"			  ]
[ "oid",			  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:oid] ",							  "CMDconvertflt_oid;"			  ]
[ "oid",			  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:oid] ",							  "CMDconvertlng_oid;"			  ]
[ "oid",			  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:oid] ",							  "CMDconvertint_oid;"			  ]
[ "oid",			  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:oid] ",							  "CMDconvertsht_oid;"			  ]
[ "oid",			  "command",	  "calc",	  "(v:void):oid ",										  "CALCnil2oid;"			  ]
[ "oid",			  "command",	  "calc",	  "(v:str):oid ",										  "CALCstr2oid;"			  ]
[ "oid",			  "command",	  "calc",	  "(x:dbl):oid ",														  "CALCdbl2oid;"				  ]
[ "oid",			  "command",	  "calc",	  "(x:flt):oid ",														  "CALCflt2oid;"				  ]
[ "oid",			  "command",	  "calc",	  "(x:int):oid ",										  "CALCint2oid;"			  ]
[ "oid",			  "command",	  "calc",	  "(x:sht):oid ",										  "CALCsht2oid;"			  ]
[ "oid",			  "command",	  "calc",	  "(x:lng):oid ",										  "CALClng2oid;"			  ]
[ "oid",			  "command",	  "calc",	  "(x:oid):oid ",										  "CALCoid2oid;"			  ]
[ "olddate",			  "command",	  "mtime",	  "(format:str):date ",										  "MTIMEolddate;"			  ]
[ "oldduration",		  "command",	  "mtime",	  "(format:str):int ",										  "MTIMEoldduration;"			  ]
[ "open",			  "command",	  "partitions",	  "():void ",											  "BPTopen;"				  ]
[ "open",			  "pattern",	  "statistics",	  "():void ",											  "STATopen;"				  ]
[ "open",			  "command",	  "pbm",	  "():void ",											  "PBMopen;"				  ]
[ "open",			  "pattern",	  "box",	  "(nme:str):any_1 ",										  "BOXopen;"				  ]
[ "open",			  "command",	  "bbp",	  "():void ",											  "CMDbbpopen;"				  ]
[ "open",			  "pattern",	  "const",	  "():void ",											  "CSTopen;"				  ]
[ "openRead",			  "command",	  "streams",	  "(s:streams):streams ",									  "stream_stream_rstreamwrap;"		  ]
[ "openRead",			  "command",	  "streams",	  "(filename:str):streams ",									  "stream_open_rastreamwrap;"		  ]
[ "openReadBytes",		  "command",	  "streams",	  "(filename:str):streams ",									  "stream_open_rstreamwrap;"		  ]
[ "openStream",			  "command",	  "profiler",	  "(fnme:str):void ",										  "CMDsetProfilerStream;"		  ]
[ "openStream",			  "command",	  "profiler",	  "():void ",											  "CMDopenProfilerStream;"		  ]
[ "openWrite",			  "command",	  "streams",	  "(s:streams):streams ",									  "stream_stream_wstreamwrap;"		  ]
[ "openWrite",			  "command",	  "streams",	  "(filename:str):streams ",									  "stream_open_wastreamwrap;"		  ]
[ "openWriteBytes",		  "command",	  "streams",	  "(filename:str):streams ",									  "stream_open_wstreamwrap;"		  ]
[ "optimize",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):void ",									  "QOToptimize;"			  ]
[ "or",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",				  "CMDcmpaccumORcst;"			  ]
[ "or",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",						  "CMDcmpORcst;"			  ]
[ "or",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",		  "CMDcmpaccumOR;"			  ]
[ "or",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",					  "CMDcmpOR;"				  ]
[ "or",				  "command",	  "batcalc",	  "(b:bat[:void,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",									  "CMDbatOR_lng_lng_lng;"		  ]
[ "or",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",									  "CMDbatOR_lng_lng_lng;"		  ]
[ "or",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",										  "CMDcstORbat_lng_lng_lng;"		  ]
[ "or",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:lng] ",										  "CMDbatORcst_lng_lng_lng;"		  ]
[ "or",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:lng):void ",									  "CMDbataccumORcst_lng_lng_lng;"	  ]
[ "or",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:lng]):void ",									  "CMDbataccumORcst2_lng_lng_lng;"	  ]
[ "or",				  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",								  "CMDbataccumOR_lng_lng_lng;"		  ]
[ "or",				  "command",	  "batcalc",	  "(b:bat[:void,:int],c:bat[:oid,:int]):bat[:oid,:int] ",									  "CMDbatOR_int_int_int;"		  ]
[ "or",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:int] ",									  "CMDbatOR_int_int_int;"		  ]
[ "or",				  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:int] ",										  "CMDcstORbat_int_int_int;"		  ]
[ "or",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:int] ",										  "CMDbatORcst_int_int_int;"		  ]
[ "or",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:int):void ",									  "CMDbataccumORcst_int_int_int;"	  ]
[ "or",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:int]):void ",									  "CMDbataccumORcst2_int_int_int;"	  ]
[ "or",				  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",								  "CMDbataccumOR_int_int_int;"		  ]
[ "or",				  "command",	  "batcalc",	  "(b:bat[:void,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",									  "CMDbatOR_sht_sht_sht;"		  ]
[ "or",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:sht] ",									  "CMDbatOR_sht_sht_sht;"		  ]
[ "or",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:sht] ",										  "CMDcstORbat_sht_sht_sht;"		  ]
[ "or",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:sht] ",										  "CMDbatORcst_sht_sht_sht;"		  ]
[ "or",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void ",									  "CMDbataccumORcst_sht_sht_sht;"	  ]
[ "or",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void ",									  "CMDbataccumORcst2_sht_sht_sht;"	  ]
[ "or",				  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void ",								  "CMDbataccumOR_sht_sht_sht;"		  ]
[ "or",				  "command",	  "batcalc",	  "(b:bat[:void,:oid],c:bat[:oid,:oid]):bat[:oid,:oid] ",									  "CMDbatOR_oid_oid_oid;"		  ]
[ "or",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:oid] ",									  "CMDbatOR_oid_oid_oid;"		  ]
[ "or",				  "command",	  "batcalc",	  "(cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:oid] ",										  "CMDcstORbat_oid_oid_oid;"		  ]
[ "or",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:oid] ",										  "CMDbatORcst_oid_oid_oid;"		  ]
[ "or",				  "command",	  "batcalc",	  "(a:bat[:any_1,:oid],b:bat[:any_1,:oid],cst:oid):void ",									  "CMDbataccumORcst_oid_oid_oid;"	  ]
[ "or",				  "command",	  "batcalc",	  "(a:bat[:any_1,:oid],cst:oid,b:bat[:any_1,:oid]):void ",									  "CMDbataccumORcst2_oid_oid_oid;"	  ]
[ "or",				  "command",	  "batcalc",	  "(a:bat[:any_1,:oid],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):void ",								  "CMDbataccumOR_oid_oid_oid;"		  ]
[ "or",				  "command",	  "calc",	  "(left:lng,right:lng):lng ",									  "CALCbinaryORlnglng;"			  ]
[ "or",				  "command",	  "calc",	  "(left:int,right:int):int ",									  "CALCbinaryORintint;"			  ]
[ "or",				  "command",	  "calc",	  "(left:sht,right:sht):sht ",									  "CALCbinaryORshtsht;"			  ]
[ "or",				  "command",	  "calc",	  "(left:chr,right:chr):chr ",									  "CALCbinaryORchrchr;"			  ]
[ "or",				  "command",	  "calc",	  "(left:bit,right:bit):bit ",									  "CALCbinaryORbit;"			  ]
[ "order",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",							  "BKCorder;"				  ]
[ "orderReverse",	  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",											  "BKCorder_rev;"			  ]
[ "outerjoin",			  "command",	  "algebra",	  "(outer:bat[:any_1,:any_2],inner:bat[:any_2,:any_3],estimate:lng):bat[:any_1,:any_3] ",	  "ALGouterjoinestimate;"		  ]
[ "outerjoin",			  "command",	  "algebra",	  "(outer:bat[:any_1,:void],inner:bat[:oid,:any_3]):bat[:any_1,:any_3] ",			  "ALGouterjoin;"			  ]
[ "outerjoin",			  "command",	  "algebra",	  "(outer:bat[:any_1,:oid],inner:bat[:void,:any_3]):bat[:any_1,:any_3] ",			  "ALGouterjoin;"			  ]
[ "outerjoin",			  "command",	  "algebra",	  "(outer:bat[:any_1,:any_2],inner:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",			  "ALGouterjoin;"			  ]
[ "output",			  "command",	  "tablet",	  "(order:bat[:any_1,:any_2],seps:bat[:void,:str],bats:bat[:void,:BAT],s:streams):void ",	  "CMDtablet_output;"			  ]
[ "pack",			  "pattern",	  "mat",	  "(b:bat[:any_1,:any_2]...):bat[:any_1,:any_2] ",						  "MATpack;"				  ]
[ "pack",			  "pattern",	  "bat",	  "(h:oid,t:any_2):bat[:void,:any_2] ",								  "CMDbatpack;"				  ]
[ "pack",			  "pattern",	  "bat",	  "(h:any_1,t:any_2):bat[:any_1,:any_2] ",							  "CMDbatpack;"				  ]
[ "page",			  "pattern",	  "tablet",	  "(b:bat[:any_1,:any]...):int ",								  "TABpage;"				  ]
[ "partitionedQuery",		  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",									  "QOTBPToptimizer;"			  ]
[ "partitionedQuery",		  "pattern",	  "optimizer",	  "():str ",											  "QOTBPToptimizer;"			  ]
[ "peephole",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",									  "QOTPHoptimizer;"			  ]
[ "peephole",			  "pattern",	  "optimizer",	  "():str ",											  "QOTPHoptimizer;"			  ]
[ "ping",			  "command",	  "mserver",	  "(mid:int):int ",										  "SERVERping;"				  ]
[ "position",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],val:any_1,tval:any_2):int ",						  "ALGpositionBUN;"			  ]
[ "position",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],v:any_1):int ",							  "ALGposition;"			  ]
[ "pow",			  "command",	  "batmath",	  "(x:bat[:any_1,:dbl],y:dbl):bat[:any_1,:dbl] ",						  "CMDscience_pow;"			  ]
[ "pow",			  "command",	  "mmath",	  "(x:dbl,y:dbl):dbl ",										  "MATHbinary_POWdbl;"			  ]
[ "pow",			  "command",	  "mmath",	  "(x:flt,y:flt):flt ",										  "MATHbinary_POWflt;"			  ]
[ "prefix",			  "command",	  "str",	  "(s:str,l:int):str ",										  "STRprefix;"				  ]
[ "prelude",			  "command",	  "partitions",	  "():void ",											  "BPTprelude;"				  ]
[ "prelude",			  "pattern",	  "optimizer",	  "():void ",											  "optimizer_prelude;"			  ]
[ "prelude",			  "command",	  "statistics",	  "():void ",											  "STATprelude;"			  ]
[ "prelude",			  "command",	  "mserver",	  "():void ",											  "SERVERprelude;"			  ]
[ "prelude",			  "command",	  "pbm",	  "():void ",											  "PBMprelude;"				  ]
[ "prelude",			  "pattern",	  "bbp",	  "():void ",											  "CMDbbpprelude;"			  ]
[ "prelude",			  "pattern",	  "const",	  "():void ",											  "CSTprelude;"				  ]
[ "prelude",			  "command",	  "sabaoth",	  "():void ",															  "SABAOTHprelude;"				  ]
[ "prelude",			  "command",	  "group",	  "():void ",											  "GRPprelude;"				  ]
[ "prelude",			  "pattern",	  "pcre",	  "():void ",											  "pcre_init;"				  ]
[ "prelude",			  "command",	  "mtime",	  "():void ",											  "MTIMEprelude;"			  ]
[ "prelude",			  "command",	  "alarm",	  "():void ",											  "ALARMprelude;"			  ]
[ "prepare",			  "command",	  "mserver",	  "(mid:int,qry:str):int ",									  "SERVERprepare;"			  ]
[ "prevPage",			  "command",	  "tablet",	  "():void ",											  "TABprevPage;"			  ]
[ "print",			  "pattern",	  "mat",	  "(b:bat[:any_1,:any_2]...):void ",								  "MATprint;"				  ]
[ "print",			  "pattern",	  "io",		  "(val:bat[:any_1,:any_2]):int ",								  "IOprint_val;"			  ]
[ "print",			  "pattern",	  "io",		  "(val:any_1):int ",										  "IOprint_val;"			  ]
[ "print",			  "pattern",	  "io",		  "(order:int,b:bat[:any_1,:any],b2:bat[:any_1,:any]...):int ",					  "IOotable;"				  ]
[ "print",			  "pattern",	  "io",		  "(b1:bat[:any_1,:any]...):int ",								  "IOtable;"				  ]
[ "print",			  "pattern",	  "io",		  "(val:any_1,lst:any...):int ",								  "IOprint_val;"			  ]
[ "print",			  "pattern",	  "array",	  "(a:bat[:any_1,:any_2],b:bat[:any_1,:int]...):void ",						  "ARRAYprint;"				  ]
[ "print",			  "command",	  "color",	  "(c:color):void ",										  "CLRprintf;"				  ]
[ "printIndex",			  "command",	  "crackers",	  "(b:bat[:oid,:date]):void ",									  "CRKprintIndex;"			  ]
[ "printIndex",			  "command",	  "crackers",	  "(b:bat[:oid,:dbl]):void ",									  "CRKprintIndex;"			  ]
[ "printIndex",			  "command",	  "crackers",	  "(b:bat[:oid,:flt]):void ",									  "CRKprintIndex;"			  ]
[ "printIndex",			  "command",	  "crackers",	  "(b:bat[:oid,:lng]):void ",									  "CRKprintIndex;"			  ]
[ "printIndex",			  "command",	  "crackers",	  "(b:bat[:oid,:int]):void ",									  "CRKprintIndex;"			  ]
[ "printIndex",			  "command",	  "crackers",	  "(b:bat[:oid,:sht]):void ",									  "CRKprintIndex;"			  ]
[ "printIndex",			  "command",	  "crackers",	  "(b:bat[:oid,:chr]):void ",									  "CRKprintIndex;"			  ]
[ "printf",			  "command",	  "io",		  "(format:str,val:str):int ",									  "IOprint_formatted_str;"		  ]
[ "printf",			  "command",	  "io",		  "(val:str):int ",										  "IOprint_str;"			  ]
[ "printf",			  "command",	  "io",		  "(format:str,val:dbl):int ",									  "IOprint_formatted_dbl;"		  ]
[ "printf",			  "command",	  "io",		  "(format:str,val:flt):int ",									  "IOprint_formatted_flt;"		  ]
[ "printf",			  "command",	  "io",		  "(format:str,val:lng):int ",									  "IOprint_formatted_lng;"		  ]
[ "printf",			  "command",	  "io",		  "(format:str,val:oid):int ",									  "IOprint_oid;"			  ]
[ "printf",			  "command",	  "io",		  "(format:str,val:sht):int ",									  "IOprint_formatted_sht;"		  ]
[ "printf",			  "command",	  "io",		  "(format:str,val:int):int ",									  "IOprint_formatted_int;"		  ]
[ "printf",			  "command",	  "io",		  "(format:str,val:chr):int ",									  "IOprint_formatted_chr;"		  ]
[ "printf",			  "command",	  "io",		  "(format:str,val:bit):int ",									  "IOprint_formatted_bit;"		  ]
[ "printf",			  "command",	  "color",	  "(s:str,c:color):void ",									  "CLRprintf2;"				  ]
[ "printft",			  "pattern",	  "io",		  "(val:any_1):int ",										  "IOprint_ft;"				  ]
[ "product",			  "command",	  "array",	  "(b:bat[:void,:any_1],c:bat[:void,:any_2]):bat[:any_1,:any_2] ",				  "ARRAYproduct;"			  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:void,:dbl],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:dbl] ",			  "AX3aggrX3_prod3_dbl_dbl;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",			  "AX3aggrX3_prod3_dbl_dbl;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:void,:dbl],e:bat[:oid,:any_1]):bat[:void,:dbl] ",					  "AX3aggrX3_prod3_dbl_dbl;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:void,:flt],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:dbl] ",			  "AX3aggrX3_prod3_flt_dbl;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",			  "AX3aggrX3_prod3_flt_dbl;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:void,:flt],e:bat[:oid,:any_1]):bat[:void,:dbl] ",					  "AX3aggrX3_prod3_flt_dbl;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:void,:flt],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:flt] ",			  "AX3aggrX3_prod3_flt_flt;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:flt] ",			  "AX3aggrX3_prod3_flt_flt;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:void,:flt],e:bat[:oid,:any_1]):bat[:void,:flt] ",					  "AX3aggrX3_prod3_flt_flt;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:void,:lng],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:lng] ",			  "AX3aggrX3_prod3_lng_lng;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",			  "AX3aggrX3_prod3_lng_lng;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:void,:lng],e:bat[:oid,:any_1]):bat[:void,:lng] ",					  "AX3aggrX3_prod3_lng_lng;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:void,:int],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:lng] ",			  "AX3aggrX3_prod3_int_lng;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",			  "AX3aggrX3_prod3_int_lng;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:void,:int],e:bat[:oid,:any_1]):bat[:void,:lng] ",					  "AX3aggrX3_prod3_int_lng;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:void,:oid],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:int] ",			  "AX3aggrX3_prod3_oid_int;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:oid,:oid],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] ",			  "AX3aggrX3_prod3_oid_int;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:int] ",					  "AX3aggrX3_prod3_oid_int;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:void,:int],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:int] ",			  "AX3aggrX3_prod3_int_int;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] ",			  "AX3aggrX3_prod3_int_int;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:void,:int],e:bat[:oid,:any_1]):bat[:void,:int] ",					  "AX3aggrX3_prod3_int_int;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:lng] ",			  "AX3aggrX3_prod3_sht_lng;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",			  "AX3aggrX3_prod3_sht_lng;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:void,:sht],e:bat[:oid,:any_1]):bat[:void,:lng] ",					  "AX3aggrX3_prod3_sht_lng;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:int] ",			  "AX3aggrX3_prod3_sht_int;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] ",			  "AX3aggrX3_prod3_sht_int;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:void,:sht],e:bat[:oid,:any_1]):bat[:void,:int] ",					  "AX3aggrX3_prod3_sht_int;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:sht] ",			  "AX3aggrX3_prod3_sht_sht;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:sht] ",			  "AX3aggrX3_prod3_sht_sht;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:void,:sht],e:bat[:oid,:any_1]):bat[:void,:sht] ",					  "AX3aggrX3_prod3_sht_sht;"		  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:any_1,:dbl]):dbl ",									  "ALGprod_dbl_dbl;"			  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:any_1,:flt]):dbl ",									  "ALGprod_flt_dbl;"			  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:any_1,:flt]):flt ",									  "ALGprod_flt_flt;"			  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:any_1,:lng]):lng ",									  "ALGprod_lng_lng;"			  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:any_1,:int]):lng ",									  "ALGprod_int_lng;"			  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:any_1,:int]):int ",									  "ALGprod_int_int;"			  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:any_1,:sht]):lng ",									  "ALGprod_sht_lng;"			  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:any_1,:sht]):int ",									  "ALGprod_sht_int;"			  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:any_1,:sht]):sht ",									  "ALGprod_sht_sht;"			  ]
[ "project",			  "command",	  "batcalc",	  "(b:bat[:any_2,:any_1],v:dbl):bat[:any_2,:dbl] ",						  "CMDprojecttail_dbl;"			  ]
[ "project",			  "command",	  "batcalc",	  "(v:dbl,b:bat[:any_2,:any_1]):bat[:dbl,:any_1] ",						  "CMDprojecthead_dbl;"			  ]
[ "project",			  "command",	  "batcalc",	  "(b:bat[:any_2,:any_1],v:flt):bat[:any_2,:flt] ",						  "CMDprojecttail_flt;"			  ]
[ "project",			  "command",	  "batcalc",	  "(v:flt,b:bat[:any_2,:any_1]):bat[:flt,:any_1] ",						  "CMDprojecthead_flt;"			  ]
[ "project",			  "command",	  "batcalc",	  "(b:bat[:any_2,:any_1],v:lng):bat[:any_2,:lng] ",						  "CMDprojecttail_lng;"			  ]
[ "project",			  "command",	  "batcalc",	  "(v:lng,b:bat[:any_2,:any_1]):bat[:lng,:any_1] ",						  "CMDprojecthead_lng;"			  ]
[ "project",			  "command",	  "batcalc",	  "(b:bat[:any_2,:any_1],v:sht):bat[:any_2,:sht] ",						  "CMDprojecttail_sht;"			  ]
[ "project",			  "command",	  "batcalc",	  "(v:sht,b:bat[:any_2,:any_1]):bat[:sht,:any_1] ",						  "CMDprojecthead_sht;"			  ]
[ "project",			  "command",	  "batcalc",	  "(b:bat[:any_2,:any_1],v:int):bat[:any_2,:int] ",						  "CMDprojecttail_int;"			  ]
[ "project",			  "command",	  "batcalc",	  "(v:int,b:bat[:any_2,:any_1]):bat[:int,:any_1] ",						  "CMDprojecthead_int;"			  ]
[ "project",			  "command",	  "batcalc",	  "(b:bat[:any_2,:any_1],v:oid):bat[:any_2,:oid] ",						  "CMDprojecttail_oid;"			  ]
[ "project",			  "command",	  "batcalc",	  "(v:oid,b:bat[:any_2,:any_1]):bat[:oid,:any_1] ",						  "CMDprojecthead_oid;"			  ]
[ "project",			  "command",	  "batcalc",	  "(b:bat[:any_2,:any_1],v:str):bat[:any_2,:str] ",						  "CMDprojecttail_str;"			  ]
[ "project",			  "command",	  "batcalc",	  "(v:str,b:bat[:any_2,:any_1]):bat[:str,:any_1] ",						  "CMDprojecthead_str;"			  ]
[ "project",			  "command",	  "batcalc",	  "(b:bat[:any_2,:any_1],v:chr):bat[:any_2,:chr] ",						  "CMDprojecttail_chr;"			  ]
[ "project",			  "command",	  "batcalc",	  "(v:chr,b:bat[:any_2,:any_1]):bat[:chr,:any_1] ",						  "CMDprojecthead_chr;"			  ]
[ "project",			  "command",	  "batcalc",	  "(b:bat[:any_2,:any_1],v:bit):bat[:any_2,:bit] ",						  "CMDprojecttail_bit;"			  ]
[ "project",			  "command",	  "batcalc",	  "(v:bit,b:bat[:any_2,:any_1]):bat[:bit,:any_1] ",						  "CMDprojecthead_bit;"			  ]
[ "project",			  "command",	  "array",	  "(b:bat[:void,:any_1],i:int):bat[:void,:int] ",						  "ARRAYproject;"			  ]
[ "project",			  "pattern",	  "algebra",	  "(b:bat[:any_1,:any_3],val:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",				  "CMDBBPproject;"			  ]
[ "project",			  "pattern",	  "algebra",	  "(b:bat[:any_1,:any_3],val:any_2):bat[:any_1,:any_2] ",					  "CMDBBPproject;"			  ]
[ "project",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:void] ",							  "ALGprojectNIL;"			  ]
[ "prompt",			  "pattern",	  "io",		  "(val:any_1):int ",										  "IOprompt_val;"			  ]
[ "ptr",			  "command",	  "calc",	  "(v:void):ptr ",										  "CALCnil2ptr;"			  ]
[ "ptr",			  "command",	  "calc",	  "(v:str):ptr ",										  "CALCstr2ptr;"			  ]
[ "ptr",			  "command",	  "calc",	  "(x:lng):ptr ",										  "CALClng2ptr;"			  ]
[ "put",			  "pattern",	  "mserver",	  "(nme:str,val:any_1):str ",									  "SERVERputLocal;"			  ]
[ "put",			  "pattern",	  "mserver",	  "(mid:int,nme:str,val:any_1):void ",								  "SERVERput;"				  ]
[ "query",			  "command",	  "mserver",	  "(mid:int,qry:str):int ",									  "SERVERquery;"			  ]
[ "query_array",		  "pattern",	  "mserver",	  "(mid:int,qry:str,arg:str...):int ",								  "SERVERquery_array;"			  ]
[ "query_handle",		  "command",	  "mserver",	  "(mid:int,qry:str):int ",									  "SERVERquery_handle;"			  ]
[ "quit",			  "command",	  "clients",	  "():void ",															  "CLTquitDefault;"				  ]
[ "quit",			  "command",	  "clients",	  "(timeout:int):void ",													  "CLTquit;"					  ]
[ "r_search",			  "command",	  "batstr",	  "(s:bat[:void,:str],c:str):bat[:void,:int] ",							  "STRbatRstrSearchcst;"		  ]
[ "r_search",			  "command",	  "batstr",	  "(s:bat[:void,:str],c:bat[:void,:str]):bat[:void,:int] ",					  "STRbatRstrSearch;"			  ]
[ "r_search",			  "command",	  "str",	  "(s:str,c:chr):int ",										  "STRReverseChrSearch;"		  ]
[ "r_search",			  "command",	  "str",	  "(s:str,c:str):int ",										  "STRReverseStrSearch;"		  ]
[ "raise",			  "command",	  "language",	  "(msg:str):str ",										  "CMDraise;"				  ]
[ "rand",			  "command",	  "mmath",	  "():int ",											  "MATHrandint;"			  ]
[ "read",			  "command",	  "bstream",	  "(s:bstream,size:int):int ",									  "bstream_read_wrapwrap;"		  ]
[ "readInt",			  "command",	  "streams",	  "(s:streams):int ",										  "stream_readIntwrap;"			  ]
[ "readStr",			  "command",	  "streams",	  "(s:streams):str ",										  "stream_read_stringwrap;"		  ]
[ "reconnect",			  "command",	  "mserver",	  "(mid:int):void ",										  "SERVERreconnect;"			  ]
[ "reconnect",			  "command",	  "mserver",	  "(host:str,port:int,usr:str,passwd:str,lang:str):int ",					  "SERVERreconnectWithoutAlias;"	  ]
[ "reconnect",			  "command",	  "mserver",	  "(alias:str,host:str,port:int,usr:str,passwd:str,lang:str):int ",				  "SERVERreconnectAlias;"		  ]
[ "red",			  "command",	  "batcolor",	  "(c:bat[:void,:color]):bat[:void,:int] ",							  "CLRbatRed;"				  ]
[ "red",			  "command",	  "color",	  "(c:color):int ",										  "CLRred;"				  ]
[ "reduce",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",									  "QOTMRoptimizer;"			  ]
[ "reduce",			  "pattern",	  "optimizer",	  "():str ",											  "QOTMRoptimizer;"			  ]
[ "refine",			  "command",	  "group",	  "(b:bat[:void,:any_3],a:bat[:oid,:any_1]):bat[:oid,:oid] ",					  "GRPrefine;"				  ]
[ "refine",			  "command",	  "group",	  "(b:bat[:oid,:any_3],a:bat[:void,:any_1]):bat[:oid,:oid] ",					  "GRPrefine;"				  ]
[ "refine",			  "command",	  "group",	  "(b:bat[:any_2,:any_3],a:bat[:any_2,:any_1]):bat[:any_2,:oid] ",				  "GRPrefine;"				  ]
[ "refine_reverse",		  "command",	  "group",	  "(b:bat[:any_2,:any_3],a:bat[:any_2,:any_1]):bat[:any_2,:oid] ",				  "GRPrefine_rev;"			  ]
[ "register",			  "command",	  "language",	  "(m:str,f:str,code:str,help:str):void ",							  "CMDregisterFunction;"		  ]
[ "release",			  "pattern",	  "partitions",	  "(b:bat[:void,:any_1]):void ",								  "BPTrelease;"				  ]
[ "release",			  "command",	  "statistics",	  "(name:bat[:any_1,:any_2]):void ",								  "STATrelease;"			  ]
[ "release",			  "pattern",	  "statistics",	  "(name:str):void ",										  "STATreleaseStr;"			  ]
[ "release",			  "pattern",	  "box",	  "(bname:str,nme:str,val:any_1):void ",							  "BOXrelease;"				  ]
[ "release",			  "pattern",	  "bbp",	  "(b:bat[:any_1,:any_2]):void ",								  "CMDbbpreleaseBAT;"			  ]
[ "release",			  "pattern",	  "bbp",	  "(name:str,val:bat[:any_1,:any_2]):void ",							  "CMDbbprelease;"			  ]
[ "release",			  "pattern",	  "const",	  "(name:any_1):void ",										  "CSTrelease;"				  ]
[ "release",			  "pattern",	  "const",	  "(name:str):void ",										  "CSTrelease;"				  ]
[ "releaseAll",			  "pattern",	  "partitions",	  "():void ",											  "BPTreleaseAll;"			  ]
[ "releaseAll",			  "pattern",	  "statistics",	  "():void ",											  "STATreleaseAll;"			  ]
[ "releaseAll",			  "command",	  "pbm",	  "(nme:str):void ",										  "PBMreleaseAll;"			  ]
[ "releaseAll",			  "pattern",	  "box",	  "(bname:str):void ",										  "BOXreleaseAll;"			  ]
[ "releaseAll",			  "pattern",	  "bbp",	  "():void ",											  "CMDbbpReleaseAll;"			  ]
[ "releaseAll",			  "pattern",	  "const",	  "():void ",											  "CSTreleaseAll;"			  ]
[ "remoteQueries",		  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",									  "QOTRQoptimizer;"			  ]
[ "remoteQueries",		  "pattern",	  "optimizer",	  "():str ",											  "QOTRQoptimizer;"			  ]
[ "removeScenario",		  "command",	  "clients",	  "(usr:str,sc:str):void ",									  "CLTremoveScenario;"			  ]
[ "removeUser",			  "command",	  "clients",	  "(nme:str):void ",										  "CLTremoveUser;"			  ]
[ "repeat",			  "command",	  "str",	  "(s2:str,c:int):str ",									  "STRrepeat;"				  ]
[ "replace",			  "command",	  "pcre",	  "(orig:bat[:any_1,:str],pat:str,repl:str,flag:str):bat[:any_1,:str] ",			  "PCREreplace_bat_wrap;"		  ]
[ "replace",			  "command",	  "pcre",	  "(origin:str,pat:str,repl:str,flags:str):str ",						  "PCREreplace_wrap;"			  ]
[ "replace",			  "command",	  "bat",	  "(b:bat[:void,:any_2],h:oid,t:any_2,force:bit):void ",					  "BKCreplace_bun_force;"		  ]
[ "replace",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:any_1,t:any_2,force:bit):void ",					  "BKCreplace_bun_force;"		  ]
[ "replace",			  "command",	  "bat",	  "(b:bat[:void,:any_2],h:oid,t:any_2):void ",							  "BKCreplace_bun;"			  ]
[ "replace",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:any_1,t:any_2):void ",						  "BKCreplace_bun;"			  ]
[ "replace",			  "command",	  "bat",	  "(b:bat[:void,:any_2],src:bat[:oid,:any_2],force:bit):void ",					  "BKCreplace_bat_force;"		  ]
[ "replace",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2],force:bit):void ",				  "BKCreplace_bat_force;"		  ]
[ "replace",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2]):void ",					  "BKCreplace_bat;"			  ]
[ "replace",			  "command",	  "str",	  "(s:str,pat:str,s2:str):str ",								  "STRreplace;"				  ]
[ "resume",			  "command",	  "mserver",	  "():void ",											  "SERVERresume;"			  ]
[ "retreatScenario",		  "command",	  "sabaoth",	  "(lang:str):void ",														  "SABAOTHretreatScenario;"			  ]
[ "reverse",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_2,:any_1] ",							  "BKCreverse;"				  ]
[ "revert",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",							  "ALGrevert;"				  ]
[ "revert",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",							  "BKCrevert;"				  ]
[ "rgb",			  "command",	  "batcolor",	  "(r:bat[:void,:int],g:bat[:void,:int],b:bat[:void,:int]):bat[:void,:color] ",			  "CLRbatRgb;"				  ]
[ "rgb",			  "command",	  "color",	  "(r:int,g:int,b:int):color ",									  "CLRrgb;"				  ]
[ "rotate",			  "command",	  "mkey",	  "(v:int,nbits:int):int ",									  "MKEYrotate;"				  ]
[ "round",			  "command",	  "mmath",	  "(x:dbl,y:int):dbl ",										  "MATHbinary_ROUNDdbl;"		  ]
[ "round",			  "command",	  "mmath",	  "(x:flt,y:int):flt ",										  "MATHbinary_ROUNDflt;"		  ]
[ "rpc",			  "command",	  "mserver",	  "(key:int,qry:str):void ",									  "SERVERquery;"			  ]
[ "rpc",			  "pattern",	  "mserver",	  "(key:int,qry:str):bat[:any_1,:any_2] ",							  "SERVERmapi_rpc_bat;"			  ]
[ "rpc",			  "pattern",	  "mserver",	  "(key:int,qry:str...):any ",									  "SERVERmapi_rpc_single_row;"		  ]
[ "rtrim",			  "command",	  "batstr",	  "(s:bat[:void,:str]):bat[:void,:str] ",							  "STRbatRtrim;"			  ]
[ "rtrim",			  "command",	  "str",	  "(s:str):str ",										  "STRRtrim;"				  ]
[ "rule",			  "command",	  "mtime",	  "(mo:int,d:int,wkday:int,mi:int):zrule ",							  "MTIMErule_create;"			  ]
[ "rule",			  "command",	  "mtime",	  "(s:str):zrule ",										  "MTIMErule_fromstr;"			  ]
[ "sample",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],num:int):bat[:any_1,:any_2] ",						  "ALGsample;"				  ]
[ "saturation",			  "command",	  "batcolor",	  "(c:bat[:void,:color]):bat[:void,:flt] ",							  "CLRbatSaturation;"			  ]
[ "saturation",			  "command",	  "batcolor",	  "(c:bat[:void,:color]):bat[:void,:int] ",							  "CLRbatSaturationInt;"		  ]
[ "saturation",			  "command",	  "color",	  "(c:color):flt ",										  "CLRsaturation;"			  ]
[ "saturation",			  "command",	  "color",	  "(c:color):int ",										  "CLRsaturationInt;"			  ]
[ "save",			  "command",	  "bat",	  "(nme:str):bit ",										  "BKCsave;"				  ]
[ "save",			  "command",	  "bat",	  "(nme:bat[:any_1,:any_2]):void ",								  "BKCsave2;"				  ]
[ "sdifference",		  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",			  "ALGsdiff;"				  ]
[ "search",			  "command",	  "manual",	  "(text:str):void ",										  "MANUALsearch;"			  ]
[ "search",			  "command",	  "batstr",	  "(s:bat[:void,:str],c:str):bat[:void,:int] ",							  "STRbatstrSearchcst;"			  ]
[ "search",			  "command",	  "batstr",	  "(s:bat[:void,:str],c:bat[:void,:str]):bat[:void,:int] ",					  "STRbatstrSearch;"			  ]
[ "search",			  "command",	  "str",	  "(s:str,c:chr):int ",										  "STRchrSearch;"			  ]
[ "search",			  "command",	  "str",	  "(s:str,c:str):int ",										  "STRstrSearch;"			  ]
[ "seconds",			  "command",	  "mtime",	  "(secs:lng):int ",										  "MTIMEsql_seconds;"			  ]
[ "seconds",			  "command",	  "mtime",	  "(t:timestamp):int ",										  "MTIMEtimestamp_seconds;"		  ]
[ "seconds",			  "command",	  "mtime",	  "(d:bat[:any_1,:date]):bat[:any_1,:int] ",							  "MTIMEdaytime_extract_seconds_bulk;"	  ]
[ "seconds",			  "command",	  "mtime",	  "(d:daytime):int ",										  "MTIMEdaytime_extract_seconds;"	  ]
[ "section",			  "command",	  "manual",	  "(mod:str):void ",										  "MANUALcreateSection1;"		  ]
[ "select",			  "command",	  "crackers",	  "(b:bat[:any_1,:date],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:any_6,:date] ",			  "CRKselectBounds_date;"		  ]
[ "select",			  "command",	  "crackers",	  "(b:bat[:any_1,:date],l:date):bat[:any_2,:date] ",						  "CRKselectValue_date;"		  ]
[ "select",			  "command",	  "crackers",	  "(b:bat[:any_1,:date],l:date,h:date):bat[:any_2,:date] ",					  "CRKselect_date;"			  ]
[ "select",			  "command",	  "crackers",	  "(b:bat[:any_1,:dbl],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:any_6,:dbl] ",			  "CRKselectBounds_dbl;"		  ]
[ "select",			  "command",	  "crackers",	  "(b:bat[:any_1,:dbl],l:dbl):bat[:any_2,:dbl] ",						  "CRKselectValue_dbl;"			  ]
[ "select",			  "command",	  "crackers",	  "(b:bat[:any_1,:dbl],l:dbl,h:dbl):bat[:any_2,:dbl] ",						  "CRKselect_dbl;"			  ]
[ "select",			  "command",	  "crackers",	  "(b:bat[:any_1,:flt],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:any_6,:flt] ",			  "CRKselectBounds_flt;"		  ]
[ "select",			  "command",	  "crackers",	  "(b:bat[:any_1,:flt],l:flt):bat[:any_2,:flt] ",						  "CRKselectValue_flt;"			  ]
[ "select",			  "command",	  "crackers",	  "(b:bat[:any_1,:flt],l:flt,h:flt):bat[:any_2,:flt] ",						  "CRKselect_flt;"			  ]
[ "select",			  "command",	  "crackers",	  "(b:bat[:any_1,:lng],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:any_6,:lng] ",			  "CRKselectBounds_lng;"		  ]
[ "select",			  "command",	  "crackers",	  "(b:bat[:any_1,:lng],l:lng):bat[:any_2,:lng] ",						  "CRKselectValue_lng;"			  ]
[ "select",			  "command",	  "crackers",	  "(b:bat[:any_1,:lng],l:lng,h:lng):bat[:any_2,:lng] ",						  "CRKselect_lng;"			  ]
[ "select",			  "command",	  "crackers",	  "(b:bat[:any_1,:int],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:any_6,:int] ",			  "CRKselectBounds_int;"		  ]
[ "select",			  "command",	  "crackers",	  "(b:bat[:any_1,:int],l:int):bat[:any_2,:int] ",						  "CRKselectValue_int;"			  ]
[ "select",			  "command",	  "crackers",	  "(b:bat[:any_1,:int],l:int,h:int):bat[:any_2,:int] ",						  "CRKselect_int;"			  ]
[ "select",			  "command",	  "crackers",	  "(b:bat[:any_1,:sht],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:any_6,:sht] ",			  "CRKselectBounds_sht;"		  ]
[ "select",			  "command",	  "crackers",	  "(b:bat[:any_1,:sht],l:sht):bat[:any_2,:sht] ",						  "CRKselectValue_sht;"			  ]
[ "select",			  "command",	  "crackers",	  "(b:bat[:any_1,:sht],l:sht,h:sht):bat[:any_2,:sht] ",						  "CRKselect_sht;"			  ]
[ "select",			  "command",	  "crackers",	  "(b:bat[:any_1,:chr],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:any_6,:chr] ",			  "CRKselectBounds_chr;"		  ]
[ "select",			  "command",	  "crackers",	  "(b:bat[:any_1,:chr],l:chr):bat[:any_2,:chr] ",						  "CRKselectValue_chr;"			  ]
[ "select",			  "command",	  "crackers",	  "(b:bat[:any_1,:chr],l:chr,h:chr):bat[:any_2,:chr] ",						  "CRKselect_chr;"			  ]
[ "select",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],value:any_2):bat[:any_1,:any_2] ",					  "ALGselect1;"				  ]
[ "select",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],low:any_2,high:any_2,li:bit,hi:bit):bat[:any_1,:any_2] ",		  "ALGselectInclusive;"			  ]
[ "select",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],low:any_2,high:any_2):bat[:any_1,:any_2] ",				  "ALGselect;"				  ]
[ "select",			  "command",	  "pcre",	  "(pat:str,strs:bat[:any_1,:str]):bat[:any_1,:str] ",						  "PCREselect;"				  ]
[ "selectH",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],value:any_1):bat[:any_1,:any_2] ",					  "ALGselect1Head;"			  ]
[ "selectH",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],low:any_1,high:any_1,li:bit,hi:bit):bat[:any_1,:any_2] ",		  "ALGselectInclusiveHead;"		  ]
[ "selectH",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],low:any_1,high:any_1):bat[:any_1,:any_2] ",				  "ALGselectHead;"			  ]
[ "semijoin",			  "command",	  "algebra",	  "(left:bat[:oid,:any_2],right:bat[:void,:any]):bat[:oid,:any_2] ",				  "ALGsemijoin;"			  ]
[ "semijoin",			  "command",	  "algebra",	  "(left:bat[:void,:any_2],right:bat[:oid,:any]):bat[:oid,:any_2] ",				  "ALGsemijoin;"			  ]
[ "semijoin",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any]):bat[:any_1,:any_2] ",			  "ALGsemijoin;"			  ]
[ "set",			  "command",	  "lock",	  "(l:lock):void ",										  "LCKset;"				  ]
[ "setAccess",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],mode:str):bat[:any_1,:any_2] ",					  "BKCsetAccess;"			  ]
[ "setAlias",			  "command",	  "mserver",	  "(dbalias:str):void ",									  "SERVERsetAlias;"			  ]
[ "setAll",			  "command",	  "profiler",	  "():void ",											  "CMDsetAllProfiler;"			  ]
[ "setAppendMode",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",							  "BKCsetAppendMode;"			  ]
[ "setBracket",			  "command",	  "tablet",	  "(idx:int,lbrk:str,rbrk:str):void ",								  "TABsetColumnBracket;"		  ]
[ "setCachedProfiling",		  "command",	  "profiler",	  "():void ",											  "CMDsetCachedProfiling;"		  ]
[ "setCapacity",		  "command",	  "partitions",	  "(b:bat[:void,:any_1],s:int):void ",								  "BPTsetCapacity;"			  ]
[ "setCatch",			  "pattern",	  "mdb",	  "(b:bit):void ",										  "MDBsetCatch;"			  ]
[ "setCold",			  "command",	  "bat",	  "(b:bat[:any_1,:any_1]):void ",								  "BKCcoldBAT;"				  ]
[ "setColumn",			  "pattern",	  "tablet",	  "(idx:int,v:any_1):void ",									  "TABsetColumn;"			  ]
[ "setColumn",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:str,t:str):void ",							  "BKCsetColumns;"			  ]
[ "setColumn",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],t:str):void ",								  "BKCsetColumn;"			  ]
[ "setDebug",			  "pattern",	  "optimizer",	  "():void ",											  "QOTdebugOptimizers;"			  ]
[ "setDebug",			  "command",	  "mdb",	  "(flg:int):int ",														  "MDBsetDebug;"			  ]
[ "setDecimal",			  "command",	  "tablet",	  "(idx:int,s:int,p:int):void ",								  "TABsetColumnDecimal;"		  ]
[ "setDelimiter",		  "command",	  "tablet",	  "(sep:str):void ",										  "TABsetDelimiter;"			  ]
[ "setEndPoint",		  "command",	  "profiler",	  "(mod:str,fcn:str):void ",									  "CMDendPointProfiler;"		  ]
[ "setFilter",			  "command",	  "profiler",	  "(mod:str,fcn:str):void ",									  "CMDsetFilterProfiler;"		  ]
[ "setFormat",			  "pattern",	  "tablet",	  "(b:any...):void ",										  "TABsetFormat;"			  ]
[ "setGarbage",			  "pattern",	  "bat",	  "(b:bat[:any_1,:any_2]):void ",								  "CMDBATsetgarbage;"			  ]
[ "setHash",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],prop:bit):bit ",							  "BKCsetHash;"				  ]
[ "setHistory",			  "command",	  "clients",	  "(s:str):void ",										  "CLTsetHistory;"			  ]
[ "setHot",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):void ",								  "BKChotBAT;"				  ]
[ "setIO",			  "command",	  "mdb",	  "(b:bit):void ",														  "MDBsetIO;"				  ]
[ "setKey",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],mode:bit):bat[:any_1,:any_2] ",					  "BKCsetkey;"				  ]
[ "setListing",			  "command",	  "clients",	  "(flag:int):int ",										  "CLTsetListing;"			  ]
[ "setLocation",		  "command",	  "factory",	  "(uri:str):void ",										  "FCTsetLocation;"			  ]
[ "setMemory",			  "command",	  "mdb",	  "(b:bit):void ",														  "MDBsetMemory;"			  ]
[ "setMemoryAdvise",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2],mode:int):bit ",							  "BKCmadvise2;"			  ]
[ "setMemoryAdvise",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2],buns_mode:int,hheap_mode:int,theap_mode:int):bit ",			  "BKCmadvise;"				  ]
[ "setMemoryMap",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2],mode:int):bit ",							  "BKCmmap2;"				  ]
[ "setMemoryMap",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2],buns_mode:int,hheap_mode:int,theap_mode:int):bit ",			  "BKCmmap;"				  ]
[ "setName",			  "command",	  "tablet",	  "(idx:int,nme:str):void ",									  "TABsetColumnName;"			  ]
[ "setName",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],s:str):void ",								  "BKCsetName;"				  ]
[ "setNone",			  "command",	  "profiler",	  "():void ",											  "CMDsetNoneProfiler;"			  ]
[ "setNull",			  "command",	  "tablet",	  "(idx:int,fmt:str):void ",									  "TABsetColumnNull;"			  ]
[ "setOfflineProfiling",	  "command",	  "profiler",	  "():void ",											  "CMDsetOfflineProfiling;"		  ]
[ "setOnlineProfiling",		  "command",	  "profiler",	  "():void ",											  "CMDsetOnlineProfiling;"		  ]
[ "setPassword",		  "command",	  "clients",	  "(user:str,pass:str):void ",									  "CLTsetPassword;"			  ]
[ "setPersistent",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):void ",								  "BKCsetPersistent;"			  ]
[ "setPersistent",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2],f:bit):void ",								  "BKCpersists;"			  ]
[ "setPivot",			  "command",	  "tablet",	  "(b:bat[:void,:oid]):void ",									  "TABsetPivot;"			  ]
[ "setPosition",		  "command",	  "tablet",	  "(idx:int,f:int,i:int):void ",								  "TABsetColumnPosition;"		  ]
[ "setProperties",		  "command",	  "tablet",	  "(prop:str):int ",										  "TABsetProperties;"			  ]
[ "setReadMode",		  "command",	  "pbm",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",							  "PBMdummy;"				  ]
[ "setReadMode",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",							  "BKCsetReadMode;"			  ]
[ "setRole",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:str,t:str):void ",							  "BKCsetRole;"				  ]
[ "setRowBracket",		  "command",	  "tablet",	  "(lbrk:str,rbrk:str):void ",									  "TABsetRowBracket;"			  ]
[ "setScenario",		  "command",	  "clients",	  "(msg:str):str ",										  "CLTsetScenario;"			  ]
[ "setSequenceBase",		  "command",	  "bat",	  "(b:bat[:void,:any_1],seqbase:void):bat[:void,:any_1] ",					  "BKCsetSequenceBaseNil;"		  ]
[ "setSequenceBase",		  "command",	  "bat",	  "(b:bat[:oid,:any_1],seqbase:oid):bat[:void,:any_1] ",					  "BKCsetSequenceBase;"			  ]
[ "setSequenceBase",		  "command",	  "bat",	  "(b:bat[:void,:any_1],seqbase:oid):bat[:void,:any_1] ",					  "BKCsetSequenceBase;"			  ]
[ "setSet",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],mode:bit):bat[:any_1,:any_2] ",					  "BKCsetSet;"				  ]
[ "setSorted",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",								  "BKCsetSorted;"			  ]
[ "setStartPoint",		  "command",	  "profiler",	  "(mod:str,fcn:str):void ",									  "CMDstartPointProfiler;"		  ]
[ "setStream",			  "command",	  "tablet",	  "(s:streams):void ",										  "TABsetStream;"			  ]
[ "setTableBracket",		  "command",	  "tablet",	  "(lbrk:str,rbrk:str):void ",									  "TABsetTableBracket;"			  ]
[ "setTimer",			  "command",	  "mdb",	  "(b:bit):void ",														  "MDBsetTimer;"			  ]
[ "setTimezone",		  "command",	  "mtime",	  "(name:str):timezone ",									  "MTIMEtimezone;"			  ]
[ "setTrace",			  "command",	  "clients",	  "(flag:bit):void ",										  "CLTtrace;"				  ]
[ "setTrace",			  "pattern",	  "mdb",	  "(b:bit):void ",										  "MDBsetTrace;"			  ]
[ "setTransient",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):void ",								  "BKCsetTransient;"			  ]
[ "setWidth",			  "command",	  "tablet",	  "(idx:int,maxwidth:int):void ",								  "TABsetColumnWidth;"			  ]
[ "setWriteMode",		  "command",	  "pbm",	  "(nme:str):bat[:any_1,:any_2] ",								  "PBMdummy;"				  ]
[ "setWriteMode",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",							  "BKCsetWriteMode;"			  ]
[ "setenv",			  "command",	  "unix",	  "(nme:str,val:str):bit ",									  "UNIXsetenv;"				  ]
[ "setmasklen",			  "command",	  "inet",	  "(_1:inet,_2:int):inet ",									  "INETsetmasklen;"			  ]
[ "setoid",			  "command",	  "calc",	  "():oid ",											  "CALCsetoidBase;"			  ]
[ "setoid",			  "command",	  "calc",	  "(base:oid):oid ",										  "CALCsetoidInc;"			  ]
[ "setoid",			  "command",	  "calc",	  "(v:oid):void ",										  "oidSetoidImpl;"			  ]
[ "setoid",			  "command",	  "calc",	  "(v:lng):void ",										  "lngSetoidImpl;"			  ]
[ "setoid",			  "command",	  "calc",	  "(v:int):void ",										  "intSetoidImpl;"			  ]
[ "showFlowGraph",		  "pattern",	  "optimizer",	  "(M:str,F:str,s:str):void ",									  "QOTshowFlowGraph;"			  ]
[ "showPlan",			  "pattern",	  "optimizer",	  "():void ",											  "QOTshowPlan;"			  ]
[ "showPlan",			  "pattern",	  "optimizer",	  "(M:str,F:str,s:str):void ",									  "QOTshowPlan;"			  ]
[ "sht",			  "command",	  "batcalc",	  "(b:bat[:any_1,:oid]):bat[:any_1,:sht] ",							  "CMDconvertoid_sht;"			  ]
[ "sht",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit]):bat[:any_1,:sht] ",							  "CMDconvertbit_sht;"			  ]
[ "sht",			  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:sht] ",							  "CMDconvertdbl_sht;"			  ]
[ "sht",			  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:sht] ",							  "CMDconvertflt_sht;"			  ]
[ "sht",			  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:sht] ",							  "CMDconvertlng_sht;"			  ]
[ "sht",			  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:sht] ",							  "CMDconvertint_sht;"			  ]
[ "sht",			  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:sht] ",							  "CMDconvertsht_sht;"			  ]
[ "sht",			  "command",	  "calc",	  "(v:void):sht ",										  "CALCnil2sht;"			  ]
[ "sht",			  "command",	  "calc",	  "(v:str):sht ",										  "CALCstr2sht;"			  ]
[ "sht",			  "command",	  "calc",	  "(x:dbl):sht ",										  "CALCdbl2sht;"			  ]
[ "sht",			  "command",	  "calc",	  "(x:flt):sht ",										  "CALCflt2sht;"			  ]
[ "sht",			  "command",	  "calc",	  "(x:lng):sht ",										  "CALClng2sht;"			  ]
[ "sht",			  "command",	  "calc",	  "(x:int):sht ",										  "CALCint2sht;"			  ]
[ "sht",			  "command",	  "calc",	  "(x:sht):sht ",										  "CALCsht2sht;"			  ]
[ "sht",			  "command",	  "calc",	  "(x:chr):sht ",														  "CALCchr2sht;"				  ]
[ "sht",			  "command",	  "calc",	  "(x:bit):sht ",										  "CALCbit2sht;"			  ]
[ "sht",			  "command",	  "calc",	  "(x:oid):sht ",										  "CALCoid2sht;"			  ]
[ "shutdown",			  "command",	  "factory",	  "(m:str,f:str):void ",									  "FCTshutdown;"			  ]
[ "sin",			  "command",	  "batmath",	  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",							  "CMDsciencevoid_sin;"			  ]
[ "sin",			  "command",	  "batmath",	  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",							  "CMDscience_sin;"			  ]
[ "sin",			  "command",	  "mmath",	  "(x:dbl):dbl ",										  "MATHunary_SINdbl;"			  ]
[ "sin",			  "command",	  "mmath",	  "(x:flt):flt ",										  "MATHunary_SINflt;"			  ]
[ "singleton",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",									  "QOTSToptimizer;"			  ]
[ "singleton",			  "pattern",	  "optimizer",	  "():str ",											  "QOTSToptimizer;"			  ]
[ "sinh",			  "command",	  "batmath",	  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",							  "CMDsciencevoid_sinh;"		  ]
[ "sinh",			  "command",	  "batmath",	  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",							  "CMDscience_sinh;"			  ]
[ "sinh",			  "command",	  "mmath",	  "(x:dbl):dbl ",										  "MATHunary_SINHdbl;"			  ]
[ "sinh",			  "command",	  "mmath",	  "(x:flt):flt ",										  "MATHunary_SINHflt;"			  ]
[ "sintersect",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",			  "ALGsintersect;"			  ]
[ "size",			  "command",	  "group",	  "(b:bat[:any_2,:bit],e:bat[:any_2,:any_1]):bat[:any_2,:int] ",				  "GRPsize;"				  ]
[ "size",			  "command",	  "aggr",	  "(b:bat[:void,:bit],e:bat[:void,:any_1]):bat[:void,:int] ",					  "AX3aggrX3_size;"			  ]
[ "sleep",			  "command",	  "alarm",	  "(secs:int):void ",										  "ALARMsleep;"				  ]
[ "slice",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],x:int,y:int):bat[:any_1,:any_2] ",					  "ALGslice_int;"			  ]
[ "slice",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],x:lng,y:lng):bat[:any_1,:any_2] ",					  "ALGslice;"				  ]
[ "socketRead",			  "command",	  "streams",	  "(skt:int,name:str):streams ",								  "stream_socket_rastreamwrap;"		  ]
[ "socketReadBytes",		  "command",	  "streams",	  "(skt:int,name:str):streams ",								  "stream_socket_rstreamwrap;"		  ]
[ "socketWrite",		  "command",	  "streams",	  "(skt:int,name:str):streams ",								  "stream_socket_wastreamwrap;"		  ]
[ "socketWriteBytes",		  "command",	  "streams",	  "(skt:int,name:str):streams ",								  "stream_socket_wstreamwrap;"		  ]
[ "sort",		  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",											  "ALGhsort;"				  ]
[ "sortHT",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",							  "ALGhtsort;"				  ]
[ "sortReverse",	  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",											  "ALGhsort_rev;"			  ]
[ "sortReverseTail",	  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",											  "ALGtsort_rev;"			  ]
[ "sortTH",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",							  "ALGthsort;"				  ]
[ "sortTail",		  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",											  "ALGtsort;"				  ]
[ "source",			  "command",	  "language",	  "(f:str):void ",										  "CMDevalFile;"			  ]
[ "space",			  "command",	  "str",	  "(l:int):str ",										  "STRspace;"				  ]
[ "split",			  "command",	  "algebra",	  "(b:bat[:lng,:oid]):bat[:oid,:oid] ",								  "ALGsplit;"				  ]
[ "sql2pcre",			  "command",	  "pcre",	  "(pat:str,esc:str):str ",									  "PCREsql2pcre;"			  ]
[ "sqrt",			  "command",	  "batmath",	  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",							  "CMDsciencevoid_sqrt;"		  ]
[ "sqrt",			  "command",	  "batmath",	  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",							  "CMDscience_sqrt;"			  ]
[ "sqrt",			  "command",	  "mmath",	  "(y:dbl):dbl ",										  "MATHunary_SQRTdbl;"			  ]
[ "sqrt",			  "command",	  "mmath",	  "(y:flt):flt ",										  "MATHunary_SQRTflt;"			  ]
[ "srand",			  "command",	  "mmath",	  "(seed:int):void ",										  "MATHsrandint;"			  ]
[ "ssort",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",							  "ALGssort;"				  ]
[ "ssort_rev",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",							  "ALGssort_rev;"			  ]
[ "start",			  "command",	  "profiler",	  "():void ",											  "CMDstartProfiler;"			  ]
[ "start",			  "pattern",	  "mdb",	  "():void ",											  "MDBstart;"				  ]
[ "startTrace",			  "command",	  "profiler",	  "():void ",											  "CMDstartTrace;"			  ]
[ "start_dst",			  "command",	  "mtime",	  "(t:timezone):zrule ",									  "MTIMEtzone_extract_start;"		  ]
[ "startsWith",			  "command",	  "batstr",	  "(s:bat[:void,:str],prefix:str):bat[:void,:bit] ",						  "STRbatPrefixcst;"			  ]
[ "startsWith",			  "command",	  "batstr",	  "(s:bat[:void,:str],prefix:bat[:void,:str]):bat[:void,:bit] ",				  "STRbatPrefix;"			  ]
[ "startsWith",			  "command",	  "str",	  "(s:str,prefix:str):bit ",									  "STRPrefix;"				  ]
[ "stderr",			  "command",	  "io",		  "():streams ",										  "io_stderr;"				  ]
[ "stdin",			  "command",	  "io",		  "():bstream ",										  "io_stdin;"				  ]
[ "stdout",			  "command",	  "io",		  "():streams ",										  "io_stdout;"				  ]
[ "stop",			  "command",	  "profiler",	  "():void ",											  "CMDstopProfiler;"			  ]
[ "stop",			  "command",	  "mserver",	  "():void ",											  "SERVERstop;"				  ]
[ "stop",			  "pattern",	  "mdb",	  "():void ",											  "MDBstop;"				  ]
[ "stopTrace",			  "command",	  "profiler",	  "():void ",											  "CMDstopTrace;"			  ]
[ "str",			  "command",	  "batcolor",	  "(b:bat[:void,:color]):bat[:void,:str] ",							  "CLRbatStr;"				  ]
[ "str",			  "command",	  "batstr",	  "(b:bat[:void,:str]):bat[:void,:str] ",							  "STRbattostr;"			  ]
[ "str",			  "command",	  "batcalc",	  "(b:bat[:any_1,:str]):bat[:any_1,:str] ",							  "CMDconvertstr_str;"			  ]
[ "str",			  "command",	  "calc",	  "(v:str):str ",										  "CALCstr2str;"			  ]
[ "str",			  "command",	  "calc",	  "(v:void):str ",										  "CALCnil2str;"			  ]
[ "str",			  "command",	  "calc",	  "(v:bat[:any_1,:any_2]):str ",								  "CALCbat2str;"			  ]
[ "str",			  "command",	  "calc",	  "(v:chr):str ",										  "CALCchr2str;"			  ]
[ "str",			  "command",	  "calc",	  "(v:ptr):str ",										  "CALCptr2str;"			  ]
[ "str",			  "command",	  "calc",	  "(v:bit):str ",										  "CALCbit2str;"			  ]
[ "str",			  "command",	  "calc",	  "(v:dbl):str ",										  "CALCdbl2str;"			  ]
[ "str",			  "command",	  "calc",	  "(v:flt):str ",										  "CALCflt2str;"			  ]
[ "str",			  "command",	  "calc",	  "(v:lng):str ",										  "CALClng2str;"			  ]
[ "str",			  "command",	  "calc",	  "(v:BAT):str ",										  "CALCbat2str;"			  ]
[ "str",			  "command",	  "calc",	  "(v:int):str ",										  "CALCint2str;"			  ]
[ "str",			  "command",	  "calc",	  "(v:sht):str ",										  "CALCsht2str;"			  ]
[ "str",			  "command",	  "calc",	  "(v:oid):str ",										  "CALCoid2str;"			  ]
[ "str",			  "command",	  "calc",	  "(x:dbl):str ",										  "CALCdbl2str;"			  ]
[ "str",			  "command",	  "calc",	  "(x:flt):str ",										  "CALCflt2str;"			  ]
[ "str",			  "command",	  "calc",	  "(x:lng):str ",										  "CALClng2str;"			  ]
[ "str",			  "command",	  "calc",	  "(x:int):str ",										  "CALCint2str;"			  ]
[ "str",			  "command",	  "calc",	  "(x:sht):str ",										  "CALCsht2str;"			  ]
[ "str",			  "command",	  "timezone",	  "():str ",											  "MTIMEtzone_tostr;"			  ]
[ "str",			  "command",	  "str",	  "(s:str):str ",										  "STRtostr;"				  ]
[ "str",			  "command",	  "color",	  "(s:color):str ",										  "CLRstr;"				  ]
[ "strengthReduction",		  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",									  "QOTSRoptimizer;"			  ]
[ "strengthReduction",		  "pattern",	  "optimizer",	  "():str ",											  "QOTSRoptimizer;"			  ]
[ "string",			  "command",	  "batstr",	  "(s:bat[:void,:str],offset:int,count:int):bat[:void,:str] ",					  "STRbatSubStringcst;"			  ]
[ "string",			  "command",	  "batstr",	  "(b:bat[:void,:str],offset:int):bat[:void,:str] ",						  "STRbatTailcst;"			  ]
[ "string",			  "command",	  "batstr",	  "(b:bat[:void,:str],offset:bat[:void,:int]):bat[:void,:str] ",				  "STRbatTail;"				  ]
[ "string",			  "command",	  "str",	  "(s:str,offset:int,count:int):str ",								  "STRSubString;"			  ]
[ "string",			  "command",	  "str",	  "(s:str,offset:int):str ",									  "STRTail;"				  ]
[ "stringlength",		  "command",	  "str",	  "(s:str):int ",										  "STRstringLength;"			  ]
[ "substitute",			  "command",	  "batstr",	  "(s:bat[:void,:str],src:str,dst:str,rep:bit):bat[:void,:str] ",				  "STRbatSubstitutecst;"		  ]
[ "substitute",			  "command",	  "str",	  "(s:str,src:str,dst:str,rep:bit):str ",							  "STRSubstitute;"			  ]
[ "substring",			  "command",	  "str",	  "(s:str,start:int,len:int):str ",								  "STRsubstring;"			  ]
[ "substring",			  "command",	  "str",	  "(s:str,start:int):str ",									  "STRsubstringTail;"			  ]
[ "suffix",			  "command",	  "str",	  "(s:str,l:int):str ",										  "STRsuffix;"				  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:dbl],size:int,shift:int):bat[:any_2,:dbl] ",					  "GRPslidingsum_dbl;"			  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:dbl],size:int):bat[:any_2,:dbl] ",						  "GRPwindowsum_dbl;"			  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:dbl],e:bat[:any_2,:any_1]):bat[:any_2,:dbl] ",				  "GRPsum_dbl;"				  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:flt],size:int,shift:int):bat[:any_2,:flt] ",					  "GRPslidingsum_flt;"			  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:flt],size:int):bat[:any_2,:flt] ",						  "GRPwindowsum_flt;"			  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:flt],e:bat[:any_2,:any_1]):bat[:any_2,:flt] ",				  "GRPsum_flt;"				  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:lng],size:int,shift:int):bat[:any_2,:lng] ",					  "GRPslidingsum_lng;"			  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:lng],size:int):bat[:any_2,:lng] ",						  "GRPwindowsum_lng;"			  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:lng],e:bat[:any_2,:any_1]):bat[:any_2,:lng] ",				  "GRPsum_lng;"				  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:int],size:int,shift:int):bat[:any_2,:int] ",					  "GRPslidingsum_int;"			  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:int],size:int):bat[:any_2,:int] ",						  "GRPwindowsum_int;"			  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:int],e:bat[:any_2,:any_1]):bat[:any_2,:int] ",				  "GRPsum_int;"				  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:sht],size:int,shift:int):bat[:any_2,:sht] ",					  "GRPslidingsum_sht;"			  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:sht],size:int):bat[:any_2,:sht] ",						  "GRPwindowsum_sht;"			  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:sht],e:bat[:any_2,:any_1]):bat[:any_2,:sht] ",				  "GRPsum_sht;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:dbl],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:dbl] ",			  "AX3aggrX3_sum3_dbl_dbl;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:dbl],g:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:dbl] ",			  "AX3aggrX3_sum3_dbl_dbl;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:dbl],e:bat[:void,:any_1]):bat[:void,:dbl] ",					  "AX3aggrX3_sum_dbl_dbl;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:flt],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:dbl] ",			  "AX3aggrX3_sum3_flt_dbl;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:flt],g:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:dbl] ",			  "AX3aggrX3_sum3_flt_dbl;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:flt],e:bat[:void,:any_1]):bat[:void,:dbl] ",					  "AX3aggrX3_sum_flt_dbl;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:flt],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:flt] ",			  "AX3aggrX3_sum3_flt_flt;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:flt],g:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:flt] ",			  "AX3aggrX3_sum3_flt_flt;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:flt],e:bat[:void,:any_1]):bat[:void,:flt] ",					  "AX3aggrX3_sum_flt_flt;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:lng],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:lng] ",			  "AX3aggrX3_sum3_lng_lng;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:lng],g:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:lng] ",			  "AX3aggrX3_sum3_lng_lng;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:lng],e:bat[:void,:any_1]):bat[:void,:lng] ",					  "AX3aggrX3_sum_lng_lng;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:int],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:lng] ",			  "AX3aggrX3_sum3_int_lng;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:int],g:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:lng] ",			  "AX3aggrX3_sum3_int_lng;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:int],e:bat[:void,:any_1]):bat[:void,:lng] ",					  "AX3aggrX3_sum_int_lng;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:oid],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:int] ",			  "AX3aggrX3_sum3_oid_int;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:oid],g:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:int] ",			  "AX3aggrX3_sum3_oid_int;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:int] ",					  "AX3aggrX3_sum_oid_int;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:int],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:int] ",			  "AX3aggrX3_sum3_int_int;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:int],g:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:int] ",			  "AX3aggrX3_sum3_int_int;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:int],e:bat[:void,:any_1]):bat[:void,:int] ",					  "AX3aggrX3_sum_int_int;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:lng] ",			  "AX3aggrX3_sum3_sht_lng;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:lng] ",			  "AX3aggrX3_sum3_sht_lng;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:sht],e:bat[:void,:any_1]):bat[:void,:lng] ",					  "AX3aggrX3_sum_sht_lng;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:int] ",			  "AX3aggrX3_sum3_sht_int;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:int] ",			  "AX3aggrX3_sum3_sht_int;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:sht],e:bat[:void,:any_1]):bat[:void,:int] ",					  "AX3aggrX3_sum_sht_int;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:void,:any_1]):bat[:void,:sht] ",			  "AX3aggrX3_sum3_sht_sht;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:sht],g:bat[:void,:oid],e:bat[:oid,:any_1]):bat[:void,:sht] ",			  "AX3aggrX3_sum3_sht_sht;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:void,:sht],e:bat[:void,:any_1]):bat[:void,:sht] ",					  "AX3aggrX3_sum_sht_sht;"		  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:dbl]):dbl ",									  "ALGsum_dbl_dbl;"			  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:flt]):dbl ",									  "ALGsum_flt_dbl;"			  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:flt]):flt ",									  "ALGsum_flt_flt;"			  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:lng]):lng ",									  "ALGsum_lng_lng;"			  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:int]):lng ",									  "ALGsum_int_lng;"			  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:int]):int ",									  "ALGsum_int_int;"			  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:sht]):lng ",									  "ALGsum_sht_lng;"			  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:sht]):int ",									  "ALGsum_sht_int;"			  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:sht]):sht ",									  "ALGsum_sht_sht;"			  ]
[ "summary",			  "command",	  "manual",	  "():void ",											  "MANUALcreateSummary;"		  ]
[ "sunion",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",			  "ALGsunion;"				  ]
[ "sunique",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",							  "ALGsunique;"				  ]
[ "suspend",			  "command",	  "mserver",	  "():void ",											  "SERVERsuspend;"			  ]
[ "sync",			  "command",	  "transaction",  "():void ",											  "TRNglobal_sync;"			  ]
[ "table",			  "pattern",	  "io",		  "(order:int,b1:bat[:any_1,:any],b2:bat[:any_1,:any]...):int ",				  "IOtotable;"				  ]
[ "table",			  "pattern",	  "io",		  "(b1:bat[:any_1,:any],b2:bat[:any_1,:any]...):int ",						  "IOttable;"				  ]
[ "take",			  "command",	  "partitions",	  "(idx:int):bat[:void,:any_1] ",								  "BPTtake;"				  ]
[ "take",			  "pattern",	  "statistics",	  "(name:any_1):any_2 ",									  "STATtake;"				  ]
[ "take",			  "command",	  "pbm",	  "(grp:str,idx:int):bat[:any_1,:any_2] ",							  "PBMtakeIndexed;"			  ]
[ "take",			  "command",	  "pbm",	  "(grp:str,elm:str):bat[:any_1,:any_2] ",							  "PBMtake;"				  ]
[ "take",			  "pattern",	  "box",	  "(bnme:str,vnme:str):any_1 ",									  "BOXtake;"				  ]
[ "take",			  "pattern",	  "bbp",	  "(name:str):bat[:any_1,:any_2] ",								  "CMDbbptake;"				  ]
[ "take",			  "pattern",	  "const",	  "(name:str):any_1 ",										  "CSTtake;"				  ]
[ "tan",			  "command",	  "batmath",	  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",							  "CMDsciencevoid_tan;"			  ]
[ "tan",			  "command",	  "batmath",	  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",							  "CMDscience_tan;"			  ]
[ "tan",			  "command",	  "mmath",	  "(x:dbl):dbl ",										  "MATHunary_TANdbl;"			  ]
[ "tan",			  "command",	  "mmath",	  "(x:flt):flt ",										  "MATHunary_TANflt;"			  ]
[ "tanh",			  "command",	  "batmath",	  "(x:bat[:void,:dbl]):bat[:void,:dbl] ",							  "CMDsciencevoid_tanh;"		  ]
[ "tanh",			  "command",	  "batmath",	  "(x:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",							  "CMDscience_tanh;"			  ]
[ "tanh",			  "command",	  "mmath",	  "(x:dbl):dbl ",										  "MATHunary_TANHdbl;"			  ]
[ "tanh",			  "command",	  "mmath",	  "(x:flt):flt ",										  "MATHunary_TANHflt;"			  ]
[ "text",			  "command",	  "inet",	  "(_1:inet):str ",										  "INETtext;"				  ]
[ "thetajoin",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3],opname:int,estimate:lng):bat[:any_1,:any_3] ", "ALGthetajoinEstimate;"		  ]
[ "thetajoin",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3],opname:int):bat[:any_1,:any_3] ",		  "ALGthetajoin;"			  ]
[ "time",			  "command",	  "alarm",	  "():int ",											  "ALARMtime;"				  ]
[ "time_add_sec_interval",	  "command",	  "mtime",	  "(t:daytime,s:lng):daytime ",									  "MTIMEtime_add_sec_interval_wrap;"	  ]
[ "time_sub_sec_interval",	  "command",	  "mtime",	  "(t:daytime,s:lng):daytime ",									  "MTIMEtime_sub_sec_interval_wrap;"	  ]
[ "time_synonyms",		  "command",	  "mtime",	  "(allow:bit):void ",										  "MTIMEsynonyms;"			  ]
[ "timers",			  "command",	  "alarm",	  "():bat[:str,:str] ",										  "ALARMtimers;"			  ]
[ "timestamp",			  "command",	  "timezone",	  "(secs:int):timestamp ",									  "MTIMEtimestamp;"			  ]
[ "timestamp",			  "command",	  "timezone",	  "(s:str):timestamp ",										  "MTIMEtimestamp_fromstr;"		  ]
[ "timestamp",			  "command",	  "mtime",	  "(d:date,dt:daytime):timestamp ",								  "MTIMEtimestamp_create_default;"	  ]
[ "timestamp",			  "command",	  "mtime",	  "(d:date,dt:daytime,t:timezone):timestamp ",							  "MTIMEtimestamp_create;"		  ]
[ "timestamp",			  "command",	  "mtime",	  "(t:timestamp):timestamp ",									  "MTIMEtimestamp2timestamp;"		  ]
[ "timestamp_add_month_interval", "command",	  "mtime",	  "(t:timestamp,s:int):timestamp ",								  "MTIMEtimestamp_add_month_interval_wrap;"  ]
[ "timestamp_add_sec_interval",	  "command",	  "mtime",	  "(t:timestamp,s:lng):timestamp ",								  "MTIMEtimestamp_add_sec_interval_lng_wrap;"  ]
[ "timestamp_sub_month_interval", "command",	  "mtime",	  "(t:timestamp,s:int):timestamp ",								  "MTIMEtimestamp_sub_month_interval_wrap;"  ]
[ "timestamp_sub_sec_interval",	  "command",	  "mtime",	  "(t:timestamp,s:lng):timestamp ",								  "MTIMEtimestamp_sub_sec_interval_lng_wrap;"  ]
[ "timezone",			  "command",	  "mtime",	  "(mi:int,s:zrule,erule:zrule):timezone ",							  "MTIMEtzone_create_dst;"		  ]
[ "timezone",			  "command",	  "mtime",	  "(s:lng):timezone ",										  "MTIMEtzone_create;"			  ]
[ "timezone",			  "command",	  "mtime",	  "(s:int):timezone ",										  "MTIMEtzone_create;"			  ]
[ "timezone",			  "command",	  "mtime",	  "(s:str):timezone ",										  "MTIMEtzone_fromstr;"			  ]
[ "timezone_local",		  "command",	  "mtime",	  "():timezone ",										  "MTIMEtzone_get_local;"		  ]
[ "timezone_local",		  "command",	  "mtime",	  "(t:timezone):void ",										  "MTIMEtzone_set_local;"		  ]
[ "toLower",			  "command",	  "batstr",	  "(s:bat[:void,:str]):bat[:void,:str] ",							  "STRbatLower;"			  ]
[ "toLower",			  "command",	  "str",	  "(s:str):str ",										  "STRLower;"				  ]
[ "toString",			  "pattern",	  "partitions",	  "(idx:int):str ",										  "BPTtoString;"			  ]
[ "toString",			  "pattern",	  "statistics",	  "(name:any_1):str ",										  "STATtoString;"			  ]
[ "toString",			  "pattern",	  "box",	  "(bname:str,name:str):str ",									  "BOXtoString;"			  ]
[ "toString",			  "pattern",	  "bbp",	  "(name:str):str ",										  "CMDbbptoStr;"			  ]
[ "toString",			  "pattern",	  "const",	  "(name:any_1):str ",										  "CSTtoString;"			  ]
[ "toUpper",			  "command",	  "batstr",	  "(s:bat[:void,:str]):bat[:void,:str] ",							  "STRbatUpper;"			  ]
[ "toUpper",			  "command",	  "str",	  "(s:str):str ",										  "STRUpper;"				  ]
[ "toblob",			  "command",	  "blob",	  "(v:str):blob ",										  "BLOBtoblob;"				  ]
[ "topN",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],top:lng):bat[:any_1,:any_2] ",						  "ALGtopN;"				  ]
[ "topn_max",			  "command",	  "pqueue",	  "(t:bat[:void,:any_1],n:int):bat[:oid,:any_1] ",						  "PQtopn_voidanymax;"			  ]
[ "topn_max",			  "command",	  "pqueue",	  "(t:bat[:oid,:any_1],n:int):bat[:oid,:any_1] ",						  "PQtopn_anymax;"			  ]
[ "topn_max",			  "command",	  "pqueue",	  "(t:bat[:void,:dbl],n:int):bat[:oid,:dbl] ",							  "PQtopn_voiddblmax;"			  ]
[ "topn_max",			  "command",	  "pqueue",	  "(t:bat[:oid,:dbl],n:int):bat[:oid,:dbl] ",							  "PQtopn_dblmax;"			  ]
[ "topn_max",			  "command",	  "pqueue",	  "(t:bat[:void,:flt],n:int):bat[:oid,:flt] ",							  "PQtopn_voidfltmax;"			  ]
[ "topn_max",			  "command",	  "pqueue",	  "(t:bat[:oid,:flt],n:int):bat[:oid,:flt] ",							  "PQtopn_fltmax;"			  ]
[ "topn_max",			  "command",	  "pqueue",	  "(t:bat[:void,:lng],n:int):bat[:oid,:lng] ",							  "PQtopn_voidlngmax;"			  ]
[ "topn_max",			  "command",	  "pqueue",	  "(t:bat[:oid,:lng],n:int):bat[:oid,:lng] ",							  "PQtopn_lngmax;"			  ]
[ "topn_max",			  "command",	  "pqueue",	  "(t:bat[:void,:ptr],n:int):bat[:oid,:ptr] ",							  "PQtopn_voidptrmax;"			  ]
[ "topn_max",			  "command",	  "pqueue",	  "(t:bat[:oid,:ptr],n:int):bat[:oid,:ptr] ",							  "PQtopn_ptrmax;"			  ]
[ "topn_max",			  "command",	  "pqueue",	  "(t:bat[:void,:oid],n:int):bat[:oid,:oid] ",							  "PQtopn_voidoidmax;"			  ]
[ "topn_max",			  "command",	  "pqueue",	  "(t:bat[:oid,:oid],n:int):bat[:oid,:oid] ",							  "PQtopn_oidmax;"			  ]
[ "topn_max",			  "command",	  "pqueue",	  "(t:bat[:void,:int],n:int):bat[:oid,:int] ",							  "PQtopn_voidintmax;"			  ]
[ "topn_max",			  "command",	  "pqueue",	  "(t:bat[:oid,:int],n:int):bat[:oid,:int] ",							  "PQtopn_intmax;"			  ]
[ "topn_max",			  "command",	  "pqueue",	  "(t:bat[:void,:sht],n:int):bat[:oid,:sht] ",							  "PQtopn_voidshtmax;"			  ]
[ "topn_max",			  "command",	  "pqueue",	  "(t:bat[:oid,:sht],n:int):bat[:oid,:sht] ",							  "PQtopn_shtmax;"			  ]
[ "topn_max",			  "command",	  "pqueue",	  "(t:bat[:void,:chr],n:int):bat[:oid,:chr] ",							  "PQtopn_voidchrmax;"			  ]
[ "topn_max",			  "command",	  "pqueue",	  "(t:bat[:oid,:chr],n:int):bat[:oid,:chr] ",							  "PQtopn_chrmax;"			  ]
[ "topn_min",			  "command",	  "pqueue",	  "(t:bat[:void,:any_1],n:int):bat[:oid,:any_1] ",						  "PQtopn_voidanymin;"			  ]
[ "topn_min",			  "command",	  "pqueue",	  "(t:bat[:oid,:any_1],n:int):bat[:oid,:any_1] ",						  "PQtopn_anymin;"			  ]
[ "topn_min",			  "command",	  "pqueue",	  "(t:bat[:void,:dbl],n:int):bat[:oid,:dbl] ",							  "PQtopn_voiddblmin;"			  ]
[ "topn_min",			  "command",	  "pqueue",	  "(t:bat[:oid,:dbl],n:int):bat[:oid,:dbl] ",							  "PQtopn_dblmin;"			  ]
[ "topn_min",			  "command",	  "pqueue",	  "(t:bat[:void,:flt],n:int):bat[:oid,:flt] ",							  "PQtopn_voidfltmin;"			  ]
[ "topn_min",			  "command",	  "pqueue",	  "(t:bat[:oid,:flt],n:int):bat[:oid,:flt] ",							  "PQtopn_fltmin;"			  ]
[ "topn_min",			  "command",	  "pqueue",	  "(t:bat[:void,:lng],n:int):bat[:oid,:lng] ",							  "PQtopn_voidlngmin;"			  ]
[ "topn_min",			  "command",	  "pqueue",	  "(t:bat[:oid,:lng],n:int):bat[:oid,:lng] ",							  "PQtopn_lngmin;"			  ]
[ "topn_min",			  "command",	  "pqueue",	  "(t:bat[:void,:ptr],n:int):bat[:oid,:ptr] ",							  "PQtopn_voidptrmin;"			  ]
[ "topn_min",			  "command",	  "pqueue",	  "(t:bat[:oid,:ptr],n:int):bat[:oid,:ptr] ",							  "PQtopn_ptrmin;"			  ]
[ "topn_min",			  "command",	  "pqueue",	  "(t:bat[:void,:oid],n:int):bat[:oid,:oid] ",							  "PQtopn_voidoidmin;"			  ]
[ "topn_min",			  "command",	  "pqueue",	  "(t:bat[:oid,:oid],n:int):bat[:oid,:oid] ",							  "PQtopn_oidmin;"			  ]
[ "topn_min",			  "command",	  "pqueue",	  "(t:bat[:void,:int],n:int):bat[:oid,:int] ",							  "PQtopn_voidintmin;"			  ]
[ "topn_min",			  "command",	  "pqueue",	  "(t:bat[:oid,:int],n:int):bat[:oid,:int] ",							  "PQtopn_intmin;"			  ]
[ "topn_min",			  "command",	  "pqueue",	  "(t:bat[:void,:sht],n:int):bat[:oid,:sht] ",							  "PQtopn_voidshtmin;"			  ]
[ "topn_min",			  "command",	  "pqueue",	  "(t:bat[:oid,:sht],n:int):bat[:oid,:sht] ",							  "PQtopn_shtmin;"			  ]
[ "topn_min",			  "command",	  "pqueue",	  "(t:bat[:void,:chr],n:int):bat[:oid,:chr] ",							  "PQtopn_voidchrmin;"			  ]
[ "topn_min",			  "command",	  "pqueue",	  "(t:bat[:oid,:chr],n:int):bat[:oid,:chr] ",							  "PQtopn_chrmin;"			  ]
[ "topreplace_max",		  "pattern",	  "pqueue",	  "(h:bat[:oid,:any_1],id:oid,value:any_1):void ",						  "PQtopreplace_anymax;"		  ]
[ "topreplace_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:dbl],id:oid,value:dbl):void ",							  "PQtopreplace_dblmax;"		  ]
[ "topreplace_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:flt],id:oid,value:flt):void ",							  "PQtopreplace_fltmax;"		  ]
[ "topreplace_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:lng],id:oid,value:lng):void ",							  "PQtopreplace_lngmax;"		  ]
[ "topreplace_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:ptr],id:oid,value:ptr):void ",							  "PQtopreplace_ptrmax;"		  ]
[ "topreplace_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:oid],id:oid,value:oid):void ",							  "PQtopreplace_oidmax;"		  ]
[ "topreplace_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:int],id:oid,value:int):void ",							  "PQtopreplace_intmax;"		  ]
[ "topreplace_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:sht],id:oid,value:sht):void ",							  "PQtopreplace_shtmax;"		  ]
[ "topreplace_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:chr],id:oid,value:chr):void ",							  "PQtopreplace_chrmax;"		  ]
[ "topreplace_min",		  "pattern",	  "pqueue",	  "(h:bat[:oid,:any_1],id:oid,value:any_1):void ",						  "PQtopreplace_anymin;"		  ]
[ "topreplace_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:dbl],id:oid,value:dbl):void ",							  "PQtopreplace_dblmin;"		  ]
[ "topreplace_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:flt],id:oid,value:flt):void ",							  "PQtopreplace_fltmin;"		  ]
[ "topreplace_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:lng],id:oid,value:lng):void ",							  "PQtopreplace_lngmin;"		  ]
[ "topreplace_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:ptr],id:oid,value:ptr):void ",							  "PQtopreplace_ptrmin;"		  ]
[ "topreplace_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:oid],id:oid,value:oid):void ",							  "PQtopreplace_oidmin;"		  ]
[ "topreplace_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:int],id:oid,value:int):void ",							  "PQtopreplace_intmin;"		  ]
[ "topreplace_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:sht],id:oid,value:sht):void ",							  "PQtopreplace_shtmin;"		  ]
[ "topreplace_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:chr],id:oid,value:chr):void ",							  "PQtopreplace_chrmin;"		  ]
[ "tostr",			  "command",	  "lock",	  "(l:lock):void ",										  "lockToStr;"				  ]
[ "tostring",			  "command",	  "blob",	  "(v:blob,index:int):str ",									  "BLOBfromidx;"			  ]
[ "tostring",			  "command",	  "blob",	  "(v:blob):str ",										  "BLOBfromblob;"			  ]
[ "trace",			  "command",	  "mserver",	  "(mid:int,flag:int):void ",									  "SERVERtrace;"			  ]
[ "trim",			  "command",	  "batstr",	  "(s:bat[:void,:str]):bat[:void,:str] ",							  "STRbatStrip;"			  ]
[ "trim",			  "command",	  "str",	  "(s:str):str ",										  "STRStrip;"				  ]
[ "try",			  "command",	  "lock",	  "(l:lock):int ",										  "LCKtry;"				  ]
[ "tunique",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",							  "ALGtunique;"				  ]
[ "uhashsplit",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],buckets:int):bat[:int,:BAT] ",						  "ALGuhashsplit;"			  ]
[ "unicode",			  "command",	  "str",	  "(wchar:int):str ",										  "STRFromWChr;"			  ]
[ "unicodeAt",			  "command",	  "batstr",	  "(s:bat[:void,:str],index:int):bat[:void,:int] ",						  "STRbatWChrAtcst;"			  ]
[ "unicodeAt",			  "command",	  "batstr",	  "(s:bat[:void,:str],index:bat[:void,:int]):bat[:void,:int] ",					  "STRbatWChrAt;"			  ]
[ "unicodeAt",			  "command",	  "str",	  "(s:str,index:int):int ",									  "STRWChrAt;"				  ]
[ "union",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",			  "ALGsunion;"				  ]
[ "unique",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",							  "ALGsunique;"				  ]
[ "unix_epoch",			  "command",	  "timestamp",	  "():timestamp ",										  "MTIMEunix_epoch;"			  ]
[ "unload",			  "command",	  "bat",	  "(name:str):bit ",										  "BKCunload;"				  ]
[ "unpack",			  "pattern",	  "bat",	  "(b:bat[:void,:any_2]) (h:oid,t:any_2) ",							  "CMDbatunpack;"			  ]
[ "unpack",			  "pattern",	  "bat",	  "(b:bat[:any_1,:any_2]) (h:any_1,t:any_2) ",							  "CMDbatunpack;"			  ]
[ "unset",			  "command",	  "lock",	  "(l:lock):void ",										  "LCKunset;"				  ]
[ "up",				  "command",	  "sema",	  "(s:sema):void ",										  "SEMAup;"				  ]
[ "update",			  "command",	  "statistics",	  "():void ",											  "STATupdate;"				  ]
[ "url",			  "command",	  "url",	  "(s:str):url ",										  "URLnew;"				  ]
[ "usec",			  "command",	  "alarm",	  "():lng ",											  "ALARMusec;"				  ]
[ "uselect",			  "command",	  "crackers",	  "(b:bat[:any_1,:date],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:any_6,:void] ",			  "CRKuselectBounds_date;"		  ]
[ "uselect",			  "command",	  "crackers",	  "(b:bat[:any_1,:date],l:date):bat[:any_2,:void] ",						  "CRKuselectValue_date;"		  ]
[ "uselect",			  "command",	  "crackers",	  "(b:bat[:any_1,:date],l:date,h:date):bat[:any_2,:void] ",					  "CRKuselect_date;"			  ]
[ "uselect",			  "command",	  "crackers",	  "(b:bat[:any_1,:dbl],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:any_6,:void] ",			  "CRKuselectBounds_dbl;"		  ]
[ "uselect",			  "command",	  "crackers",	  "(b:bat[:any_1,:dbl],l:dbl):bat[:any_2,:void] ",						  "CRKuselectValue_dbl;"		  ]
[ "uselect",			  "command",	  "crackers",	  "(b:bat[:any_1,:dbl],l:dbl,h:dbl):bat[:any_2,:void] ",					  "CRKuselect_dbl;"			  ]
[ "uselect",			  "command",	  "crackers",	  "(b:bat[:any_1,:flt],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:any_6,:void] ",			  "CRKuselectBounds_flt;"		  ]
[ "uselect",			  "command",	  "crackers",	  "(b:bat[:any_1,:flt],l:flt):bat[:any_2,:void] ",						  "CRKuselectValue_flt;"		  ]
[ "uselect",			  "command",	  "crackers",	  "(b:bat[:any_1,:flt],l:flt,h:flt):bat[:any_2,:void] ",					  "CRKuselect_flt;"			  ]
[ "uselect",			  "command",	  "crackers",	  "(b:bat[:any_1,:lng],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:any_6,:void] ",			  "CRKuselectBounds_lng;"		  ]
[ "uselect",			  "command",	  "crackers",	  "(b:bat[:any_1,:lng],l:lng):bat[:any_2,:void] ",						  "CRKuselectValue_lng;"		  ]
[ "uselect",			  "command",	  "crackers",	  "(b:bat[:any_1,:lng],l:lng,h:lng):bat[:any_2,:void] ",					  "CRKuselect_lng;"			  ]
[ "uselect",			  "command",	  "crackers",	  "(b:bat[:any_1,:int],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:any_6,:void] ",			  "CRKuselectBounds_int;"		  ]
[ "uselect",			  "command",	  "crackers",	  "(b:bat[:any_1,:int],l:int):bat[:any_2,:void] ",						  "CRKuselectValue_int;"		  ]
[ "uselect",			  "command",	  "crackers",	  "(b:bat[:any_1,:int],l:int,h:int):bat[:any_2,:void] ",					  "CRKuselect_int;"			  ]
[ "uselect",			  "command",	  "crackers",	  "(b:bat[:any_1,:sht],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:any_6,:void] ",			  "CRKuselectBounds_sht;"		  ]
[ "uselect",			  "command",	  "crackers",	  "(b:bat[:any_1,:sht],l:sht):bat[:any_2,:void] ",						  "CRKuselectValue_sht;"		  ]
[ "uselect",			  "command",	  "crackers",	  "(b:bat[:any_1,:sht],l:sht,h:sht):bat[:any_2,:void] ",					  "CRKuselect_sht;"			  ]
[ "uselect",			  "command",	  "crackers",	  "(b:bat[:any_1,:chr],l:any_2,h:any_3,li:any_4,hi:any_5):bat[:any_6,:void] ",			  "CRKuselectBounds_chr;"		  ]
[ "uselect",			  "command",	  "crackers",	  "(b:bat[:any_1,:chr],l:chr):bat[:any_2,:void] ",						  "CRKuselectValue_chr;"		  ]
[ "uselect",			  "command",	  "crackers",	  "(b:bat[:any_1,:chr],l:chr,h:chr):bat[:any_2,:void] ",					  "CRKuselect_chr;"			  ]
[ "uselect",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],value:any_2):bat[:any_1,:void] ",					  "ALGuselect1;"			  ]
[ "uselect",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],low:any_2,high:any_2):bat[:any_1,:void] ",				  "ALGuselect;"				  ]
[ "uselect",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],low:any_2,high:any_2,li:bit,hi:bit):bat[:any_1,:void] ",		  "ALGuselectInclusive;"		  ]
[ "uselect",			  "command",	  "pcre",	  "(pat:str,strs:bat[:any_1,:str]):bat[:any_1,:void] ",						  "PCREuselect;"			  ]
[ "value",			  "command",	  "batcolor",	  "(c:bat[:void,:color]):bat[:void,:flt] ",							  "CLRbatValue;"			  ]
[ "value",			  "command",	  "batcolor",	  "(c:bat[:void,:color]):bat[:void,:int] ",							  "CLRbatValueInt;"			  ]
[ "value",			  "command",	  "color",	  "(c:color):flt ",										  "CLRvalue;"				  ]
[ "value",			  "command",	  "color",	  "(c:color):int ",										  "CLRvalueInt;"			  ]
[ "var",			  "pattern",	  "mdb",	  "(M:str,F:str):void ",									  "MDBvar3;"				  ]
[ "var",			  "pattern",	  "mdb",	  "():void ",											  "MDBvar;"				  ]
[ "vmStatistics",		  "command",	  "status",	  "(minsize:lng):bat[:str,:lng] ",								  "SYSvm_usage;"			  ]
[ "vm_cursize",			  "command",	  "status",	  "():lng ",											  "SYSgetvm_cursize;"			  ]
[ "vm_maxsize",			  "command",	  "status",	  "(v:lng):void ",										  "SYSsetvm_maxsize;"			  ]
[ "vm_maxsize",			  "command",	  "status",	  "():lng ",											  "SYSgetvm_maxsize;"			  ]
[ "void",			  "command",	  "calc",	  "(v:lng):void ",										  "CALClng2void;"			  ]
[ "void",			  "command",	  "calc",	  "(v:sht):void ",										  "CALCsht2void;"			  ]
[ "void",			  "command",	  "calc",	  "(v:int):void ",										  "CALCint2void;"			  ]
[ "void",			  "command",	  "calc",	  "(v:void):void ",										  "CALCnil2void;"			  ]
[ "weekday",			  "command",	  "mtime",	  "(t:zrule):int ",										  "MTIMErule_extract_weekday;"		  ]
[ "weekofyear",			  "command",	  "mtime",	  "(d:date):int ",										  "MTIMEdate_extract_weekofyear;"	  ]
[ "wildRetreat",		  "command",	  "sabaoth",	  "():void ",															  "SABAOTHwildRetreat;"				  ]
[ "writeInt",			  "command",	  "streams",	  "(s:streams,data:int):void ",									  "stream_writeIntwrap;"		  ]
[ "writeStr",			  "command",	  "streams",	  "(s:streams,data:str):void ",									  "stream_write_stringwrap;"		  ]
[ "xor",			  "command",	  "batcalc",	  "(b:bat[:void,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",					  "CMDbatXOR_lng_lng_lng;"		  ]
[ "xor",			  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:lng] ",					  "CMDbatXOR_lng_lng_lng;"		  ]
[ "xor",			  "command",	  "batcalc",	  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:lng] ",						  "CMDcstXORbat_lng_lng_lng;"		  ]
[ "xor",			  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:lng] ",						  "CMDbatXORcst_lng_lng_lng;"		  ]
[ "xor",			  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],cst:lng):void ",					  "CMDbataccumXORcst_lng_lng_lng;"	  ]
[ "xor",			  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],cst:lng,b:bat[:any_1,:lng]):void ",					  "CMDbataccumXORcst2_lng_lng_lng;"	  ]
[ "xor",			  "command",	  "batcalc",	  "(a:bat[:any_1,:lng],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):void ",				  "CMDbataccumXOR_lng_lng_lng;"		  ]
[ "xor",			  "command",	  "batcalc",	  "(b:bat[:void,:int],c:bat[:oid,:int]):bat[:oid,:int] ",					  "CMDbatXOR_int_int_int;"		  ]
[ "xor",			  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:int] ",					  "CMDbatXOR_int_int_int;"		  ]
[ "xor",			  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:int] ",						  "CMDcstXORbat_int_int_int;"		  ]
[ "xor",			  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:int] ",						  "CMDbatXORcst_int_int_int;"		  ]
[ "xor",			  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],cst:int):void ",					  "CMDbataccumXORcst_int_int_int;"	  ]
[ "xor",			  "command",	  "batcalc",	  "(a:bat[:any_1,:int],cst:int,b:bat[:any_1,:int]):void ",					  "CMDbataccumXORcst2_int_int_int;"	  ]
[ "xor",			  "command",	  "batcalc",	  "(a:bat[:any_1,:int],b:bat[:any_1,:int],c:bat[:any_1,:int]):void ",				  "CMDbataccumXOR_int_int_int;"		  ]
[ "xor",			  "command",	  "batcalc",	  "(b:bat[:void,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",					  "CMDbatXOR_sht_sht_sht;"		  ]
[ "xor",			  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:sht] ",					  "CMDbatXOR_sht_sht_sht;"		  ]
[ "xor",			  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:sht] ",						  "CMDcstXORbat_sht_sht_sht;"		  ]
[ "xor",			  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:sht] ",						  "CMDbatXORcst_sht_sht_sht;"		  ]
[ "xor",			  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],cst:sht):void ",					  "CMDbataccumXORcst_sht_sht_sht;"	  ]
[ "xor",			  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],cst:sht,b:bat[:any_1,:sht]):void ",					  "CMDbataccumXORcst2_sht_sht_sht;"	  ]
[ "xor",			  "command",	  "batcalc",	  "(a:bat[:any_1,:sht],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):void ",				  "CMDbataccumXOR_sht_sht_sht;"		  ]
[ "xor",			  "command",	  "batcalc",	  "(b:bat[:void,:oid],c:bat[:oid,:oid]):bat[:oid,:oid] ",					  "CMDbatXOR_oid_oid_oid;"		  ]
[ "xor",			  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:oid] ",					  "CMDbatXOR_oid_oid_oid;"		  ]
[ "xor",			  "command",	  "batcalc",	  "(cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:oid] ",						  "CMDcstXORbat_oid_oid_oid;"		  ]
[ "xor",			  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:oid] ",						  "CMDbatXORcst_oid_oid_oid;"		  ]
[ "xor",			  "command",	  "batcalc",	  "(a:bat[:any_1,:oid],b:bat[:any_1,:oid],cst:oid):void ",					  "CMDbataccumXORcst_oid_oid_oid;"	  ]
[ "xor",			  "command",	  "batcalc",	  "(a:bat[:any_1,:oid],cst:oid,b:bat[:any_1,:oid]):void ",					  "CMDbataccumXORcst2_oid_oid_oid;"	  ]
[ "xor",			  "command",	  "batcalc",	  "(a:bat[:any_1,:oid],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):void ",				  "CMDbataccumXOR_oid_oid_oid;"		  ]
[ "xor",			  "command",	  "calc",	  "(left:lng,right:lng):lng ",									  "CALCbinaryXORlnglng;"		  ]
[ "xor",			  "command",	  "calc",	  "(left:int,right:int):int ",									  "CALCbinaryXORintint;"		  ]
[ "xor",			  "command",	  "calc",	  "(left:sht,right:sht):sht ",									  "CALCbinaryXORshtsht;"		  ]
[ "xor",			  "command",	  "calc",	  "(left:chr,right:chr):chr ",									  "CALCbinaryXORchrchr;"		  ]
[ "xor",			  "command",	  "calc",	  "(left:bit,right:bit):bit ",									  "CALCbinaryXORbit;"			  ]
[ "ycc",			  "command",	  "color",	  "(y:int,cr:int,cb:int):color ",								  "CLRycc;"				  ]
[ "year",			  "command",	  "mtime",	  "(months:int):int ",										  "MTIMEsql_year;"			  ]
[ "year",			  "command",	  "mtime",	  "(t:timestamp):int ",										  "MTIMEtimestamp_year;"		  ]
[ "year",			  "command",	  "mtime",	  "(d:bat[:any_1,:date]):bat[:any_1,:int] ",							  "MTIMEdate_extract_year_bulk;"	  ]
[ "year",			  "command",	  "mtime",	  "(d:date):int ",										  "MTIMEdate_extract_year;"		  ]
[ "zcrackOrdered",		  "command",	  "crackers",	  "(b:bat[:oid,:dbl],low:dbl,hgh:dbl):bat[:oid,:dbl] ",						  "CRKcrackOrderedThree_dbl;"		  ]
[ "zcrackOrdered",		  "command",	  "crackers",	  "(b:bat[:oid,:dbl],mid:dbl):bat[:oid,:dbl] ",							  "CRKcrackOrderedZero_dbl;"		  ]
[ "zcrackOrdered",		  "command",	  "crackers",	  "(b:bat[:oid,:flt],low:flt,hgh:flt):bat[:oid,:flt] ",						  "CRKcrackOrderedThree_flt;"		  ]
[ "zcrackOrdered",		  "command",	  "crackers",	  "(b:bat[:oid,:flt],mid:flt):bat[:oid,:flt] ",							  "CRKcrackOrderedZero_flt;"		  ]
[ "zcrackOrdered",		  "command",	  "crackers",	  "(b:bat[:oid,:lng],low:lng,hgh:lng):bat[:oid,:lng] ",						  "CRKcrackOrderedThree_lng;"		  ]
[ "zcrackOrdered",		  "command",	  "crackers",	  "(b:bat[:oid,:lng],mid:lng):bat[:oid,:lng] ",							  "CRKcrackOrderedZero_lng;"		  ]
[ "zcrackOrdered",		  "command",	  "crackers",	  "(b:bat[:oid,:int],low:int,hgh:int):bat[:oid,:int] ",						  "CRKcrackOrderedThree_int;"		  ]
[ "zcrackOrdered",		  "command",	  "crackers",	  "(b:bat[:oid,:int],mid:int):bat[:oid,:int] ",							  "CRKcrackOrderedZero_int;"		  ]
[ "zcrackOrdered",		  "command",	  "crackers",	  "(b:bat[:oid,:sht],low:sht,hgh:sht):bat[:oid,:sht] ",						  "CRKcrackOrderedThree_sht;"		  ]
[ "zcrackOrdered",		  "command",	  "crackers",	  "(b:bat[:oid,:sht],mid:sht):bat[:oid,:sht] ",							  "CRKcrackOrderedZero_sht;"		  ]
[ "zcrackOrdered",		  "command",	  "crackers",	  "(b:bat[:oid,:chr],low:chr,hgh:chr):bat[:oid,:chr] ",						  "CRKcrackOrderedThree_chr;"		  ]
[ "zcrackOrdered",		  "command",	  "crackers",	  "(b:bat[:oid,:chr],mid:chr):bat[:oid,:chr] ",							  "CRKcrackOrderedZero_chr;"		  ]
[ "zcrackOrdered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:dbl],low:dbl,hgh:dbl):bit ",							  "CRKcrackOrderedThree_validate_dbl;"	  ]
[ "zcrackOrdered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:dbl],mid:dbl):bit ",								  "CRKcrackOrderedZero_validate_dbl;"	  ]
[ "zcrackOrdered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:flt],low:flt,hgh:flt):bit ",							  "CRKcrackOrderedThree_validate_flt;"	  ]
[ "zcrackOrdered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:flt],mid:flt):bit ",								  "CRKcrackOrderedZero_validate_flt;"	  ]
[ "zcrackOrdered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:lng],low:lng,hgh:lng):bit ",							  "CRKcrackOrderedThree_validate_lng;"	  ]
[ "zcrackOrdered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:lng],mid:lng):bit ",								  "CRKcrackOrderedZero_validate_lng;"	  ]
[ "zcrackOrdered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:int],low:int,hgh:int):bit ",							  "CRKcrackOrderedThree_validate_int;"	  ]
[ "zcrackOrdered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:int],mid:int):bit ",								  "CRKcrackOrderedZero_validate_int;"	  ]
[ "zcrackOrdered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:sht],low:sht,hgh:sht):bit ",							  "CRKcrackOrderedThree_validate_sht;"	  ]
[ "zcrackOrdered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:sht],mid:sht):bit ",								  "CRKcrackOrderedZero_validate_sht;"	  ]
[ "zcrackOrdered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:chr],low:chr,hgh:chr):bit ",							  "CRKcrackOrderedThree_validate_chr;"	  ]
[ "zcrackOrdered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:chr],mid:chr):bit ",								  "CRKcrackOrderedZero_validate_chr;"	  ]
[ "zcrackUnordered",		  "command",	  "crackers",	  "(b:bat[:oid,:date],low:date,hgh:date):bat[:oid,:date] ",					  "CRKcrackUnorderedThree_date;"	  ]
[ "zcrackUnordered",		  "command",	  "crackers",	  "(b:bat[:oid,:date],mid:date):bat[:oid,:date] ",						  "CRKcrackUnorderedZero_date;"		  ]
[ "zcrackUnordered",		  "command",	  "crackers",	  "(b:bat[:oid,:dbl],low:dbl,hgh:dbl):bat[:oid,:dbl] ",						  "CRKcrackUnorderedThree_dbl;"		  ]
[ "zcrackUnordered",		  "command",	  "crackers",	  "(b:bat[:oid,:dbl],mid:dbl):bat[:oid,:dbl] ",							  "CRKcrackUnorderedZero_dbl;"		  ]
[ "zcrackUnordered",		  "command",	  "crackers",	  "(b:bat[:oid,:flt],low:flt,hgh:flt):bat[:oid,:flt] ",						  "CRKcrackUnorderedThree_flt;"		  ]
[ "zcrackUnordered",		  "command",	  "crackers",	  "(b:bat[:oid,:flt],mid:flt):bat[:oid,:flt] ",							  "CRKcrackUnorderedZero_flt;"		  ]
[ "zcrackUnordered",		  "command",	  "crackers",	  "(b:bat[:oid,:lng],low:lng,hgh:lng):bat[:oid,:lng] ",						  "CRKcrackUnorderedThree_lng;"		  ]
[ "zcrackUnordered",		  "command",	  "crackers",	  "(b:bat[:oid,:lng],mid:lng):bat[:oid,:lng] ",							  "CRKcrackUnorderedZero_lng;"		  ]
[ "zcrackUnordered",		  "command",	  "crackers",	  "(b:bat[:oid,:int],low:int,hgh:int):bat[:oid,:int] ",						  "CRKcrackUnorderedThree_int;"		  ]
[ "zcrackUnordered",		  "command",	  "crackers",	  "(b:bat[:oid,:int],mid:int):bat[:oid,:int] ",							  "CRKcrackUnorderedZero_int;"		  ]
[ "zcrackUnordered",		  "command",	  "crackers",	  "(b:bat[:oid,:sht],low:sht,hgh:sht):bat[:oid,:sht] ",						  "CRKcrackUnorderedThree_sht;"		  ]
[ "zcrackUnordered",		  "command",	  "crackers",	  "(b:bat[:oid,:sht],mid:sht):bat[:oid,:sht] ",							  "CRKcrackUnorderedZero_sht;"		  ]
[ "zcrackUnordered",		  "command",	  "crackers",	  "(b:bat[:oid,:chr],low:chr,hgh:chr):bat[:oid,:chr] ",						  "CRKcrackUnorderedThree_chr;"		  ]
[ "zcrackUnordered",		  "command",	  "crackers",	  "(b:bat[:oid,:chr],mid:chr):bat[:oid,:chr] ",							  "CRKcrackUnorderedZero_chr;"		  ]
[ "zcrackUnordered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:dbl],low:dbl,hgh:dbl):bit ",							  "CRKcrackUnorderedThree_validate_dbl;"  ]
[ "zcrackUnordered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:dbl],mid:dbl):bit ",								  "CRKcrackUnorderedZero_validate_dbl;"	  ]
[ "zcrackUnordered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:flt],low:flt,hgh:flt):bit ",							  "CRKcrackUnorderedThree_validate_flt;"  ]
[ "zcrackUnordered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:flt],mid:flt):bit ",								  "CRKcrackUnorderedZero_validate_flt;"	  ]
[ "zcrackUnordered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:lng],low:lng,hgh:lng):bit ",							  "CRKcrackUnorderedThree_validate_lng;"  ]
[ "zcrackUnordered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:lng],mid:lng):bit ",								  "CRKcrackUnorderedZero_validate_lng;"	  ]
[ "zcrackUnordered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:int],low:int,hgh:int):bit ",							  "CRKcrackUnorderedThree_validate_int;"  ]
[ "zcrackUnordered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:int],mid:int):bit ",								  "CRKcrackUnorderedZero_validate_int;"	  ]
[ "zcrackUnordered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:sht],low:sht,hgh:sht):bit ",							  "CRKcrackUnorderedThree_validate_sht;"  ]
[ "zcrackUnordered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:sht],mid:sht):bit ",								  "CRKcrackUnorderedZero_validate_sht;"	  ]
[ "zcrackUnordered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:chr],low:chr,hgh:chr):bit ",							  "CRKcrackUnorderedThree_validate_chr;"  ]
[ "zcrackUnordered_validate",	  "command",	  "crackers",	  "(b:bat[:oid,:chr],mid:chr):bit ",								  "CRKcrackUnorderedZero_validate_chr;"	  ]

# 00:03:55 >  
# 00:03:55 >  Done.
# 00:03:55 >  

