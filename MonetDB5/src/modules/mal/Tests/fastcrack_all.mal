# The first reference case for fast cracking

include microbenchmark;
include crackers;

tuples:= 1; #67108864= 64* 1024*1024
tuples:= tuples * 1024;
tuples:= tuples * 1024;
values:= tuples;
io.printf(" tuples %d\n",tuples);
io.printf(" values %d\n",values);

b0:= microbenchmark.uniform(0@0,tuples,values);
size:= bat.getBatSize(b0);
io.printf(" BAT size %d\n",size);

n:=20;
nulls:= 0:lng;
select0:= 0:lng;
select1:= 0:lng;
sort:=0:lng;
t_Zero_00:=0:lng;
t_Zero_MK:=0:lng;
t_Zero_SI:=0:lng;
t_Zero_SM:=0:lng;
t_Zero_sm:=0:lng;
t_One_MK:=0:lng;
t_One_SI:=0:lng;
t_One_SM:=0:lng;
t_One_sm:=0:lng;
t_Two_MK:=0:lng;
t_Two_SI:=0:lng;
t_Two_SM:=0:lng;
t_Two_sm:=0:lng;
t_Three_00:=0:lng;
t_Three_MK:=0:lng;
t_Three_SI:=0:lng;
t_Three_SM:=0:lng;
t_Three_sm:=0:lng;
barrier (go,i):= (true,0);
	b0:= microbenchmark.uniform(0@0,tuples,values);
	mid:int:= mmath.rand();
	mid := mid % values;
	low:int:= mmath.rand();
	low := low % values;
	hgh:int:= mmath.rand();
	hgh := hgh % values;
	redo go := low>hgh;
	io.print(values,mid,low,hgh);

	io.print("sorted");
	b:=algebra.copy(b0);
t0:= alarm.usec();
	c:=algebra.select(b,nil:int,nil:int);
t1:= alarm.usec();
	time:= t1 - t0;
	nulls := nulls + time;
	io.print("Null select",time);

	b:=algebra.copy(b0);
t0:= alarm.usec();
	c:=algebra.sort(b);
t1:= alarm.usec();
	time:= t1 - t0;
	sort := sort + time;
	io.print("sorted",time);

	io.print("Select mid");
	b:=algebra.copy(b0);
t0:= alarm.usec();
	c:=algebra.select(b,mid);
t1:= alarm.usec();
	time:= t1 - t0;
	select0 := select0 + time;
	io.print("Select mid",time);

	io.print("Select low,hgh");
	b:=algebra.copy(b0);
t0:= alarm.usec();
	c:=algebra.select(b,low,hgh);
t1:= alarm.usec();
	time:= t1 - t0;
	select1 := select1 + time;
	io.print("Select low,hgh",time);


#	io.print("Zero_00");
#	b:=algebra.copy(b0);
#t0:= alarm.usec();
#	c:=crackers.crack(b,mid);
#t1:= alarm.usec();
#	time:= t1 - t0;
#	t_Zero_00 := t_Zero_00 + time;
#	v := crackers.zcrack_validate(c,mid);
#	io.print("Zero_00",time,v);
#	crackers.destroy(b);

	io.print("Zero_MK");
	b:=algebra.copy(b0);
t0:= alarm.usec();
	c:=crackers.zcrack_MK(b,mid);
t1:= alarm.usec();
	time:= t1 - t0;
	t_Zero_MK := t_Zero_MK + time;
	v := crackers.zcrack_validate(c,mid);
	io.print("Zero_MK",time,v);

#	io.print("Zero_SI");
#	b:=algebra.copy(b0);
#t0:= alarm.usec();
#	c:=crackers.zcrack_SI(b,mid);
#t1:= alarm.usec();
#	time:= t1 - t0;
#	t_Zero_SI := t_Zero_SI + time;
#	v := crackers.zcrack_validate(c,mid);
#	io.print("Zero_SI",time,v);

	io.print("Zero_SM");
	b:=algebra.copy(b0);
t0:= alarm.usec();
	c:=crackers.zcrack_SM(b,mid);
t1:= alarm.usec();
	time:= t1 - t0;
	t_Zero_SM := t_Zero_SM + time;
	v := crackers.zcrack_validate(c,mid);
	io.print("Zero_SM",time,v);

	io.print("Zero_sm");
	b:=algebra.copy(b0);
t0:= alarm.usec();
	c:=crackers.zcrack_sm(b,mid);
t1:= alarm.usec();
	time:= t1 - t0;
	t_Zero_sm := t_Zero_sm + time;
	v := crackers.zcrack_validate(c,mid);
	io.print("Zero_sm",time,v);


	io.print("One_MK");
	b:=algebra.copy(b0);
t0:= alarm.usec();
	c:=crackers.crack_MK(b,mid);
t1:= alarm.usec();
	time:= t1 - t0;
	t_One_MK := t_One_MK + time;
	v := crackers.crack_validate(c,mid);
	io.print("One_MK",time,v);

	io.print("One_SI");
	b:=algebra.copy(b0);
t0:= alarm.usec();
	c:=crackers.crack_SI(b,mid);
t1:= alarm.usec();
	time:= t1 - t0;
	t_One_SI := t_One_SI + time;
	v := crackers.crack_validate(c,mid);
	io.print("One_SI",time,v);

	io.print("One_SM");
	b:=algebra.copy(b0);
t0:= alarm.usec();
	c:=crackers.crack_SM(b,mid);
t1:= alarm.usec();
	time:= t1 - t0;
	t_One_SM := t_One_SM + time;
	v := crackers.crack_validate(c,mid);
	io.print("One_SM",time,v);

	io.print("One_sm");
	b:=algebra.copy(b0);
t0:= alarm.usec();
	c:=crackers.crack_sm(b,mid);
t1:= alarm.usec();
	time:= t1 - t0;
	t_One_sm := t_One_sm + time;
	v := crackers.crack_validate(c,mid);
	io.print("One_sm",time,v);


	io.print("Two_MK");
	b:=algebra.copy(b0);
t0:= alarm.usec();
	c:=crackers.crack_MK(b,low,hgh);
t1:= alarm.usec();
	time:= t1 - t0;
	t_Two_MK := t_Two_MK + time;
	v := crackers.crack_validate(c,low,hgh);
	io.print("Two_MK",time,v);

#	io.print("Two_SI");
#	b:=algebra.copy(b0);
#t0:= alarm.usec();
#	c:=crackers.crack_SI(b,low,hgh);
#t1:= alarm.usec();
#	time:= t1 - t0;
#	t_Two_SI := t_Two_SI + time;
#	v := crackers.crack_validate(c,low,hgh);
#	io.print("Two_SI",time,v);

	io.print("Two_SM");
	b:=algebra.copy(b0);
t0:= alarm.usec();
	c:=crackers.crack_SM(b,low,hgh);
t1:= alarm.usec();
	time:= t1 - t0;
	t_Two_SM := t_Two_SM + time;
	v := crackers.crack_validate(c,low,hgh);
	io.print("Two_SM",time,v);

	io.print("Two_sm");
	b:=algebra.copy(b0);
t0:= alarm.usec();
	c:=crackers.crack_sm(b,low,hgh);
t1:= alarm.usec();
	time:= t1 - t0;
	t_Two_sm := t_Two_sm + time;
	v := crackers.crack_validate(c,low,hgh);
	io.print("Two_sm",time,v);

	values:int:= mmath.rand();
	values:= values % tuples;
	values:= values + 1;


#	io.print("Three_00");
#	b:=algebra.copy(b0);
#t0:= alarm.usec();
#	c:=crackers.crack(b,low,hgh);
#t1:= alarm.usec();
#	time:= t1 - t0;
#	t_Three_00 := t_Three_00 + time;
#	v := crackers.crack_validate(c,low,hgh);
#	io.print("Three_00",time,v);
#	crackers.destroy(b);

#	io.print("Three_MK");
#	b:=algebra.copy(b0);
#t0:= alarm.usec();
#	c:=crackers.crack_MK(b,low,hgh);
#t1:= alarm.usec();
#	time:= t1 - t0;
#	t_Three_MK := t_Three_MK + time;
#	v := crackers.crack_validate(c,low,hgh);
#	io.print("Three_MK",time,v);

#	io.print("Three_SI");
#	b:=algebra.copy(b0);
#t0:= alarm.usec();
#	c:=crackers.crack_SI(b,low,hgh);
#t1:= alarm.usec();
#	time:= t1 - t0;
#	t_Three_SI := t_Three_SI + time;
#	v := crackers.crack_validate(c,low,hgh);
#	io.print("Three_SI",time,v);

	io.print("Three_SM");
	b:=algebra.copy(b0);
t0:= alarm.usec();
	c:=crackers.crack_SM(b,low,hgh);
t1:= alarm.usec();
	time:= t1 - t0;
	t_Three_SM := t_Three_SM + time;
	v := crackers.crack_validate(c,low,hgh);
	io.print("Three_SM",time,v);

	io.print("Three_sm");
	b:=algebra.copy(b0);
t0:= alarm.usec();
	c:=crackers.crack_sm(b,low,hgh);
t1:= alarm.usec();
	time:= t1 - t0;
	t_Three_sm := t_Three_sm + time;
	v := crackers.crack_validate(c,low,hgh);
	io.print("Three_sm",time,v);

	values:int:= mmath.rand();
	values:= values % tuples;
	values:= values + 1;

	redo (go,i):= mal.nextElement(1,n);
exit (go,i);

io.print("");
t_ := nulls / n;
io.print("Null select",t_);
t_ := select0 / n;
io.print("Select mid ",t_);
t_ := select1 / n;
io.print("Select low,hgh ",t_);
t_ := sort / n;
io.print("Sort",t_);
t_ := t_Zero_00 / n;
io.print("Zero_00",t_);
t_ := t_Zero_MK / n;
io.print("Zero_MK",t_);
t_ := t_Zero_SI / n;
io.print("Zero_SI",t_);
t_ := t_Zero_SM / n;
io.print("Zero_SM",t_);
t_ := t_Zero_sm / n;
io.print("Zero_sm",t_);
t_ := t_One_MK / n;
io.print("One_MK",t_);
t_ := t_One_SI / n;
io.print("One_SI",t_);
t_ := t_One_SM / n;
io.print("One_SM",t_);
t_ := t_One_sm / n;
io.print("One_sm",t_);
t_ := t_Two_MK / n;
io.print("Two_MK",t_);
t_ := t_Two_SI / n;
io.print("Two_SI",t_);
t_ := t_Two_SM / n;
io.print("Two_SM",t_);
t_ := t_Two_sm / n;
io.print("Two_sm",t_);
t_ := t_Three_00 / n;
io.print("Three_00",t_);
t_ := t_Three_MK / n;
io.print("Three_MK",t_);
t_ := t_Three_SI / n;
io.print("Three_SI",t_);
t_ := t_Three_SM / n;
io.print("Three_SM",t_);
t_ := t_Three_sm / n;
io.print("Three_sm",t_);
