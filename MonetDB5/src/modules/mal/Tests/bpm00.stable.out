stdout of test 'bpm00` in directory 'src/modules/mal` itself:


# 08:03:50 >  
# 08:03:50 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=39490 --set xrpc_port=49449 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  bpm00.mal
# 08:03:50 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information
##testing the BAT partition manager
#R := bat.new(:oid,:int);
#bat.append(R,1);
#bat.append(R,3);
#bat.append(R,5);
#bat.append(R,7);
#bat.append(R,11);
#
#function user.pr(Ra:bat[:any_1,:any_2]):void;
#barrier Rp:= bpm.newIterator(Ra);
#	io.print(Rp);
#	redo Rp:= bpm.hasMoreElements(Ra);
#exit Rp;
#end pr;
function user.pr(Ra:bat[:any_1,:any_2]):void;	# 0  (pr:void)<-(Ra:bat[:any_1,:any_2])
barrier Rp := bpm.newIterator(Ra);	# 1 BPMnewIterator (Rp:bat[:any,:any])<-(Ra:bat[:any_1,:any_2]) jump 4
    io.print(Rp);	# 2 IOprint_val (_3:void)<-(Rp:bat[:any,:any])
    redo Rp := bpm.hasMoreElements(Ra);	# 3 BPMhasMoreElements (Rp:bat[:any,:any])<-(Ra:bat[:any_1,:any_2]) jump 2
exit Rp;	# 4  (Rp:bat[:any,:any])
end pr;	# 5  
#
## add the stuff to the BPM and dump it
#Ra:= bpm.deposit("myR",R);
#user.pr(Ra);
#
#io.print("Partition it into two ranges");
#bpm.partition(Ra,6);
#bpm.dump(Ra);
#user.pr(Ra);
#
#Rrev:= bat.reverse(Ra);
#io.print("Repartition it further into oid ranges");
#bpm.partition(Rrev,1@0);
## we should have 4 partitions
#bpm.dump(Ra);
#user.pr(Ra);
#bpm.discard(Ra);
#
function user.main():void;	# 0  (main:void)
#testing the BAT partition manager 	# 1  (_1:str)
    R := bat.new(:oid,:int);	# 2 CMDBATnew (R:bat[:oid,:int])<-(_3:oid)(_4:int)
    bat.append(R,1);	# 3 BKCappend_val_wrap (_5:void)<-(R:bat[:oid,:int])(_6:int)
    bat.append(R,3);	# 4 BKCappend_val_wrap (_7:void)<-(R:bat[:oid,:int])(_8:int)
    bat.append(R,5);	# 5 BKCappend_val_wrap (_9:void)<-(R:bat[:oid,:int])(_10:int)
    bat.append(R,7);	# 6 BKCappend_val_wrap (_11:void)<-(R:bat[:oid,:int])(_12:int)
    bat.append(R,11);	# 7 BKCappend_val_wrap (_13:void)<-(R:bat[:oid,:int])(_14:int)
# add the stuff to the BPM and dump it 	# 8  (_15:str)
    Ra := bpm.deposit("myR",R);	# 9 BPMdeposit (Ra:bat[:oid,:int])<-(_17:str)(R:bat[:oid,:int])
    user.pr(Ra);	# 10  (_18:void)<-(Ra:bat[:oid,:int])
    io.print("Partition it into two ranges");	# 11 IOprint_val (_19:void)<-(_20:str)
    bpm.partition(Ra,6);	# 12 BPMsplitpartition (_21:void)<-(Ra:bat[:oid,:int])(_22:int)
    bpm.dump(Ra);	# 13 BPMdumpAlias (_23:void)<-(Ra:bat[:oid,:int])
    user.pr(Ra);	# 14  (_24:void)<-(Ra:bat[:oid,:int])
    Rrev := bat.reverse(Ra);	# 15 BKCreverse (Rrev:bat[:int,:oid])<-(Ra:bat[:oid,:int])
    io.print("Repartition it further into oid ranges");	# 16 IOprint_val (_26:void)<-(_27:str)
    bpm.partition(Rrev,1@0);	# 17 BPMsplitpartition (_28:void)<-(Rrev:bat[:int,:oid])(_29:oid)
# we should have 4 partitions 	# 18  (_30:str)
    bpm.dump(Ra);	# 19 BPMdumpAlias (_31:void)<-(Ra:bat[:oid,:int])
    user.pr(Ra);	# 20  (_32:void)<-(Ra:bat[:oid,:int])
    bpm.discard(Ra);	# 21 BPMdiscard (_33:void)<-(Ra:bat[:oid,:int])
end main;	# 22  
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  3	  ]
[ 2@0,	  5	  ]
[ 3@0,	  7	  ]
[ 4@0,	  11	  ]
[ "Partition it into two ranges" ]
partition: myR alias 11 bid 12 bits 0 0 h nil - nil t nil - 6 nxt 13 prv 11 cnt 3
partition: myR alias 11 bid 13 bits 0 0 h nil - nil t 6 - nil nxt 11 prv 12 cnt 2
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  3	  ]
[ 2@0,	  5	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 3@0,	  7	  ]
[ 4@0,	  11	  ]
[ "Repartition it further into oid ranges" ]
partition: myR alias 11 bid 12 bits 0 0 h nil - 1 t nil - 6 nxt 15 prv 11 cnt 1
partition: myR alias 11 bid 15 bits 0 0 h 1 - nil t nil - 6 nxt 13 prv 12 cnt 2
partition: myR alias 11 bid 13 bits 0 0 h nil - 1 t 6 - nil nxt 17 prv 15 cnt 0
partition: myR alias 11 bid 17 bits 0 0 h 1 - nil t 6 - nil nxt 11 prv 13 cnt 2
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  1	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 1@0,	  3	  ]
[ 2@0,	  5	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 3@0,	  7	  ]
[ 4@0,	  11	  ]

# 08:03:50 >  
# 08:03:50 >  Done.
# 08:03:50 >  

