stdout of test 'rsbox01` in directory 'src/modules/mal` itself:


# 00:03:58 >  
# 00:03:58 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=33330 --set sql_port=49911 --set xquery_port=56575 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  rsbox01.mal </dev/null
# 00:03:58 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information.
### Test ResultSet on reusability using equal typed BATs
#
#include rsbox;
#
#rs := rsbox.create(1, 't');
#
#resultset.setProperty(rs, 1, "name", "the_column");
#resultset.setProperty(rs, 1, "table", "table1");
#resultset.setProperty(rs, 1, "schema", "sys");
#
#b1 := bbp.new(:void, :str);
#bat.insert(b1, nil, "test1");
#bat.insert(b1, nil, "test2");
#bat.insert(b1, nil, nil:str);
#bat.insert(b1, nil, "values");
#bat.insert(b1, nil, "whatever");
#
#resultset.populateColumn(rs, 1, b1);
#
#resultset.writeNextPart(rs);
#
#
#b1 := bbp.new(:void, :str);
#bat.insert(b1, nil, "Daft Punk - Human After All");
#bat.insert(b1, nil, "Spinvis - Spinvis");
#bat.insert(b1, nil, "Within Temptation - The Silent Force");
#bat.insert(b1, nil, "Anouk - Together Alone");
#bat.insert(b1, nil, "Armiral Freebee - Admiral Freebee");
#bat.insert(b1, nil, "Lais - Douce Victime");
#bat.insert(b1, nil, "Hooverphonic - Sit Down and Listen To...");
#bat.insert(b1, nil, "Osdorp Posse - Tegenstrijd");
#bat.insert(b1, nil, "MC Wigger & DJ Wanna-B - Fuck Osdorp");
#
#resultset.dePopulate(rs);
#resultset.populateColumn(rs, 1, b1);
#
#resultset.writeNextPart(rs);
#
#rsbox.release(rs);
#
function user.main():void;	# 0  (main:void)
## Test ResultSet on reusability using equal typed BATs 	# 1  (_1:str)
# ResultSets themselves should never be serialised to disk.  The 	# 2  (_2:str)
# fromStr and toStr functions merely exist to adhere to the interface 	# 3  (_3:str)
    rs := rsbox.create(1,'t');	# 4 RSBcreate (rs:resultset)<-(_5:int)(_6:chr)
    resultset.setProperty(rs,1,"name","the_column");	# 5 RSsetPropertyStr (_7:resultset)<-(rs:resultset)(_5:int)(_8:str)(_9:str)
    resultset.setProperty(rs,1,"table","table1");	# 6 RSsetPropertyStr (_10:resultset)<-(rs:resultset)(_5:int)(_11:str)(_12:str)
    resultset.setProperty(rs,1,"schema","sys");	# 7 RSsetPropertyStr (_13:resultset)<-(rs:resultset)(_5:int)(_14:str)(_15:str)
    b1 := bat.new(:void,:str);	# 8 CMDBATnew (b1:bat[:void,:str])<-(_17:void)(_18:str)
    bat.insert(b1,nil:void,"test1");	# 9 BKCinsert_bun (_19:void)<-(b1:bat[:void,:str])(_20:void)(_21:str)
    bat.insert(b1,nil:void,"test2");	# 10 BKCinsert_bun (_22:void)<-(b1:bat[:void,:str])(_20:void)(_23:str)
    bat.insert(b1,nil:void,nil:str);	# 11 BKCinsert_bun (_24:void)<-(b1:bat[:void,:str])(_20:void)(_25:str)
    bat.insert(b1,nil:void,"values");	# 12 BKCinsert_bun (_26:void)<-(b1:bat[:void,:str])(_20:void)(_27:str)
    bat.insert(b1,nil:void,"whatever");	# 13 BKCinsert_bun (_28:void)<-(b1:bat[:void,:str])(_20:void)(_29:str)
    resultset.populateColumn(rs,1,b1);	# 14 RSpopulateColumn (_30:resultset)<-(rs:resultset)(_5:int)(b1:bat[:void,:str])
    resultset.writeNextPart(rs);	# 15 RSwriteNextPart (_31:int)<-(rs:resultset)
    b1 := bat.new(:void,:str);	# 16 CMDBATnew (b1:bat[:void,:str])<-(_17:void)(_32:str)
    bat.insert(b1,nil:void,"Daft Punk - Human After All");	# 17 BKCinsert_bun (_33:void)<-(b1:bat[:void,:str])(_20:void)(_34:str)
    bat.insert(b1,nil:void,"Spinvis - Spinvis");	# 18 BKCinsert_bun (_35:void)<-(b1:bat[:void,:str])(_20:void)(_36:str)
    bat.insert(b1,nil:void,"Within Temptation - The Silent Force");	# 19 BKCinsert_bun (_37:void)<-(b1:bat[:void,:str])(_20:void)(_38:str)
    bat.insert(b1,nil:void,"Anouk - Together Alone");	# 20 BKCinsert_bun (_39:void)<-(b1:bat[:void,:str])(_20:void)(_40:str)
    bat.insert(b1,nil:void,"Armiral Freebee - Admiral Freebee");	# 21 BKCinsert_bun (_41:void)<-(b1:bat[:void,:str])(_20:void)(_42:str)
    bat.insert(b1,nil:void,"Lais - Douce Victime");	# 22 BKCinsert_bun (_43:void)<-(b1:bat[:void,:str])(_20:void)(_44:str)
    bat.insert(b1,nil:void,"Hooverphonic - Sit Down and Listen To...");	# 23 BKCinsert_bun (_45:void)<-(b1:bat[:void,:str])(_20:void)(_46:str)
    bat.insert(b1,nil:void,"Osdorp Posse - Tegenstrijd");	# 24 BKCinsert_bun (_47:void)<-(b1:bat[:void,:str])(_20:void)(_48:str)
    bat.insert(b1,nil:void,"MC Wigger & DJ Wanna-B - Fuck Osdorp");	# 25 BKCinsert_bun (_49:void)<-(b1:bat[:void,:str])(_20:void)(_50:str)
    resultset.dePopulate(rs);	# 26 RSdePopulate (_51:resultset)<-(rs:resultset)
    resultset.populateColumn(rs,1,b1);	# 27 RSpopulateColumn (_52:resultset)<-(rs:resultset)(_53:int)(b1:bat[:void,:str])
    resultset.writeNextPart(rs);	# 28 RSwriteNextPart (_54:int)<-(rs:resultset)
    rsbox.release(rs);	# 29 RSBdelete (_55:void)<-(rs:resultset)
end main;	# 30  
&t
$id	1
$columncount	1
$tuplecount	5
$ctype	S
%column	the_column
%table	table1
%schema	sys
%type	varchar
%digits	
%scale	
%width	8
[5:test1
[5:test2
[NULL
[6:values
[8:whatever
&t
$id	2
$columncount	1
$tuplecount	9
$ctype	S
%column	the_column
%table	table1
%schema	sys
%type	varchar
%digits	
%scale	
%width	40
[27:Daft Punk - Human After All
[17:Spinvis - Spinvis
[36:Within Temptation - The Silent Force
[22:Anouk - Together Alone
[33:Armiral Freebee - Admiral Freebee
[20:Lais - Douce Victime
[40:Hooverphonic - Sit Down and Listen To...
[26:Osdorp Posse - Tegenstrijd
[36:MC Wigger & DJ Wanna-B - Fuck Osdorp

# 00:03:58 >  
# 00:03:58 >  Done.
# 00:03:58 >  

