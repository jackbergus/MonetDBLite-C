stdout of test 'crackers05` in directory 'src/modules/mal` itself:


# 00:03:54 >  
# 00:03:54 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=33330 --set sql_port=49911 --set xquery_port=56575 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  crackers05.mal </dev/null
# 00:03:54 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information.
## Testing the cracker implementation
#b:= bbp.new(:int,:int);
#bat.insert(b,10,100);
#bat.insert(b,1,2);
#bat.insert(b,6,36);
#bat.insert(b,5,25);
#bat.insert(b,2,4);
#bat.insert(b,3,9);
#bat.insert(b,7,49);
#bat.insert(b,8,64);
#bat.insert(b,4,16);
#bat.insert(b,9,81);
#
#crackers.new(b);
#crackers.crack(b,9,25);
#crackers.crack(b,80,195);
#crackers.crack(b,2,2);
#
#barrier (i,view) := crackers.newIterator(b);
#	io.print(view);
#	redo (i,view) := crackers.hasMoreElements(b);
#exit;
#
#crackers.drop(b);
#
function user.main():int;	# 0  (main:int)
# Testing the cracker implementation 	# 1  (_2:str)
    b := bat.new(:int,:int);	# 2 CMDBATnew (b:bat[:int,:int])<-(_4:int)(_4:int)
    bat.insert(b,10,100);	# 3 BKCinsert_bun_int_int (_5:void)<-(b:bat[:int,:int])(_6:int)(_7:int)
    bat.insert(b,1,2);	# 4 BKCinsert_bun_int_int (_8:void)<-(b:bat[:int,:int])(_9:int)(_10:int)
    bat.insert(b,6,36);	# 5 BKCinsert_bun_int_int (_11:void)<-(b:bat[:int,:int])(_12:int)(_13:int)
    bat.insert(b,5,25);	# 6 BKCinsert_bun_int_int (_14:void)<-(b:bat[:int,:int])(_15:int)(_16:int)
    bat.insert(b,2,4);	# 7 BKCinsert_bun_int_int (_17:void)<-(b:bat[:int,:int])(_10:int)(_18:int)
    bat.insert(b,3,9);	# 8 BKCinsert_bun_int_int (_19:void)<-(b:bat[:int,:int])(_20:int)(_21:int)
    bat.insert(b,7,49);	# 9 BKCinsert_bun_int_int (_22:void)<-(b:bat[:int,:int])(_23:int)(_24:int)
    bat.insert(b,8,64);	# 10 BKCinsert_bun_int_int (_25:void)<-(b:bat[:int,:int])(_26:int)(_27:int)
    bat.insert(b,4,16);	# 11 BKCinsert_bun_int_int (_28:void)<-(b:bat[:int,:int])(_18:int)(_29:int)
    bat.insert(b,9,81);	# 12 BKCinsert_bun_int_int (_30:void)<-(b:bat[:int,:int])(_21:int)(_31:int)
    crackers.new(b);	# 13 CRKnew (_32:void)<-(b:bat[:int,:int])
    crackers.crack(b,9,25);	# 14 CRKcrackRange (_33:int)<-(b:bat[:int,:int])(_21:int)(_16:int)
    crackers.crack(b,80,195);	# 15 CRKcrackRange (_34:int)<-(b:bat[:int,:int])(_35:int)(_36:int)
    crackers.crack(b,2,2);	# 16 CRKcrackRange (_37:int)<-(b:bat[:int,:int])(_10:int)(_10:int)
barrier (i,view):= crackers.newIterator(b);	# 17 CRKnewIterator (i:lng)(view:bat[:int,:int])<-(b:bat[:int,:int]) jump 20
    io.print(view);	# 18 IOprint_val (_40:int)<-(view:bat[:int,:int])
    redo (i,view):= crackers.hasMoreElements(b);	# 19 CRKhasMoreElements (i:lng)(view:bat[:int,:int])<-(b:bat[:int,:int]) jump 18
exit i;	# 20  (i:lng)
    crackers.drop(b);	# 21 CRKdropPiece (_42:void)<-(b:bat[:int,:int])
end main;	# 22  
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  9	  ]
[ 5,	  25	  ]
[ 4,	  16	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 10,	  100	  ]
[ 9,	  81	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  4	  ]

# 00:03:54 >  
# 00:03:54 >  Done.
# 00:03:54 >  

