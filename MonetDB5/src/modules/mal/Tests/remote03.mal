# let connect figure out itself how to connect to the running db
db := const.take("dbname");
conn:str := remote.connect(db, "monetdb", "monetdb");

# this is invalid, as io.print is an invalid module, and bla will be
# taken as function
f:str := remote.exec(conn, "io.print", "bla");
catch MALException:str;
	io.print("Received an error from the remote site");
	# exception contains a random id, so make it a warning
	io.printf("#!%s\n", MALException);
exit MALException;

# now do it with a function that returns something (a BAT in this case)
b:str := remote.exec(conn, "inspect", "getAtomNames");
catch MALException:str;
	io.print("Received second error from the remote site");
	io.printf(MALException);
exit MALException;
c:bat[:int,:str] := remote.get(conn, b);
io.print(c);
catch MALException:str;
	io.print("Received third error from the remote site");
	io.printf(MALException);
exit MALException;

# io.print only outputs things, but returns nothing
a:str := remote.exec(conn, "io", "print", b);
catch MALException:str;
	io.print("Received fourth error from the remote site");
	io.printf(MALException);
exit MALException;
d:void := remote.get(conn, a);
io.print(d);
catch MALException:str;
	io.print("Received fifth error from the remote site");
	io.printf(MALException);
exit MALException;

# help testweb a bit, since currently no cleanup is done on server
# shutdown
remote.disconnect(conn);
