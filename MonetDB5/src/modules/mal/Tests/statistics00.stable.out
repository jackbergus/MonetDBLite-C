stdout of test 'statistics00` in directory 'src/modules/mal` itself:


# 21:02:28 >  
# 21:02:28 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=32174 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  statistics00.mal < /dev/null
# 21:02:28 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information
## Testing the statistics table
#
#b:= bat.new(:int,:int);
#bat.insert(b,1,2);
#bat.setName(b,"dummy");
#
#statistics.open();
#statistics.dump();
## add the bat to the statistics table
#statistics.deposit(b);
#statistics.update();
#statistics.discard("dummy");
#
#m:= statistics.getMin("dummy");
#io.print(m);
#catch MALException:str;
#	io.print(MALException);
#	io.print("could not get minimum from dummy");
#exit MALException;
#
#mx:= statistics.getMax("dummy");
#io.print(mx);
#catch MALException:str;
#	io.print(MALException);
#	io.print("could not get maximum from dummy");
#exit MALException;
#
#
#statistics.dump();
#
function user.main():void;	# 0  (main:void)
# Testing the statistics table 	# 1  (_1:str)
    b := bat.new(:int,:int);	# 2 CMDBATnew (b:bat[:int,:int])<-(_3:int)(_3:int)
    bat.insert(b,1,2);	# 3 BKCinsert_bun (_4:void)<-(b:bat[:int,:int])(_5:int)(_6:int)
    bat.setName(b,"dummy");	# 4 BKCsetName (_7:void)<-(b:bat[:int,:int])(_8:str)
    statistics.open();	# 5 STATopen (_9:void)
    statistics.dump();	# 6 STATdump (_10:void)
# add the bat to the statistics table 	# 7  (_11:str)
    statistics.deposit(b);	# 8 STATdeposit (_12:void)<-(b:bat[:int,:int])
    statistics.update();	# 9 STATupdate (_13:void)
    m := statistics.getMin("dummy");	# 10 STATgetMin (m:lng)<-(_8:str)
    io.print(m);	# 11 IOprint_val (_15:void)<-(m:lng)
catch MALException:str ;	# 12  (MALException:str) jump 15
    io.print(MALException);	# 13 IOprint_val (_17:void)<-(MALException:str)
    io.print("could not get minimum from dummy");	# 14 IOprint_val (_18:void)<-(_19:str)
exit MALException:str ;	# 15  (MALException:str)
    mx := statistics.getMax("dummy");	# 16 STATgetMax (mx:lng)<-(_8:str)
    io.print(mx);	# 17 IOprint_val (_21:void)<-(mx:lng)
catch MALException:str ;	# 18  (MALException:str) jump 21
    io.print(MALException);	# 19 IOprint_val (_22:void)<-(MALException:str)
    io.print("could not get maximum from dummy");	# 20 IOprint_val (_23:void)<-(_24:str)
exit MALException:str ;	# 21  (MALException:str)
    statistics.discard("dummy");	# 22 STATdiscard (_25:void)<-(_8:str)
    statistics.dump();	# 23 STATdump (_26:void)
end main;	# 24  
#-------------------------------------------------#
# t	t	t	t	t	t	  # name
# str	lng	lng	lng	lng	str	  # type
#-------------------------------------------------#
[ 2 ]
[ 2 ]
#-----------------------------------------------------------------#
# t		t	t	t	t	t		  # name
# str		lng	lng	lng	lng	str		  # type
#-------------------------------------------------#

# 21:02:28 >  
# 21:02:28 >  Done.
# 21:02:28 >  

