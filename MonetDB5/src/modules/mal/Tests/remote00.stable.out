stdout of test 'remote00` in directory 'src/modules/mal` itself:


# 11:27:38 >  
# 11:27:38 >  Mtimeout -timeout 60  mserver5 "--config=/ufs/fabian/scratch/monetdb/current/program-x86_64/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/fabian/scratch/monetdb/current/program-x86_64/lib64/MonetDB5:/ufs/fabian/scratch/monetdb/current/program-x86_64/lib64/MonetDB5/lib:/ufs/fabian/scratch/monetdb/current/program-x86_64/lib64/MonetDB5/bin" --set "gdk_dbfarm=/net/pegasus.ins.cwi.nl/export/scratch0/fabian/vtmp/mtest-current-pegasus.ins.cwi.nl/five/dbfarm" --set "sql_logdir=/net/pegasus.ins.cwi.nl/export/scratch0/fabian/vtmp/mtest-current-pegasus.ins.cwi.nl/five/sqllog" --set "xquery_logdir=/net/pegasus.ins.cwi.nl/export/scratch0/fabian/vtmp/mtest-current-pegasus.ins.cwi.nl/five/xquerylog" --set mapi_open=true --set mapi_port=36650 --set xrpc_port=44030 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  remote00.mal
# 11:27:38 >  




# MonetDB Server v5.1.0
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-pc-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information
## we need this include untill remote is added to the default modules
#include remote;
#
## simply assign a simple value, and let serveget describe it
#b := 1;
#remote.serveget("b");
#
#c := 3.4;
#remote.serveget("c");
#
## we can also describe "complexer" types (a BAT for now)
#d := bat.new(:oid, :str);
#remote.serveget("d");
#
## and a varsized object (like a string) should work too
#g := "Hello world!";
#remote.serveget("g");
#
## of course functions shouldn't be a problem
#function f():str;
#	r := "brrrr";
#	return(r);
#end f;
function user.f():str;	# 0  (f:str)
    r := "brrrr";	# 1  (r:str)<-(_2:str)
    return r;	# 2  (r:str)
end f;	# 3  
#remote.serveget("f");
#remote.serveget("user.f");
#
function user.main():void;	# 0  (main:void)
# we need this include untill remote is added to the default modules 	# 1  (_1:str)
#remote.prelude(); 	# 2  (_2:str)
# ideally we would like to do this, however that's unfortunately 	# 3  (_3:str)
# impossible since variadic stuff doesn't work in functions 	# 4  (_4:str)
#function exec(conn:str, ident:str...):any; 	# 5  (_5:str)
#	id := remote.exec(conn, ident, ...); 	# 6  (_6:str)
#	ret := remote.get(conn, id); 	# 7  (_7:str)
#	return(ret); 	# 8  (_8:str)
#end exec; 	# 9  (_9:str)
# simply assign a simple value, and let serveget describe it 	# 10  (_10:str)
    b := 1;	# 11  (b:int)<-(_12:int)
    remote.serveget("b");	# 12 RMTserveget (_13:void)<-(_14:str)
# this one might cause trouble on different platforms due to float 	# 13  (_15:str)
# handling, we might consider commenting this one out 	# 14  (_16:str)
    c := 3.4000001;	# 15  (c:flt)<-(_18:flt)
    remote.serveget("c");	# 16 RMTserveget (_19:void)<-(_20:str)
# we can also describe "complexer" types (a BAT for now) 	# 17  (_21:str)
    d := bat.new(:oid,:str);	# 18 CMDBATnew (d:bat[:oid,:str])<-(_23:oid)(_24:str)
    remote.serveget("d");	# 19 RMTserveget (_25:void)<-(_26:str)
# and a varsized object (like a string) should work too 	# 20  (_27:str)
    g := "Hello world!";	# 21  (g:str)<-(_29:str)
    remote.serveget("g");	# 22 RMTserveget (_30:void)<-(_31:str)
# of course functions shouldn't be a problem 	# 23  (_32:str)
    remote.serveget("f");	# 24 RMTserveget (_33:void)<-(_34:str)
    remote.serveget("user.f");	# 25 RMTserveget (_35:void)<-(_36:str)
end main;	# 26  
[ "int",	1	]
[ "flt",	3.4000001	]
[ "bat",	"oid",	"str",	0	]
[ "str",	"Hello world!"	]
[ "function",	1	]
=function user.f():str;
=    r := "brrrr";
=    return r;
=end f;
[ "function",	1	]
=function user.f():str;
=    r := "brrrr";
=    return r;
=end f;

# 13:29:10 >  
# 13:29:10 >  Done.
# 13:29:10 >  

