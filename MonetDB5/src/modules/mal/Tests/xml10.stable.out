stdout of test 'xml10` in directory 'src/modules/mal` itself:


# 09:38:47 >  
# 09:38:47 >  Mtimeout -timeout 60  mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_open=true --set xrpc_open=true --set mapi_port=37982 --set xrpc_port=42894 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  xml10.mal
# 09:38:47 >  

# MonetDB server v5.1.0, based on kernel v1.19.0
# Serving database 'mTests_src_modules_mal'
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2007 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://gio.ins.cwi.nl:37982/
## produce a more complex structure
## such as 
##<books>
##  <author> john
##  <title> spring</title>
##  <title> summer</title>
##  </author>
##  <author> mary
##  <title> autum</title>
##  </author>
##</books>
#
## the intermediate tabular result produced by SQL
#a:= bat.new(:oid,:str);
#bat.insert(a,0@0,"john");
#bat.insert(a,1@0,"john");
#bat.insert(a,2@0,"marie");
#t:= bat.new(:oid,:str);
#bat.insert(t,0@0,"spring");
#bat.insert(t,1@0,"summer");
#bat.insert(t,2@0,"autum");
#
## SQL rendering request
##xmlelement('books',
##	xmlelement('author',a,
##			xmlagg(xmlelement('title',t))
##   ) )
## every nesting implies a groupby
#
#ax:= xml.xml(a);
#tx:= xml.xml(t);
#te:= xml.element("title",tx);
#g:= bat.new(:oid,:oid);
#bat.insert(g,0@0,0@0);
#bat.insert(g,0@0,1@0);
#bat.insert(g,1@0,2@0);
#
#k:= algebra.join(g,te);
#io.print(k);
#l:= algebra.sort(k);
#io.print(l);
#
#ag:= xml.agg(g,te);
#io.print(ag);
#j2:= algebra.join(g,ax);
#k2:=algebra.kunique(j2);
#io.print(k2);
#cc:= xml.concat(k2,ag);
#io.print(cc);
#ae:= xml.element("author",cc);
#
#be:= xml.agg(ae);
#doc:= xml.element("books",be);
#io.print(doc);
#
function user.main():void;              #  0 main:void := user.main() {G}
# produce a more complex structure 
# such as  
#<books> 
#  <author> john 
#  <title> spring</title> 
#  <title> summer</title> 
#  </author> 
#  <author> mary 
#  <title> autum</title> 
#  </author> 
#</books> 
# the intermediate tabular result produced by SQL 
    a := bat.new(:oid,:str);            # 13 a:bat[:oid,:str] := CMDBATnew(_14:oid, _15:str) {G}
    bat.insert(a,0@0,"john");           # 14 _16:void := BKCinsert_bun(a:bat[:oid,:str], _17:oid, _18:str) 
    bat.insert(a,1@0,"john");           # 15 _19:void := BKCinsert_bun(a:bat[:oid,:str], _20:oid, _18:str) 
    bat.insert(a,2@0,"marie");          # 16 _21:void := BKCinsert_bun(a:bat[:oid,:str], _22:oid, _23:str) 
    t := bat.new(:oid,:str);            # 17 t:bat[:oid,:str] := CMDBATnew(_14:oid, _25:str) {G}
    bat.insert(t,0@0,"spring");         # 18 _26:void := BKCinsert_bun(t:bat[:oid,:str], _17:oid, _27:str) 
    bat.insert(t,1@0,"summer");         # 19 _28:void := BKCinsert_bun(t:bat[:oid,:str], _20:oid, _29:str) 
    bat.insert(t,2@0,"autum");          # 20 _30:void := BKCinsert_bun(t:bat[:oid,:str], _22:oid, _31:str) 
# SQL rendering request 
#xmlelement('books', 
#	xmlelement('author',a, 
#			xmlagg(xmlelement('title',t)) 
#   ) ) 
# every nesting implies a groupby 
    ax := xml.xml(a);                   # 27 ax:bat[:oid,:xml] := BATXMLstr2xml(a:bat[:oid,:str]) {G}
    tx := xml.xml(t);                   # 28 tx:bat[:oid,:xml] := BATXMLstr2xml(t:bat[:oid,:str]) {G}
    te := xml.element("title",tx);      # 29 te:bat[:oid,:xml] := BATXMLtag(_41:str, tx:bat[:oid,:xml]) {G}
    g := bat.new(:oid,:oid);            # 30 g:bat[:oid,:oid] := CMDBATnew(_14:oid, _14:oid) {G}
    bat.insert(g,0@0,0@0);              # 31 _43:void := BKCinsert_bun(g:bat[:oid,:oid], _17:oid, _17:oid) 
    bat.insert(g,1@0,0@0);              # 32 _44:void := BKCinsert_bun(g:bat[:oid,:oid], _20:oid, _17:oid) 
    bat.insert(g,2@0,1@0);              # 33 _45:void := BKCinsert_bun(g:bat[:oid,:oid], _22:oid, _20:oid) 
    k := algebra.join(g,te);            # 34 k:bat[:oid,:xml] := ALGjoin(g:bat[:oid,:oid], te:bat[:oid,:xml]) {G}
    io.print(k);                        # 35 _47:void := IOprint_val(k:bat[:oid,:xml]) 
    l := algebra.sort(k);               # 36 l:bat[:oid,:xml] := ALGhsort(k:bat[:oid,:xml]) {G}
    io.print(l);                        # 37 _49:void := IOprint_val(l:bat[:oid,:xml]) 
    ag := xml.agg(te,g);                # 38 ag:bat[:oid,:xml] := BATXMLagg(te:bat[:oid,:xml], g:bat[:oid,:oid]) {G}
    io.print(ag);                       # 39 _51:void := IOprint_val(ag:bat[:oid,:xml]) 
    gr := bat.reverse(g);               # 40 gr:bat[:oid,:oid] := BKCreverse(g:bat[:oid,:oid]) {G}
    j2 := algebra.join(gr,ax);          # 41 j2:bat[:oid,:xml] := ALGjoin(gr:bat[:oid,:oid], ax:bat[:oid,:xml]) {G}
    k2 := algebra.kunique(j2);          # 42 k2:bat[:oid,:xml] := ALGkunique(j2:bat[:oid,:xml]) {G}
    io.print(k2);                       # 43 _55:void := IOprint_val(k2:bat[:oid,:xml]) 
    cc := xml.concat(k2,ag);            # 44 cc:bat[:oid,:xml] := BATXMLconcat(k2:bat[:oid,:xml], ag:bat[:oid,:xml]) {G}
    io.print(cc);                       # 45 _57:void := IOprint_val(cc:bat[:oid,:xml]) 
    io.print("author construction");    # 46 _58:void := IOprint_val(_59:str) 
    ae := xml.element("author",cc);     # 47 ae:bat[:oid,:xml] := BATXMLtag(_61:str, cc:bat[:oid,:xml]) {G}
    io.print(ae);                       # 48 _62:void := IOprint_val(ae:bat[:oid,:xml]) 
    io.print("book construction");      # 49 _63:void := IOprint_val(_64:str) 
    be := xml.agg(ae);                  # 50 be:bat[:oid,:xml] := BATXMLgroup(ae:bat[:oid,:xml]) {G}
    io.print(be);                       # 51 _66:void := IOprint_val(be:bat[:oid,:xml]) 
    doc := xml.element("books",be);     # 52 doc:bat[:oid,:xml] := BATXMLtag(_68:str, be:bat[:oid,:xml]) {G}
    io.print(doc);                      # 53 _69:void := IOprint_val(doc:bat[:oid,:xml]) 
end main;	# 54  
#---------------------------------#
# h	t							  # name
# void	xml			  # type
#---------------------------------#
[ 0@0,	  <title>spring</title>	  ]
[ 1@0,	  <title>spring</title>	  ]
[ 2@0,	  <title>summer</title>	  ]
#---------------------------------#
# h	t																  # name
# void	xml			  # type
#---------------------------------#
[ 0@0,	  <title>spring</title>	  ]
[ 1@0,	  <title>spring</title>	  ]
[ 2@0,	  <title>summer</title>	  ]
#---------------------------------------------------------#
# h	t						  # name
# void	xml						  # type
#---------------------------------------------------------#
[ nil,	  <title>spring</title><title>summer</title>	  ]
[ nil,	  <title>autum</title>				  ]
#-----------------#
# h	t	  # name
# oid	xml	  # type
#-----------------#
[ 0@0,	  john	  ]
[ 1@0,	  marie	  ]
#---------------------------------------------------------#
# h	t						  # name
# oid	xml						  # type
#---------------------------------------------------------#
[ 0@0,	  john<title>spring</title><title>summer</title>  ]
[ 1@0,	  marie<title>autum</title>			  ]
[ "author construction" ]
#---------------------------------------------------------------------------------#
# h	t									  # name
# oid	xml									  # type
#---------------------------------------------------------------------------------#
[ 0@0,	  <author>john<title>spring</title><title>summer</title></author>	  ]
[ 1@0,	  <author>marie<title>autum</title></author>				  ]
[ "book construction" ]
#-------------------------------------------------------------------------------------------------------------------------#
# h	t														  # name
# oid	xml														  # type
#-------------------------------------------------------------------------------------------------------------------------#
[ 0@0,	  <author>john<title>spring</title><title>summer</title></author><author>marie<title>autum</title></author>	  ]
#-----------------------------------------------------------------------------------------------------------------------------------------#
# h	t																  # name
# oid	xml																  # type
#-----------------------------------------------------------------------------------------------------------------------------------------#
[ 0@0,	  <books><author>john<title>spring</title><title>summer</title></author><author>marie<title>autum</title></author></books>	  ]

# 23:09:29 >  
# 23:09:29 >  Done.
# 23:09:29 >  

