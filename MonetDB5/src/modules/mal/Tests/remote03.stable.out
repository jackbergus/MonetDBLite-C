stdout of test 'remote03` in directory 'src/modules/mal` itself:


# 15:28:56 >  
# 15:28:56 >  Mtimeout -timeout 60  mserver5 "--config=/ufs/fabian/scratch/monetdb/current/program-x86_64/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/fabian/scratch/monetdb/current/program-x86_64/lib64/MonetDB5:/ufs/fabian/scratch/monetdb/current/program-x86_64/lib64/MonetDB5/lib:/ufs/fabian/scratch/monetdb/current/program-x86_64/lib64/MonetDB5/bin" --set "gdk_dbfarm=/net/pegasus.ins.cwi.nl/export/scratch0/fabian/vtmp/mtest-current-pegasus.ins.cwi.nl/five/dbfarm" --set "sql_logdir=/net/pegasus.ins.cwi.nl/export/scratch0/fabian/vtmp/mtest-current-pegasus.ins.cwi.nl/five/sqllog" --set "xquery_logdir=/net/pegasus.ins.cwi.nl/export/scratch0/fabian/vtmp/mtest-current-pegasus.ins.cwi.nl/five/xquerylog" --set mapi_open=true --set mapi_port=34439 --set xrpc_port=43409 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  remote03.mal
# 15:28:56 >  





# MonetDB server v5.7.0, based on kernel v1.25.0
# Serving database 'mTests_src_modules_mal', using 2 threads
# Compiled for x86_64-pc-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information
#include remote;
## for testweb, we need to ask the server itself how it is available, use
## sabaoth for that
#include sabaoth;
#
#h := sabaoth.getLocalConnectionHost();
#p := sabaoth.getLocalConnectionPort();
#
## create a connecton to ourself
#remote.create("test", h, p, nil:str, "monetdb", "monetdb");
#
## io.print only outputs things, but returns nothing
#a := remote.exec("test", "io.print", "bla");
#io.print(a);
#
## now do it with a function that returns something (a BAT in this case)
#b := remote.exec("test", "inspect.getAtomNames");
#io.print(b);
#
## help testweb a bit, since currently no cleanup is done on server
## shutdown
#remote.destroy("test");
#
function user.main():void;              #  0 main:void := user.main() {G}
#remote.prelude(); 
# ideally we would like to do this, however that's unfortunately 
# impossible since variadic stuff doesn't work in functions 
#function exec(conn:str, ident:str...):any; 
#	id := remote.exec(conn, ident, ...); 
#	ret := remote.get(conn, id); 
#	return(ret); 
#end exec; 
# for testweb, we need to ask the server itself how it is available, use 
# sabaoth for that 
#sabaoth.prelude(); 
    h := sabaoth.getLocalConnectionHost();#  4 h:str := SABgetLocalConnectionHost() {G}
    p := sabaoth.getLocalConnectionPort();#  5 p:int := SABgetLocalConnectionPort() 
# create a connecton to ourself 
    remote.create("test",h,p,nil:str,"monetdb","monetdb");#  7 _7:void := RMTcreate(_8:str, h:str, p:int, _9:str, _10:str, _10:str) 
# this is invalid, as io.print is an invalid module, and bla will be 
# taken as function 
    f:rmtobj  := remote.exec("test","io.print","bla");# 10 f:rmtobj := RMTexec(_8:str, _14:str, _15:str) {G}
catch MALException:str ;                # 11 MALException:str {J14}
    io.print("Received an error from the remote site");# 12 _17:void := IOprint_val(_18:str) 
    io.printf(MALException);            # 13 _19:void := IOprintf(MALException:str) 
exit MALException:str ;                 # 14 MALException:str 
# now do it with a function that returns something (a BAT in this case) 
    b:rmtobj  := remote.exec("test","inspect","getAtomNames");# 16 b:rmtobj := RMTexec(_8:str, _22:str, _23:str) {G}
catch MALException:str ;                # 17 MALException:str {J20}
    io.print("Received second error from the remote site");# 18 _24:void := IOprint_val(_25:str) 
    io.printf(MALException);            # 19 _26:void := IOprintf(MALException:str) 
exit MALException:str ;                 # 20 MALException:str 
    c:bat[:int,:str]  := remote.get("test",b);# 21 c:bat[:int,:str] := RMTget(_8:str, b:rmtobj) {G}
    io.print(c);                        # 22 _28:void := IOprint_val(c:bat[:int,:str]) 
catch MALException:str ;                # 23 MALException:str {J26}
    io.print("Received third error from the remote site");# 24 _29:void := IOprint_val(_30:str) 
    io.printf(MALException);            # 25 _31:void := IOprintf(MALException:str) 
exit MALException:str ;                 # 26 MALException:str 
# io.print only outputs things, but returns nothing 
    a:rmtobj  := remote.exec("test","io","print",b);# 28 a:rmtobj := RMTexec(_8:str, _34:str, _35:str, b:rmtobj) {G}
catch MALException:str ;                # 29 MALException:str {J32}
    io.print("Received fourth error from the remote site");# 30 _36:void := IOprint_val(_37:str) 
    io.printf(MALException);            # 31 _38:void := IOprintf(MALException:str) 
exit MALException:str ;                 # 32 MALException:str 
    d:void  := remote.get("test",a);    # 33 d:void := RMTget(_8:str, a:rmtobj) 
    io.print(d);                        # 34 _40:void := IOprint_val(d:void) 
catch MALException:str ;                # 35 MALException:str {J38}
    io.print("Received fifth error from the remote site");# 36 _41:void := IOprint_val(_42:str) 
    io.printf(MALException);            # 37 _43:void := IOprintf(MALException:str) 
exit MALException:str ;                 # 38 MALException:str 
# help testweb a bit, since currently no cleanup is done on server 
# shutdown 
    remote.destroy("test");             # 41 _46:void := RMTdestroy(_47:str) 
end main;                               # 42  
[ "Received an error from the remote site" ]
MALException:remote.exec:remote_test_id_0 := io.print.bla();
!SyntaxException:parseError:                              ^'(' expected
#-------------------------#
# h	t		  # name
# int	str		  # type
#-------------------------#
[ 0,	  "void"	  ]
[ 1,	  "bit"		  ]
[ 2,	  "chr"		  ]
[ 3,	  "bte"		  ]
[ 4,	  "sht"		  ]
[ 5,	  "BAT"		  ]
[ 6,	  "int"		  ]
[ 7,	  "oid"		  ]
[ 8,	  "wrd"		  ]
[ 9,	  "ptr"		  ]
[ 10,	  "flt"		  ]
[ 11,	  "dbl"		  ]
[ 12,	  "lng"		  ]
[ 13,	  "str"		  ]
[ 14,	  "lock"	  ]
[ 15,	  "sema"	  ]
[ 16,	  "streams"	  ]
[ 17,	  "bstream"	  ]
[ 18,	  "blob"	  ]
[ 19,	  "sqlblob"	  ]
[ 20,	  "color"	  ]
[ 21,	  "url"		  ]
[ 22,	  "date"	  ]
[ 23,	  "daytime"	  ]
[ 24,	  "timestamp"	  ]
[ 25,	  "timezone"	  ]
[ 26,	  "zrule"	  ]
[ 27,	  "inet"	  ]
[ 28,	  "identifier"	  ]
[ 29,	  "pcre"	  ]
[ 30,	  "rmtobj"	  ]
[ 31,	  "xml"		  ]
[ 32,	  "mapentry"	  ]
[ nil ]

# 19:22:53 >  
# 19:22:53 >  Done.
# 19:22:53 >  

