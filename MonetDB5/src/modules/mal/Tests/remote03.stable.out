stdout of test 'remote03` in directory 'src/modules/mal` itself:


# 15:28:56 >  
# 15:28:56 >  Mtimeout -timeout 60  mserver5 "--config=/ufs/fabian/scratch/monetdb/current/program-x86_64/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/fabian/scratch/monetdb/current/program-x86_64/lib64/MonetDB5:/ufs/fabian/scratch/monetdb/current/program-x86_64/lib64/MonetDB5/lib:/ufs/fabian/scratch/monetdb/current/program-x86_64/lib64/MonetDB5/bin" --set "gdk_dbfarm=/net/pegasus.ins.cwi.nl/export/scratch0/fabian/vtmp/mtest-current-pegasus.ins.cwi.nl/five/dbfarm" --set "sql_logdir=/net/pegasus.ins.cwi.nl/export/scratch0/fabian/vtmp/mtest-current-pegasus.ins.cwi.nl/five/sqllog" --set "xquery_logdir=/net/pegasus.ins.cwi.nl/export/scratch0/fabian/vtmp/mtest-current-pegasus.ins.cwi.nl/five/xquerylog" --set mapi_open=true --set mapi_port=34439 --set xrpc_port=43409 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  remote03.mal
# 15:28:56 >  

# MonetDB server v5.1.0, based on kernel v1.19.0
# Serving database 'mTests_src_modules_mal'
# Compiled for x86_64-pc-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information
#include remote;
## for testweb, we need to ask the server itself how it is available, use
## sabaoth for that
#include sabaoth;
#
#h := sabaoth.getLocalConnectionHost();
#p := sabaoth.getLocalConnectionPort();
#
## create a connecton to ourself
#remote.create("test", h, p, nil:str, "monetdb", "monetdb");
#
## io.print only outputs things, but returns nothing
#a := remote.exec("test", "io.print", "bla");
#io.print(a);
#
## now do it with a function that returns something (a BAT in this case)
#b := remote.exec("test", "inspect.getAtomNames");
#io.print(b);
#
## help testweb a bit, since currently no cleanup is done on server
## shutdown
#remote.destroy("test");
#
function user.main():void;              #  0 main:void := user.main() {G}
#remote.prelude(); 
# ideally we would like to do this, however that's unfortunately 
# impossible since variadic stuff doesn't work in functions 
#function exec(conn:str, ident:str...):any; 
#	id := remote.exec(conn, ident, ...); 
#	ret := remote.get(conn, id); 
#	return(ret); 
#end exec; 
# for testweb, we need to ask the server itself how it is available, use 
# sabaoth for that 
#sabaoth.prelude(); 
    h := sabaoth.getLocalConnectionHost();# 12 h:str := SABgetLocalConnectionHost() {G}
    p := sabaoth.getLocalConnectionPort();# 13 p:int := SABgetLocalConnectionPort() 
# create a connecton to ourself 
    remote.create("test",h,p,nil:str,"monetdb","monetdb");# 15 _15:void := RMTcreate(_16:str, h:str, p:int, _17:str, _18:str, _18:str) 
# now do it with a function that returns something (a BAT in this case) 
    b := remote.exec("test","inspect","getAtomNames");# 17 b:any := RMTexec(_16:str, _21:str, _22:str) 
    io.print(b);                        # 18 _23:void := IOprint_val(b:any) 
catch MALException:str ;                # 19 MALException:str {J21}
    io.printf("!%s\n",MALException);    # 20 _25:void := IOprint_formatted_str(_26:str, MALException:str) 
exit MALException:str ;                 # 21 MALException:str 
# this is invalid, as io.print is an invalid module, and bla will be 
# taken as function 
    io.printf("sent invalid request\n");# 24 _29:void := IOprint_str(_30:str) 
    f := remote.exec("test","io.print","bla");# 25 f:any := RMTexec(_16:str, _32:str, _33:str) 
    io.print(f);                        # 26 _34:void := IOprint_val(f:any) 
catch MALException:str ;                # 27 MALException:str {J29}
    io.printf("!first:%s\n",MALException);# 28 _35:void := IOprint_formatted_str(_36:str, MALException:str) 
exit MALException:str ;                 # 29 MALException:str 
    io.printf("sent request\n");        # 30 _37:void := IOprint_str(_38:str) 
# io.print only outputs things, but returns nothing 
    a := remote.exec("test","io","print","bla");# 32 a:any := RMTexec(_16:str, _41:str, _42:str, _33:str) 
catch MALException:str ;                # 33 MALException:str {J35}
    io.printf("!second:\n");            # 34 _43:void := IOprint_str(_44:str) 
exit MALException:str ;                 # 35 MALException:str 
    io.print(a);                        # 36 _45:void := IOprint_val(a:any) 
# help testweb a bit, since currently no cleanup is done on server 
# shutdown 
    remote.destroy("test");             # 39 _48:void := RMTdestroy(_49:str) 
end main;                               # 40  
!MALException:remote.get:no such object ''

sent invalid request
!first:MALException:remote.exec:remote_put_object_1 := io.print.bla();
!SyntaxException:parseError:                              ^'(' expected

sent request
!second:
[ nil ]

# 19:22:53 >  
# 19:22:53 >  Done.
# 19:22:53 >  

