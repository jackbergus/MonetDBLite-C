stdout of test 'mapi02` in directory 'src/modules/mal` itself:


# 04:46:54 >  
# 04:46:54 >   mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=30399 --set xrpc_port=41245 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  remote05.mal
# 04:46:54 >  

# MonetDB server v5.3.0, based on kernel v1.21.0
# Serving database 'mTests_src_modules_mal'
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2007 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://gio.ins.cwi.nl:30399/
##this example tests recieving tuple values as part of the
##MAL interface.
## now in a remote setting
#
#include remote;
## for testweb, we need to ask the server itself how it is available, use
## sabaoth for that
#include sabaoth;
#
#h := sabaoth.getLocalConnectionHost();
#p := sabaoth.getLocalConnectionPort();
#
## create a connecton to ourself
#remote.create("test", h, p, nil:str, "monetdb", "monetdb");
#
#b:= bat.new(:oid,:str);
#bat.insert( 0@0, "hello");
#bat.insert( 0@1, "world");
#
## store the values
#remote.send("test",b);
#c:= remote.query("test","io.print(b);")
!SyntaxException:parseError:io.print(c);
!SyntaxException:parseError:^';' expected
function user.main():void;
#this example tests recieving tuple values as part of the 
#MAL interface. 
# now in a remote setting 
#remote.prelude(); 
# ideally we would like to do this, however that's unfortunately 
# impossible since variadic stuff doesn't work in functions 
#function exec(conn:str, ident:str...):any; 
#	id := remote.exec(conn, ident, ...); 
#	ret := remote.get(conn, id); 
#	return(ret); 
#end exec; 
# for testweb, we need to ask the server itself how it is available, use 
# sabaoth for that 
#sabaoth.prelude(); 
    h := sabaoth.getLocalConnectionHost();
    p := sabaoth.getLocalConnectionPort();
# create a connecton to ourself 
    remote.create("test",h,p,nil:str,"monetdb","monetdb");
    b := bat.new(:oid,:str);
    bat.insert(0@0,"hello");
    bat.insert(0@0,"world");
# store the values 
    remote.send("test",b);
    c := remote.query("test","io.print(b);");
# shutdown 
    remote.destroy("test");
end main;

# 04:46:54 >  
# 04:46:54 >  Done.
# 04:46:54 >  

