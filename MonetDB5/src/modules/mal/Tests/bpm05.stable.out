stdout of test 'bpm05` in directory 'src/modules/mal` itself:


# 08:10:24 >  
# 08:10:24 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=33192 --set xrpc_port=41587 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  bpm05.mal
# 08:10:24 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information
##testing the BAT partition manager
#R := bat.new(:oid,:int);
#bat.append(R,1);
#bat.append(R,3);
#bat.append(R,5);
#bat.append(R,7);
#bat.append(R,11);
#
#function user.pr(Ra:bat[:any_1,:any_2]):void;
#barrier Rp:= bpm.newIterator(Ra);
#	io.print(Rp);
#	redo Rp:= bpm.hasMoreElements(Ra);
#exit Rp;
#end pr;
function user.pr(Ra:bat[:any_1,:any_2]):void;	# 0  (pr:void)<-(Ra:bat[:any_1,:any_2])
barrier Rp := bpm.newIterator(Ra);	# 1 BPMnewIterator (Rp:bat[:any,:any])<-(Ra:bat[:any_1,:any_2]) jump 4
    io.print(Rp);	# 2 IOprint_val (_3:void)<-(Rp:bat[:any,:any])
    redo Rp := bpm.hasMoreElements(Ra);	# 3 BPMhasMoreElements (Rp:bat[:any,:any])<-(Ra:bat[:any_1,:any_2]) jump 2
exit Rp;	# 4  (Rp:bat[:any,:any])
end pr;	# 5  
#
#function user.printrange(Ra:bat[:any_1,:any_2],l:any_2,h:any_2):void;
#barrier Rp:= bpm.newIterator(Ra,l,h);
#	io.print(Rp);
#	redo Rp:= bpm.hasMoreElements(Ra,l,h);
#exit Rp;
#end printrange;
function user.printrange(Ra:bat[:any_1,:any_2],l:any_2,h:any_2):void;	# 0  (printrange:void)<-(Ra:bat[:any_1,:any_2])(l:any_2)(h:any_2)
barrier Rp := bpm.newIterator(Ra,l,h);	# 1 BPMnewIteratorRng (Rp:bat[:any,:any])<-(Ra:bat[:any_1,:any_2])(l:any_2)(h:any_2) jump 4
    io.print(Rp);	# 2 IOprint_val (_5:void)<-(Rp:bat[:any,:any])
    redo Rp := bpm.hasMoreElements(Ra,l,h);	# 3 BPMhasMoreElementsRng (Rp:bat[:any,:any])<-(Ra:bat[:any_1,:any_2])(l:any_2)(h:any_2) jump 2
exit Rp;	# 4  (Rp:bat[:any,:any])
end printrange;	# 5  
#
## add the stuff to the BPM and dump it
#Ra:= bpm.deposit("myR",R);
#user.pr(Ra);
#
#V := bat.new(:oid,:int);
#bat.append(V,2);
#bat.append(V,4);
#bat.append(V,8);
#bat.append(V,10);
#io.print(V);
#
#io.print("Range partition using sorted BAT of ranges");
#bpm.rangePartition(Ra,V);
#bpm.dump(Ra);
#user.pr(Ra);
#
#io.print("Iterate on range 3-9");
#user.printrange(Ra,3,9);
#
#io.print("Iterate on range <6");
#user.printrange(Ra,nil:int,6);
#
#io.print("Take 3rd partition ");
#Rx:bat[:oid,:int] := bpm.take("myR");
#Rp := bpm.take(Rx,3);
#io.print(Rp);
#
##bpm.discard(Ra);
#
function user.main():void;	# 0  (main:void)
#testing the BAT partition manager 	# 1  (_1:str)
    R := bat.new(:oid,:int);	# 2 CMDBATnew (R:bat[:oid,:int])<-(_3:oid)(_4:int)
    bat.append(R,1);	# 3 BKCappend_val_wrap (_5:void)<-(R:bat[:oid,:int])(_6:int)
    bat.append(R,3);	# 4 BKCappend_val_wrap (_7:void)<-(R:bat[:oid,:int])(_8:int)
    bat.append(R,5);	# 5 BKCappend_val_wrap (_9:void)<-(R:bat[:oid,:int])(_10:int)
    bat.append(R,7);	# 6 BKCappend_val_wrap (_11:void)<-(R:bat[:oid,:int])(_12:int)
    bat.append(R,11);	# 7 BKCappend_val_wrap (_13:void)<-(R:bat[:oid,:int])(_14:int)
# add the stuff to the BPM and dump it 	# 8  (_15:str)
    Ra := bpm.deposit("myR",R);	# 9 BPMdeposit (Ra:bat[:oid,:int])<-(_17:str)(R:bat[:oid,:int])
    user.pr(Ra);	# 10  (_18:void)<-(Ra:bat[:oid,:int])
    V := bat.new(:oid,:int);	# 11 CMDBATnew (V:bat[:oid,:int])<-(_3:oid)(_4:int)
    bat.append(V,2);	# 12 BKCappend_val_wrap (_20:void)<-(V:bat[:oid,:int])(_21:int)
    bat.append(V,4);	# 13 BKCappend_val_wrap (_22:void)<-(V:bat[:oid,:int])(_23:int)
    bat.append(V,8);	# 14 BKCappend_val_wrap (_24:void)<-(V:bat[:oid,:int])(_25:int)
    bat.append(V,10);	# 15 BKCappend_val_wrap (_26:void)<-(V:bat[:oid,:int])(_27:int)
    io.print(V);	# 16 IOprint_val (_28:void)<-(V:bat[:oid,:int])
    io.print("Range partition using sorted BAT of ranges");	# 17 IOprint_val (_29:void)<-(_30:str)
    bpm.rangePartition(Ra,V);	# 18 BPMrangeVector (_31:void)<-(Ra:bat[:oid,:int])(V:bat[:oid,:int])
    bpm.dump(Ra);	# 19 BPMdumpAlias (_32:void)<-(Ra:bat[:oid,:int])
    user.pr(Ra);	# 20  (_33:void)<-(Ra:bat[:oid,:int])
    io.print("Iterate on range 3-9");	# 21 IOprint_val (_34:void)<-(_35:str)
    user.printrange(Ra,3,9);	# 22  (_36:void)<-(Ra:bat[:oid,:int])(_8:int)(_37:int)
    io.print("Iterate on range <6");	# 23 IOprint_val (_38:void)<-(_39:str)
    user.printrange(Ra,nil:int,6);	# 24  (_40:void)<-(Ra:bat[:oid,:int])(_41:int)(_42:int)
    io.print("Take 3rd partition ");	# 25 IOprint_val (_43:void)<-(_44:str)
    Rx:bat[:oid,:int]  := bpm.take("myR");	# 26 BPMtake (Rx:bat[:oid,:int])<-(_17:str)
    Rp := bpm.take(Rx,3);	# 27 BPMtakePartition (Rp:bat[:oid,:int])<-(Rx:bat[:oid,:int])(_47:int)
    io.print(Rp);	# 28 IOprint_val (_48:void)<-(Rp:bat[:oid,:int])
#bpm.discard(Ra); 	# 29  (_49:str)
end main;	# 30  
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  3	  ]
[ 2@0,	  5	  ]
[ 3@0,	  7	  ]
[ 4@0,	  11	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  2	  ]
[ 1@0,	  4	  ]
[ 2@0,	  8	  ]
[ 3@0,	  10	  ]
[ "Range partition using sorted BAT of ranges" ]
partition: myR alias 11 bid 12 bits 0 0 h nil - nil t nil - 2 nxt 14 prv 11 cnt 1
partition: myR alias 11 bid 14 bits 0 0 h nil - nil t 2 - 4 nxt 15 prv 12 cnt 1
partition: myR alias 11 bid 15 bits 0 0 h nil - nil t 4 - 8 nxt 16 prv 14 cnt 2
partition: myR alias 11 bid 16 bits 0 0 h nil - nil t 8 - 10 nxt 17 prv 15 cnt 0
partition: myR alias 11 bid 17 bits 0 0 h nil - nil t 10 - nil nxt 11 prv 16 cnt 1
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  1	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 1@0,	  3	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 2@0,	  5	  ]
[ 3@0,	  7	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 4@0,	  11	  ]
[ "Iterate on range 3-9" ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 1@0,	  3	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 2@0,	  5	  ]
[ 3@0,	  7	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ "Iterate on range <6" ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  1	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 1@0,	  3	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 2@0,	  5	  ]
[ 3@0,	  7	  ]
[ "Take 3rd partition " ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 2@0,	  5	  ]
[ 3@0,	  7	  ]

# 08:10:24 >  
# 08:10:24 >  Done.
# 08:10:24 >  

