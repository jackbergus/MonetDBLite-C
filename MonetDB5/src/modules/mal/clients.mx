@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
@' Copyright August 2008-2009 MonetDB B.V.
@' All Rights Reserved.

@f clients
@a Martin Kersten, Fabian Groffen
@v 0.2
@+ Client Management
Each online client is represented with an entry in the clients table.
The client may inspect his record at run-time and partially change its
properties.
The administrator sees all client records and has the right to
adjust global properties.
@mal
module clients;

pattern setListing(flag:int):int
address CLTsetListing
comment "Turn on/off echo of MAL instructions:
	2 - show mal instruction,
	4 - show details of type resolutoin, 
	8 - show binding information.";

pattern setHistory(s:str)
address CLTsetHistory
comment "Designate console history file for readline.";

pattern getId():int
address CLTgetClientId
comment "Return a number that uniquely represents the current client.";

pattern getInfo( ):bat[:str,:str] 
address CLTInfo
comment "Pseudo bat with client attributes.";

pattern getScenario():str 
address CLTgetScenario
comment "Retrieve current scenario name.";
pattern setScenario(msg:str):str 
address CLTsetScenario
comment "Switch to other scenario handler, return previous one.";

pattern quit():void
address CLTquit
comment "Terminate the server.
	This command can only be initiated from the console.";

pattern exit():void
address CLTexit
comment "Terminate the session for a single client using a soft error.";

@-
Administrator operations
@mal
command getLogins( ):bat[:int,:str] 
address CLTLogin
comment "Pseudo bat of client login time.";

command getLastCommand( ):bat[:int,:str] 
address CLTLastCommand
comment "Pseudo bat of client's last command time.";

command getActions( ):bat[:int,:int] 
address CLTActions
comment "Pseudo bat of client's command counts.";

command getTime( ):bat[:int,:lng] 
address CLTTime
comment "Pseudo bat of client's total time usage(in usec).";

command getUsers( ):bat[:int,:str] 
address CLTusers
comment "Pseudo bat of users logged in.";

command stop(id:int)
address CLTstop
comment "Stop the query execution at the next eligble statement.";

pattern suspend(id:int):void
address CLTsuspend
comment "Put a client process to sleep for some time.
It will simple sleep for a second at a time, until
the awake bit has been set in its descriptor";
command wakeup(id:int):void
address CLTwakeup
comment "Wakeup a client process";

command shutdown(forced:bit):void
address CLTshutdown
comment "Close all client connections. If forced=false the
clients are moved into FINISHING mode, which means that
the process stops at the next cycle of the scenario.
If forced=true all client processes are immediately killed";
@-
@{
@include prelude.mx
@+ Monet client data
Portions of the client record can be directly obtained for
backward compatibility. The routine clientInfo provides more
detailed information.
@h
#ifndef _CLIENTS_H
#define _CLIENTS_H
#include "mal.h"
#include "mal_interpreter.h"

#ifdef WIN32
#ifndef LIBCLIENTS
#define clients_export extern __declspec(dllimport)
#else
#define clients_export extern __declspec(dllexport)
#endif
#else
#define clients_export extern
#endif

clients_export str CLTsetListing(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
clients_export str CLTgetClientId(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
clients_export str CLTgetScenario(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
clients_export str CLTsetScenario(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
clients_export str CLTchangeUsername(int *ret, str *old, str *new) ;
clients_export str CLTusers(int *ret);
clients_export str CLTsetHistory(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
clients_export str CLTexit(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
clients_export str CLTquit(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
clients_export str CLTLogin(int *ret);
clients_export str CLTLastCommand(int *ret);
clients_export str CLTActions(int *ret);
clients_export str CLTTime(int *ret);
clients_export str CLTInfo(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
clients_export str CLTgetUsername(str *ret);

clients_export str CLTstop(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
clients_export str CLTsuspend(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
clients_export str CLTwakeup(int *ret, int *id);

clients_export str CLTaddUser(oid *ret, str *usr, str *pw, bat *sc);
clients_export str CLTremoveUser(int *ret, str *usr);
clients_export str CLTchangePassword(int *ret, str *old, str *new);
clients_export str CLTsetPassword(int *ret, str *usr, str *new);
clients_export str CLTcheckPermission(int *ret, str *usr, str *pw, str *sc);
clients_export str CLTaddScenario(int *ret, str *usr, str *sc);
clients_export str CLTremoveScenario(int *ret, str *usr, str *sc);
clients_export str CLTgetUsers(bat *ret, bat *scens);
clients_export str CLTshutdown(int *ret, bit *forced);

#endif /* _CLIENTS_H */
@c
#include "mal_config.h"
#include "clients.h"
#include "mal_scenario.h"
#include "mal_instruction.h"
#include "mal_client.h"
#include "mal_authorize.h"

#ifdef HAVE_LIBREADLINE
#include <readline/readline.h>
#include <readline/history.h>
#endif

str
CLTsetListing(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	(void) mb;
	*(int*) getArgReference(stk,pci,0) = cntxt->listing;
	cntxt->listing = *(int*) getArgReference(stk,pci,1);
	return MAL_SUCCEED;
}

str
CLTgetClientId(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	(void) mb;
	assert(cntxt - mal_clients <= INT_MAX);
	*(int*) getArgReference(stk,pci,0) = (int) (cntxt - mal_clients);
	return MAL_SUCCEED;
}

str
CLTgetScenario(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	(void) mb;
	if (cntxt->scenario)
		*(str *) getArgReference(stk,pci,0) = GDKstrdup(cntxt->scenario);
	else
		*(str *) getArgReference(stk,pci,0) = GDKstrdup("nil");
	return MAL_SUCCEED;
}

str
CLTsetScenario(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	str msg = MAL_SUCCEED;

	(void) mb;
	msg = setScenario(cntxt, *(str *) getArgReference(stk,pci,1));
	*(str *) getArgReference(stk,pci,0) = 0;
	if (msg == NULL)
		*(str *) getArgReference(stk,pci,0) = GDKstrdup(cntxt->scenario);
	return msg;
}

static char *
local_itoa(int i)
{
	static char buf[32];

	sprintf(buf, "%d", i);
	return buf;
}

void
CLTtimeConvert(time_t l, char *s){
			struct tm localt;

#ifdef HAVE_LOCALTIME_R
			(void) localtime_r(&l, &localt);
#else
			/* race condition: return value could be
			 * overwritten in parallel thread before
			 * assignment complete */
			localt = *localtime(&l);
#endif

#ifdef HAVE_ASCTIME_R3
			asctime_r(&localt, s, 26);
#else
#ifdef HAVE_ASCTIME_R
			asctime_r(&localt, s);
#else
			/* race condition: return value could be
			 * overwritten in parallel thread before copy
			 * complete, however on Windows, asctime is
			 * thread-safe */
			strncpy(s, asctime(&localt), 26);
#endif
#endif
			s[24] = 0;
}

str
CLTInfo(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	int *ret=  (int *) getArgReference(stk,pci,0);
	BAT *b = BATnew(TYPE_str, TYPE_str, 12);
	char s[26];

	(void) mb;
	if (b == 0)
		throw(MAL, "clients.info", "failed to create BAT");

	BUNins(b, "user", local_itoa((int)cntxt->user), FALSE);
	BUNins(b, "password", "", FALSE); /* FIXME: get rid of this */
	BUNins(b, "scenario", cntxt->scenario, FALSE);
	BUNins(b, "timer", local_itoa((int) cntxt->timer), FALSE);
	BUNins(b, "trace", local_itoa(cntxt->itrace), FALSE);
	BUNins(b, "listing", local_itoa(cntxt->listing), FALSE);
	BUNins(b, "debug", local_itoa(cntxt->debug), FALSE);
	CLTtimeConvert((time_t) cntxt->login,s);
	BUNins(b, "login", s, FALSE);
	CLTtimeConvert((time_t) cntxt->delay,s);
	BUNins(b, "delay", s, FALSE);
	if (!(b->batDirty&2)) b = BATsetaccess(b, BAT_READ);
	@:Pseudo(client,info,)@
	return MAL_SUCCEED;
}

str
CLTLogin(int *ret)
{
	BAT *b = BATnew(TYPE_int, TYPE_str, 12);
	int i;
	char s[26];

	if (b == 0)
		throw(MAL, "clients.getLogins", "failed to create BAT");
	for (i = 0; i < MAL_MAXCLIENTS; i++) {
		Client c = mal_clients+i;
		if (c->mode >= CLAIMED && c->user != oid_nil) {
			CLTtimeConvert((time_t) c->login,s);
			BUNins(b, &i, s, FALSE);
		}
	}
	if (!(b->batDirty&2)) b = BATsetaccess(b, BAT_READ);
	@:Pseudo(client,login,)@
	return MAL_SUCCEED;
}

str
CLTLastCommand(int *ret)
{
	BAT *b = BATnew(TYPE_int, TYPE_str, 12);
	int i;
	char s[26];

	if (b == 0)
		throw(MAL, "clients.getLastCommand", "failed to create BAT");
	for (i = 0; i < MAL_MAXCLIENTS; i++) {
		Client c = mal_clients+i;
		if (c->mode >= CLAIMED && c->user != oid_nil) {
			CLTtimeConvert((time_t) c->lastcmd,s);
			BUNins(b, &i, s, FALSE);
		}
	}
	if (!(b->batDirty&2)) b = BATsetaccess(b, BAT_READ);
	@:Pseudo(client,lastcommand,)@
	return MAL_SUCCEED;
}

str
CLTActions(int *ret)
{
	BAT *b = BATnew(TYPE_int, TYPE_int, 12);
	int i;

	if (b == 0)
		throw(MAL, "clients.getActions", "failed to create BAT");
	for (i = 0; i < MAL_MAXCLIENTS; i++) {
		Client c = mal_clients+i;
		if (c->mode >= CLAIMED && c->user != oid_nil) {
			BUNins(b, &i, &c->actions, FALSE);
		}
	}
	if (!(b->batDirty&2)) b = BATsetaccess(b, BAT_READ);
	@:Pseudo(client,actions,)@
	return MAL_SUCCEED;
}
str
CLTTime(int *ret)
{
	BAT *b = BATnew(TYPE_int, TYPE_lng, 12);
	int i;

	if (b == 0)
		throw(MAL, "clients.getTime", "failed to create BAT");
	for (i = 0; i < MAL_MAXCLIENTS; i++) {
		Client c = mal_clients+i;
		if (c->mode >= CLAIMED && c->user != oid_nil) {
			BUNins(b, &i, &c->totaltime, FALSE);
		}
	}
	if (!(b->batDirty&2)) b = BATsetaccess(b, BAT_READ);
	@:Pseudo(client,usec,)@
	return MAL_SUCCEED;
}

@-
Produce a list of clients currently logged in
@c
str
CLTusers(int *ret)
{
	BAT *b = BATnew(TYPE_int, TYPE_str, 12);
	int i;

	if (b == 0)
		throw(MAL, "clients.users", "failed to create BAT");
	for (i = 0; i < MAL_MAXCLIENTS; i++) {
		Client c = mal_clients+i;
		if (c->mode >= CLAIMED && c->user != oid_nil)
			b = BUNins(b, &i, local_itoa((int)c->user), FALSE);
	}
	if (!(b->batDirty&2)) b = BATsetaccess(b, BAT_READ);
	@:Pseudo(client,users,)@
	return MAL_SUCCEED;
}

str
CLTsetHistory(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	str* fname = (str *) getArgReference(stk,pci,1);
	(void) mb;

	if( cntxt->history){
#ifdef HAVE_LIBREADLINE
		write_history(cntxt->history);
#endif
		GDKfree(cntxt->history);
	}
	if( *fname == str_nil)
		cntxt->history = NULL;
	else {
		cntxt->history = GDKstrdup(*fname);
#ifdef HAVE_LIBREADLINE
		read_history(cntxt->history);
#endif
	}
	return MAL_SUCCEED;
}

str
CLTexit(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	(void) mb;		/* fool compiler */
	(void) stk;
	(void) pci;
	cntxt->mode = FINISHING;
	throw(MAL, "client.exit", "Exit session with soft error");
}
str
CLTquit(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	(void) mb;		/* fool compiler */
	(void) stk;
	(void) pci;
	if( cntxt != mal_clients )
		throw(MAL, "client.quit", "Server not stopped from console.");
	throw(MAL, "client.quit", "Server stopped.");
}

str
CLTstop(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	(void) mb;
	(void) stk;
	(void) pci;
	cntxt->itrace='x';	/* this forces it to stop at the next instruction */
    return MAL_SUCCEED;
}

str
CLTsuspend(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	int *id=  (int *) getArgReference(stk,pci,1);
	(void) cntxt;
	(void) mb;
    return MCsuspendClient(*id,0);
}
str
CLTwakeup(int *ret, int *id)
{
    (void) ret;     /* fool compiler */
    return MCawakeClient(*id);
}

@+ User administration
These commands (except changePassword, changeUsername and
checkPermission) can only be executed by the administrator.

@mal
command addUser(nme:str, pw:str, scen:bat[:str,:any_1]):oid
address CLTaddUser
comment "Allow user with password access to the given scenarios";
@c
str CLTaddUser(oid *ret, str *usr, str *pw, bat *sc) {
	str tmp;
	
	rethrow("addUser", tmp, AUTHaddUser(ret, usr, pw, sc));
	return(MAL_SUCCEED);
}

@mal
command removeUser(nme:str):void
address CLTremoveUser
comment "Remove the given user from the system";
@c
str CLTremoveUser(int *ret, str *usr) {
	str tmp;
	(void) ret;

	rethrow("removeUser", tmp, AUTHremoveUser(usr));
	return(MAL_SUCCEED);
}

@mal
command getUsername():str
address CLTgetUsername
comment "Return the username of the currently logged in user";
@c
str CLTgetUsername(str *ret) {
	str tmp;

	rethrow("getUsername", tmp, AUTHgetUsername(ret));
	return(MAL_SUCCEED);
}

@mal
command changeUsername(old:str, new:str):void
address CLTchangeUsername
comment "Change the username of the user into the new string";
@c
str CLTchangeUsername(int *ret, str *old, str *new) {
	str tmp;
	(void) ret;

	rethrow("changeUsername", tmp, AUTHchangeUsername(old, new));
	return(MAL_SUCCEED);
}

@mal
command changePassword(old:str, new:str):void
address CLTchangePassword
comment "Change the password for the current user";
@c
str CLTchangePassword(int *ret, str *old, str *new) {
	str tmp;
	(void) ret;

	rethrow("changePassword", tmp, AUTHchangePassword(old, new));
	return(MAL_SUCCEED);
}

@mal
command setPassword(user:str, pass:str):void
address CLTsetPassword
comment "Set the password for the given user";
@c
str CLTsetPassword(int *ret, str *usr, str *new) {
	str tmp;
	(void) ret;

	rethrow("setPassword", tmp, AUTHsetPassword(usr, new));
	return(MAL_SUCCEED);
}

@mal
command checkPermission(usr:str, pw:str, sc:str):void
address CLTcheckPermission
comment "Check permission for a user";
@c
str CLTcheckPermission(int *ret, str *usr, str *pw, str *sc) {
	str tmp;
	str ch = "";
	str algo = "plain";
	oid id;
	(void) ret;

	rethrow("checkPermission", tmp, AUTHcheckCredentials(&id, usr, pw, &ch, &algo, sc));
	return(MAL_SUCCEED);
}

@mal
command addScenario(usr:str, sc:str):void
address CLTaddScenario
comment "add the given scenario to the allowed scenarios for the given user";
@c
str CLTaddScenario(int *ret, str *usr, str *sc) {
	str tmp;
	(void) ret;

	rethrow("addScenario", tmp, AUTHaddScenario(usr, sc));
	return(MAL_SUCCEED);
}

@mal
command removeScenario(usr:str, sc:str):void
address CLTremoveScenario
comment "remove the given scenario from the allowed scenarios for the given user";
@c
str CLTremoveScenario(int *ret, str *usr, str *sc) {
	str tmp;
	(void) ret;

	rethrow("removeScenario", tmp, AUTHremoveScenario(usr, sc));
	return(MAL_SUCCEED);
}

@mal
command getUsers(s:bat[:str,:any_1]):bat[:oid,:str]
address CLTgetUsers
comment "return a BAT with user id and name available in the system with access to the given scenario(s)";
@c
str CLTgetUsers(bat *ret, bat *scens) 
{
	BAT *r = NULL;
	str tmp;

	rethrow("getUsers", tmp, AUTHgetUsers(&r, scens));
	BBPkeepref(*ret = r->batCacheid);
	return(MAL_SUCCEED);
}

str CLTshutdown(int *ret, bit *forced) {
	(void) ret;
	(void) forced;
	throw(MAL,"clients.shutdown","not yet implemented");
}
@}
