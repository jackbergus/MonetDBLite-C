@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2006 CWI.
@' All Rights Reserved.

@f clients
@a Martin Kersten, Fabian Groffen
@v 0.2
@* Client management

This module contains the primitives to inspect and adjust
the client records maintained during a session.

The administrator has full rights to change everything, while users are
only allowed to change their password or username.

@mal
module clients;

command setListing(flg:int):int
address CLTsetListing
comment "Turn on/off echo of MAL instructions:
	2 - show mal instruction,
	4 - show type resolutoin, 
	8 - show binding information";

command setDebug(flg:int):void
address CLTsetDebug
comment "Set the debugging bitset. See configuration file and documentation";

command setHistory(s:str)
address CLTsetHistory
comment "Designate console history file";

command getUsers( ):bat[:int,:str] 
address CLTusers
comment "Pseudo bat of users logged in";
command getLogins( ):bat[:int,:str] 
address CLTLogin
comment "Pseudo bat of client login time";

command getId():int
address CLTgetClientId
comment "return a number that unique represents the current client";
command getInfo( ):bat[:str,:str] 
address CLTInfo
comment "Pseudo bat with client attributes";

command getScenario():str 
address CLTgetScenario
comment "Retrieve current scenario name";
command setScenario(msg:str):str 
address CLTsetScenario
comment "Switch to other scenario handler, return previous one";


command trace(nme:str, flag:bit):void
address CLTtrace2
comment "Trace (on/off) receipt of all messages from a specific user";
command trace(flag:bit):void
address CLTtrace
comment "Trace (on/off) receipt of messages for all users";

command quit():void
address CLTquit
comment "Terminate the session for this client"';


@-
@{
@include prelude.mx
@+ Monet client data
Portions of the client record can be directly obtained for
backward compatibility. The routine clientInfo provides more
detailed information.
@h
#ifndef _CLIENTS_H
#define _CLIENTS_H
#include "mal.h"

mal_export str CLTsetListing(int *ret, int *flag);
mal_export str CLTgetClientId(int *ret);
mal_export str CLTgetScenario(str *ret);
mal_export str CLTsetScenario(str *ret, str *nme);
mal_export str CLTusers(int *ret);
mal_export str CLTsetDebug(int *ret, int *flg);
mal_export str CLTsetHistory(int *ret, str *fname);
mal_export str CLTclearDebug(int *ret, int *flg);
mal_export str CLTquit(int *ret);
mal_export str CLTLogin(int *ret);
mal_export str CLTInfo(int *ret);

mal_export str CLTtrace2(int *ret, str *nme, int *flg);
mal_export str CLTtrace(int *res, int *flg);
mal_export str CLTstop(int *ret, str *nme);
mal_export str CLTsuspend(int *ret, int *skey, int *timeout);
mal_export str CLTresume(int *ret, int *skey);

mal_export str CLTaddUser(oid *ret, str *usr, str *pw, bat *sc);
mal_export str CLTremoveUser(int *ret, str *usr);
mal_export str CLTchangePassword(int *ret, str *old, str *new);
mal_export str CLTsetPassword(int *ret, str *usr, str *new);
mal_export str CLTcheckPermission(int *ret, str *usr, str *pw, str *sc);
mal_export str CLTaddScenario(int *ret, str *usr, str *sc);
mal_export str CLTremoveScenario(int *ret, str *usr, str *sc);

#endif /* _CLIENTS_H */
@c
#include "clients.h"
#include "mal_scenario.h"
#include "mal_instruction.h"
#include "mal_client.h"
#include "mal_authorize.h"

#ifdef HAVE_LIBREADLINE
#include <readline/readline.h>
#include <readline/history.h>
#endif

str
CLTsetListing(int *ret, int *flag)
{
	Client c;

	(void) ret;		/*fool compiler */
	c = MCgetClient();
	*ret = c->listing;
	c->listing = *flag;
	return MAL_SUCCEED;
}

str
CLTgetClientId(int *ret)
{
	Client c = MCgetClient();

	*ret = c - mal_clients;
	return MAL_SUCCEED;
}

str
CLTgetScenario(str *ret)
{
	Client c = MCgetClient();

	if (c->scenario)
		*ret = GDKstrdup(c->scenario);
	else
		*ret = GDKstrdup("nil");
	return MAL_SUCCEED;
}

str
CLTsetScenario(str *ret, str *nme)
{
	Client c = MCgetClient();
	str msg = MAL_SUCCEED;

	msg = setScenario(c, *nme);
	*ret = 0;
	if (msg == NULL)
		*ret = GDKstrdup(c->scenario);
	return msg;
}

static char *
local_itoa(int i)
{
	static char buf[32];

	sprintf(buf, "%d", i);
	return buf;
}

str
CLTInfo(int *ret)
{
	Client c = MCgetClient();
	BAT *b = BATnew(TYPE_str, TYPE_str, 12);

	if (b == 0)
		return throwMessage("catalog.clientInfo", "failed to create BAT");

	BUNins(b, "user", local_itoa((int)c->user));
	BUNins(b, "password", ""); /* TODO: load from system tables */
	BUNins(b, "permission", local_itoa(c->permission));
	BUNins(b, "scenario", c->scenario);
	BUNins(b, "timer", local_itoa((int) c->timer));
	BUNins(b, "trace", local_itoa(c->itrace));
	if (!(b->batDirty&2)) b = BATsetaccess(b, BAT_READ);
	@:Pseudo(client,info,)@
	return MAL_SUCCEED;
}

str
CLTLogin(int *ret)
{
	BAT *b = BATnew(TYPE_int, TYPE_str, 12);
	int i;
	char s[26];

	if (b == 0)
		return throwMessage("catalog.clientLogin", "failed to create BAT");
	for (i = 0; i < MAL_MAXCLIENTS; i++) {
		Client c = mal_clients+i;
		if (c->mode >= CLAIMED && c->user) {
			time_t logintime = (time_t) c->login;
			struct tm localt;

#ifdef HAVE_LOCALTIME_R
			(void) localtime_r(&logintime, &localt);
#else
			/* race condition: return value could be
			 * overwritten in parallel thread before
			 * assignment complete */
			localt = *localtime(&logintime);
#endif

#ifdef HAVE_ASCTIME_R3
			asctime_r(&localt, s, sizeof(s));
#else
#ifdef HAVE_ASCTIME_R
			asctime_r(&localt, s);
#else
			/* race condition: return value could be
			 * overwritten in parallel thread before copy
			 * complete, however on Windows, asctime is
			 * thread-safe */
			strncpy(s, asctime(&localt), 26);
#endif
#endif
			s[24] = 0;
			BUNins(b, &i, s);
		}
	}
	if (!(b->batDirty&2)) b = BATsetaccess(b, BAT_READ);
	@:Pseudo(client,login,)@
	return MAL_SUCCEED;
}

@-
Produce a list of clients currently logged in
@c
str
CLTusers(int *ret)
{
	BAT *b = BATnew(TYPE_int, TYPE_str, 12);
	int i;

	if (b == 0)
		return throwMessage("clients.users", "failed to create BAT");
	for (i = 0; i < MAL_MAXCLIENTS; i++) {
		Client c = mal_clients+i;
		if (c->mode >= CLAIMED && c->user)
			b = BUNins(b, &i, local_itoa((int)c->user));
	}
	if (!(b->batDirty&2)) b = BATsetaccess(b, BAT_READ);
	@:Pseudo(client,users,)@
	return MAL_SUCCEED;
}

str
CLTsetDebug(int *ret, int *flg)
{
	(void) ret;
	(void) flg;		/*fool compiler */
	return throwMessage("clients.setDebug", "not yet implemented");
}

str
CLTsetHistory(int *ret, str *fname)
{
	Client c= MCgetClient();
	(void) ret;
	if( c->history){
#ifdef HAVE_LIBREADLINE
		write_history(c->history);
#endif
		GDKfree(c->history);
	}
	if( *fname == str_nil)
		c->history = NULL;
	else {
		c->history = GDKstrdup(*fname);
#ifdef HAVE_LIBREADLINE
		read_history(c->history);
#endif
	}
	return MAL_SUCCEED;
}

str
CLTclearDebug(int *ret, int *flg)
{
	(void) ret;
	(void) flg;		/*fool compiler */
	return throwMessage("clients.clearDebug", "not yet implemented");
}

str
CLTquit(int *ret)
{
	Client c = MCgetClient();

	(void) ret;		/* fool compiler */
	c->mode = FINISHING;
	return MAL_SUCCEED;
}

str
CLTtrace2(int *ret, str *nme, int *flg)
{
    (void) ret;     /* fool compiler */
	(void) nme;
	(void) flg;
/*    (void) traceClient(*nme, *flg); */
    return MAL_SUCCEED;
}

str
CLTtrace(int *res, int *flg)
{
    (void) res;     /* fool compiler */
    (void) MCtraceAllClients(*flg);
    return MAL_SUCCEED;
}

str
CLTstop(int *ret, str *nme)
{
    (void) ret;     /* fool compiler */
	(void) nme;
/*    return stopClient(MCgetClient(), *nme);*/
	return MAL_SUCCEED;
}

str
CLTsuspend(int *ret, int *skey, int *timeout)
{
    (void) ret;     /* fool compiler */
    return MCsuspendClient(MCgetClient(), *skey, *timeout);
}

str
CLTresume(int *ret, int *skey)
{
    (void) ret;     /* fool compiler */
    return MCresumeClient(MCgetClient(), *skey);
}


@+ User administration
These commands (except changePassword, changeUsername and
checkPermission) can only be executed by the administrator.

@mal
command addUser(nme:str, pw:str, scen:bat[:str,:any_1]):oid
address CLTaddUser
comment "Allow user with password access to the given scenarios";
@c
str CLTaddUser(oid *ret, str *usr, str *pw, bat *sc) {
	str tmp;
	
	rethrow("addUser", tmp, AUTHaddUser(ret, usr, pw, sc));
	return(MAL_SUCCEED);
}

@mal
command removeUser(nme:str):void
address CLTremoveUser
comment "Remove the given user from the system";
@c
str CLTremoveUser(int *ret, str *usr) {
	str tmp;
	(void) ret;

	rethrow("removeUser", tmp, AUTHremoveUser(usr));
	return(MAL_SUCCEED);
}

@mal
command changeUsername(old:str, new:str):void
address CLTchangeUsername
comment "Change the username of the user into the new string";
@c
str CLTchangeUsername(int *ret, str *old, str *new) {
	str tmp;
	(void) ret;

	rethrow("changeUsername", tmp, AUTHchangeUsername(old, new));
	return(MAL_SUCCEED);
}

@mal
command changePassword(old:str, new:str):void
address CLTchangePassword
comment "Change the password for the current user";
@c
str CLTchangePassword(int *ret, str *old, str *new) {
	str tmp;
	(void) ret;

	rethrow("changePassword", tmp, AUTHchangePassword(old, new));
	return(MAL_SUCCEED);
}

@mal
command setPassword(user:str, pass:str):void
address CLTsetPassword
comment "Set the password for the given user";
@c
str CLTsetPassword(int *ret, str *usr, str *new) {
	str tmp;
	(void) ret;

	rethrow("setPassword", tmp, AUTHsetPassword(usr, new));
	return(MAL_SUCCEED);
}

@mal
command checkPermission(usr:str, pw:str, sc:str):void
address CLTcheckPermission
comment "Check permission for a user";
@c
str CLTcheckPermission(int *ret, str *usr, str *pw, str *sc) {
	str tmp;
	str ch = "";
	str algo = "plain";
	oid id;
	(void) ret;

	rethrow("checkPermission", tmp, AUTHcheckCredentials(&id, usr, pw, &ch, &algo, sc));
	return(MAL_SUCCEED);
}

@mal
command addScenario(usr:str, sc:str):void
address CLTaddScenario
comment "add the given scenario to the allowed scenarios for the given user";
@c
str CLTaddScenario(int *ret, str *usr, str *sc) {
	str tmp;
	(void) ret;

	rethrow("addScenario", tmp, AUTHaddScenario(usr, sc));
	return(MAL_SUCCEED);
}

@mal
command removeScenario(usr:str, sc:str):void
address CLTremoveScenario
comment "remove the given scenario from the allowed scenatios for the given user";
@c
str CLTremoveScenario(int *ret, str *usr, str *sc) {
	str tmp;
	(void) ret;

	rethrow("removeScenario", tmp, AUTHremoveScenario(usr, sc));
	return(MAL_SUCCEED);
}
@}
