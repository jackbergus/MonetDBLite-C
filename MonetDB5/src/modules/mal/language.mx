@' The contents of this file are subject to the MonetDB Public
@' License Version 1.0 (the "License"); you may not use this file
@' except in compliance with the License. You may obtain a copy of
@' the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.0.html
@'
@' Software distributed under the License is distributed on an "AS
@' IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
@' implied. See the License for the specific language governing
@' rights and limitations under the License.
@'
@' The Original Code is the Monet Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2005 CWI.
@' All Rights Reserved.

@f language
@a Martin Kersten
@v 1.0
@* MAL language support
@+ Scalar iterators
Iterators are sometimes needed also at the MAL level.
The barrier and control primitives are often sufficient
to mimic them directly.
For the common case:
@example
for( i=first; i<last; i+= step)
@end example
we use a few predefined functions, which reduces the
number of MAL instructions otherwise needed.

e.g. a lower/upper bound, or a bat. An iterator is initialized in the first
call by recognizing that the control variable lies outside the intended
collection.

@mal
module mal;

command newRange(v:oid)(:bit,:oid)
address RNGnewRange_oid; 
command newRange(v:sht)(:bit,:sht)
address RNGnewRange_sht; 
command newRange(v:int)(:bit,:int)
address RNGnewRange_int; 
command newRange(v:lng)(:bit,:lng)
address RNGnewRange_lng; 
command newRange(v:flt)(:bit,:flt)
address RNGnewRange_flt; 
command newRange(v:dbl)(:bit,:dbl)
address RNGnewRange_dbl 
comment "This routine introduces an iterator
	over a scalar domain.";

command nextElement(step:oid,last:oid)(:bit,:oid)
address RNGnextElement_oid; 
command nextElement(step:sht,last:sht)(:bit,:sht)
address RNGnextElement_sht; 
command nextElement(step:int,last:int)(:bit,:int)
address RNGnextElement_int; 
command nextElement(step:lng,last:lng)(:bit,:lng)
address RNGnextElement_lng; 
command nextElement(step:flt,last:flt)(:bit,:flt)
address RNGnextElement_flt; 
command nextElement(step:dbl,last:dbl)(:bit,:dbl)
address RNGnextElement_dbl 
comment "Advances the iterator with a fixed value
	until it becomes >= last.";
@-
Note that the modules located in the kernel directory should not
rely on the MAL datastructures. That's why we have to deal with
some bat operations here.

The routines below are linked with the kernel by default
@mal
command raise(msg:str) :str 
address CMDraise
comment "Raise an exception labeled 
	with a specific message.";
pattern assert(v:any_1,term:str):void
address CMDassertProperty
comment "Check a property";
pattern assert(v:any_1,pname:str,oper:str,val:any_2):void
address CMDassertProperty
comment "Check a property";

@+ Macro expansion
Running a script stored in a file is interpreted as
It is typically used to initialize a context, therefore we need
to provide the runtime context. For the call variants we have
to determine an easy way to exchange the parameter/return values.
@mal
command register(m:str,f:str,code:str):void
address CMDregisterFunction
comment"Compile the code string and register it as a MAL function";

pattern call(s:str):void
address CMDcallString
comment "Evaluate a MAL string program";
pattern call(s:bat[:any_1,:str]):void
address CMDcallBAT
comment "Evaluate a program stored in a BAT";
command source(f:str):void
address CMDevalFile
comment "Merge the instructions stored in the 
	file with the current program";
@{
@+ Dummy code 
@h
#ifndef _LANGUAGE_H
#define _LANGUAGE_H
#include "mal.h"
#include "mal_assert.h"
#include "mal_module.h"
#include "mal_session.h"
#include "mal_resolve.h"
#include "mal_client.h"
#include "mal_interpreter.h"

mal_export str CMDraise(str *ret, str *msg);
mal_export str CMDassertProperty(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
mal_export str CMDregisterFunction(int *ret, str *m, str *f, str *code);
mal_export str CMDcallString(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
mal_export str CMDevalFile(int *ret, str *fnme);
mal_export str CMDcallBAT(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
mal_export str CMDincludeFile(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
mal_export str CMDdebug(int *ret, int *flg);
mal_export str CMDsetCwd(str *ret, str *fnme);
#endif /* _LANGUAGE_H */
@c

#include "language.h"

str
CMDraise(str *ret, str *msg)
{
	*ret = GDKstrdup(*msg);
	return GDKstrdup(*msg);
}

str
CMDassertProperty(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	return MALassert(mb,stk,pci);
}

@}
@+ Printing
The print commands are implemented as single instruction rules,
because they need access to the calling context.
At a later stage we can look into the issues related to
parsing the format string as part of the initialization phase.
The old method in V4 essentially causes a lot of overhead
because you have to prepare for the worst (e.g. mismatch format
identifier and argument value)
@{
@- Input redirectionrs
@c
str
CMDcallString(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	str src;
	str buf = 0;
	int len = 0;
	str *s;

	(void) mb;		/* fool compiler */
	s = (str *) getArgReference(stk, pci, 1);
	if (strlen(*s) == 0)
		return MAL_SUCCEED;
	src = (str) GDKmalloc(len = strlen(*s) + 3);
	/* GDK_atom routine requires enclosing quotes */
	strcpy(src, "\"");
	strcat(src, *s);
	strcat(src, "\"");
	strFromStr(src, &len, &buf);

	callString(getClient(), buf, FALSE);
	GDKfree(src);
	GDKfree(buf);
	return MAL_SUCCEED;
}

str 
CMDregisterFunction(int *ret, str *m, str *f, str *code){
	Client c;
	(void) m;
	(void) f;
	c= getClient();
	compileString(c,*code);
	stream_printf(GDKout,"REGISTER FUNCITON\n");
	printFunction(c->fdout, c->curprg->def,0);
	*ret = 0;
	return MAL_SUCCEED;
}
str
CMDevalFile(int *ret, str *fnme)
{
	str s = *fnme;
	Client c = getClient();
	char buffer[1024];

	(void) ret;		/* fool compiler */
	if (s == 0) {
		return throwMessage("mal.setCwd", "File name missing\n");
	}
	if (strlen(s) + strlen(c->cwd) + 2 >= 1024) {
		return throwMessage("mal.setCwd", "Evaluation buffer too small\n");
	}
	buffer[0] = 0;

	if (*s != '/') {
		strcpy(buffer, c->cwd);
		strcat(buffer, "/");
	}
	strcat(buffer, s);
	malInclude(getClient(), buffer, 0, FALSE);

	return MAL_SUCCEED;
}

str
CMDcallBAT(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	(void) mb;
	(void) stk;
	(void) pci;		/* fool compiler */
	return throwMessage("mal.call", "Not yet implemented");
}

str
CMDincludeFile(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	(void) mb;
	(void) stk;
	(void) pci;		/* fool compiler */
	return throwMessage("mal.include", "Not yet implemented");
}

str
CMDdebug(int *ret, int *flg)
{
	*ret = GDKdebug;
	if (*flg)
		GDKdebug = *flg;
	return MAL_SUCCEED;
}

str
CMDsetCwd(str *ret, str *fnme)
{
	Client c = getClient();

	*ret = c->cwd;
	c->cwd = GDKstrdup(*fnme);
	return MAL_SUCCEED;
}

@}
@+ MAL iterator code
This module contains the framework for the construction of iterators.
Iterators enumerate elements in a collection defined by a few parameters,
e.g. a lower/upper bound.

Iterators appear as ordinary function calls in the MAL code and
always return a boolean, to indicate that an element is available for
consumption. Initialization of the iterator representation depends
on its kind.

The most common class of iterators encountered in a programming
environment is the for-loop. It contains a for-loop variable,
a starting point and a limit. Changing the for-loop variable
within the for-loop body is considered bad code and should be avoided
to simplify data-flow analysis.

We assume that the range boundaries comply with the underlying domain.
@{
@= newRange
mal_export str RNGnewRange_@1(bit *res, @1 *i, @1 *first);
str RNGnewRange_@1(bit *res, @1 *i, @1 *first){
	*res = TRUE;
	*i= *first;
	return MAL_SUCCEED;
}

@= nextElement
mal_export str RNGnextElement_@1(bit *res, @1 *i, @1 *step, @1 *last);
str RNGnextElement_@1(bit *res, @1 *i, @1 *step, @1 *last){
	@1 v = *i;
	v = v + *step;
	*i = v;
	*res = v < *last;
	return MAL_SUCCEED;
}
@c

@:newRange(oid)@
@:newRange(lng)@
@:newRange(int)@
@:newRange(sht)@
@:newRange(flt)@
@:newRange(dbl)@

@:nextElement(oid)@
@:nextElement(lng)@
@:nextElement(int)@
@:nextElement(sht)@
@:nextElement(flt)@
@:nextElement(dbl)@

@-
There are a few more atom-airy storage types we have to introduce here:
OID, str, void, bit, ptr
@-
@}
