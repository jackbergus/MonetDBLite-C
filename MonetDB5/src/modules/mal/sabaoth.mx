@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2006 CWI.
@' All Rights Reserved.

@f sabaoth
@a Fabian Groffen
@+ Cluster support
The cluster facilitation currently only deals with (de-)registering of
services offered by the local server to other servers.
The name of this module is inspired by the Armada setting of anchient
times and origanisational structures.  Sabaoth, stands for ``Lord of
Hosts'' in an army setting as found in the Bible's New Testament.  This
module allows an army of Mservers to be aware of each other on a local
machine and redirect to each other when necessary.
@mal
module sabaoth;

command prelude()
address SABAOTHprelude
comment "Initialise the sabaoth module";

command epilogue()
address SABAOTHepilogue
comment "Release the resources held by the sabaoth module";


command marchScenario(lang:str)
address SABAOTHmarchScenario
comment "Publishes the given language as available for this server";

command retreatScenario(lang:str)
address SABAOTHretreatScenario
comment "Unpublishes the given language as available for this server";

command marchConnection(host:str, port:int, ssl:bit)
address SABAOTHmarchConnection
comment "Publishes the given host/port as available for connecting to this server";

# TODO
#command retreatConnection(host:str, port:int, ssl:bit)
#address SABAOTHretreatConnection
#comment "Unpublishes the given host/port as available for connecting to this server";

command wildRetreat()
address SABAOTHwildRetreat
comment "Unpublishes everything known for this server";


#sabaoth.prelude();

@- Implementation

@h

#ifndef _SABAOTH_DEF
#define _SABAOTH_DEF

/* nothing really... */

#endif
@-

@c
#include "sabaoth.h"
#include <mal.h>
#include <mal_exception.h>
#include <stdio.h> /* fseek, rewind */
#include <unistd.h>	/* unlink and friends */
#include <errno.h>
#include <string.h> /* for getting error messages */


#define SCENARIOFILE ".scen"

/**
 * Writes the given language to the scenarios file.  If the file doesn't
 * exist, it is created.  Multiple invocations of this function for the
 * same language are ignored.
 */
str SABAOTHmarchScenario(int *ret, str *lang) {
	FILE *f;
	str buf = alloca(sizeof(char) * 256);	/* should be enough for now */
	int len;
	(void)ret;

	if ((f = fopen(SCENARIOFILE, "a+")) != NULL) {
		if ((len = fread(buf, 1, 255, f)) > 0) {
			str p;

			buf[len] = '\0';
			/* find newlines and evaluate string */
			while ((p = strchr(buf, '\n')) != NULL) {
				*p = '\0';
				if (strcmp(buf, *lang) == 0) {
					(void)fclose(f);
					return(MAL_SUCCEED);
				}
				buf = p;
			}
		}
		/* append to the file */
		fprintf(f, "%s\n", *lang);
		(void)fflush(f);
		(void)fclose(f);
		return(MAL_SUCCEED);
	}
	throwf("IOException", "sabaoth.marchScenario",
			"unable to open file %s", SCENARIOFILE);
}

/**
 * Removes the given language from the scenarios file.  If the scenarios
 * file is empty (before or) after removing the language, the file is
 * removed.
 */
str SABAOTHretreatScenario(int *ret, str *lang) {
	FILE *f;
	str buf = alloca(sizeof(char) * 256);	/* should be enough for now */
	int len;
	(void)ret;

	if ((f = fopen(SCENARIOFILE, "a+")) != NULL) {
		if ((len = fread(buf, 1, 255, f)) > 0) {
			str p;
			FILE *tmp = tmpfile();
			int written = 0;

			buf[len] = '\0';
			/* find newlines and evaluate string */
			while ((p = strchr(buf, '\n')) != NULL) {
				*p = '\0';
				if (strcmp(buf, *lang) != 0) {
					fprintf(tmp, "%s\n", buf);
					written = 1;
				}
				buf = p;
			}
			if (written != 0) {
				buf = alloca(sizeof(char) * 256);
				/* no idea how to "move" a file by it's fd (sounds
				 * impossible anyway) and tmpnam is so much "DO NOT USE"
				 * that I decided to just copy over the file again... */
				rewind(f);
				fflush(tmp);
				rewind(tmp);
				len = fread(buf, 1, 256, tmp);
				fwrite(buf, 1, len, f);
				fflush(f);
				fclose(f);
				fclose(tmp); /* this should remove it automagically */
				return(MAL_SUCCEED);
			} else {
				(void)fclose(f);
				unlink(SCENARIOFILE);
				return(MAL_SUCCEED);
			}
		} else if (len == 0) {
			(void)fclose(f);
			unlink(SCENARIOFILE);
			return(MAL_SUCCEED);
		} else { /* some error */
			str err = strerror(errno);
			(void)fclose(f);
			throwf("IOException", "sabaoth.retreatScenario",
					"error while reading from file: %s", err);
		}
	}
	throwf("IOException", "sabaoth.retreatScenario",
			"unable to open file %s", SCENARIOFILE);
}

#define CONNECTIONFILE ".conn"

/**
 * Writes an URI to the connection file based on the given arguments.
 * If the file doesn't exist, it is created.  Multiple invocations of
 * this function for the same arguments are NOT ignored.
 */
str SABAOTHmarchConnection(int *ret, str *host, int *port, bit *ssl) {
	FILE *f;
	(void)ret;

	if ((f = fopen(CONNECTIONFILE, "a")) != NULL) {
		/* append to the file */
		fprintf(f, "mapi%s:monetdb://%s:%i/\n", *ssl ? "s" : "", *host, *port);
		(void)fflush(f);
		(void)fclose(f);
		return(MAL_SUCCEED);
	}
	throwf("IOException", "sabaoth.marchConnection",
			"unable to open file %s", CONNECTIONFILE);
}

/**
 * Removes all known publications of available services.  The function
 * name is a nostalgic phrase from "Defender of the Crown" from the
 * Commodore Amiga age.
 */
str SABAOTHwildRetreat(int *ret) {
	(void)ret;

	unlink(SCENARIOFILE);
	unlink(CONNECTIONFILE);
	return(MAL_SUCCEED);
}


str SABAOTHprelude(int *ret) {
	(void)ret;

	return(MAL_SUCCEED);
}

str SABAOTHepilogue(int *ret) {
	(void)ret;

	return(SABAOTHwildRetreat(ret));
}
