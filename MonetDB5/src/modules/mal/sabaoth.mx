@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
@' Copyright August 2008-2009 MonetDB B.V.
@' All Rights Reserved.

@f sabaoth
@a Fabian Groffen
@+ Cluster support
The cluster facilitation currently only deals with (de-)registering of
services offered by the local server to other servers.
The name of this module is inspired by the Armada setting of anchient
times and origanisational structures.  Sabaoth, stands for ``Lord of
Hosts'' in an army setting as found in the Bible's New Testament.  This
module allows an army of Mservers to be aware of each other on a local
machine and redirect to each other when necessary.
@mal
module sabaoth;

command prelude() :void
address SABprelude
comment "Initialise the sabaoth module";

command epilogue() :void
address SABepilogue
comment "Release the resources held by the sabaoth module";


command marchScenario(lang:str)
address SABmarchScenario
comment "Publishes the given language as available for this server";

command retreatScenario(lang:str)
address SABretreatScenario
comment "Unpublishes the given language as available for this server";

command marchConnection(host:str, port:int)
address SABmarchConnection
comment "Publishes the given host/port as available for connecting to this server";

command getLocalConnectionHost():str
address SABgetLocalConnectionHost
comment "Returns the hostname this server can be connected to, or nil if none";

command getLocalConnectionPort():int
address SABgetLocalConnectionPort
comment "Returns the port this server can be connected to, or 0 if none";

command wildRetreat()
address SABwildRetreat
comment "Unpublishes everything known for this server";


#sabaoth.prelude();
@-
TODO
#command retreatConnection(host:str, port:int)
#address SABretreatConnection
#comment "Unpublishes the given host/port as available for connecting to this server";


@- Implementation

@h

#ifndef _SABAOTH_DEF
#define _SABAOTH_DEF

#ifdef WIN32
#ifndef LIBSABAOTH
#define sabaoth_export extern __declspec(dllimport)
#else
#define sabaoth_export extern __declspec(dllexport)
#endif
#else
#define sabaoth_export extern
#endif

sabaoth_export str SABprelude(int *ret);
sabaoth_export str SABepilogue(int *ret);
sabaoth_export str SABmarchScenario(int *ret, str *lang);
sabaoth_export str SABretreatScenario(int *ret, str *lang);
sabaoth_export str SABmarchConnection(int *ret, str *host, int *port) ;
sabaoth_export str SABgetLocalConnectionHost(str *ret);
sabaoth_export str SABgetLocalConnectionPort(int *ret);
sabaoth_export str SABwildRetreat(int *ret);

#endif
@-

@c
#include "mal_config.h"
#include <mal.h>
#include <mal_exception.h>
#include <mal_sabaoth.h>	/* for the implementation of the functions */
#include "sabaoth.h"

str SABprelude(int *ret) {
	(void)ret;

	return(MAL_SUCCEED);
}

str SABepilogue(int *ret) {
	(void)ret;

	return(SABAOTHwildRetreat(ret));
}

str SABmarchScenario(int *ret, str *lang){
	return SABAOTHmarchScenario(ret, lang);
}

str SABretreatScenario(int *ret, str *lang){
	return SABAOTHretreatScenario(ret, lang);
}

str SABmarchConnection(int *ret, str *host, int *port) {
	return SABAOTHmarchConnection(ret, host, port);
}

str SABgetLocalConnectionHost(str *ret) {
	str tmp, con, p;

	rethrow("sabaoth.getLocalConnectionHost", tmp,
			SABAOTHgetLocalConnection(&con));

	if (strcmp(con, (str)str_nil) == 0) {
		*ret = con;
		return(MAL_SUCCEED);
	}

	/* con looks like mapi:monetdb://hostname:port */
	/* do some poor man's parsing */
	tmp = con;
	p = strchr(con, ':') + 1;
	con = strchr(p, ':') + 3;
	p = strchr(con, ':');
	*p = '\0';

	*ret = GDKstrdup(con);
	GDKfree(tmp);
	return(MAL_SUCCEED);
}

str SABgetLocalConnectionPort(int *ret) {
	str tmp, con, p;

	rethrow("sabaoth.getLocalConnectionHost", tmp,
			SABAOTHgetLocalConnection(&con));

	if (strcmp(con, (str)str_nil) == 0) {
		*ret = 0;
		GDKfree(con);
		return(MAL_SUCCEED);
	}

	/* con looks like mapi:monetdb://hostname:port */
	/* do some poor man's parsing */
	tmp = con;
	p = strchr(con, ':') + 1;
	p = strchr(p, ':') + 1;
	con = strchr(p, ':') + 1;
	p = strchr(con, '/');
	*p = '\0';

	*ret = atoi(con);
	GDKfree(tmp);
	return(MAL_SUCCEED);
}

str SABwildRetreat(int *ret) {
	return SABAOTHwildRetreat(ret);
}
