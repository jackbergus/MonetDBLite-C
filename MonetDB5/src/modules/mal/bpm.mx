@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2007 CWI.
@' All Rights Reserved.

@f bpm
@v 0.3
@a M.L.Kersten
@* BAT Partition Manager
In real-life database applications the BATs tend to grow beyond
the memory size. This leads to a heavy IO dominated behavior,
which can partly be avoided by breaking up the query into a sequence
of subqueries using a map-reduce strategy.
The BAT partition manager (BPM) module is designed to 
support this strategy using range- and hash-partitioning.

Consider we want to reorganize R:bat[:oid,:int] into three range partitions,
based on splitting by tail value. Two partitions are stable
and the third partition is reserved for appends.
The following MAL program illustrates the snippet of actions needed:
@example
	bpm.open();
	Ralias:= bpm.deposit("myversion",R:bat[:oid,:int]);
	bpm.rangePartition(Ralias,nil:int,100);
	bpm.rangePartition(Ralias,101,200);
	bpm.close();
@end example
The command @sc{bpm.deposit} registers a BAT as one 
for which a partitioned copy is required.
The first partition call breaks the orginal BAT into
two pieces: (nil:int,100) and (101,nil:int).
The second call breaks the latter into (101,200)
and (201,nil:int).
The BAT partitions share the persistency properties.
Partitioning on the head simple calls for a reverse operation
on the source BAT first.

The partitions are given an index number by which they can be retrieved.
This number remains stable until a new partitioning command
is issued.

The partition manager also supports hash-based partitioning.
Its argument is the number of hash buckets on the tail
and the prime multiplier for spreading.
@example
	bpm.open();
	Rrev:= bat.reverse(R:bat[:oid,:int]);
	Ralias:= bpm.deposit("myHashVersion",Rev);	# creates side effects
	bpm.hashPartition(Ralias,5,1023);
	bpm.close();
@end example
This example creates a hash-partition based on the head.

The design is based on the assumption that partitions
are reasonably large. This helps to limit plan explosion.
(or a scheduler should step in)

@- Derived partitioning
A relational front-end would benefit from derived horizontal
fragmentation. It would enable grouping together related
fragments on the same site. 
Assume a relation R(A,B) which is already partitioned on A
the derived fragmentation on the head is enforced with
@example
bpm.derivedPartition(B,A);
@end example
@- Using partitions
The partitioned BAT can be used in two ways. A query plan can be
rewritten into a generator over the partitions, or it can be
used by optimizers to derived all subqueries first for
symbolic evaluation.

The former is illustrated with the snippet to select part of
a partitioned BAT. In this example we collect the partial
results in the accumulator BAT tu.
@example
	bpm.open();
	Ralias:= bpm.take("myversion",:bat[:oid,:int]);
	tu:= bat.new(:oid,:int);
barrier (idx,Rp):= bpm.newIterator(Ralias);
	...
	t:= algebra.select(Rp,0,100);
	tu:= algebra.union(tu,t);
	...
	redo (idx,Rp):= bpm.hasMoreElements(Ralias);
exit (idx,b);
	bpm.close();
@end example

The partitioned BATs are particularly useful during query
optimization. However, it only works if the BAT identifier
can be determined at compile time. For SQL it can be simply looked up in
the catalog as part of the preparatory optimizer step.
The same problem handled by an optimizer produces the plan:
@example
	bpm.open();
	R:= bpm.take("myversion",:bat[:oid,:int]); # get the partition alias
	optimizer.bpm();
	T:= algebra.select(R,0,100);
@end example
is translated into to obtain the
@example
	bpm.open();
	Ralias:= bpm.take("myversion",:bat[:oid,:int]);
	R0:= bpm.take(Ralias, 0); #get first partition
	R1:= bpm.take(Ralias, 1); #get second partition
	R2:= bpm.take(Ralias, 2); #get third partition
	R:= mat.new(R0,R1,R2);
	T:= algebra.select(R,0,100);
	optimizer.multitable();
@end example
It is up to the @sc{mat} optimizer to decide about
further plan expansion or an iterator approach.

@- Partition updates
The content of the partitions is preferrable updated in bulk.
This calls for accumulation of insertions/deletions in pending
update BATs, as already performed in the SQL code generator.
Once the transaction is commited, the updates are propagated
(in parallel) to all partitions.
@example
	bpm.open();
	Ralias := bpm.take("myversion",:bat[:oid,:int]); 
	bpm.insert(Ralias, Rinsert);	# handle pending inserts
	bpm.delete(Ralias, Rdelete);	# handle pending deletes
	bpm.replace(Ralias, Rold, Rnew);	# handle pending updates
	bpm.close();
@end example
The @sc{replace} operator works on the assumption that
the head of @sc{Rold} and @sc{Rnew} is unique.

It remains possible to retrieve a partition and directly
insert elements, but then it is up to the compiler to
ensure that the boundery conditions are met.

@- Partitioned results
In many situations, you would like to keep the partial results
as a partitioned BAT again.
The easiest solution is to remember the partitions as temporary 
variables during optimization, e.g. as properties of all fragment variables.

However, a persistent partitioned BAT can also be created first,
whose partitions are empty. Subsequently, we insert the temporary results. 
Depending on the fragmentation criteria, pieces may align
with the pieces known, or lead to a redistribution of the
buns to the correct bats.

The previous plan for this becomes
@example
	bpm.open();
	Tmp := bpm.take("tmp",:bat[:oid,:int]);
	bpm.rangePartition(Tmp,nil,100);
	bpm.rangePartition(Tmp,101,200);

	Ralias:= bpm.take("myversion",:bat[:oid,:int]); # get the partition alias
	R0:= bpm.take(Ralias, 0);
	T0:= algebra.select(R0,0,100);
	bpm.deposit(Tmp,T0);

	R1:= bpm.take(Ralias, 1);
	T1:= algebra.select(R1,0,100);
	bpm.deposit(Tmp,T1);

	R2:= bpm.take(Ralias, 2);
	T2:= algebra.select(R2,0,100);
	bpm.deposit(Tmp,T2);
@end example
The rationale for this approach is that re-distribution
of temporary results are hidden behind the @sc{bpm} interface.
The only decision that should be taken by the optimizer is
the fragmentation criteria for the temporary results.

For temporary results the range bounds need not be
stored in the bpm. Instead, the mat approach could
be used to reduce the plan size.
@example
	bpm.open();
	Ralias:= bpm.take("myversion",:bat[:oid,:int]); # get the partition alias
	R0{hlow=nil:oid,hhigh=nil:oid,tlow=nil:int,thigh=100}:= bpm.take(Ralias, 0);
	T0:=algebra.select(R0,0,100);

	R1{hlow=nil:oid,hhigh=nil:oid,tlow=101,thigh=200}:= bpm.take(Ralias, 1);
	T1:= algebra.select(R1,0,100);

	R2{hlow=nil:oid,hhigh=nil:oid,tlow=201,thigh=nil:int}:=  bpm.take(Ralias, 2);
	R:= mat.new(T0,T1,T2);
	T2:=algebra.select(R2,0,100);
@end example

@- Partition selection
The select operation can be overloaded in the BPM to
improve processing further. For example, the operation
@example
	t := bpm.select(Ralias,0,100);
@end example
extracts portions of all three partitions and creates 
a non-partitioned result BAT. 
There is no information on the partitions involved in this operation
for the optimizer.


The lifetime of a partitioned table is inherited from its components. 
How to detect that a temporary BAT is removed from the BBP?

@mal
module bpm;

command open():void
address BPMopen
comment "Locate and open the BAT partition box";

command close():void
address BPMclose
comment "Save and close the BAT partition box ";

command destroy():void
address BPMdestroy
comment "Destroy the BAT partition box";

command deposit(nme:str,b:bat[:oid,:any_2]) :void
address BPMdeposit
comment "Create a new partitioned BAT by name";

@-
The partitioning is handled inside the module.
If the alias BAT denotes an existing partition, it is
further broken into pieces.
@mal
command rangePartition(pb:bat[:oid,:any_2], 
		ll:oid, lh:oid, rl:any_2, rh:any_2):void
address BPMrange
comment "Create a range partition on a BAT";
command rangePartition(pb:bat[:oid,:any_2], pv:bat[:oid,:any_2]):void
address BPMrangeVector
comment "Create the partitions based on a range vector";

command hashPartition(pb:bat[:oid,:any_2], slots:int):void
address BPMhash
comment "Create a hash partition on a BAT";
command derivePartition(pb:bat[:oid,:any_2], src:bat[:oid,:any_2]):bat[:oid,:any_2]
address BPMderived
comment "Create a derived fragmentation over the head using src.";

command take(pb:str, b:bat[:oid,:any_2]):bat[:oid,:any_2]
address BPMtake
comment "Retrieve the alias for a partitioned BAT";
command take(alias:bat[:oid,:any_2],index:int) :bat[:oid,:any_2]
address BPMtakePartition
comment "Retrieve a single component of a partitioned BAT by index";

command insert(pb:bat[:oid,:any_2],b:bat[:oid,:any_2]) :void
address BPMinsert
comment "Insert elements into the BAT partitions";
command delete(pb:bat[:oid,:any_2],b:bat[:oid,:any_2]) :void
address BPMdelete
comment "Delete elements from the BAT partitions";
command replace(pb:bat[:oid,:any_2],old:bat[:oid,:any_2],
		nwe:bat[:oid,:any_2]) :void
address BPMreplace
comment "Replace the content of the BAT partitions";

command getNames():bat[:oid,:str]
address BPMgetNames
comment "Retrieve the names of all known partitioned BATs";

command discard(alias:bat[:oid,:any_2]) :void
address BPMdiscard
comment "Release a partitioned BAT from the box";

@-
In most situations we would like to iterator over
the components of a single partitioned BAT. 
Wherever possible skipping elements that don't qualify
the bounds given for the head.
@mal
command newIterator(grp:bat[:oid,:any_2]):bat[:oid,:any_2]
address BPMnewIterator
comment "Create an iterator over the BAT partitions.";

command newIterator(grp:bat[:oid,:any_2],first:any_2,last:any_2)
		:bat[:oid,:any_2]
address BPMnewIteratorRng
comment "Create an iterator over the BAT partitions.";

command newIterator(pb:bat[:oid,:any_2], first:oid,last:oid,
		vlow:any_2, vhgh:any_2) :bat[:oid,:any_2]
address BPMnewIteratorRng4
comment "Create an iterator over the BAT partitions.";

command hasMoreElements(grp:bat[:oid,:any_2]) :bat[:oid,:any_2]
address BPMhasMoreElements
comment "Localize the next partition for processing.";

command hasMoreElements(pb:bat[:oid,:any_2], 
		low:any_2, hgh:any_2) :bat[:oid,:any_2]
address BPMhasMoreElementsRng2
comment "Localize the next partition for processing.";
command hasMoreElements(pb:bat[:oid,:any_2], first:oid,last:oid,
		vlow:any_2, vhgh:any_2) :bat[:oid,:any_2]
address BPMhasMoreElementsRng4
comment "Localize the next partition for processing.";

command getDimension(b:bat[:oid,:any_2])(first:oid,last:oid, 
	vlow:any_2, vhgh:any_2)
address BPMgetDimension
comment "Obtain the partition boundary values.";

command dump(alias:bat[:oid,:any_2])
address BPMdumpAlias
comment "Give the details of the partition tree";
command dump()
address BPMdump;

command prelude()
address BPMprelude;

command epilogue()
address BPMepilogue;

bpm.prelude();
@-
@{
@include ../kernel/kprelude.mx
@+ BAT Partition Manager Implementation
The implementation is organized around a shared box, which should
be saved between session. It is up to other layers to ensure that BATs
being deleted are also removed from the partition box to avoid
mis-represented information.

The internal data structure is used as a cache for improved access.
@h
#ifndef _MAL_BPM
#define _MAL_BPM
#include "mal.h"
#include "mal_client.h"
#include "mal_interpreter.h"

#ifdef WIN32
#ifndef LIBBPM
#define bpm_export extern __declspec(dllimport)
#else
#define bpm_export extern __declspec(dllexport)
#endif
#else
#define bpm_export extern
#endif

bpm_export str BPMopen(void);
bpm_export str BPMclose(int *ret);
bpm_export str BPMdestroy(int *ret);
bpm_export str BPMdeposit(int *ret, str *nme, int *src);

bpm_export str BPMrange(int *ret, int *bid, ptr *low, ptr *hgh);
bpm_export str BPMrangeVector(int *ret, int *bid, int *pv);
bpm_export str BPMhash(int *ret, int *bid, int *slots, int *prime);
bpm_export str BPMderived(int *ret, int *bid, int *src);

bpm_export str BPMtake(int *ret, str *nme);
bpm_export str BPMtakePartition(int *ret, int *bid, int *idx);

bpm_export str BPMinsert(int *ret, int *bid, int *ins);
bpm_export str BPMdelete(int *ret, int *bid, int *del);
bpm_export str BPMreplace(int *ret, int *bid, int *ins, int *del);

bpm_export str BPMgetNames(int *bid);
bpm_export str BPMdiscard(int *ret, int *bid);

bpm_export str BPMnewIterator(int *res, int *grp);
bpm_export str BPMnewIteratorRng(int *res, int *grp, ptr *first, ptr *last);
bpm_export str BPMnewIteratorRng4(int *res, int *grp, ptr *first, ptr *last,
	ptr *vlow, ptr *vhgh);

bpm_export str BPMhasMoreElements(int *res, int *grp);
bpm_export str BPMhasMoreElementsRng2(int *res, int *grp, ptr *first, ptr *last);
bpm_export str BPMhasMoreElementsRng4(int *res, int *grp, ptr *first, ptr *last,
	ptr *vlow, ptr *vhgh);

bpm_export str BPMgetDimension(ptr *first, ptr *last,
	ptr *vlow, ptr *vhgh, int *bid);
bpm_export str BPMdump(int *ret);
bpm_export str BPMdumpAlias(int *ret, int *bid);
bpm_export str BPMprelude(int *ret);
bpm_export str BPMepilogue(int *ret);
#endif
@-
The partition manager uses its private memory mapped catalog of persistent BATs.
The handle returned is a BAT that represents the whole group.
They are further administered  by type
@c
#include "mal_config.h"
#include "bpm.h"

@-
Partitions are organized in a tree structure where
each node describes how it derives its chidren.
For range-based partitions it simply means the range bounds,
for hash-based partitions we need the hash properties, e.g.
the bucket number and the hash mask.

@c
#define	RANGE	1
#define HASH	2

typedef struct PARTITIONREC {
	bat alias;		/* BAT identifier */
	bat bid;		/* partition BAT */
	int index;
@-
Each partition is described by a range or hash bucket
@c
	int	kind; /* the partition step */
	int reversed; /* on head or tail(=default=0) */
	ValRecord hlow,hhgh; /* head range */
	ValRecord rlow,rhgh; /* tail range */
	int bucket; /* for hashing */
	int prime; /* multiplier before masking */
@-
Depending on the partition kind, we have three descendants or
a list of hash-based children.
@c
	struct PARTITIONREC *left, *middle, *right;
	struct PARTITIONREC *link;	/* list of all partitions*/
} *Partition, PartitionRec;

@-
The number of partitioned BATs is considered low and
a straight forward array with linear search seems
sufficient to find the alias versions. The first entry
is not used for defensive code reasons.
@c
static Partition *bpmcat= 0;
static int bpmcatsize, bpmcattop;

static Partition getAlias(int bid){
	int i;
	for(i=0;i<bpmcattop; i++)
		if( bpmcat[i] && bpmcat[i]->bid== bid) return bpmcat[i];
	return 0;
}
static void delAlias(int bid){
	int i;
	for(i=0;i<bpmcattop; i++)
		if( bpmcat[i] && bpmcat[i]->bid== bid) bpmcat[i]=0;
	/* remainder is taken care elsewhere */
}
static int getFreeAlias(){
	int i;
	for(i=0;i<bpmcattop; i++)
		if( bpmcat[i]== 0) return i;
	if( bpmcattop < bpmcatsize)
		return bpmcattop++;
	/* reallocate the catalog */
	bpmcat= (Partition*) GDKzalloc(sizeof(PartitionRec)* (bpmcatsize+1024));
	bpmcatsize +=1024;
	return bpmcattop++;
}

static Partition getPartition(Partition p, int index){
	while(p && index--){
		p= p->link;
	}
	return p;
}
@- Box administration
The box currently does not carry any client protection.
This should later be added or being provided by the BAT access.

The partition catalog is saved between sessions as a collection
of BATs.
@= openCat
@c
str
BPMopen()
{
	if(bpmcat) return MAL_SUCCEED;
    mal_set_lock(mal_contextLock, "bpm");
	/* read the partition table structure */
	bpmcat= (Partition *) GDKzalloc(sizeof(PartitionRec)*1024);
	bpmcatsize= 1024;
	bpmcattop= 0;
    mal_unset_lock(mal_contextLock, "bpm");
	return MAL_SUCCEED;
}
@-
The remainder contains the implementation.
@c
str
BPMclose(int *ret)
{
	(void) ret;
    mal_set_lock(mal_contextLock, "bpm");
	/* save the partition table structure */
    mal_unset_lock(mal_contextLock, "bpm");
	throw(MAL, "bpm.close","NYI");
}

str
BPMdestroy(int *ret)
{
	(void) ret;
	/* re-initialize the partition table */
	throw(MAL, "bpm.destroy","NYI");
}

str
BPMdeposit(int *ret, str *nme, int *src)
{
	BAT *b;
	BPMopen();
	@:getBATdescriptor(src,b,"bpm.deposit");
	/* test for duplicate names */
	/* a nil-nil range partition*/
	(void) nme;
	(void) b;
	*ret= 0;
	throw(MAL, "bpm.deposit","NYI");
}

str
BPMrange(int *ret, int *bid, ptr *low, ptr *hgh){
	BAT *b;
	BPMopen();
	@:getBATdescriptor(bid,b,"bpm.range")@
	/* determine the partitioning scheme */
	(void) b;
	(void) low;
	(void) hgh;
	*ret= 0;
	throw(MAL, "bpm.range","NYI");
}
str
BPMrangeVector(int *ret, int *bid, int *pv)
{
	BAT *b;
	BPMopen();
	@:getBATdescriptor(bid,b,"bpm.range")@
	/* determine the partitioning scheme */
	(void) b;
	(void) bid;
	(void) pv;
	*ret= 0;
	throw(MAL, "bpm.range","NYI");
}
str
BPMhash(int *ret, int *bid, int *slots, int *prime)
{
	BAT *b;
	BPMopen();
	@:getBATdescriptor(bid,b,"bpm.hash")@
	/* get hash slot administration */
	(void) b;
	(void) slots;
	(void) prime;
	*ret= 0;
	throw(MAL, "bpm.hash","NYI");
}
str
BPMderived(int *ret, int *bid, int *src)
{
	BAT *b;
	BPMopen();
	@:getBATdescriptor(bid,b,"bpm.derived")@
	/* partition into two direction */
	(void) b;
	(void) src;
	*ret= 0;
	throw(MAL, "bpm.derived","NYI");
}
@-
Takeing out partitions.
@c
str
BPMtake(int *ret, str *nme)
{
	BPMopen();
	(void) nme;
	*ret =0;
	throw(MAL, "bpm.take","NYI");
}
str
BPMtakePartition(int *ret, int *bid, int *index)
{
	BPMopen();
	(void) bid;
	(void) index;
	*ret =0;
	throw(MAL, "bpm.take","NYI");
}
@- Updates
@c
str
BPMinsert(int *ret, int *bid, int *ins)
{
	BAT *b;
	BPMopen();
	@:getBATdescriptor(bid,b,"bpm.insert")@
	/* distributed the content */
	(void) b;
	(void) ins;
	*ret= 0;
	throw(MAL, "bpm.insert","NYI");
}

str
BPMdelete(int *ret, int *bid, int *del)
{
	BAT *b;
	BPMopen();
	@:getBATdescriptor(bid,b,"bpm.delete")@
	/* delete some information from the partitions */
	(void) b;
	(void) del;
	*ret= 0;
	throw(MAL, "bpm.delete","NYI");
}

str
BPMreplace(int *ret, int *bid, int *ins, int *del)
{
	BAT *b;
	BPMopen();
	@:getBATdescriptor(bid,b,"bpm.insert")@
	/* replace values */
	(void) b;
	(void) ins;
	(void) del;
	*ret= 0;
	throw(MAL, "bpm.replace","NYI");
}

str
BPMgetNames(int *ret)
{
	BPMopen();
	*ret =0;
	throw(MAL, "bpm.getNames","NYI");
}

str
BPMdiscard(int *ret, int *bid)
{
	BPMopen();
	(void) bid;
	*ret =0;
	throw(MAL, "bpm.discard","NYI");
}
@- Iterations
We start with the large chunk iterator.
The definition of the control statements require the same
control variables, which means that the BATview is accessible
to determine how far to advance when the next chunk is retrieved.
The number of elements in the chunk is limited by the granule
size.

Iterations over partitioned BATs can be valued constrainted.
@c
str
BPMnewIterator(int *ret, int *bid)
{
	(void) bid;
	*ret = 0;
	throw(MAL, "bpm.newIterator","NYI");
}

str
BPMnewIteratorRng(int *ret, int *bid, ptr *first, ptr *last)
{
	(void) first;
	(void) last;
	(void) bid;
	*ret = 0;
	throw(MAL, "bpm.newIterator","NYI");
}


str
BPMnewIteratorRng4(int *ret, int *bid, ptr *first, ptr *last,
	ptr *vlow, ptr *vhgh)
{
	(void) first;
	(void) last;
	(void) vlow;
	(void) vhgh;
	(void) bid;
	*ret = 0;
	throw(MAL, "bpm.newIterator","NYI");
}

str
BPMhasMoreElements(int *ret, int *bid)
{
	(void) bid;
	*ret = 0;
	throw(MAL, "bpm.hasMoreElements","NYI");
}

str
BPMhasMoreElementsRng2(int *ret, int *bid, ptr *first, ptr *last)
{
	(void) first;
	(void) last;
	(void) bid;
	*ret = 0;
	throw(MAL, "bpm.hasMoreElements","NYI");
}


str
BPMhasMoreElementsRng4(int *ret, int *bid, ptr *first, ptr *last,
	ptr *vlow, ptr *vhgh)
{
	(void) first;
	(void) last;
	(void) vlow;
	(void) vhgh;
	(void) bid;
	*ret = 0;
	throw(MAL, "bpm.hasMoreElements","NYI");
}

str
BPMgetDimension(ptr *first, ptr *last, ptr *vlow, ptr *vhgh, int *bid)
{
	(void) first;
	(void) last;
	(void) vlow;
	(void) vhgh;
	(void) bid;
	throw(MAL, "bpm.getDimension","NYI");
}

str
BPMdump(int *ret)
{
	(void) ret;
	throw(MAL, "bpm.dump","NYI");
}
str
BPMdumpAlias(int *ret, int *bid)
{
	(void) ret;
	(void) bid;
	throw(MAL, "bpm.dump","NYI");
}

@c
str
BPMprelude(int *ret)
{
    mal_set_lock(mal_contextLock, "bpm.prelude");
	*ret =0;
    mal_unset_lock(mal_contextLock, "bpm.prelude");
	return MAL_SUCCEED;
}
@-
In the epilogue phase we should discard any temporary MAT.
@c
str
BPMepilogue(int *ret)
{
	/* TODO: Make sure these are used. This is needed by icc only. And 
	   should be removed once the implementation matures.
	 */
	*ret =0;
	return MAL_SUCCEED;
}

