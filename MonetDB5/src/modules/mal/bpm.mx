@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2006 CWI.
@' All Rights Reserved.

@f bpm
@v 0.2
@a M.L.Kersten
@* BAT Partition Manager
In real-life database applications the BATs tend to grow beyond
the memory size. This leads to a heavy IO dominated behavior,
which can partly be avoided by breaking up the query into a sequence
of subqueries using a map-reduce strategy.
The BAT partition manager (BPM) module is designed to 
support this strategy using range- and hash-partitioning.

Consider we want to reorganize R:bat[:void,:int] into three range partitions,
based on splitting on the head. Two partitions are stable
and the third partition is reserved for appends.
The following MAL program illustrates the snippet of actions needed:
@example
	bpm.open();
	bpm.deposit("myversion",R);	# creates side effects
	Ralias:= bpm.take("myversion",:bat[:void,:int]);
	bpm.rangePartition(Ralias,nil:oid,100:oid,nil:int,nil:int);
	bpm.rangePartition(Ralias,101:oid,200:oid,nil:int,nil:int);
	bpm.rangePartition(Ralias,201:oid,nil:oid,nil:int,nil:int);
	bpm.close();
@end example
The command @code{bpm.deposit} registers a BAT as one to be partitioned.
The side effect is that R is empty after this call.
The remainder are the partition definitions based
of slices from the table using a simple range condition.
The BAT partitions share the persistency properties.

Beware that now there are four components R, R1, R2, and R3.
The BAT R is is turned into an empty bat, its content is
taken over by the @code{bpm} and broken into pieces.
The call @code{bpm.discard(Ralias)} removes all partitions.

The partition manager also supports hash-based partitioning.
It accepts two arguments, which denote the number of hash buckets
on the head and tail respectively.
@example
	bpm.open();
	bpm.deposit("myHashVersion",R);	# creates side effects
	Ralias:= bpm.take("myHashVersion",:bat[:void,:int]);
	bpm.hashPartition(Ralias,5,2);
	bpm.close();
@end example
This example leads to 10 partitions.
Re-partitioning automatically occurs when a new hash size is given.

It should not come as a surprise, that a combination of
hashing and range is also provided using the
commands @code{bpm.hashRangePartition()} and @code{bpm.rangeHashPartition()}.

The design is based on the assumption that partitions
are reasonably large. This helps to limit plan explosion.
(or the scheduler becomes should step in)
@- Using partitions
The partitioned BAT can be used in two ways. A query plan can be
rewritten into a generator over the partitions, or it can be
used by optimizers to derived all subqueries first.

The former is illustrated with the snippet to select part of
a partitioned BAT. In this example we collect the partial
results in the accumulator BAT tu.
@example
	bpm.open();
	R:= bpm.take("myversion",:bat[:void,:int]);
	tu:= bat.new(:void,:int);
barrier (idx,Rp):= bpm.newIterator(R);
	...
	t:= algebra.select(Rp,0,100);
	tu:= algebra.union(tu,t);
	...
	redo (idx,Rp):= bpm.hasMoreElements(R);
exit (idx,b);
	bpm.close();
@end example

The partitioned BATs are particularly useful during query
optimization. However, it only works if the BAT identifier
can be determined at compile time. For SQL it can be simply looked up in
the catalog as part of the preparatory optimizer step.
The same problem handled by an optimizer produces the plan:
@example
	bpm.open();
	R:= bpm.take("myversion",:bat[:void,:int]); # get the partition alias
	optimizer.bpm();
	T:= algebra.select(R,0,100);
@end example
is translated into 
@example
	bpm.open();
	Ralias:= bpm.take("myversion",:bat[:void,:int]);
	R0:= bpm.take(Ralias, 0@0, 100@0, nil:int,nil:int); 
	R1:= bpm.take(Ralias, 101@0, 200@0, nil:int,nil:int); 
	R2:= bpm.take(Ralias, 201@0, nil:oid, nil:int,nil:int); 
	R:= mat.new(R0,R1,R2);
@end example
It is up to the @code{mat} optimizer to decide about
plan expansion or an iterator approach.

A decision should be made over what happens if you
take out a fragment dat does not align with any
of the boundaries. For now, it generates an exception.


@- Partition updates
The content of the partitions is preferrable updated in bulk.
This calls for accumulation of insertions/deletions in pending
update BATs, as already performed in the SQL code generator.
Once the transaction is commited, the updates are propagated
(in parallel) to all partitions.
@example
	bpm.open();
	R := bpm.take("myversion",:bat[:void,:int]); # get the partition alias
	bpm.insert(R, Rinsert);	# handle pending inserts
	bpm.delete(R, Rdelete);	# handle pending deletes
	bpm.deposit(R, Rinsert);# handle pending inserts and forget content 
	bpm.close();
@end example

The @code{bpm.deposit(R,Rinsert)} takes over the content
of the bat Rinsert, leaving an empty BAT behind.
This does not hold for the insert and delete cases.

It remains possible to retrieve a partition and directly
insert elements, but then it is up to the compiler to
ensure that the boundery conditions are met.

@- Partitioned results
In many situations, you would like to keep the partial results
as a partitioned BAT again.
The easiest solution is to remember the partitions as temporary 
variables during optimization, e.g. as properties of all fragment variables.

However, a persistent partitioned BAT can also be created first,
whose partitions are empty. Subsequently, we insert the
temporary results. 
Depending on the fragmentation criteria, pieces may align
with the pieces known, or lead to a redistribution of the
buns to the correct bats.

The previous plan for this becomes
@example
	bpm.open();
	Tmp := bpm.take("tmp",:bat[:void,:int]);
	bpm.rangePartition(Tmp,nil:oid,100:oid,nil:int,nil:int);
	bpm.rangePartition(Tmp,101:oid,200:oid,nil:int,nil:int);
	bpm.rangePartition(Tmp,201:oid,nil:oid,nil:int,nil:int);

	Ralias:= bpm.take("myversion",:bat[:void,:int]); # get the partition alias
	R0:= bpm.take(Ralias, 0@0, 100@0, nil:int,nil:int); 
	T0:= algebra.select(R0,0,100);
	bpm.deposit(Tmp,T0);

	R1:= bpm.take(Ralias, 101@0, 200@0, nil:int,nil:int); 
	T1:= algebra.select(R1,0,100);
	bpm.deposit(Tmp,T1);

	R2:= bpm.take(Ralias, 201@0, nil:oid, nil:int,nil:int); 
	T2:= algebra.select(R2,0,100);
	bpm.deposit(Tmp,T2);
@end example
The rationale for this approach is that re-distribution
of temporary results are hidden behind the @code{bpm} interface.
The only decision that should be taken by the optimizer is
the fragmentation criteria for the temporary results.

For temporary results the range bounds need not be
stored in the bpm. Instead, the mat approach could
be used to reduce the plan size.
@example
	bpm.open();
	Ralias:= bpm.take("myversion",:bat[:void,:int]); # get the partition alias
	R0:= bpm.take(Ralias, 0@0, 100@0, nil:int,nil:int); 
	T0{hlow=0@0,hhigh=0@0,tlow=nil:int,thigh=nil:int}:=algebra.select(R0,0,100);

	R1:= bpm.take(Ralias, 101@0, 200@0, nil:int,nil:int); 
	T1{hlow=0@0,hhigh=0@0,tlow=nil:int,thigh=nil:int}:=algebra.select(R1,0,100);

	R2:= bpm.take(Ralias, 201@0, nil:oid, nil:int,nil:int); 
	T2{hlow=0@0,hhigh=0@0,tlow=nil:int,thigh=nil:int}:=algebra.select(R2,0,100);
	R:= mat.new(T0,T1,T2);
@end example

@- Partition selection
The select operation can be overloaded in the BPM to
improve processing further. For example, the operation
@example
	t := bpm.select(Ralias,0,100);
@end example
extracts portions of all three partitions and creates 
a non-partitioned result BAT. 
There is no information on the partitions involved in this operation
for the optimizer.


The lifetime of a partitioned table is inherited from its components. 
How to detect that a temporary BAT is removed from the BBP?

@mal
module bpm;

command open():void
address BPMopen
comment "Locate and open the BAT partition box";

command close():void
address BPMclose
comment "Save and close the BAT partition box ";

command destroy():void
address BPMdestroy
comment "Destroy the BAT partition box";

command deposit(nme:bat[:any_1,:any_2],b:bat[:any_1,:any_2]) :void
address BPMdeposit
comment "Enter the content of a BAT into a partitioned one.
The side effice is that the argument BAT is empty afterwards.";

@-
The partitioning is handled inside the module.
If the alias BAT denotes an existing partition, it is
further broken into pieces.
@mal
command rangePartition(pb:bat[:any_1,:any_2], 
		ll:any_1, lh:any_1, rl:any_2, rh:any_2):bat[:any_1,:any_2]
address BPMrange
comment "Create a range partition on a BAT";
command hashPartition(pb:bat[:any_1,:any_2], slots:int):void
address BPMhash
comment "Create a hash partition on a BAT";
command rangeHashPartition(pb:bat[:any_1,:any_2],
		ll:any_1, lh:any_1, slots:int):void
address BPMrangeHash
comment "Create a range and hash index partition on a BAT";
command hashRangePartition(pb:bat[:any_1,:any_2],
		slots:int, rl:any_2, lh:any_2):void
address BPMhashRange
comment "Create a range and hash index partition on a BAT";

command take(pb:bat[:any_1,:any_2],
		ll:any_1, lh:any_1, slot:int):bat[:any_1,:any_2]
address BPMtakeRangeHash
comment "Retrieve a single component of a partitioned BAT 
	by range and hash index";
command take(pb:bat[:any_1,:any_2], slot:int, 
	rl:any_2, rh:any_2) :bat[:any_1,:any_2]
address BPMtakeHashRange
comment "Retrieve a single component of a partitoined BAT 
	by hash index and range";
command take(pb:bat[:any_1,:any_2], ll:any_1, lh:any_1, 
	rl:any_2, rh:any_2):bat[:any_1,:any_2]
address BPMtakeRange
comment "Retrieve a single component of a MAT by range";
command take(pb:bat[:any_1,:any_2],hh:int,th:int):bat[:any_1,:any_2]
address BPMtakeHash
comment "Retrieve a single component of a MAT by hash indices";

command take(pb:bat[:any_1,:any_2],idx:int):bat[:any_1,:any_2]
address BPMtakePartition
comment "Retrieve a single component of a MAT by index";

command insert(pb:bat[:any_1,:any_2],b:bat[:any_1,:any_2]) :void
address BPMinsert
comment "Insert elements into the BAT partitions";
command delete(pb:bat[:any_1,:any_2],b:bat[:any_1,:any_2]) :void
address BPMdelete
comment "Delete elements from the BAT partitions";
command replace(pb:bat[:any_1,:any_2],i:bat[:any_1,:any_2],
		d:bat[:any_1,:any_2]) :void
address BPMreplace
comment "Replace the content of the BAT partitions";

command getNames():bat[:void,:str]
address BPMgetNames
comment "Retrieve the names of all known partitioned BATs";

command discard(name:str) :void
address BPMdiscard
comment "Release a MAT variable from the box";

command newIterator()(:int,:str)
address BPMnewIteratorBase
comment "Create an iterator over the partition box";
command hasMoreElements()(:int,:str)
address BPMhasMoreElementsBase
comment "Locate next element in the partition box";

@-
In most situations we would like to iterator over
the components of a single partitioned BAT. 
Wherever possible skipping elements that don't qualify
the bounds given for the head.
@mal
command newIterator(grp:bat[:any_1,:any_2):bat[:any_1,:any_2]
address BPMnewIterator
comment "Create an iterator over the BAT partitions.";

command newIterator(grp:bat[:any_1,:any_2],first:oid,last:oid)
		:bat[:any_1,:any_2]
address BPMnewIteratorRng
comment "Create an iterator over the BAT partitions.";

command newIterator(pb:bat[:any_1,:any_2], first:oid,last:oid,
		vlow:any_1, vhgh:any_2) :bat[:any_1,:any_2]
address BPMnewIteratorRng4
comment "Create an iterator over the BAT partitions.";

command hasMoreElements(grp:bat[:any_1,:any_2]) :bat[:any_2,:any_1]
address BPMhasMoreElements
comment "Localize the next partition for processing.";

command hasMoreElements(pb:bat[:any_1,:any_2], first:oid,last:oid,
		vlow:any_1, vhgh:any_2) :bat[:any_1,:any_2]
address BPMhasMoreElementsRng4
comment "Localize the next partition for processing.";

command getDimension(b:bat[:any_1,:any_2])(first:any_1,last:any_1, 
	vlow:any_2, vhgh:any_2)
address BPMgetDimension
comment "Obtain the partition boundary values.";

command dump()
address BPMdump;

command prelude()
address BPMprelude;

command epilogue()
address BPMepilogue;

bpm.prelude();
@-
@{
BEWARE, it is not protected against concurrent access yet.

@+ BAT Partition Manager Implementation
The implementation is organized around a shared box, which should
be saved between session. It is up to other layers to ensure that BATs
being deleted are also removed from the partition box to avoid
mis-represented information.

The internal data structure is used as a cache for improved access.
@h
#ifndef _MAL_BPM
#define _MAL_BPM
#include "mal.h"
#include "mal_client.h"
#include "mal_interpreter.h"

#ifdef WIN32
#ifndef LIBBPM
#define bpm_export extern __declspec(dllimport)
#else
#define bpm_export extern __declspec(dllexport)
#endif
#else
#define bpm_export extern
#endif

bpm_export str BPMopen();
bpm_export str BPMclose();
bpm_export str BPMdestroy();
bpm_export str BPMdeposit(int *ret, int *bid);

bpm_export str BPMrange(int *ret, int *bid, ptr *hl, ptr *hh, ptr *tl, ptr *th);
bpm_export str BPMhash(int *ret, int *bid, int *hslots, int *tslots);
bpm_export str BPMrangeHash(int *ret, int *bid, ptr *hl ptr *hh, int *tslots);
bpm_export str BPMhashRange(int *ret, int *bid, int *hslots, ptr *tl, ptr *th);

bpm_export str BPMtakeRange(int *ret, int *bid, ptr *hl, ptr *hh, ptr *tl, ptr *th);
bpm_export str BPMtakeHash(int *ret, int *bid, int *hslots, int *tslots);
bpm_export str BPMtakeRangeHash(int *ret, int *bid, ptr *hl ptr *hh, int *tslots);
bpm_export str BPMtakeHashRange(int *ret, int *bid, int *hslots, ptr *tl, ptr *th);

bpm_export str BPMtakePartition(int *ret, int *bid, int *idx);

bpm_export str BPMinsert(int *ret, int *bid, int *ins);
bpm_export str BPMdelete(int *ret, int *bid, int *del);
bpm_export str BPMreplace(int *ret, int *bid, int *ins, int *del);

bpm_export str BPMgetNames(int bid);
bpm_export str BPMdiscard(int *ret, str *pd);

bpm_export str BPMnewIteratorBase(int *ret, str *grp);
bpm_export str BPMhasMoreElementsBase(int *ret, str *nme);

bpm_export str BPMnewIterator(int *res, int *grp);
bpm_export str BPMnewIteratorRng(int *res, int *grp, ptr *first, ptr *last);
bpm_export str BPMnewIteratorRng4(int *res, int *grp, ptr *first, ptr *last,
	ptr *vlow, ptr *vhgh);

bpm_export str BPMhasMoreElements(int *res, int *grp);
bpm_export str BPMhasMoreElementsRng(int *res, int *grp, ptr *first, ptr *last);
bpm_export str BPMhasMoreElementsRng4(int *res, int *grp, ptr *first, ptr *last,
	ptr *vlow, ptr *vhgh);

bpm_export str BPMgetDimension(int *res, int *bid, ptr *first, ptr *last,
	ptr *vlow, ptr *vhgh);
bpm_export str BPMdump();
bpm_export str BPMprelude(int *ret);
bpm_export str BPMepilogue(int *ret);
#endif
@-
The partition manager uses its private catalog of persistent BATs.
Each partitioned BAT is reference incremented to assure the base
table can always be retrieved.
The catalog is protected with the mal_contextLock.
@c
#include "bpm.h"

static BAT *bpmName;	/* bat[:bat,:str] */
static BAT *bpmGrp;		/* bat[:bat,:bat] */
static BAT *bpmTailLow[TYPE_any]; /*bat[:bat,:type_i]
static BAT *bpmTailHigh[TYPE_any]; /*bat[:bat,:type_i]
static BAT *bpmHeadLow[TYPE_any]; /*bat[:bat,:type_i]
static BAT *bpmHeadHigh[TYPE_any]; /*bat[:bat,:type_i]
static BAT *bpmHeadSlots; /*bat[:bat,:int]
static BAT *bpmTailSlots; /*bat[:bat,:int]

str
BPMdump()
{
	stream *fd = GDKout;
	ptr p,q;
	BATloop(bpmName,p,q){
		str nme= (str) BUNtail(bpmName,p);
		stream_printf(fd,"MAT %s",nme);
		/* localize MAT details */
		stream_printf(fd,"\n");
	}
	return MAL_SUCCEED;
}

@- Box administration
The box currently does not carry any client protection.
This should later be added or being provided by the BAT access.
@c
str
BPMprelude(int *ret)
{
	int i;
	/* bind all global variables */
    mal_set_lock(mal_contextLock, "bpm");
	bpmName = BBPbind("bpmName");
	bpmGrp= BBPbind("bpmGrp");
	bpmHeadSlots= BBPbind("bpmHeadSlots");
	bpmTailSlots= BBPbind("bpmTailSlots");
	for( i= 0; i< TYPE_any; i++){
		char buf[PATHLENGTH];
		snprintf(buf,PATHLENGTH,"bpmTailLow_%d",i);
		bpmTailLow[i]= BATdescriptor(BBPindex(buf));
		snprintf(buf,PATHLENGTH,"bpmHeadLow_%d",i);
		bpmHeadLow[i]= BATdescriptor(BBPindex(buf));
		snprintf(buf,PATHLENGTH,"bpmTailHead_%d",i);
		bpmTailHead[i]= BATdescriptor(BBPindex(buf));
		snprintf(buf,PATHLENGTH,"bpmHeadHead_%d",i);
		bpmHeadHead[i]= BATdescriptor(BBPindex(buf));
	}
    mal_unset_lock(mal_contextLock, "bpm");
	return MAL_SUCCEED;
}
@-
In the epilogue phase we should discard any temporary MAT.
@c
str
BPMepilogue(int *ret)
{
	*ret = closeBox("partitions", 0);
	BPMfree();
	if (*ret != 0)
		return throwMessage("bpm.prelude", "failed to open box");
	return MAL_SUCCEED;
}


str
BPMopen()
{
	if (openBox("bpm") != 0)
		return MAL_SUCCEED;
	return throwMessage("bpm.open", "failed to open bpm box");
}

str
BPMclose()
{
	stream *f;
	str boxfile, boxfilebak;
	Box box;
	BAT *b;
	int i;

	box = openBox("bpm");
	f = prepareSaveBox(box, &boxfile, &boxfilebak);
	if (f != NULL) {
		/* save the info */
		for (i = 0; i < ptop; i++)
			if (partitions[i].bid != -1) {
				b = (BAT *) BBPgetdesc(partitions[i].bid);
				if (b && b->batPersistence & PERSISTENT)
					stream_printf(f, "bpm.deposit(\"%s\",\"%s\",%d);\n", 
						partitions[i].grp,
						partitions[i].elm,
						partitions[i].bid);
			}
		stream_close(f);
		GDKfree(boxfile);
		GDKfree(boxfilebak);
	}
	return MAL_SUCCEED;
}

str
BPMdestroy()
{
	destroyBox("partitions");
	return MAL_SUCCEED;
}
@-
Taking out a BAT should be protective, i.e. check for their existence.
Taking out a MAT leads to a forced union before returning.
The intend is to use an optimizer to avoid this if possible.
@c
str
BPMtake(int *ret, str *grp, str *elm)
{
	BAT *b;
	int i;
	for( i=0; i< plimit; i++)
	if( partitions[i].grp &&
		 strcmp(partitions[i].grp, *grp)== 0 &&
		strcmp(partitions[i].elm, *elm)== 0) 
		break;
	if( i== plimit )
		return throwMessage("bpm.take", "MAT partition not found");
	b= BBPdescriptor(partitions[i].bid);
	if( b== NULL)
		return throwMessage("bpm.take", "MAT partition not accessible");
	*ret = partitions[i].bid;
	BBPkeepref(*ret);
	return MAL_SUCCEED;
}
str
BPMtakePartition(int *ret, str *grp, int *idx)
{
	BAT *b;
	int i;
	i= BPMfindMAT(*grp);
	if( i< 0)
		return throwMessage("bpm.take","MAT not found");
	for( ; i>=0 && *idx>0; i= partitions[i].next)
		*idx= *idx-1;
	if( i< 0)
		return throwMessage("bpm.take","MAT component not found");
	b= BBPdescriptor(partitions[i].bid);
	if( b== NULL)
		return throwMessage("bpm.take", "MAT partition not accessible");
	*ret = partitions[i].bid;
	BBPkeepref(*ret);
	return MAL_SUCCEED;
}
@-
Administration of new partitions.
@c
int
BPMfindGrp(int bid)
{
	return -1;
}

@-
Find the header of a group
@c
int
BPMfindMAT(str grp)
{
	return -1;
}
int
BPMfindMATcomponent(str grp, str elm)
{
	return -1;
}

str
BPMdeposit(int *ret, str *grp, str *elm, int *bid)
{
	int idx, i,j;
	BAT *b;

	i= BPMfindMATcomponent(*grp,*elm);
	if( i >=0 )
		return throwMessage("bpm.deposit", "MAT component already known");
	b = BATdescriptor(*bid);
	if (b == NULL)
		return throwMessage("bpm.deposit", "Can not access descriptor");
	idx = BPMfindMAT(*grp);
	if (ptop == plimit)
		BPMresize(plimit + INCREMENT);
	for (i = 0; i <= ptop; i++)
		if (partitions[i].bid == -1)
			break;
	partitions[i].grp = GDKstrdup(*grp);
	partitions[i].elm = GDKstrdup(*elm);
	partitions[i].bid = *bid;
	partitions[i].first = b->hseqbase;
	partitions[i].last = b->hseqbase + BATcount(b);
	partitions[i].prev = -1;
	partitions[i].next = -1;
	if (i >= ptop) {
		ptop = i + 1;
		partitions[ptop].bid = -1;
		partitions[ptop].next = -1;
		partitions[ptop].prev = -1;
	}
	if( idx >=0){
		for(j=idx; partitions[j].next>=0; j= partitions[j].next) ;
		partitions[j].next = i;
		partitions[i].prev = j;
	}
	BBPunfix(*bid);
	(void) ret;
	return MAL_SUCCEED;
}

str
BPMdepositByName(int *ret, str *grp, str *elm)
{
	int idx;
	BAT *b;

	idx= BPMfindMATcomponent(*grp,*elm);
	if( idx >=0 )
		return throwMessage("bpm.deposit", "MAT already known");
	b = BATdescriptor(partitions[idx].bid);
	if (b == NULL)
		return throwMessage("bpm.deposit", "Can not access descriptor");

	BPMdeposit(ret,grp,elm,&partitions[idx].bid);
	BBPunfix(partitions[idx].bid);
	(void) ret;
	return MAL_SUCCEED;
}

str
BPMgetRange(oid *first, oid *last, int *bid)
{
	int i;

	for (i = 0; i < ptop; i++)
		if (partitions[i].bid == *bid) {
			*first = partitions[i].first;
			*last = partitions[i].last;
			return MAL_SUCCEED;
		}
	return throwMessage("bpm.getRange", "MAT not known");
}

str
BPMgetLast(int *ret, str *grp)
{
	int i;

	i= BPMfindMAT(*grp);
	if( i < 0)
		return throwMessage("bpm.getLast", "MAT not known");
	for (; partitions[i].next>=0 ; i= partitions[i].next)
		;
	*ret = partitions[i].bid;
	return MAL_SUCCEED;
}

str
BPMdiscard(int *ret, str *grp)
{
	int i;

	for (i = 0; i<ptop; i++)
	if(	partitions[i].grp &&
		strcmp(partitions[i].grp, *grp)== 0 )
			BPMfreePartition(i);
	(void) ret;
	return MAL_SUCCEED;
}

str
BPMdiscardAll(int *ret)
{
	int i;
	for(i=0; i<ptop; i++)
	if( partitions[i].grp)
			BPMfreePartition(i);
	GDKfree(partitions);
	partitions = 0;
	plimit = -1;
	BPMresize(INCREMENT);
	(void) ret;
	return MAL_SUCCEED;
}

@-
releasing the MAT does not remove its components.
@c
str
BPMreleaseAll(int *ret, int *bid)
{
	(void) ret;
	(void) bid;
	return throwMessage("bpm.release", "not yet implemented");
}

str
BPMdiscardComponent(int *ret, str *grp, int *bid)
{
	(void) ret;
	(void) bid;
	(void) grp;
	return throwMessage("bpm.release", "not yet implemented");
}
@-
We start with the large chunk iterator.
The definition of the control statements require the same
control variables, which means that the BATview is accessible
to determine how far to advance when the next chunk is retrieved.
The number of elements in the chunk is limited by the granule
size.
@c
str
BPMnewIteratorBase(int *ret, str *grp, str *elm)
{
	*ret = 0;
	if (*ret == ptop)
		*ret = -1;
	else {
		*grp= GDKstrdup(partitions[0].grp);
		*elm= GDKstrdup(partitions[0].elm);
	}
	return MAL_SUCCEED;
}

str
BPMhasMoreElementsBase(int *ret, str *nme, str *elm)
{
	do {
		*ret = *ret + 1;
		if (*ret >= ptop) {
			*ret = -1;
			return MAL_SUCCEED;
		}
		*nme= GDKstrdup(partitions[*ret].grp);
		*elm= GDKstrdup(partitions[*ret].elm);
	} while (partitions[*ret].bid == -1);
	return MAL_SUCCEED;
}

str
BPMnewIterator(int *res, str *grp)
{
	int idx;

	idx= BPMfindMAT(*grp);
	if(idx<0)
		return throwMessage("bpm.newIterator","Could not find MAT");
	*res = partitions[idx].bid;
	BBPincref(*res, TRUE);
	return MAL_SUCCEED;
}

str
BPMnewIteratorRng(int *res, str *grp, oid *first, oid *last)
{
	int i;

	i= BPMfindMAT(*grp);
	if( i<0)
		return throwMessage("bpm.newIterator","Could not find MAT");
	for (; i>=0 ; i= partitions[i].next)
	if (!(partitions[i].last < *first || partitions[i].first > *last)) {
			*res = partitions[i].bid;
			BBPincref(*res, TRUE);
		}
	return MAL_SUCCEED;
}

str
BPMhasMoreElements(int *res, str *grp)
{
	int i;
	for(i=0; i<ptop; i++)
	if( partitions[i].bid == *res &&
		partitions[i].grp &&
		strcmp(partitions[i].grp,*grp)== 0){
		*res= partitions[i].bid;
		BBPincref(*res, TRUE);
		return MAL_SUCCEED;
	}
	*res = -1;
	return MAL_SUCCEED;
}

str
BPMhasMoreElementsRng(int *res, str *grp, oid *first, oid *last)
{
	int i;
	for(i= BPMfindMAT(*grp); i>=0 ; i = partitions[i].next)
		if( !(partitions[i].last < *first || partitions[i].first > *last)) {
			*res = partitions[i].bid;
			BBPincref(*res, TRUE);
			return MAL_SUCCEED;
		}
	*res = -1;
	return MAL_SUCCEED;
}
@}
