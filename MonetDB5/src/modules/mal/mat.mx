@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
@' Copyright August 2008-2010 MonetDB B.V.
@' All Rights Reserved.

@f mat
@a Martin Kersten
@v 1
@+ Multiple association tables
A MAT is a convenient way to deal represent horizontal fragmented
tables. It combines the definitions of several, type compatible
BATs under a single name. 
It is produced by the mitosis optimizer and the operations
are the target of the mergetable optimizer.

The MAT is materialized when the operations
can not deal with the components individually,
or the incremental operation is not supported.
Normally all mat.new() operations are removed by the
mergetable optimizer.
In case a mat.new() is retained in the code, then it will
behaves as a mat.pack();

The primitives below are chosen to accomodate the SQL
front-end to produce reasonable efficient code.
@mal
module mat;

pattern new(b:bat[:any_1,:any_2]...):bat[:any_1,:any_2]
address MATpack
comment "Define a Merge Association Table (MAT). Faal back to the pack operation
when this is called ";

pattern pack(:any_2...):bat[:void,:any_2]
address MATpackValues
comment "Materialize the MAT (of values) into a BAT";

pattern pack(b:bat[:any_1,:any_2]...):bat[:any_1,:any_2]
address MATpack
comment "Materialize the MAT into a BAT";

pattern pack2(b:bat[:any_1,:any_2]...):bat[:any_1,:any_2]
address MATpack2
comment "Materialize the MAT into a BAT (by an append all)";

pattern slice(first:wrd, last:wrd, b:bat[:any_1,:any_2]...):bat[:any_1,:any_2]
address MATpackSlice
comment "Materialize a sliced MAT into a BAT";

pattern slice(first:int, last:int, b:bat[:any_1,:any_2]...):bat[:any_1,:any_2]
address MATpackSlice
comment "Materialize a sliced MAT into a BAT";

pattern slice(first:lng, last:lng, b:bat[:any_1,:any_2]...):bat[:any_1,:any_2]
address MATpackSlice
comment "Materialize a sliced MAT into a BAT";

pattern print(b:bat[:any_1,:any_2]...):void
address MATprint;

pattern newIterator(grp:bat[:any_1,:any_2]...):bat[:any_1,:any_2]
address MATnewIterator
comment "Create an iterator over a MAT";

pattern hasMoreElements(grp:bat[:any_1,:any_2]...):bat[:any_1,:any_2]
address MAThasMoreElements
comment "Find the next element in the merge table";

command info(g:str, e:str):bat[:any_1,:any_2]
address MATinfo
comment "retrieve the definition from the partition catalogue";

@-
@{
@+ Implementation
@include prelude.mx
@h
#ifndef _INSPECT_H
#define _INSPECT_H 
#include <stdarg.h>
#include "mal_resolve.h"
#include "mal_exception.h"
#include "mal_interpreter.h"

#ifdef WIN32
#ifndef LIBMAT
#define mat_export extern __declspec(dllimport)
#else
#define mat_export extern __declspec(dllexport)
#endif
#else
#define mat_export extern
#endif

mat_export str MATpack(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
mat_export str MATpackValues(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
mat_export str MATpackSlice(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
mat_export str MATnewIterator(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
mat_export str MAThasMoreElements(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
mat_export str MATdummy(int *ret, str *grp);
mat_export str MATinfo(int *ret, str *grp, str *elm);
mat_export str MATprint(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
#endif /* _INSPECT_H */
@- 
Mal symbol table and environment analysis.
@c
#include "mal_config.h"
#include "mat.h"

str
MATnewIterator(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p)
{
	int *ret = (int*) getArgReference(stk,p,0);
	(void) cntxt;
	(void) mb; 
	if( p->argc == 1){
		*ret = 0;
	} else
		*ret= *(int*) getArgReference(stk,p,1);
	return MAL_SUCCEED;
}
str
MAThasMoreElements(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p)
{
	int *ret = (int*) getArgReference(stk,p,0);
	int i, idx = *ret;

	(void) cntxt;
	(void) mb; 
	for(i=1; i< p->argc; i++)
	if( *(int*) getArgReference(stk,p,i) == idx){
		i++;
		break;
	}
	if( i < p->argc)
		*ret= *(int*) getArgReference(stk,p,i);
	else
		*ret = 0;
	(void) mb; 
	return MAL_SUCCEED;
}
@-
The pack is an ordinary multi BAT insert. Oid synchronistion
between pieces should be ensured by the code generators.
The pack operation could be quite expensive, because it
may create a really large BAT.
The slice over a mat helps to avoid constructing intermediates
that are subsequently reduced.
@c
static str
MATpackInternal(MalBlkPtr mb, MalStkPtr stk, InstrPtr p)
{
	int i0, i,*ret = (int*) getArgReference(stk,p,0);
	BAT *b, *bn;
	BUN cap=0, cnt = BUN_NONE;
	int ht = TYPE_any, tt = TYPE_any;

	/* check for the slice range upper bound */
	if ( !isaBatType(getArgType(mb,p,2)) ){
		switch getArgType(mb,p,2) {
			case TYPE_wrd:
			cnt = (BUN) *(wrd*) getArgReference(stk,p,2);
			break;
			case TYPE_lng:
			cnt = (BUN) *(lng*) getArgReference(stk,p,2);
			break;
			case TYPE_int:
			cnt = (BUN) *(int*) getArgReference(stk,p,2);
		}
		/* upper bound of slice is inclusive position counting from 0 */
		if (cnt < BUN_MAX)
			cnt++;
@-
The optimal case is when we need a slice from the first
piece. In that case we can simply return the BAT.
A pitty that we have calculated the other slices as well.
@c
		b= BATdescriptor(stk->stk[getArg(p,3)].val.ival);
		assert(b);
		if ( BATcount(b) >= cnt ){
			BBPkeepref(*ret = b->batCacheid);
			return MAL_SUCCEED;
		}
		BBPunfix(b->batCacheid);

		i0 = 3;
	} else {
		i0 = 1;
		cnt = BUN_MAX;
	}

	for( i = i0; i < p->argc && cap < cnt; i++) {
		b= BATdescriptor(stk->stk[getArg(p,i)].val.ival);
		if( b == NULL)
			throw(MAL, "mat.pack", RUNTIME_OBJECT_MISSING);
		if (ht == TYPE_any){
			ht = b->htype;
			tt = b->ttype;
		}
		cap += BATcount(b);
		BBPunfix(b->batCacheid);
	}

	assert( ht != TYPE_any);
	bn = BATnew(ht, tt, cap);
	if( bn == NULL)
		throw(MAL, "mat.pack", MAL_MALLOC_FAIL);
	/* must set seqbase or else BATins will not materialize column */
	if (ht == TYPE_void)
		BATseqbase(bn, 0);
	if (tt == TYPE_void)
		BATseqbase(BATmirror(bn), 0);

	for( i = i0; i < p->argc && BATcount(bn) < cnt; i++) {
		b= BATdescriptor(stk->stk[getArg(p,i)].val.ival);
		if( b == NULL){
			BBPreleaseref(bn->batCacheid);
			throw(MAL, "mat.pack", RUNTIME_OBJECT_MISSING);
		}
		/* use the right oid ranges, don't change the input */
		BATins(bn,b,FALSE);
		BBPunfix(b->batCacheid);
	}
	BBPkeepref(*ret = bn->batCacheid);
	return MAL_SUCCEED;
}

static str
MATpack2Internal(MalStkPtr stk, InstrPtr p)
{
	int i,*ret;
	BAT *b, *bn;
	BUN cap=0;

	b= BATdescriptor(stk->stk[getArg(p,1)].val.ival);
	if( b == NULL)
		throw(MAL, "mat.pack", RUNTIME_OBJECT_MISSING);
	bn = BATcopy(b, b->htype, b->ttype, TRUE);
	BBPunfix(b->batCacheid);
	if( bn == NULL)
		throw(MAL, "mat.pack", MAL_MALLOC_FAIL);

	for(i = 2; i < p->argc; i++){
		b= BATdescriptor(stk->stk[getArg(p,i)].val.ival);
		if( b == NULL){
			BBPreleaseref(bn->batCacheid);
			throw(MAL, "mat.pack", RUNTIME_OBJECT_MISSING);
		}
		cap += BATcount(b);
		BBPunfix(b->batCacheid);
	}
	bn = BATextend(bn, cap);
	for( i = 2; i < p->argc; i++){
		b= BATdescriptor(stk->stk[getArg(p,i)].val.ival);
		if( b == NULL){
			BBPreleaseref(bn->batCacheid);
			throw(MAL, "mat.pack", RUNTIME_OBJECT_MISSING);
		}
		BATappend(bn,b,FALSE);
		BBPunfix(b->batCacheid);
	}
	ret= (int*) getArgReference(stk,p,0);
	BBPkeepref(*ret = bn->batCacheid);
	return MAL_SUCCEED;
}

str
MATpack2(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p)
{
	(void) cntxt;
	(void) mb;
	return MATpack2Internal(stk,p);
}

str
MATpack(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p)
{
	(void) cntxt;
	return MATpackInternal(mb,stk,p);
}

str
MATpackValues(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p)
{
	int i,*ret, type, first = 1;
	BAT *bn;

	(void) cntxt;
	type = getArgType(mb,p,first);
	bn = BATnew(TYPE_void, type, p->argc);
	if( bn == NULL)
		throw(MAL, "mat.pack", MAL_MALLOC_FAIL);

	if (ATOMvarsized(type)) {
		for(i = first; i < p->argc; i++)
			BUNappend(bn, stk->stk[getArg(p,i)].val.sval, TRUE);
	} else {
		for(i = first; i < p->argc; i++)
			BUNappend(bn, getArgReference(stk, p, i), TRUE);
	}
	ret= (int*) getArgReference(stk,p,0);
	BBPkeepref(*ret = bn->batCacheid);
	return MAL_SUCCEED;
}
str
MATpackSlice(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p)
{
	(void) cntxt;
	return MATpackInternal(mb,stk,p);
}


str
MATprint(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p)
{
	(void) cntxt; (void) mb; (void) stk; (void) p;
	return MAL_SUCCEED;
}

str
MATdummy(int *ret, str *grp){
	(void) grp; (void) ret;
	return MAL_SUCCEED;
}
str
MATinfo(int *ret, str *grp, str *elm){
	(void) grp; (void) elm; (void) ret;
	return MAL_SUCCEED;
}

@}
