@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2008 CWI.
@' All Rights Reserved.

@f cluster
@a Martin Kersten, Niels Nes
@v 1.0
@t Hash cluster Algorithms

@* Introduction
Hash structures in MonetDB are optimized to build in a single scan. 
Also their use is limited to a single bat. Read optimized hashes (or clusters) 
could be used in many algorithms, such as select, join, group by and 
distinct checking. This calls for physical locality of elements
hashing to the same element. Preferrable the elements in a collision
list are physically close, as are the lists of subsequent lists.

This module extends the built in hashing scheme with a method 
to reorganize BATs based on their hash key. It is a linear-time,
near-optimal N-way reclustering based on key ranges.

We start with collecting all hash keys from the underlying 
table into the table H[:oid,:oid].
The next step is a reclustering step to bring
elements together based on the hash key. This step is based
on the assumption that values in the hash-key are uniformly
distributed. We create as many buckets as we  consider
justified in terms of the IO. The tuples are 'thrown' into
their bucket until they become full or can be extended 
by harvesting free space from its direct neighor buckets.
If there is no free space left, we circularly look for a bucket
with space, partly  polluting the clustering objective.

The result is a void-oid table that represents an IO
'optimal' sequence of tuples. IO optimal, because 
with determining N we have 2N read/write pointers
in the table. Tuples are reclustered amongst those
using an ordinary join operation.
The outerloop touches each tuple once, causing
the order in the oid list to represent the IO
activity too. This means we can use it directly
as a driver for redistributing value columns.

The remaining step is to perform this in parallel
for all BATs comprising a relational table.
@mal
module cluster;

command key(b:bat[:oid,:any_1]) :bat[:oid,:oid]
address CLUSTER_key
comment "Create the hash key list";

command map(b:bat[:oid,:oid]) :bat[:oid,:oid]
address CLUSTER_map
comment "Recluster a hash key table and produce a re-allocation map";

pattern column(m:bat[:oid,:oid], b:bat[:oid,:any_1]):bat[:oid,:any_1]
address CLUSTER_column
comment "Reorder tail of the BAT using the cluster map";

pattern table(b:bat[:oid,:any]...):bat[:oid,:oid]
address CLUSTER_table
comment "Cluster the BATs using the first one as reference.
Return the oid map used";

command new(b:bat[:oid,:wrd], bits:int) 
	(psum:bat[:oid,:wrd], map:bat[:oid,:wrd])
address CLS_create
comment "Compute the cluster map for bat b of hash key values. A cluster map is a list of unique (new) BUN positions. The p(refix) sum is a by product which returns the prefix sum of the per masked key frequency.";

command map(cluster:bat[:oid,:wrd], b:bat[:oid,:any_1]) :bat[:oid,:any_1]
address CLS_map
comment "Reorder tail of bat b, using a cluster map";


@{
@h
#ifndef _CLUSTER_H
#define _CLUSTER_H

#include <mal.h>
#include "mal_interpreter.h"
#include "mal_client.h"

/*#define _CLUSTER_DEBUG	for local debugging */

#ifdef WIN32
#ifndef LIBCLUSTER
#define cluster_export extern __declspec(dllimport)
#else
#define cluster_export extern __declspec(dllexport)
#endif
#else
#define cluster_export extern
#endif

cluster_export str CLUSTER_key( bat *M, bat *B);
cluster_export str CLUSTER_map(bat *RB, bat *B);
cluster_export str CLUSTER_apply(bat *bid, BAT *nb, BAT *cmap);
cluster_export str CLUSTER_column( Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
cluster_export str CLUSTER_table( Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);

cluster_export str  CLS_create(bat *rpsum, bat *rcmap, bat *b, unsigned int *bits);
cluster_export str  CLS_map(bat *rb, bat *cmap, bat *b);

#endif /* _CLUSTER_H */
@c

#include "mal_config.h"
#include "cluster.h"
#include <mal_exception.h>
#include "algebra.h"

@= map_fixed
void
CLUSTER_key_@1( BAT *map, BAT *b)
{
	@1 *bt, *be;
	oid *o;

	assert(BUNfirst(map) == 0);
	assert(BUNfirst(b) == 0);
	o = (oid*)Tloc(map, 0);
	bt = (@1*)Tloc(b, 0);
	be = bt + BATcount(b);
	for ( ; bt < be; bt++){
		BUN h = hash_@1(b->T->hash,bt);
		*o++= h;
	}
}

str  
CLUSTER_column_@1(BAT *nb, BAT *b, BAT *cmap)
{
	@1 *r,*qb;
	oid *ct, *ce;
	int cnt=0;
	
	assert(BUNfirst(nb) == 0);
	assert(BUNfirst(b) == 0);
	assert(BUNfirst(cmap) == 0);
	assert(cmap->ttype == TYPE_oid);
	r = (@1*)Tloc(nb, 0);
	qb = (@1*)Tloc(b, 0);
	ct = (oid *)Tloc(cmap, 0);
	ce = ct + BATcount(cmap);
	nb->H->heap.dirty = nb->T->heap.dirty= TRUE;
	for ( ; ct < ce; ct++){
		*r++ = qb[*ct];
		if ( ((++cnt) % 1000000) == 0){
			BATsave(nb);
			nb->H->heap.dirty = nb->T->heap.dirty= TRUE;
		}
	}
	BATsetcount(nb, BATcount(b));
	nb->tsorted= FALSE;
	nb->tdense= FALSE;
    if (nb->H != nb->T) 
        BATpropcheck(BATmirror(nb), BATPROPS_QUICK);
    BATpropcheck(nb, BATPROPS_QUICK);
	return MAL_SUCCEED;
}

@c
@:map_fixed(chr)@
@:map_fixed(bte)@
@:map_fixed(sht)@
@:map_fixed(oid)@
@:map_fixed(wrd)@
@:map_fixed(int)@
@:map_fixed(lng)@
@:map_fixed(flt)@
@:map_fixed(dbl)@

void
CLUSTER_key_str( BAT *map, BAT *b)
{
	var_t *bt, *be;
	oid *o;

	assert(BUNfirst(b) == 0);
	assert(BUNfirst(map) == 0);
	o = (oid*)Tloc(map, 0);
	bt = (var_t *)Tloc(b, 0);
	be = bt + BATcount(b);
	for ( ; bt < be; bt++){
	/* hash on the string reference */
#if SIZEOF_VAR_T == SIZEOF_INT
		BUN h = hash_int(b->T->hash,bt);
#else 
		BUN h = hash_oid(b->T->hash,bt);
#endif
		*o++= h;
	}
}
str  
CLUSTER_column_any(BAT *nb, BAT *b, BAT *cmap)
{
	var_t *r,*qb;
	oid *ct, *ce, o = 0;
	int cnt=0;
	BATiter bi= bat_iterator(b);
	
	assert(BUNfirst(nb) == 0);
	assert(BUNfirst(b) == 0);
	assert(BUNfirst(cmap) == 0);
	r = (var_t *)Tloc(nb, 0);
	qb = (var_t *)Tloc(b, 0);
	ct = (oid *)Tloc(cmap, 0);
	ce = ct + BATcount(cmap);
	nb->H->heap.dirty = nb->T->heap.dirty= TRUE;
	for ( ; ct < ce; ct++){
		BUNfastins(nb, &o,BUNtail(bi, (BUN) *ct));
		o++;
		if ( ((++cnt) % 1000000) == 0){
			BATsave(nb);
			nb->H->heap.dirty = nb->T->heap.dirty= TRUE;
		}
	}
    if (nb->H != nb->T)
        BATpropcheck(BATmirror(nb), BATPROPS_QUICK);
	BATsetcount(nb, BATcount(b));
	if (!(nb->batDirty&2)) 
		nb = BATsetaccess(nb, BAT_READ);
    BATpropcheck(nb, BATPROPS_QUICK);
	return MAL_SUCCEED;
}
@-
The hash key and the oid are materialized to prepare for reclustering.
@c
str
CLUSTER_key( bat *M, bat *B){
	BAT *map, *b;

	if ((b = BATdescriptor(*B)) == NULL)
		throw(MAL, "cluster.key", "Cannot access descriptor");
	(void) BATprepareHash(BATmirror(b)); /* only produce the hash structure! */

	if ((map = BATnew(TYPE_void, TYPE_oid, BATcount(b)+1)) == NULL) {
		BBPunfix(*B);
		throw(MAL, "cluster.key", "Cannot create hash map");
	}
	map->tsorted= FALSE;
	map->tdense= FALSE;
	BATseqbase(map, 0);
	BATsetcount(map, BATcount(b));
	map->H->nonil = b->H->nonil;
	map->T->nonil = b->T->nonil;

	switch(ATOMstorage(b->ttype)) {
		case TYPE_chr: CLUSTER_key_chr(map,b); break;
		case TYPE_bte: CLUSTER_key_bte(map,b); break;
		case TYPE_sht: CLUSTER_key_sht(map,b); break;
		case TYPE_oid: CLUSTER_key_oid(map,b); break;
		case TYPE_wrd: CLUSTER_key_wrd(map,b); break;
		case TYPE_int: CLUSTER_key_int(map,b); break;
		case TYPE_lng: CLUSTER_key_lng(map,b); break;
		case TYPE_flt: CLUSTER_key_flt(map,b); break;
		case TYPE_dbl: CLUSTER_key_dbl(map,b); break;
		case TYPE_str: CLUSTER_key_str(map,b); break;
		default:
			throw(MAL, "cluster.key", "Cannot recluster on this type");
		
	}
	BATsave(map);	/* dump dirty pages from memory */
	BBPunfix(*B);
	BBPkeepref(*M = map->batCacheid);
	return MAL_SUCCEED;
}
@-
Recluster the hash <oid,oid> table into a number of buckets
on the high order bits,
If the baskets are full before we have moved everything
in place, we seek forward for a bucket to dump the elements.

The self-organizing version should determine the optimal
number of buckets. Thereafter it can just call the
remapping;
@c
typedef struct{
		BUN base,limit,nxt;
} Basket;

str  
CLUSTER_map(bat *RB, bat *B)
{
	BUN rng,bsize, bnr=0, h, N= 2; /* number of buckets */
	BAT *b, *map;
	BUN p,q;
	oid *mp, idx = 0, *bp;
	int i;
	Basket *basket;
	(void) RB;

	if ( (b = BATdescriptor(*B)) == NULL)
		throw(MAL, "cluster.new", "Cannot access descriptor");

	if ((map = BATnew(TYPE_void, TYPE_oid, BATcount(b)+1)) == NULL) {
		BBPunfix(*B);
		throw(MAL, "cluster.new", "Cannot create hash map");
	}
	map->hsorted= TRUE;
	map->hdense= TRUE;
	BATkey(map, TRUE);
	BATseqbase(map, 0);
	BATkey(map,TRUE);
	map->tsorted= FALSE;
	map->tdense= FALSE;
	BATsetcount(map, BATcount(b));
	map->H->nonil = b->H->nonil;
	map->T->nonil = TRUE;
	BATmax(b, (ptr) &rng); /* get the maximum hash key , could use mask !*/
	rng++; 
@-
The key challenge is to determine the number of clusters.
A large number of clusters benefits subsequent performance,
but also challenges the prepare phase. The clustering should
work both for relatively small tables and those that do not
fit in memory.

The bottomline is the number of elements that fit in a single
diskblock.
@c
	N= (BUN)MT_npages() /10;
	bsize= (BUN) (MT_pagesize()/sizeof(lng));
	if (N > (rng / bsize))
		N = rng / bsize;
	if ( N ==0) N++;
	bsize= (rng+N-1) / N;
#ifdef _CLUSTER_DEBUG
	N=2; /* for debugging only */
	stream_printf(GDKout,"bucket pages %d size %d max %d  N %d\n", 
		(int)MT_npages(), (int)bsize, (int)rng, (int)N);
#endif
	basket = (Basket*) alloca((N+1) * sizeof(Basket));
	if (basket==NULL)
		throw(MAL, "cluster.new", "Not enough space");

	/* prepare buffers */
	basket[0].base = 0;
	basket[0].limit = BATcount(b) / N;
	basket[0].nxt = BUN_NONE;
	for (h=1; h < N; h++){
		basket[h].base= basket[h-1].limit;
		basket[h].limit= basket[h-1].limit + basket[0].limit;
		basket[h].nxt= BUN_NONE;
	}
	basket[N-1].limit= BATcount(b); /* last piece */

	mp = (oid*) Tloc(map, 0);
	bp = (oid*) Tloc(b, 0);
	BATloop(b,p,q){
		oid ocur = bp[p];

		bnr = ocur/bsize;
		assert(bnr<N);
		if (basket[bnr].base == basket[bnr].limit){ /* full */
			if (basket[bnr].nxt == BUN_NONE ||
				basket[basket[bnr].nxt].base == basket[basket[bnr].nxt].limit){
				/* find a maximal empty slot somewhere*/
				BUN nr, max= (bnr+1) % N;
				nr= bnr;
				i= (int) N;
				do {
					nr= (nr+1) % N;
					if (basket[nr].limit-basket[nr].base >
						basket[max].limit-basket[max].base)
						max = nr;
				} while( --i >=0);
				/* last basket bounds */
				basket[bnr].nxt = max;
				bnr= max;
			} else bnr = basket[bnr].nxt;
		}
		mp[basket[bnr].base] = idx++;
		basket[bnr].base++;
	}
	BBPunfix(*B);
	BBPkeepref(*RB= map->batCacheid);
	return MAL_SUCCEED;
}
@-
The order of the tuples in the cluster map
represent the read/write order. Under the assumption
that those read/writes are already localized, it becomes
opportune to simply rebuild the clustered column by 
probing. 

Extend this operation to accept a sequence of BATs.
We change the BAT in place using a temporary copy
to guide the move.
@c
str 
CLUSTER_apply(bat *bid, BAT *b, BAT *cmap)
{
	BAT *nb;
	nb= BATnew(b->htype, b->ttype, BATcapacity(b));
	nb->tsorted= FALSE;
	nb->tdense= FALSE;

	/* determine the work for all threads */
	/* to be done, first assume that we can remap in one go */
	assert(BATcount(b)==BATcount(cmap));

	switch(ATOMstorage(b->ttype)) {
	case TYPE_chr: CLUSTER_column_chr(nb, b, cmap);break;
	case TYPE_bte: CLUSTER_column_bte(nb, b, cmap);break;
	case TYPE_sht: CLUSTER_column_sht(nb, b, cmap);break;
	case TYPE_oid: CLUSTER_column_oid(nb, b, cmap);break;
	case TYPE_wrd: CLUSTER_column_wrd(nb, b, cmap);break;
	case TYPE_int: CLUSTER_column_int(nb, b, cmap);break;
	case TYPE_lng: CLUSTER_column_lng(nb, b, cmap);break;
	case TYPE_flt: CLUSTER_column_flt(nb, b, cmap);break;
	case TYPE_dbl: CLUSTER_column_dbl(nb, b, cmap);break;
	default:
		CLUSTER_column_any(nb, b, cmap);
	}
	BBPkeepref(*bid= nb->batCacheid);
	return MAL_SUCCEED;
}

str  
CLUSTER_column( Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	int *res =(int *) getArgReference(stk, pci, 0);
	bat *CMAP =(int *) getArgReference(stk, pci, 1);
	bat *B =(int *) getArgReference(stk, pci, 2);
	BAT *cmap = NULL, *b = NULL;
	str msg= MAL_SUCCEED;

	(void) cntxt;
	(void) mb;
	if ( (cmap = BATdescriptor(*CMAP)) == NULL )
		throw(MAL, "cluster.column", "Cannot access  descriptor");
	if ( (b = BATdescriptor(*B)) == NULL ){
		BBPunfix(*CMAP);
		throw(MAL, "cluster.column", "Cannot access  descriptor");
	}

	msg = CLUSTER_apply(res, b,cmap);
	BBPunfix(*CMAP);
	BBPunfix(b->batCacheid);
	return msg;
}

str  
CLUSTER_table( Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	BAT *map,*b;
	int *res, hid, mid, *bid,i;
	str msg;
	(void) cntxt;
	(void) mb;

	res =(int *) getArgReference(stk, pci, 0);
	bid = (int*) getArgReference(stk,pci,pci->retc);
	msg = CLUSTER_key(&hid,bid);
	if (msg)
		return msg;
	msg = CLUSTER_map(&mid,&hid);
	if (msg)
		return msg;
	map = BATdescriptor(mid);
	if (map== NULL)
		throw(MAL,"cluster.table","Can not access descriptor");

	for ( i=pci->retc; i<pci->argc; i++){
		bid = (int*) getArgReference(stk,pci,i);
		b = BATdescriptor(*bid);
		if ( b== NULL)
			throw(MAL,"cluster.table","Can not access descriptor");
		msg = CLUSTER_apply(res, b,map);
		BBPunfix(b->batCacheid);
	}
	*res= mid;
	return MAL_SUCCEED;
}
@}

@c

#include "mal_config.h"
#include "cluster.h"
#include <mal_exception.h>

str
CLS_create( bat *rpsum, bat *rcmap, bat *B, unsigned int *bits)
{
	BAT *psum, *cmap, *b;
	int i, mask = 0;
	wrd *bt, *be, *cnt, *pos, sum, *m;

	if (*bits >= sizeof(int)*8)
		throw(MAL, "cluster.new", "To many bits used for clustering");

	mask = (1<<*bits) - 1;
	if ((b = BATdescriptor(*B)) == NULL)
		throw(MAL, "cluster.new", "Cannot access descriptor");

	if ((psum = BATnew(TYPE_void, TYPE_wrd, mask+1)) == NULL) {
		BBPunfix(*B);
		throw(MAL, "cluster.new", "Cannot create prefix sum bat");
	}
	BATseqbase(psum,0);
	BATsetcount(psum, mask+1);
	psum->tsorted= TRUE;
	psum->tdense= FALSE;
	cnt = (wrd*)Tloc(psum, BUNfirst(psum));
	for (i=0 ; i <= mask; i++)
		cnt[i] = 0;

	bt = (wrd*)Tloc(b, BUNfirst(b));
	be = bt + BATcount(b);
	/* First make a histogram */
	for ( ; bt < be; bt++) {
		int h = ((int)(*bt)) & mask;
		cnt[h]++;
	}

	/* convert histogram into prefix sum */
	pos = (wrd*)alloca(sizeof(wrd) * (mask+1)); 
	for (sum = 0, i=0 ; i <= mask; i++) {
		wrd psum = sum;

		sum += cnt[i];
		pos[i] = cnt[i] = psum;
	}
	
	/* time to create the cluster map */
	if ((cmap = BATnew(TYPE_void, TYPE_wrd, BATcount(b))) == NULL) {
		BBPunfix(*B);
		BBPunfix(psum->batCacheid);
		throw(MAL, "cluster.new", "Cannot create cluster map bat");
	}
	BATseqbase(cmap, b->H->seq);
	BATsetcount(cmap, BATcount(b));
	cmap->tsorted= FALSE;
	cmap->tdense= FALSE;
	m = (wrd*)Tloc(cmap, BUNfirst(cmap));

	bt = (wrd*)Tloc(b, BUNfirst(b));
	be = bt + BATcount(b);
	for ( ; bt < be; ) {
		int h = ((int)(*bt++)) & mask;
		*m++ = pos[h]++;
	}

	BBPunfix(*B);
	BBPkeepref(*rpsum = psum->batCacheid);
	BBPkeepref(*rcmap = cmap->batCacheid);
	return MAL_SUCCEED;
}

@= map2_fixed
str  
CLS_map_@1(BAT *rb, BAT *cmap, BAT *b)
{
	wrd *m;
	@1 *r, *bt, *be;

	r = (@1*)Tloc(rb, BUNfirst(rb));
	m = (wrd*)Tloc(cmap, BUNfirst(cmap));
	bt = (@1*)Tloc(b, BUNfirst(b));
	be = bt + BATcount(b);
	for ( ; bt < be; ) 
		r[*m++] = *bt++;
	BBPunfix(cmap->batCacheid);
	BBPunfix(b->batCacheid);
	BBPkeepref(rb->batCacheid);
	return MAL_SUCCEED;
}

@c
@:map2_fixed(bte)@
@:map2_fixed(sht)@
@:map2_fixed(int)@
@:map2_fixed(lng)@

@c
/* calling CLS_map on both marked views of head and tail + some view magic should work
   when we need both head and tail reordered 
*/
str  
CLS_map(bat *RB, bat *CMAP, bat *B)
{
	BATiter bi;
	BAT *rb, *cmap = NULL, *b = NULL;
	wrd i = 0, bf, mf, *m;

	if ((cmap = BATdescriptor(*CMAP)) == NULL ||
	    (b = BATdescriptor(*B)) == NULL) {
		if (cmap) 
			BBPunfix(*CMAP);
		throw(MAL, "cluster.map", "Cannot access descriptor");
	}
	if (BATcount(cmap) != BATcount(b) ||
	    cmap->H->seq != b->H->seq) {
		BBPunfix(*CMAP);
		BBPunfix(*B);
		throw(MAL, "cluster.map", "Cluster map and attribute bat are not aligned");
	}

	if ((rb = BATnew(TYPE_void, b->ttype, BATcount(b))) == NULL) {
		BBPunfix(*CMAP);
		BBPunfix(*B);
		throw(MAL, "cluster.map", "Cannot create result bat");
	} 
	BATseqbase(rb, b->H->seq);
	BATsetcount(rb, BATcount(b));
	rb->tsorted= FALSE;
	rb->tdense= FALSE;
	rb->H->nonil = b->H->nonil;
	rb->T->nonil = b->T->nonil;
	*RB = rb->batCacheid;

	switch(ATOMstorage(b->ttype)) {
	case TYPE_chr:
	case TYPE_bte:
			return CLS_map_bte(rb, cmap, b);
	case TYPE_sht:
			return CLS_map_sht(rb, cmap, b);
#if SIZEOF_WRD == SIZEOF_INT
	case TYPE_wrd:
	case TYPE_oid:
#endif
	case TYPE_flt:
	case TYPE_int:
			return CLS_map_int(rb, cmap, b);
#if SIZEOF_WRD == SIZEOF_LNG
	case TYPE_wrd:
	case TYPE_oid:
#endif
	case TYPE_dbl:
	case TYPE_lng:
			return CLS_map_lng(rb, cmap, b);
	default:
		break;
	}
	bi = bat_iterator(b);
	bf = BUNfirst(b);
	mf = BUNfirst(cmap);
	m = (wrd*)Tloc(cmap, BUNfirst(cmap));
	if (b->T->varsized) {
		for (i = 0; i < (wrd)BATcount(b); i++) {
			BUNinplace(rb, (BUN)m[mf+i], NULL, BUNtvar(bi, bf+i), 0);
		}
	} else {
		for (i = 0; i < (wrd)BATcount(b); i++) {
			BUNinplace(rb, (BUN)m[mf+i], NULL, BUNtloc(bi, bf+i), 0);
		}
	}
	BBPunfix(*CMAP);
	BBPunfix(*B);
	BBPkeepref(*RB = rb->batCacheid);
	return MAL_SUCCEED;
}

/* per chunk do xxx */
