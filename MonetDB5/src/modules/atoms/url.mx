@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2006 CWI.
@' All Rights Reserved.

@f url
@a M. Kersten
@a Y. Zhang
@v 1.2
@* The URL module
The URL module contains a collection of commands to manipulate
Uniform Resource Locators - a resource on the World Wide Web-
represented as a string in Monet. The URL can represent
anything from a file, a directory or a complete movie.
This module is geared towards manipulation of their name only.
A complementary module can be used to gain access.[IOgate]

The core of the extension involves several operators to extract
portions of the URLs for further manipulation.
In particular, the domain, the server, and the protocol, and the file
extension can be extracted without copying the complete URL from the heap
into a string variable first.

The commands provided are based on the corresponding Java class.

A future version should use a special atom, because this may save
considerable space. Alternatively, break the URL strings into components
and represent them with a bunch of BATs.
An intermediate step would be to refine the atom STR, then it would be
possible to redefine hashing.

@mal
atom url:str;

command url(s:str):url 
address URLnew
comment "Create an URL from a string literal";
command getAnchor(u:url) :str        
address URLgetAnchor 
comment "Extract the URL anchor (reference)";
command getBasename(u:url) :str        
address URLgetBasename 
comment "Extract the URL base file name";
command getContent(u:url)   :str        
address URLgetContent 
comment "Get the URL resource in a local file";
command getContext(u:url)   :str        
address URLgetContext 
comment "Get the path context of a URL ";
command getDirectory(u:url) :bat[:int,:str]  
address URLgetDirectory 
comment "Extract directory names from the URL";
command getDomain(u:url) :str        
address URLgetDomain 
comment "Extract Internet domain from the URL";
command getExtension(u:url) :str        
address URLgetExtension 
comment "Extract the file extension of the URL";
command getFile(u:url) :str        
address URLgetFile 
comment "Extract the last file name of the URL";
command getHost(u:url)   :str        
address URLgetHost 
comment "Extract the server name from the URL";
command getPort(u:url) :str        
address URLgetPort 
comment "Extract the port id from the URL";
command getProtocol(u:url) :str        
address URLgetProtocol 
comment "Extract the protocol from the URL";
command getQuery(u:url) :str        
address URLgetQuery 
comment "Extract the query string from the URL";
command getQueryArg(u:url) :bat[:str,:str]  
address URLgetQueryArg 
comment "Extract argument mappings from the URL";
command getUser(u:url) :str        
address URLgetUser 
comment "Extract the user identity from the URL";
command getRobotURL(u:url) :str        
address URLgetRobotURL 
comment "Extract the location of the robot 
	control file";
command isaURL(u:url)   :bit        
address URLisaURL 
comment "Check conformity of the URL syntax";
command new(p:str,h:str,prt:int,f:str):url        
address URLnew4 
comment "Construct URL from protocol, host,
	port,and file";
command new(prot:str,host:str,fnme:str):url
address URLnew3 
comment "Construct URL from protocol, host,and file";

command fromstr():url 
address URLfromString
	comment "Convert a string to an url. ";
command tostr():str 
address URLtoString
	comment "Convert url to string equivalent";
@-
@{
@-
In Monet 5 we have a different notion on how to administer BATs.
@= PseudoM5
	    /* BATrename(b,"@1_@2");*/
	    BATroles(b,"@1","@2");
	    BATmode(b,TRANSIENT);
	    *retval= b->batCacheid;
@* Implementation Code
The URLs are stored as strings without further optimization.
A more compact representation is feasible, but not considered yet to
invest energy.
@= Pseudo
	BATrename(b,"@1_@2");
	BATroles(b,"@1","@2");
	BATmode(b,TRANSIENT);
	*retval= b;
@-
The key action is to break an url into its constituents.
Parsing is done for each individual request, because this way we
secure concurrent use from different threads.
@h
#ifndef URL_H
#define URL_H

#include <gdk.h>
#include <ctype.h>

typedef str url;

#ifdef WIN32
#ifndef LIBURL
#define url_export extern __declspec(dllimport)
#else
#define url_export extern __declspec(dllexport)
#endif
#else
#define url_export extern
#endif

url_export str escape_str(str *retval, str s);
url_export str unescape_str(str *retval, str s);

#endif /* URL_H */


@c
#include "url.h"
#include "mal.h"
#include "mal_exception.h"

void getword(char *word, char *line, char stop);
char x2c(char *what);
void plustospace(char *str);

url_export str URLnew(str *url, str *val);
url_export str URLgetAnchor(str *retval, str *val);
url_export str URLgetBasename(str *retval, str *t);
url_export str URLgetContent(str *retval, str *Str1);
url_export str URLgetContext(str *retval, str *val);
url_export str URLgetDirectory(int *ret, str *tv);
url_export str URLgetDomain(str *retval, str *tv);
url_export str URLgetExtension(str *retval, str *tv);
url_export str URLgetFile(str *retval, str *tv);
url_export str URLgetHost(str *retval, str *tv);
url_export str URLgetPort(str *retval, str *tv);
url_export str URLgetProtocol(str *retval, str *tv);
url_export str URLgetQuery(str *retval, str *tv);
url_export str URLgetQueryArg(int *ret, str *tv);
url_export str URLgetUser(str *retval, str *tv);
url_export str URLgetRobotURL(str *retval, str *tv);
url_export str URLisaURL(bit *retval, str *tv);
url_export str URLnew4(str *url, str *protocol, str *server, int *port, str *file);
url_export str URLnew3(str *url, str *protocol, str *server, str *file);
url_export int URLfromString(str src, int *len, str *url);
url_export int URLtoString(str *s, int *len, str src);

/* COMMAND "getAnchor": Extract an anchor (reference) from the URL
 * SIGNATURE: getAnchor(url) : str; */
str
url_getAnchor(str *retval,	/* put string: pointer to char here. */
	      url Str1		/* string: pointer to char. */
	)
{
	str s, d;

	if (Str1 == 0)
		return throwMessage("url.getAnchor","url missing");
	s = strchr(Str1, '#');
	if (s == 0) 
		s= (str) str_nil;
	d = (str) GDKmalloc(strlen(s) + 1);
	if (d)
		strcpy(d, s);
	*retval = d;
	return MAL_SUCCEED;
}

/* COMMAND "getBasename": Extract the base of the last file name of the URL,
 *                        thus, excluding the file extension.
 * SIGNATURE: getBasename(str) : str; */
str
url_getBasename(str *retval, url t)
{
	str d = 0, s;

	if (t == 0)
		return throwMessage("url.getBasename","url missing");
	s = strrchr(t, '/');
	if (s)
		s++;
	else
		s = (str) str_nil;
	d = (str)  GDKmalloc(strlen(s) + 1);
	if (d)
		strcpy(d, s);
	s = strchr(d, '.');
	if (s)
		*s = 0;
	*retval = d;
	return MAL_SUCCEED;
}

/* COMMAND "getContent": Retrieve the file referenced
 * SIGNATURE: getContent(str) : str; */

str
url_getContent(str *retval,	/* put string: pointer to char here. */
	       url Str1		/* string: pointer to char. */
	)
{
	/* TODO: getContent should not return a string */
	if (!Str1)
		return throwMessage("url.getContent","url missing");
	strcpy(*retval, "functions not implemented");
	return MAL_SUCCEED;
}

/* COMMAND "getContext": Extract the path context from the URL
 * SIGNATURE: getContext(str) : str; */
str
url_getContext(str *retval, url Str1)
{
	str s, d;

	if (Str1 == 0)
		return throwMessage("url.getContext","url missing");

	s = strstr(Str1, "://");
	if (s)
		s += 3;
	else
		s = Str1;

	s = strchr(s, '/');
	if (s == 0) 
		s= (str) str_nil;
	d = GDKmalloc(strlen(Str1) - (s - Str1) + 1);
	if (d)
		strcpy(d, s);
	*retval = d;
	return MAL_SUCCEED;
}

/* COMMAND "getDirectory": Extract the directory names from the URL
 * SIGNATURE: getDirectory(str) : bat[int,str]; */
str
url_getDirectory(BAT **retval,	/* put pointer to BAT[int,str] record here. */
		 url t)
{
	static char buf[1024];
	char *s;
	int i = 0, k = 0;
	BAT *b = NULL;

	if (t == 0)
		return throwMessage("url.getDirectory","url missing");

	while (*t && *t != ':')
		t++;
	t++;
	if (*t != '/')
		goto getDir_done;
	t++;
	if (*t != '/')
		goto getDir_done;
	t++;
	while (*t && *t != '/')
		t++;
	b = BATnew(TYPE_int, TYPE_str, 40);
	if (b == 0)
		return throwMessage("url.getDirectory","could not create BAT");

	s = buf;
	for (t++; *t; t++) {
		if (*t == '/') {
			*s = 0;
			BUNins(b, &k, buf, FALSE);
			k++;
			s = buf;
			*s = 0;
			i = 0;
			continue;
		}
		*s++ = *t;
		if (i++ == 1023)
			return throwMessage("url_getDirectory","server name too long\n");
	}
getDir_done:
	@:Pseudo(dir,name)@
	return MAL_SUCCEED;
}

/* COMMAND "getDomain": Extract the Internet domain from the URL
 * SIGNATURE: getDomain(str) : str; */
str
URLgetDomain(str *retval, str *u)
{
	static char buf[1024];
	char *b, *d, *s = buf;
	int i = 0;
	url t= *u;

	*retval = 0;
	s = (str)str_nil;
	if (t == 0)
		return throwMessage("url.getDomain","domain missing");
	while (*t && *t != ':')
		t++;
	t++;
	if (*t != '/')
		goto getDomain_done;
	t++;
	if (*t != '/')
		goto getDomain_done;
	t++;
	b = buf;
	d = 0;
	for (; *t && *t != '/'; t++) {
		if (*t == '.')
			d = b;
		if (*t == ':')
			break;
		*b++ = *t;
		if (i++ == 1023)
			return throwMessage("url_getDomain","server name too long\n");
	}
	*b = 0;
	if (d)
		s = d + 1;
getDomain_done:
	d = (char*) GDKmalloc(strlen(s) + 1);
	if (d)
		strcpy(d, s);
	*retval = d;
	return MAL_SUCCEED;
}

/* COMMAND "getExtension": Extract the file extension of the URL
 * SIGNATURE: getExtension(str) : str; */
str
url_getExtension(str *retval, url t)
{
	str d = 0, s;

	if (t == 0)
		return throwMessage("url.getExtension","url missing");
	s = strrchr(t, '/');
	if (s) {
		s++;
		s = strchr(s + 1, '.');
		if (s)
			s++;
		else
			s = (str) str_nil;
	} else
		s = (str) str_nil;
	d = (str) GDKmalloc(strlen(s) + 1);
	if (d)
		strcpy(d, s);
	*retval = d;
	return MAL_SUCCEED;
}

/* COMMAND "getFile": Extract the last file name of the URL
 * SIGNATURE: getFile(str) : str; */
str
url_getFile(str *retval, url t)
{
	str d = 0, s;

	if (t == 0)
		return throwMessage("url.getFile","url missing");
	s = strrchr(t, '/');
	if (s)
		s++;
	else
		s = (str) str_nil;
	d = (str) GDKmalloc(strlen(s) + 1);
	if (d)
		strcpy(d, s);
	*retval = d;
	return MAL_SUCCEED;
}

@+ Url_getHost
Extract the server identity from the URL
SIGNATURE: getHost(str) : str;
@c
str
url_getHost(str *retval,	/* is GDKfree needed ? */
	    url t)
{
	static char buf[1024];
	char *b, *d, *s;
	int i = 0;

	s = (str)str_nil;
	if (t == 0)
		return throwMessage("url.getHost","url missing");
	while (*t && *t != ':')
		t++;
	t++;
	if (*t != '/')
		goto getHost_done;
	t++;
	if (*t != '/')
		goto getHost_done;
	t++;
	b = buf;
	s = buf;
	for (; *t && *t != '/'; t++) {
		*b++ = *t;
		if (i++ == 1023) {
			return throwMessage("url_getHosterver","server name too long\n");
			break;
		}
	}
	*b = 0;
getHost_done:
	d = (char*) GDKmalloc(strlen(s) + 1);
	if (d)
		strcpy(d, s);
	*retval = d;
	return MAL_SUCCEED;
}

@+ url_getPort
 Extract the port id from the URL SIGNATURE: getPort(str) : str;
@c
str
url_getPort(str *retval, url t)
{
	static char buf[1024];
	char *b, *d = 0, *s = buf;
	int i = 0;

	if (t == 0)
		return throwMessage("url.getPort","url missing");
	s = (str)str_nil;
	while (*t && *t != ':')
		t++;
	t++;
	if (*t != '/')
		goto getPort_done;
	t++;
	if (*t != '/')
		goto getPort_done;
	t++;
	b = buf;
	for (; *t && *t != '/'; t++) {
		if (*t == ':')
			d = b;
		*b++ = *t;
		if (i++ == 1023)
			return throwMessage("url_getPort","server name too long\n");
	}
	*b = 0;
	if (d)
		s = d + 1;
	else
		s = (str)str_nil;
getPort_done:
	d = (char*) GDKmalloc(strlen(s) + 1);
	if (d)
		strcpy(d, s);
	*retval = d;
	return MAL_SUCCEED;
}

/* COMMAND "getProtocol": Extract the protocol from the URL
 * SIGNATURE: getProtocol(str) : str; */
str
url_getProtocol(str *retval,	/* put string: pointer to char here. */
		url t)
{
	static char buf[1024];
	char *b, *d = 0;
	int i = 0;

	if (t == 0)
		return throwMessage("url.getProtocol","url missing");
	b = buf;
	for (; *t && *t != ':'; t++) {
		*b++ = *t;
		if (i++ == 1023)
			return throwMessage("url_getProtocol","server name too long\n");
	}
	*b = 0;
	d = (char*) GDKmalloc(strlen(buf) + 1);
	if (d)
		strcpy(d, buf);
	*retval = d;
	return MAL_SUCCEED;
}

str
url_getQuery(str *retval, url Str1)
{
	char *s, *d;

	if (Str1 == 0)
		return throwMessage("url.getQuery","url missing");
	s = strchr(Str1, '?');
	if (s == 0) 
		s= (str) str_nil;
	 else 
		s++;
	d = (char*) GDKmalloc(strlen(s) + 1);
	if (d)
		strcpy(d, s);
	*retval = d;
	return MAL_SUCCEED;
}

/* COMMAND "getQueryArg": Extract the argument mappings from the URL query
 * SIGNATURE: getQueryArg(str) : bat[str,str]; */
str
url_getQueryArg(BAT **retval, url t)
{
	char query[1024];
	char val[1024];
	char name[1024];
	char *unescapedval;
	BAT *b;

	if (t == 0)
		return throwMessage("url.getQueryArg","url missing");
	if (unescape_str(&unescapedval, t) != MAL_SUCCEED)
		return throwMessage("url.getQueryArg","failure to unescape");

	t = strchr(unescapedval, '?');
	if (t == 0)
		return throwMessage("url.getQueryArg","variable missing");
	t++;

	b = BATnew(TYPE_str, TYPE_str, 40);
	if (b == 0)
		return throwMessage("url.getQueryArg","could not create BAT");
	if (strlen(t) > 1023)
		return throwMessage("url.getQueryArg","string too long");
	strcpy(query, t);

	for (; query[0] != '\0';) {
		getword(val, query, '&');
		plustospace(val);
		getword(name, val, '=');
		BUNins(b, name, val, FALSE);
	}
	@:Pseudo(dir,name)@
	return MAL_SUCCEED;
}

/* COMMAND "getRobotURL": Extract the location of the robot control file
 * SIGNATURE: getRobotURL(str) : str; */
str
url_getRobotURL(str *retval,	/* put string: pointer to char here. */
		url t		/* string: pointer to char. */
	)
{
	static char buf[1024];
	char *b, *d, *s = buf;
	int i = 0;

	if (t == 0)
		return throwMessage("url.getRobotURL","url missing");
	b = buf;
	while (*t && *t != ':')
		*b++ = *t++;
	*b++ = *t++;
	if (*t != '/')
		goto getRobot_done;
	*b++ = *t++;
	if (*t != '/')
		goto getRobot_done;
	*b++ = *t++;
	for (; *t && *t != '/'; t++) {
		*b++ = *t;
		if (i++ == 1000) {
			return throwMessage("url_getRobot","server name too long\n");
		}
	}
	strcpy(b, "/robots.txt");
getRobot_done:
	d = (char*) GDKmalloc(strlen(s) + 1);
	if (d)
		strcpy(d, s);
	*retval = d;
	return MAL_SUCCEED;
#if 0				/* not reached */
	if (i > 1000)
		s = (str)str_nil;
	else
		strcpy(b, "/robots.txt");
#endif
}


/* COMMAND "getUser": Extract the user identity from the URL
 * SIGNATURE: getUser(str) : str; */
str
url_getUser(str *retval, url t)
{
	static char buf[1024];
	char *b, *d = 0, *s;
	int i = 0;

	if (t == 0)
		return throwMessage("url.getUser","url missing");
	s = (str)str_nil;
	while (*t && *t != ':')
		t++;
	t++;
	if (*t != '/')
		goto getUser_done;
	t++;
	if (*t != '/')
		goto getUser_done;
	t++;
	for (; *t && *t != '/'; t++)
		;
	t++;
	if (*t == '~') {
		t++;
		b = buf;
		s = buf;
		for (; *t && *t != '/'; t++) {
			*b++ = *t;
			if (i++ == 1023)
				return throwMessage("url_getUser","server name too long\n");
		}
		*b = 0;
	}
getUser_done:
	d = (char*) GDKmalloc(strlen(s) + 1);
	if (d)
		strcpy(d, s);
	*retval = d;
	return MAL_SUCCEED;
}

/* COMMAND "isaURL": Check conformity of the URL syntax
 * SIGNATURE: isaURL(str) : bit; */
str
url_isaURL(bit *retval,		/* put return atom here. */
	   url Str1		/* string: pointer to char. */
	)
{
	(void) retval;
	if (Str1 == 0)
		return throwMessage("url.isaURL","url missing");

	if (strlen(Str1) == 0)
		*retval = FALSE;
	else
		*retval = TRUE;
	return MAL_SUCCEED;
}

int needEscape(char c){
    if( isalnum((int)c) )
        return 0;
    if( c == '#' || c == '-' || c == '_' || c == '.' || c == '!' || 
        c == '~' || c == '*' || c == '\'' || c == '(' || c == ')' )
        return 0;
    return 1;
}

/* COMMAND "escape": this function applies the URI escaping rules defined in
 * section 2 of [RFC 3986] to the string supplied as 's'.
 * The effect of the function is to escape a set of identified characters in
 * the string. Each such character is replaced in the string by an escape
 * sequence, which is formed by encoding the character as a sequence of octets
 * in UTF-8, and then reprensenting each of these octets in the form %HH.
 * 
 * All characters are escaped other than:
 * [a-z], [A-Z], [0-9], "#", "-", "_", ".", "!", "~", "*", "'", "(", ")"
 *
 * This function must always generate hexadecimal values using the upper-case
 * letters A-F.
 *
 * SIGNATURE: escape(str) : str; */
str
escape_str(str *retval, str s)
{
	int x, y;
	str res;

	if (!s)
		return throwMessage("url.escape","url missing");

	if (!( res = (str) GDKmalloc( strlen(s) * 3 ) ))
		return throwMessage("url.escape","malloc failed");
	for (x = 0, y = 0; s[x]; ++x, ++y) {
        if (needEscape(s[x])){
            if (s[x] == ' '){
                res[y] = '+';
            } else {
                sprintf(res+y, "%%%2x", s[x]);
                y += 2;
            }
        } else {
            res[y] = s[x];
        }
	}
	res[y] = '\0';

    *retval = GDKrealloc(res, strlen(res)+1);
    return MAL_SUCCEED;
}

/* COMMAND "unescape": Convert hexadecimal representations to ASCII characters.
 *                        All sequences of the form "% HEX HEX" are unescaped.
 * SIGNATURE: unescape(str) : str; */
str
unescape_str(str *retval, str s)
{
	int x, y;
    str res;

    if (!s)
		return throwMessage("url.escape","ul missing");

    res = (str) GDKmalloc(strlen(s));
    if (!res)
		return throwMessage("url.unescape","malloc failed");

	for (x = 0, y = 0; s[x]; ++x, ++y) {
		if (s[x] == '%') {
			res[y] = x2c(&s[x + 1]);
			x += 2;
		} else {
            res[y] = s[x];
        }
	}
	res[y] = '\0';
    
    *retval = GDKrealloc(res, strlen(res)+1);
    return MAL_SUCCEED;
}

/* COMMAND "newurl": Construct a URL from protocol, host,and file
 * SIGNATURE: newurl(str, str, str) : str; */
str
url_new3(str *retval,		/* put string: pointer to char here. */
	 str Protocol,		/* string: pointer to char. */
	 str Server,		/* string: pointer to char. */
	 str File		/* string: pointer to char. */
	)
{
	char buf[1024];
	str d, s = buf;

	if (strlen(File) + strlen(Server) + strlen(Protocol) > 1000)
		s = (str) str_nil;
	else
		sprintf(buf, "%s://%s/%s", Protocol, Server, File);
	d = (str) GDKmalloc(strlen(s) + 1);
	if (d)
		strcpy(d, s);
	*retval = d;
	return MAL_SUCCEED;
}

/* COMMAND "newurl": Construct a URL from protocol, host,port,and file
 * SIGNATURE: newurl(str, str, int, str) : str; */
str
url_new4(str *retval,		/* put string: pointer to char here. */
	 str Protocol,		/* string: pointer to char. */
	 str Server,		/* string: pointer to char. */
	 int *Port,		/* pointer to integer. */
	 str File		/* string: pointer to char. */
	)
{
	char buf[1024];
	str d, s = buf;

	if (strlen(File) + strlen(Server) + strlen(Protocol) > 1000)
		s = (str) str_nil;
	else
		sprintf(buf, "%s://%s:%d/%s", Protocol, Server, *Port, File);
	d = (str) GDKmalloc(strlen(s) + 1);
	if (d)
		strcpy(d, s);
	*retval = d;
	return MAL_SUCCEED;
}

@+ Utilities
@c

#define LF 10
#define CR 13

void
getword(char *word, char *line, char stop)
{
	int x = 0, y;

	for (x = 0; ((line[x]) && (line[x] != stop)); x++)
		word[x] = line[x];

	word[x] = '\0';
	if (line[x])
		++x;
	y = 0;

	while ((line[y++] = line[x++]) != 0)
		;
}

char *
makeword(char *line, char stop)
{
	int x = 0, y;
	char *word = (char *) malloc(sizeof(char) * (strlen(line) + 1));

	for (x = 0; ((line[x]) && (line[x] != stop)); x++)
		word[x] = line[x];

	word[x] = '\0';
	if (line[x])
		++x;
	y = 0;

	while ((line[y++] = line[x++]) != 0)
		;
	return word;
}

char
x2c(char *what)
{
	char digit;

	digit = (what[0] >= 'A' ? ((what[0] & 0xdf) - 'A') + 10 : (what[0] - '0'));
	digit *= 16;
	digit += (what[1] >= 'A' ? ((what[1] & 0xdf) - 'A') + 10 : (what[1] - '0'));
	return (digit);
}

void
plustospace(char *str)
{
	int x;

	for (x = 0; str[x]; x++)
		if (str[x] == '+')
			str[x] = ' ';
}

@}

@- Wrapping
Here you find the wrappers around the V4 url library included above.
@c

int
URLfromString(str src, int *len, str *url)
{
	/* actually parse the message for valid url */
	if (*url !=0)
		GDKfree(url);

	*len = strlen(src);
	*url = GDKstrdup(src);

	return *len;
}

int
URLtoString(str *s, int *len, str src)
{
	int l;

	if (GDK_STRNIL(src)) {
		**s = 0;
		return 0;
	}
	l = src == 0 ? 3 : strlen(src) + 3;
	/* if( !*s) *s= (str)GDKmalloc(*len = l); */

	if (l >= *len) {
		GDKfree(*s);
		*s = (str) GDKmalloc(l);
	}
	snprintf(*s, l, "\"%s\"", src);
	*len = l - 1;
	return *len;
}

str
URLgetAnchor(str *retval, str *val)
{
	return url_getAnchor(retval, *val);
}

str
URLgetBasename(str *retval, str *t)
{
	return url_getBasename(retval, *t);
}

str
URLgetContent(str *retval, str *Str1)
{
	(void) Str1;		/* fool compiler */
	*retval = 0;
	return throwMessage("url.getContent", "not yet implemented");
}

str
URLgetContext(str *retval, str *val)
{
	return url_getContext(retval, *val);
}

str
URLgetDirectory(int *ret, str *tv)
{
	(void) ret;
	(void) tv;
	return throwMessage("url.getDirectory", "not yet available");
/* this operation requres a BAT context, should be defined elsewhere
	url_getDirectory(ret, *tv);
*/
}

str
URLgetExtension(str *retval, str *tv)
{
	return url_getExtension(retval, *tv);
}

str
URLgetFile(str *retval, str *tv)
{
	return url_getFile(retval, *tv);
}

@+ Url_getHost
Extract the server identity from the URL
SIGNATURE: getHost(str) : str; 
@c
str
URLgetHost(str *retval, str *tv)
{
	return url_getHost(retval, *tv);
}

@+ URLgetPort
 Extract the port id from the URL SIGNATURE: getPort(str) : str; 
@c
str
URLgetPort(str *retval, str *tv)
{
	return url_getPort(retval, *tv);
}

str
URLgetProtocol(str *retval, str *tv)
{
	return url_getProtocol(retval, *tv);
}

str
URLgetQuery(str *retval, str *tv)
{
	return url_getQuery(retval, *tv);
}

str
URLgetQueryArg(int *ret, str *tv)
{
	(void) ret;
	(void) tv;
	return throwMessage("url.getQueryArg", "Not yet implemented");
/*
	url_getQueryArg(ret,*tv);
	return MAL_SUCCEED;
*/
}

str
URLgetRobotURL(str *retval, str *tv)
{
	return url_getRobotURL(retval, *tv);
}


str
URLgetUser(str *retval, str *tv)
{
	return url_getUser(retval, *tv);
}

str
URLisaURL(bit *retval, str *tv)
{
	(void) retval;
	(void) tv;		/* fool compiler */
	if (tv == 0)
		return throwMessage("url.isaURL", "no string");
	return throwMessage("url.isaURL", "not yet implemented");
}

str
URLnew(str *url, str *val)
{
	(void) url;		/* fool compiler */
	*url = GDKstrdup(*val);

	return MAL_SUCCEED;
}

str
URLnew3(str *url, str *protocol, str *server, str *file)
{
	int l, i;

	l = GDK_STRLEN(*file) + GDK_STRLEN(*server) + GDK_STRLEN(*protocol) + 10;
	*url = (str) GDKmalloc(l);
	snprintf(*url, l, "%s://", *protocol);
	i = strlen(*url);
	snprintf(*url +i, l - i, "%s", *server);
	i = strlen(*url);
	snprintf(*url +i, l - i, "/%s", *file);

	return MAL_SUCCEED;
}

str
URLnew4(str *url, str *protocol, str *server, int *port, str *file)
{
	str Protocol = *protocol;
	str Server = *server;
	str File = *file;
	int l, i;

	if (GDK_STRNIL(file))
		File = "";
	if (GDK_STRNIL(server))
		Server = "";
	if (GDK_STRNIL(protocol))
		Protocol = "";
	l = strlen(File) + strlen(Server) + strlen(Protocol) + 20;
	*url = (str) GDKmalloc(l);
	snprintf(*url, l, "%s://", Protocol);
	i = strlen(*url);
	snprintf(*url +i, l - i, "%s", Server);
	i = strlen(*url);
	snprintf(*url +i, l - i, ":%d", *port);
	i = strlen(*url);
	snprintf(*url +i, l - i, "/%s", File);

	return MAL_SUCCEED;
}

@}
