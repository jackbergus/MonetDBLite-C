@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
@' Copyright August 2008-2009 MonetDB B.V.
@' All Rights Reserved.

@f rmtconn
@a Fabian Groffen
@+ Remote Connection Wrapper
The rmtconn atom is a shallow wrapper that contains a remote connection
id.  Due to it being wrapped by this atom, receiving methods can
distinguish it from a normal string.
@see remote module
@note this atom is extremely similar to the rmtobj atom, perhaps some
reuse through inheritance can be made here

@h
#ifndef _RMTCONN_DEF
#define _RMTCONN_DEF

#ifdef WIN32
#ifndef LIBRMTCONN
#define rmtconn_export extern __declspec(dllimport)
#else
#define rmtconn_export extern __declspec(dllexport)
#endif
#else
#define rmtconn_export extern
#endif

@c
#include "mal_config.h"
#include <mal.h>
#include <mal_exception.h>
#include "rmtconn.h"	/* for the implementation of the functions */

@mal
atom rmtconn:str;

command fromstr() 
address RMTOfromString
comment "Convert a string to an rmtconn";
@h
rmtconn_export int RMTCfromString(str src, int *len, str *retval);
@c
/**
 * Creates a new rmtconn from the given string (stupid string copy).
 * Warning: GDK function, does NOT pass a string by reference, and wants
 * a pointer to a pointer for the retval!
 * Returns the number of chars read
 * @note this function should be disabled somehow
 */
int
RMTCfromString(str src, int *len, str *retval)
{
	if (src == NULL) {
		*len = 0;
		*retval = GDKstrdup(str_nil);
	} else {
		*retval = GDKstrdup(src);
		*len = (int)strlen(src);
	}

	return(*len);
}

@mal
command tostr() 
address RMTCtoString
comment "Convert rmtconn to string equivalent";
@h
rmtconn_export int RMTCtoString(str *retval, int *len, str handle);
@c
/**
 * Returns the string representation of the given rmtconn.
 * Warning: GDK function
 * Returns the length of the string
 */
int
RMTCtoString(str *retval, int *len, str handle)
{
	int hl = (int)strlen(handle) + 1;
	if (*len < hl) {
		if (*retval != NULL)
			GDKfree(*retval);
		*retval = GDKmalloc(sizeof(char) * hl);
	}
	*len = hl;
	memcpy(*retval, handle, hl);

	return(*len);
}
@mal
command new(s:str):rmtconn 
address RMTCnew
comment "Create an rmtconn from a string literal";
@h
rmtconn_export str RMTCnew(str *retval, str *in);
@c
@{
/**
 * Returns a rmtconn, parsed from a string.  The fromStr function is used
 * to parse the string.
 */
str
RMTCnew(str *retval, str *in)
{
	int len = 0;

	(void)RMTCfromString(*in, &len, retval);
	if (len == 0)
		throw(PARSE, "rmtconn.new", "Error while parsing %s", *in);

	return (MAL_SUCCEED);
}

@h
#endif
