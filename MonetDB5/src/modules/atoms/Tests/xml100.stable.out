stdout of test 'xml100` in directory 'src/modules/atoms` itself:


# 20:59:49 >  
# 20:59:49 >  Mtimeout -timeout 60  mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_open=true --set xrpc_open=true --set mapi_port=30810 --set xrpc_port=49438 --set monet_prompt= --trace --dbname=mTests_src_modules_atoms  xml100.mal
# 20:59:49 >  

# MonetDB server v5.1.0, based on kernel v1.19.0
# Serving database 'mTests_src_modules_atoms'
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2007 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://gio.ins.cwi.nl:30810/
#b:= "Mary Ann Walker";
#c:= "brown";
#
#n:= nil:xml;
#io.print(n);
#ns:= xml.str(n);
#io.print(ns);
#
#bx:= xml.xml(b);
#cx:= xml.xml(c);
#
#xp:= xml.element("person",bx);
#sp:= xml.str(xp); io.print(sp);
#xh:= xml.element("hair",nil:str,nil:str,cx);
#sp:= xml.str(xh); io.print(sp);
#
#xx:= xml.forest(xp,xh);
#xs:= xml.str(xx);
#io.print(xs);
#
function user.main():void;              #  0 main:void {G}
    b := "Mary Ann Walker";             #  1 b:str := _2:str {G}
    c := "brown";                       #  2 c:str := _4:str {G}
    n := nil:xml;                       #  3 n:xml := _6:xml {G}
    io.print(n);                        #  4 _7:void := IOprint_val(n:xml) 
    ns := xml.str(n);                   #  5 ns:str := XMLxml2str(n:xml) {G}
    io.print(ns);                       #  6 _9:void := IOprint_val(ns:str) 
    bx := xml.xml(b);                   #  7 bx:xml := XMLstr2xml(b:str) {G}
    cx := xml.xml(c);                   #  8 cx:xml := XMLstr2xml(c:str) {G}
    xp := xml.element("person",bx);     #  9 xp:xml := XMLelementSmall(_13:str, bx:xml) {G}
    io.print(xp);                       # 10 _14:void := IOprint_val(xp:xml) 
    xh := xml.element("hair",nil:str,nil:xml,cx);# 11 xh:xml := XMLelement(_16:str, _17:str, _6:xml, cx:xml) {G}
    io.print(xh);                       # 12 _18:void := IOprint_val(xh:xml) 
    xx := xml.forest(xp,xh);            # 13 xx:xml := XMLforest(xp:xml, xh:xml) {G}
    xs := xml.str(xx);                  # 14 xs:str := XMLxml2str(xx:xml) {G}
    io.print(xs);                       # 15 _21:void := IOprint_val(xs:str) 
end main;	# 16  
[  ]
[ nil ]
[ <person>Mary Ann Walker</person> ]
[ <hair>brown</hair> ]
[ "<person>Mary Ann Walker</person><hair>brown</hair>" ]

# 20:59:49 >  
# 20:59:49 >  Done.
# 20:59:49 >  

