stdout of test 'color` in directory 'src/modules/atoms` itself:


# 23:57:21 >  
# 23:57:21 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=37313 --set sql_port=44202 --set xquery_port=57499 --set monet_prompt= --trace --dbname=mTests_src_modules_atoms  color.mal </dev/null
# 23:57:21 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_atoms
# Visit http://monetdb.cwi.nl/ for further information.
#function testcolor();	
#    c:= color.rgb(100,101,102);
#    io.print(c);	
#    V38 := color.red(c);	
#    io.print(V38);	
#    V41 := color.green(c);	
#    io.print(V41);	
#    V44 := color.blue(c);	
#    io.print(V44);	
#    V47 := color.hsv(90.0,0.5,1.0);	
#    c := V47;	
#    io.print(c);	
## don't print hue, saturation, and value: architectural differences can 	
## cause differences in the output produced.  instead, use them to produce 	
## a new color which should be the same as the original color 	
##    print(hue(c)); 	
##    print(saturation(c)); 	
##    print(value(c)); 	
#    V62 := color.hue(c);	
#    V63 := color.saturation(c);	
#    V64 := color.value(c);	
#    V61 := color.hsv(V62,V63,V64);	
#    io.print(V61);	
#    V66 := color.ycc(200,100,50);	
#    c := V66;	
#    io.print(c);	
#    V73 := color.luminance(c);	
#    io.print(V73);	
#    V76 := color.cr(c);	
#    io.print(V76);	
#    V79 := color.cb(c);	
#    io.print(V79);	
#    V82 := color.color("0x0012ABcd");	
#    c := V82;	
#    io.print(c);	
#    V88 := color.red(c);	
#    io.print(V88);	
#    V91 := color.green(c);	
#    io.print(V91);	
#    V94 := color.blue(c);	
#    io.print(V94);	
#end testcolor;	
function user.testcolor():void;	# 0  (testcolor:void)
    c := color.rgb(100,101,102);	# 1 CLRrgb (c:color)<-(_2:int)(_3:int)(_4:int)
    io.print(c);	# 2 IOprint_val (_5:int)<-(c:color)
    V38 := color.red(c);	# 3 CLRred (V38:int)<-(c:color)
    io.print(V38);	# 4 IOprint_val (_7:int)<-(V38:int)
    V41 := color.green(c);	# 5 CLRgreen (V41:int)<-(c:color)
    io.print(V41);	# 6 IOprint_val (_9:int)<-(V41:int)
    V44 := color.blue(c);	# 7 CLRblue (V44:int)<-(c:color)
    io.print(V44);	# 8 IOprint_val (_11:int)<-(V44:int)
    V47 := color.hsv(90,0.5,1);	# 9 CLRhsv (V47:color)<-(_13:flt)(_14:flt)(_15:flt)
    c := V47;	# 10  (c:color)<-(V47:color)
    color.print(c);	# 11 CLRprintf (_16:void)<-(c:color)
# don't print hue, saturation, and value: architectural differences can 	 	# 12  (_18:str)
# cause differences in the output produced.  instead, use them to produce 	 	# 13  (_20:str)
# a new color which should be the same as the original color 	 	# 14  (_22:str)
#    print(hue(c)); 	 	# 15  (_24:str)
#    print(saturation(c)); 	 	# 16  (_26:str)
#    print(value(c)); 	 	# 17  (_28:str)
    V62 := color.hue(c);	# 18 CLRhue (V62:flt)<-(c:color)
    V63 := color.saturation(c);	# 19 CLRsaturation (V63:flt)<-(c:color)
    V64 := color.value(c);	# 20 CLRvalue (V64:flt)<-(c:color)
    V61 := color.hsv(V62,V63,V64);	# 21 CLRhsv (V61:color)<-(V62:flt)(V63:flt)(V64:flt)
    color.print(V61);	# 22 CLRprintf (_27:void)<-(V61:color)
    V66 := color.ycc(200,100,50);	# 23 CLRycc (V66:color)<-(_29:int)(_2:int)(_30:int)
    c := V66;	# 24  (c:color)<-(V66:color)
    color.print(c);	# 25 CLRprintf (_31:void)<-(c:color)
    V73 := color.luminance(c);	# 26 CLRluminance (V73:int)<-(c:color)
    io.print(V73);	# 27 IOprint_val (_33:int)<-(V73:int)
    V76 := color.cr(c);	# 28 CLRcr (V76:int)<-(c:color)
    io.print(V76);	# 29 IOprint_val (_35:int)<-(V76:int)
    V79 := color.cb(c);	# 30 CLRcb (V79:int)<-(c:color)
    io.print(V79);	# 31 IOprint_val (_37:int)<-(V79:int)
    V82 := color.color("0x0012ABcd");	# 32 CLRcolor (V82:color)<-(_39:str)
    c := V82;	# 33  (c:color)<-(V82:color)
    color.print(c);	# 34 CLRprintf (_40:void)<-(c:color)
    V88 := color.red(c);	# 35 CLRred (V88:int)<-(c:color)
    io.print(V88);	# 36 IOprint_val (_42:int)<-(V88:int)
    V91 := color.green(c);	# 37 CLRgreen (V91:int)<-(c:color)
    io.print(V91);	# 38 IOprint_val (_44:int)<-(V91:int)
    V94 := color.blue(c);	# 39 CLRblue (V94:int)<-(c:color)
    io.print(V94);	# 40 IOprint_val (_46:int)<-(V94:int)
    bc := bat.new(:void,:color);	# 41 CMDBATnew (bc:bat[:void,:color])<-(_48:void)(_49:color)
    bat.insert(bc,nil:void,0x00000000:color);	# 42 BKCinsert_bun (_50:void)<-(bc:bat[:void,:color])(_51:void)(_52:color)
    bat.insert(bc,nil:void,0x0033FF44:color);	# 43 BKCinsert_bun (_53:void)<-(bc:bat[:void,:color])(_51:void)(_54:color)
    bat.insert(bc,nil:void,0x00003F44:color);	# 44 BKCinsert_bun (_55:void)<-(bc:bat[:void,:color])(_51:void)(_56:color)
    io.print(bc);	# 45 IOprint_val (_57:int)<-(bc:bat[:void,:color])
    z := batcolor.red(bc);	# 46 CLRbatRed (z:bat[:void,:int])<-(bc:bat[:void,:color])
    io.print(z);	# 47 IOprint_val (_59:int)<-(z:bat[:void,:int])
end testcolor;	# 48  
#user.testcolor();
#
function user.main():void;	# 0  (main:void)
    user.testcolor();	# 1  (_1:void)
end main;	# 2  
[ 0x00646566 ]
[ 100 ]
[ 101 ]
[ 102 ]
[ 0x00BFFF80 ]
[ 0x00BFFF80 ]
[ 0x00A0F63D ]
[ 199 ]
[ 101 ]
[ 51 ]
[ 0x0012ABCD ]
[ 18 ]
[ 171 ]
[ 205 ]
#-------------------------#
# h	t		  # name
# void	color		  # type
#-------------------------#
[ nil,	  0x00000000	  ]
[ nil,	  0x0033FF44	  ]
[ nil,	  0x00003F44	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ nil,	  0	  ]
[ nil,	  51	  ]
[ nil,	  0	  ]

# 23:57:21 >  
# 23:57:21 >  Done.
# 23:57:21 >  

