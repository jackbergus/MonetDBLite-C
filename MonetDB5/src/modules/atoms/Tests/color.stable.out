stdout of test 'color` in directory 'src/modules/atoms` itself:


# 23:57:21 >  
# 23:57:21 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=37313 --set sql_port=44202 --set xquery_port=57499 --set monet_prompt= --trace --dbname=mTests_src_modules_atoms  color.mal </dev/null
# 23:57:21 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_atoms
# Visit http://monetdb.cwi.nl/ for further information.
#function testcolor();	
#    c:= color.rgb(100,101,102);
#    io.print(c);	
#    V38 := color.red(c);	
#    io.print(V38);	
#    V41 := color.green(c);	
#    io.print(V41);	
#    V44 := color.blue(c);	
#    io.print(V44);	
#    V47 := color.hsv(90.0,0.5,1.0);	
#    c := V47;	
#    io.print(c);	
## don't print hue, saturation, and value: architectural differences can 	
## cause differences in the output produced.  instead, use them to produce 	
## a new color which should be the same as the original color 	
##    print(hue(c)); 	
##    print(saturation(c)); 	
##    print(value(c)); 	
#    V62 := color.hue(c);	
#    V63 := color.saturation(c);	
#    V64 := color.value(c);	
#    V61 := color.hsv(V62,V63,V64);	
#    io.print(V61);	
#    V66 := color.ycc(200,100,50);	
#    c := V66;	
#    io.print(c);	
#    V73 := color.luminance(c);	
#    io.print(V73);	
#    V76 := color.cr(c);	
#    io.print(V76);	
#    V79 := color.cb(c);	
#    io.print(V79);	
#    V82 := color.color("0x0012ABcd");	
#    c := V82;	
#    io.print(c);	
#    V88 := color.red(c);	
#    io.print(V88);	
#    V91 := color.green(c);	
#    io.print(V91);	
#    V94 := color.blue(c);	
#    io.print(V94);	
#end testcolor;	
function user.testcolor():void;         #  0 testcolor:void {G}
    c := color.rgb(100,101,102);        #  1 c:color := CLRrgb(_2:int, _3:int, _4:int) 
    io.print(c);                        #  2 _5:void := IOprint_val(c:color) 
    V38 := color.red(c);                #  3 V38:int := CLRred(c:color) 
    io.print(V38);                      #  4 _7:void := IOprint_val(V38:int) 
    V41 := color.green(c);              #  5 V41:int := CLRgreen(c:color) 
    io.print(V41);                      #  6 _9:void := IOprint_val(V41:int) 
    V44 := color.blue(c);               #  7 V44:int := CLRblue(c:color) 
    io.print(V44);                      #  8 _11:void := IOprint_val(V44:int) 
    V47 := color.hsv(90,0.5,1);         #  9 V47:color := CLRhsv(_13:flt, _14:flt, _15:flt) 
    c := V47;                           # 10 c:color := V47:color 
    color.print(c);                     # 11 _16:void := CLRprintf(c:color) 
# don't print hue, saturation, and value: architectural differences can 	 
# cause differences in the output produced.  instead, use them to produce 	 
# a new color which should be the same as the original color 	 
#    print(hue(c)); 	 
#    print(saturation(c)); 	 
#    print(value(c)); 	 
    V62 := color.hue(c);                # 18 V62:flt := CLRhue(c:color) 
    V63 := color.saturation(c);         # 19 V63:flt := CLRsaturation(c:color) 
    V64 := color.value(c);              # 20 V64:flt := CLRvalue(c:color) 
    V61 := color.hsv(V62,V63,V64);      # 21 V61:color := CLRhsv(V62:flt, V63:flt, V64:flt) 
    color.print(V61);                   # 22 _27:void := CLRprintf(V61:color) 
    V66 := color.ycc(200,100,50);       # 23 V66:color := CLRycc(_29:int, _2:int, _30:int) 
    c := V66;                           # 24 c:color := V66:color 
    color.print(c);                     # 25 _31:void := CLRprintf(c:color) 
    V73 := color.luminance(c);          # 26 V73:int := CLRluminance(c:color) 
    io.print(V73);                      # 27 _33:void := IOprint_val(V73:int) 
    V76 := color.cr(c);                 # 28 V76:int := CLRcr(c:color) 
    io.print(V76);                      # 29 _35:void := IOprint_val(V76:int) 
    V79 := color.cb(c);                 # 30 V79:int := CLRcb(c:color) 
    io.print(V79);                      # 31 _37:void := IOprint_val(V79:int) 
    V82 := color.color("0x0012ABcd");   # 32 V82:color := CLRcolor(_39:str) 
    c := V82;                           # 33 c:color := V82:color 
    color.print(c);                     # 34 _40:void := CLRprintf(c:color) 
    V88 := color.red(c);                # 35 V88:int := CLRred(c:color) 
    io.print(V88);                      # 36 _42:void := IOprint_val(V88:int) 
    V91 := color.green(c);              # 37 V91:int := CLRgreen(c:color) 
    io.print(V91);                      # 38 _44:void := IOprint_val(V91:int) 
    V94 := color.blue(c);               # 39 V94:int := CLRblue(c:color) 
    io.print(V94);                      # 40 _46:void := IOprint_val(V94:int) 
    bc := bat.new(:oid,:color);         # 41 bc:bat[:oid,:color] := CMDBATnew(_48:oid, _49:color) {G}
    bat.append(bc,0x00000000:color);    # 42 _50:void := BKCappend_val_wrap(bc:bat[:oid,:color], _51:color) 
    bat.append(bc,0x0033FF44:color);    # 43 _52:void := BKCappend_val_wrap(bc:bat[:oid,:color], _53:color) 
    bat.append(bc,0x00003F44:color);    # 44 _54:void := BKCappend_val_wrap(bc:bat[:oid,:color], _55:color) 
    io.print(bc);                       # 45 _56:void := IOprint_val(bc:bat[:oid,:color]) 
    z := batcolor.red(bc);              # 46 z:bat[:oid,:int] := CLRbatRed(bc:bat[:oid,:color]) {G}
    io.print(z);                        # 47 _58:void := IOprint_val(z:bat[:oid,:int]) 
end testcolor;	# 48  
#user.testcolor();
#
function user.main():void;              #  0 main:void 
    user.testcolor();                   #  1 _1:void 
end main;	# 2  
[ 0x00646566 ]
[ 100 ]
[ 101 ]
[ 102 ]
[ 0x00BFFF80 ]
[ 0x00BFFF80 ]
[ 0x00A0F63D ]
[ 199 ]
[ 101 ]
[ 51 ]
[ 0x0012ABCD ]
[ 18 ]
[ 171 ]
[ 205 ]
#-------------------------#
# h	t		  # name
# void	color		  # type
#-------------------------#
[ 0@0,	  0x00000000	  ]
[ 1@0,	  0x0033FF44	  ]
[ 2@0,	  0x00003F44	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  51	  ]
[ 2@0,	  0	  ]


# 23:57:21 >  
# 23:57:21 >  Done.
# 23:57:21 >  

