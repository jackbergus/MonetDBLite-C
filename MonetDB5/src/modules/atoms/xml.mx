@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2007 CWI.
@' All Rights Reserved.

@f xml
@a Sjoerd Mullender, Niels Nes, Martin Kersten
@v 0.1
@+ MAL support for XQL
This module contains the primitives needed in the SQL
front-end to support SQL/XML.
@mal
atom xml:str;	#use a subtype for XML

command xml(src:str):xml
address XMLstr2xml
comment "Cast the string to an xml compliant string";

command str(src:xml):str
address XMLxml2str
comment "Cast the string to an xml compliant string";

command xml.attribute(name:str, val:str):xml
address XMLattribute
comment "Construct an attribute value pair";

pattern xml.attributes(val:xml... ):xml
address XMLattributes
comment "Collect the attributes of an element into a single structure";

pattern xml.element(name:str, ns:bat[:oid,:str], attr:xml, s:xml... ) :xml
address XMLelement
comment "The basic building block for XML elements are namespaces, attributes and a sequence
of xml elements. The name space and the attributes may be left unspecified(=nil:bat).";

pattern xml.concat(val:xml... ):xml
address XMLconcat
comment "Concatenate the xml values";

command xml.trunk(nme:str, val:xml):xml
address XMLtrunk
comment "Prepare an element for a forest construction";

pattern xml.forest(val:xml...):xml
address XMLforest
comment "Construct an element list");

@{
@- Implementation
The implementation of the XML atomary type is based
on linking in a portable library, e.g. libxml2 ?
@h
#ifndef XML_H
#define XML_H

#include "mal_config.h"
#include <gdk.h>
#include "mal.h"
#include "mal_instruction.h"
#include "mal_exception.h"

typedef str xml;

#ifdef WIN32
#ifndef LIBURL
#define xml_export extern __declspec(dllimport)
#else
#define xml_export extern __declspec(dllexport)
#endif
#else
#define xml_export extern
#endif

xml_export str XMLxml2str(str *s, xml *x);
xml_export str XMLstr2xml(xml *x, str *s);
xml_export str XMLattribute(xml *ret, str *name, str *val);
xml_export str XMLattributes(MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
xml_export str XMLelement(MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
xml_export str XMLconcat(MalBlkPtr mb, MalStkPtr stk, InstrPtr p);

#endif /* XML_H */
@c
#include "xml.h"

str 
XMLxml2str(str *s, xml *x){
	*s= GDKstrdup(*x);
	return MAL_SUCCEED;
}

str
XMLstr2xml(xml *x, str *s){
	(void) x;
	(void) s;
	if(/* validate string */ 0)
		throw(MAL,"xml.xml","Invalid xml format");
	return MAL_SUCCEED;
}

str XMLattribute(xml *ret, str *name, str *val);
str XMLattributes(MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str XMLelement(MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str XMLconcat(MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str
XMLattribute(xml *ret, str *name, str *val)
{
	(void) ret;
	(void) name;
	(void) val;
	throw(MAL,"xml.attribute","Not yet implemented");
}

str
XMLattributes(MalBlkPtr mb, MalStkPtr stk, InstrPtr p)
{
	(void) mb;
	(void) stk;
	(void) p;
	throw(MAL,"xml.attributes","Not yet implemented");
}

str
XMLelement(MalBlkPtr mb, MalStkPtr stk, InstrPtr p)
{
	(void) mb;
	(void) stk;
	(void) p;
	throw(MAL,"xml.element","Not yet implemented");
}

str
XMLconcat(MalBlkPtr mb, MalStkPtr stk, InstrPtr p)
{
	(void) mb;
	(void) stk;
	(void) p;
	throw(MAL,"xml.element","Not yet implemented");
}
str
XMLtrunk(int *ret, str *nme, str *val){
	(void) ret;
	(void) nme;
	(void) val;
	throw(MAL,"xml.trunk","Not yet implemented");
}
str
XMLforest(MalBlkPtr mb, MalStkPtr stk, InstrPtr p)
{
	(void) mb;
	(void) stk;
	(void) p;
	throw(MAL,"xml.element","Not yet implemented");
}
