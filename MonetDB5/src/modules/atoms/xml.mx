@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2008 CWI.
@' All Rights Reserved.

@f xml
@a Sjoerd Mullender, Niels Nes, Martin Kersten
@v 0.1
@+ MAL support for XQL
This module contains the primitives needed in the SQL
front-end to support SQL/XML.
@mal
atom xml :str;	

command fromstr():xml 
address XMLfromString
	comment "Convert a string to an xml. ";
command tostr():str 
address XMLtoString
	comment "Convert xml to string equivalent";

command xml(src:str):xml
address XMLstr2xml
comment "Cast the string to an xml compliant string";

command str(src:xml):str
address XMLxml2str
comment "Cast the string to an xml compliant string";

command comment(val:str):xml
address XMLcomment
comment "Construct an comment struction ";

command parse(val:str,option:str):xml
address XMLparse
comment "Parse the XML document or element string values ";

command pi(nme:str,val:str):xml
address XMLpi
comment "Call the processing instruction";

command document(val:str):xml
address XMLdocument
comment "Check the value for compliance as XML document";

command content(val:str):xml
address XMLcontent
comment "Check the value for compliance as content, i.e.  it may contain multiple roots and character data.";

command root(val:xml, version:str, standalone:str):xml
address XMLroot
comment "Contruct the root nodes";

command attribute(name:str, val:str):xml
address XMLattribute
comment "Construct an attribute value pair";

command element(name:str, ns:str, attr:xml, s:xml) :xml
address XMLelement
comment "The basic building block for XML elements are namespaces, attributes and a sequence of xml elements. The name space and the attributes may be left unspecified(=nil:bat).";

command element(name:str, s:xml) :xml
address XMLelementSmall
comment "The basic building block for XML elements are namespaces, attributes and a sequence of xml elements. The name space and the attributes may be left unspecified(=nil:bat).";

command concat(val1:xml, val2:xml):xml
address XMLconcat
comment "Concatenate the xml values";

pattern forest(val:xml...):xml
address XMLforest
comment "Construct an element list";

command isdocument(val:str):bit
address XMLisdocument
comment "Validate the string as a document";

command prelude() :void
address XMLprelude;

xml.prelude();

module calc;
command xml(src:str):xml address XMLstr2xml;
command xml(src:xml):xml address XMLxml2xml;


@{
@- Implementation
The implementation of the XML atomary type is based
on linking in a portable library, e.g. libxml2 ?
@h
#ifndef XML_H
#define XML_H

#include "mal_config.h"
#include <gdk.h>
#include "mal.h"
#include "mal_client.h"
#include "mal_instruction.h"
#include "mal_exception.h"

typedef str xml;

#ifdef WIN32
#ifndef LIBXML
#define xml_export extern __declspec(dllimport)
#else
#define xml_export extern __declspec(dllexport)
#endif
#else
#define xml_export extern
#endif

xml_export int TYPE_xml;

xml_export int XMLfromString(str src, int *len, xml *x);
xml_export int XMLtoString(str *s, int *len, str src);

xml_export str XMLxml2str(str *s, xml *x);
xml_export str XMLstr2xml(xml *x, str *s);
xml_export str XMLxml2xml(xml *x, xml *s);
xml_export str XMLdocument(xml *x, str *s);
xml_export str XMLcontent(xml *x, str *s);
xml_export str XMLisdocument(bit *x, str *s);
xml_export str XMLcomment(xml *x, str *s);
xml_export str XMLpi(xml *x, str *nme, str *s);
xml_export str XMLroot(str *x, str *v, str *version, str *standalone);
xml_export str XMLparse(xml *x, str *s, str *option);
xml_export str XMLattribute(xml *ret, str *name, str *val);
xml_export str XMLelement(xml *ret, str *name, str *nspace, xml *attr, xml *val);
xml_export str XMLelementSmall(xml *ret, str *name, xml *val);
xml_export str XMLconcat(xml *ret, xml *left, xml *right);
xml_export str XMLforest(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);

xml_export str XMLprelude(void);

#endif /* XML_H */
@c
#include "xml.h"
#include "mal_interpreter.h"

str 
XMLxml2str(str *s, xml *x){
	*s= GDKstrdup(*x);
	return MAL_SUCCEED;
}

str
XMLstr2xml(xml *x, str *val){
	str t= *val;
	str buf= alloca(6*strlen(t)), s=buf;
	
	for(*s = 0; *t; t++)
	if (*t == '&') {
		*s++ = '&'; *s++ = 'a'; *s++ = 'm'; *s++ = 'p'; *s++ = ';';
	} else if (*t == '<'){
		*s++ = '&'; *s++ = 'l'; *s++ = 't'; *s++ = ';';
	} else if (*t == '>'){
		*s++ = '&'; *s++ = 'g'; *s++ = 't'; *s++ = ';';
	}else if (*t == '"'){
		*s++ = '&'; *s++ = 'q'; *s++ = 'u'; *s++ = 'o'; *s++ = 't'; 
		*s++ = ';';
	} else if (*t == '\''){
		*s++ = '&'; *s++ = 'a'; *s++ = 'p'; *s++ = 'o'; *s++ = 's'; 
		*s++ = ';';
	} else if ((*t & 0xFF) < 0x20){
		s += sprintf(s, "&#%d;", *t & 0xFF);
	} else {
		*s++= *t;
	}
	*s=0;
	*x= GDKstrdup(buf);
	return MAL_SUCCEED;
}

str 
XMLxml2xml(xml *s, xml *x){
	*s= GDKstrdup(*x);
	return MAL_SUCCEED;
}

str
XMLdocument(xml *x, str *val){
	/* call the libxml2 library to perform the test */
	*x= (str) GDKstrdup(*val);
	return MAL_SUCCEED;
}

str
XMLcontent(xml *x, str *val){
	/* call the libxml2 library to perform the test */
	*x= (str) GDKstrdup(*val);
	return MAL_SUCCEED;
}

str
XMLisdocument(bit *x, str *s){
	(void) x;
	(void) s;
	throw(MAL,"xml.isdocument","Not yet implemented");
}

str
XMLcomment(xml *x, str *s){
	int len = (int) strlen(*s) + 10;
	str buf = (str) GDKmalloc(len);

	snprintf(buf, len, "<!-- %s -->", *s);
	*x = buf;
	return MAL_SUCCEED;
}

str
XMLparse(xml *x, str *nme, str *option){
	(void) x;
	(void) option;
	(void) nme;
	throw(MAL,"xml.parse","Not yet implemented");
}
str
XMLpi(str *ret, str *operator, str *bid)
{
	(void) ret;
	(void) operator;
	(void) bid;
	throw(MAL,"xml.pi","Not yet implemented");
}

str
XMLroot(str *ret, str *val, str *version, str *standalone)
{
	int len;
	str buf = (str) GDKmalloc(len= strlen(*val) + 
		(int) strlen("<? version=\"\" standalone=\"\"?>"));
	snprintf(buf,len,"<? version=\"%s\" stanalone=\"%s\"?>%s",
		*version,*standalone,*val);
	*ret= buf;
	return MAL_SUCCEED;
}

str
XMLattribute(xml *ret, str *name, str *val)
{
	int len;
	str buf= (str) GDKmalloc(len= (int)(2*strlen(*name)+strlen(*val)+5));
	snprintf(buf,len," %s=\"%s\"",*name,*val);
	*ret = buf;
	return MAL_SUCCEED;
}

str
XMLelement(xml *ret, str *name, str *nspace, xml *attr, xml *Val)
{
	char *val = *Val;
	int len;
	str buf= (str) GDKmalloc(len=2*strlen(*name) +
				strlen(*nspace) + strlen(*attr)+
				(int)strlen("<></> ")+strlen(val)+1);
	if (strNil(val))  /* todo short hand <elementname /> */
		val = "";
	if( strNil(*nspace) && strNil(*attr))
		snprintf(buf, len,"<%s>%s</%s>",
			*name, val, *name);
	else if( strNil(*nspace))
		snprintf(buf, len,"<%s %s>%s</%s>",
			*name, *attr, val, *name);
	else if( strNil(*attr))
		snprintf(buf, len,"<%s %s>%s</%s>",
			*name, *nspace, val, *name);
	else
		snprintf(buf, len,"<%s %s %s>%s</%s>",
			*name, *nspace, *attr, val, *name);

	*ret= buf;
	return MAL_SUCCEED;
}

str
XMLelementSmall(xml *ret, str *name, xml *val)
{
	int len;
	str buf= (str) GDKmalloc(len=2*strlen(*name) +
				(int)strlen("<></> ")+strlen(*val));
	snprintf(buf,len,"<%s>%s</%s>",*name, *val, *name);
	*ret= buf;
	return MAL_SUCCEED;
}

str
XMLconcat(xml *ret, xml *left, xml *right)
{
	size_t len;
	str buf= (str) GDKmalloc(len= strlen(*left)+strlen(*right)+1);
	assert(len <INT_MAX);
	snprintf(buf,len,"%s%s",*left,*right);
	*ret= buf;
	return MAL_SUCCEED;
}

str
XMLforest(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p)
{
	str *ret= (str*) getArgReference(stk,p,0);
	int i;
	size_t len=0;
	str buf;

	(void) cntxt;
	for( i=p->retc; i<p->argc; i++)
		len += strlen(*(str*)getArgReference(stk,p,i));
	buf= (str) GDKmalloc( (int) (len+1));
	buf[0]=0;
	
	assert(len <INT_MAX);
	for( i=p->retc; i<p->argc; i++)
		strcat(buf,*(str*)getArgReference(stk,p,i));
	*ret= buf;
	(void) mb;
	return MAL_SUCCEED;
}

int TYPE_xml;

str
XMLprelude()
{
	TYPE_xml = ATOMindex("xml");
	return MAL_SUCCEED;
}

int XMLfromString(str src, int *len, xml *x)
{
	if (*x)
		GDKfree(*x);
	XMLstr2xml(x, &src);
	*len = (int) strlen(*x);
	return *len;
}

int XMLtoString(str *s, int *len, str src)
{
	int l;

	if (GDK_STRNIL(src)) {
		*s = GDKstrdup("nil");
		return 0;
	}
	l = src == 0 ? 3 :(int) strlen(src) + 1;
	if (l >= *len) {
		GDKfree(*s);
		*s = (str) GDKmalloc(l);
	}
	snprintf(*s, l, "%s", src);
	*len = l - 1;
	return *len;
}


@sql

CREATE TYPE xml EXTERNAL NAME xml;
CREATE FUNCTION xml (s STRING) RETURNS xml external name xml.xml;
CREATE FUNCTION str (s XML) RETURNS STRING external name xml.str;
CREATE FUNCTION comment (s STRING) RETURNS xml external name xml.comment;
CREATE FUNCTION parse (val STRING, option STRING) RETURNS xml external name xml.parse;
CREATE FUNCTION pi (nme STRING, val STRING) RETURNS xml external name xml.pi;
CREATE FUNCTION root (val STRING, version STRING, standalone STRING) RETURNS xml external name xml.root;
CREATE FUNCTION attribute (nme STRING, val STRING) RETURNS xml external name xml.attribute;
CREATE FUNCTION "element" (nme STRING, ns STRING, attr xml, s xml) RETURNS xml external name xml.element;
CREATE FUNCTION concat (val1 xml, val2 xml) RETURNS xml external name xml.concat;
CREATE FUNCTION forest (val1 xml, val2 xml) RETURNS xml external name xml.forest;
CREATE FUNCTION isdocument (val STRING) RETURNS xml external name xml.isdocument;


