#!/bin/bash
# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-2006 CWI.
# All Rights Reserved.

#See the MonetDB Version 5 documentation for details

function usage()
{
	echo "Usage: mrecover [options] "
	echo "    --dbname=<database_name>"
	echo "    --ascii=<yes/no> default no"
	echo "    --chkpnt=<directory>"
	echo "    --help"
}

DBFARM=$MONET5_PREFIX/var/MonetDB5/dbfarm
DBLOGS=$MONET5_PREFIX/var/MonetDB5/dblogs
CHKPNTDIR=$MONET5_PREFIX/var/MonetDB5/chkpnt
TAG=""

# First perform some sanity checks
if [ "$MONET5_PREFIX"  = "" ]
then
	echo "The MONET5_PREFIX environment variable has not been set"
	echo "It should point to where you have installed the build directory"
	exit
fi
# start the checkpoint process.
if [ ! -d $DBFARM ]
then
	echo "Database storage area '$DBFARM' is not accessible"
	exit
fi

# massage the argument list to prepare for calling
DBNAME=""
ASCII="no"
while [ $# -gt 0 ]
do
	case "$1" in
	 "--help" )
		usage 
		exit ;;
	"--ascii="* )
		ASCII="${1#--ascii=}"
		;;
	"--dbname="* )
		DBNAME="${1#--dbname=}"
		;;
	"--chkpnt="* )
		CHKPNTDIR="${1#--chkpnt=}"
		;;
	"--tag="* )
		TAG="${1#--tag=}"
		;;
	* )
		usage
		;;
	esac
	shift
done

if [ -z "$DBNAME" ]
then
	echo "Database name missing";
	usage
	exit
fi

if [ ! -d $CHKPNTDIR ]
then
	echo "Checkpoint directory '$CHKPNTDIR' not available"
	exit
fi

if [ ! -d "$CHKPNTDIR/$DBNAME" ]
then
	echo "Database checkpoint directory '$CHKPNTDIR/$DBNAME' is not accessible"
	exit
fi

if [ -z "$TAG" ]
then
	cd $CHKPNTDIR/$DBNAME
	echo "Checkpoint tags defined for '$DBNAME'"
	ls *tar.gz >/tmp/mrecover
	sed -e "s/.tar.gz//" -e "s/-logs//" </tmp/mrecover >/tmp/mrecover2
	sort -ru /tmp/mrecover2
	read -p "Specify the checkpoint tag for '$DBNAME' ? " TAG
	z=`grep $TAG /tmp/mrecover2`
	rm /tmp/mrecover /tmp/mrecover2
	if [ -z "$z" ]
	then
		echo "Invalid checkpoint tag"
		exit
	fi
fi

CHKPFILE="$CHKPNTDIR/$DBNAME/$TAG"
LOGFILE="$CHKPNTDIR/$DBNAME/$TAG-logs"

if [ ! -f "$CHKPFILE.tar.gz" ]
then
	echo "Checkpoint file '$CHKPFILE' not available"
	exit
fi

if [ ! -f "$LOGFILE.tar.gz" ]
then
	echo "Checkpoint log file '$LOGFILE' not available"
	exit
fi

# Ready for preparing the checkpoint
cd $DBFARM
if [ ! -d "$DBNAME" ]
then
	mkdir -p $DBNAME
else
	z=`date +%F-%H%M%S`
	echo "Move existing database out of the way '$DBNAME$z'"
	mv $DBNAME $DBNAME$z
	mkdir -p $DBNAME
fi
cd $DBLOGS
if [ ! -d "$DBNAME" ]
then
	mkdir -p $DBNAME
else
	z=`date +%F-%H%M%S`
	echo "Move existing database logs out of the way '$DBNAME$z'"
	mv $DBNAME $DBNAME$z
	mkdir -p $DBNAME
fi

cd $DBFARM
echo "Restore from store $CHKPNTDIR"
echo "Reload checkpoint file '$DBNAME/$TAG.tar'"
if [ $ASCII = "yes" ]
then
	monetdb --start --dbname=$DBNAME
	gunzip $CHKPFILE.sql.gz || die "Decompression of dump file failed"
	MapiClient -lsql $CHKPFILE.sql || dies "Could not reload dump file"
	gzip $CHKPFILE.sql || die "Compression of dump file failed"
else
	gunzip $CHKPFILE.tar.gz || die "Decompression of checkpoint file failed"
	tar -xf $CHKPFILE.tar $DBNAME || die "Extraction of checkpoint file failed"
	gzip $CHKPFILE.tar || die "Compression of checkpoint file failed"
fi

cd $DBLOGS
echo "Reload checkpoint log file '$DBNAME/$TAG-logs.tar'"
gunzip $LOGFILE.tar.gz || die "Decompression of checkpoint log failed"
tar -xf $LOGFILE.tar $DBNAME || die "Extraction of checkpoint log file failed"
gzip $LOGFILE.tar || die "Compression of checkpoint log failed"

echo "Database recovery finished"
