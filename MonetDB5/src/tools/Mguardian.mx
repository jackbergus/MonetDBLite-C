@' The contents of this file are subject to the MonetDB Public
@' License Version 1.0 (the "License"); you may not use this file
@' except in compliance with the License. You may obtain a copy of
@' the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.0.html
@'
@' Software distributed under the License is distributed on an "AS
@' IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
@' implied. See the License for the specific language governing
@' rights and limitations under the License.
@'
@' The Original Code is the Monet Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2006 CWI.
@' All Rights Reserved.

@' 
@' Contributor(s):
@' 		Martin Kersten <Martin.Kersten@cwi.nl>
@' 		Peter Boncz <Peter.Boncz@cwi.nl>
@' 		Niels Nes <Niels.Nes@cwi.nl>
@' 		Stefan Manegold  <Stefan.Manegold@cwi.nl>

@f Mguardian
@a M.L. Kersten, N.Nes, S. Mullender
@v 0.0
@d August 2003
@* The Monet Server Guardian

This document introduces the Monet Server Guardian designed
to manage a collection of database servers. In particular,
it manages the initialization and termination of database
server processes; ensures automatic restarts when a server when it fails;
schedules and manages the back-up recovery.

The application fits in the category of server-side tools
often found in commercial packages.
In MySQL you find the commands safe_mysql to start a deamon to 
look after the lifeliness of the Mysql server process; 
mysqld_multi to manage multiple MySQL servers. 
In PostgreSQL you find a portal 
In Oracle...
In DB2...

@+ Functional requirements
The Monet Server Guardian, MSG for short, is started by the database
owner or as part of a system crontab action upon re-boot.
Upon (re-)start MSG consults the file mguardian.conf in its control
directory ~/.Mguardian or $MONETDB_PREFIX/.Mguardian

The MSG configuration file contains a description of the 
database servers under its control.

The Mguardian directory contains a subdirectory for each
database being managed to 
@+ Sample configuration script


@T
\begin{verbatim}

entry    = MSG_DB0
dbname	= TPCH
owner   = niels
password=JollyGoodNight
config	= ~niels/monet/performance.conf
dbfarm	= ~niels/databases/
mserver	=  ~niels/monet/Linux/Mserver 
server   = stem.ins.cwi.nl

\end{verbatim}
@-
This example illustrates control over a single database server.
It refers to a database maintained by Niels to
perform experiments on the TPCH benchmark database.
The configuration file for the database instance is taken from his home directory.
The database itself resides physically in the 'path' directory.
The database server to manage this database is a development version
taken from his local directory.

An entry can be added to the MSG configuration file
by mimicking starting the database server directy, e.g.
@T
\begin{verbatim}
Mguardian --dbname =TPCH \
	--user=niels --password=JollyGoodNight \
	--config=~niels/monet/performance.conf \
	--dbfarm=~niels/database/tpch  \
	--mserver=~niels/monet/Linux/Mserver \
	--server=stem.ins.cwi.nl 
\end{verbatim}
@-
It should be noted that the protection of the guardian file is crucial,
since it contains passwords. [Solve]
Every entry in the MSG configuration file should be unique.
It is used to target management operations.

Once MSG is started it will also activate an Mserver on stem to
manage the TPCH database. It will repeatedly ping 
the server to recognize crashed servers.

The ping method is either {\em session} or {\em direct}.
The former means that once in a while a client session is
set up with the target server; the latter means that a
session with the server is kept open all the time.
The {\em direct} method is the preferred method,because
setting up a connection is more expensive. The second
parameter to the ping option is the delay between successive
ping actions in seconds.
The default ping action is to sent an empty command and
to detect the prompt. An alternative is to designate an
action string to collect relevant information from the instance.
The results obtained are stored on a log-file.

@+ Fail over
If MSG fails to start a database instance (i.e. running out
of a number of trials) it may switch to a back-up instance.
It will first try to start the database server on a backup machine,
followed by an attempt to use an older database instance
stored in a different database farm.

The alternatives are indicated as a colon separated list, e.g.
@T
dbfarm=~niels/databases
dbfarm_backup=/ufs/monet/dbfarm
server = stem.ins.cwi.nl
server_backup=mast.cwi.nl:db1:cwi.nl

@+ Portal functionality
The MSG provides a scheme to setup a terminal service,
which can be used to isolate direct access to the 
database instances.
The portal service involves starting a thread, through
which a limited number of anonymous clients can sent a request. 
This request is depatched to one of the available instances to handle.

The portal parameter is <maxusers>:<maxsessions> to control
the number of client session being maintained. <maxusers> should
exceed the number of sessions. As soon as the session limit
is reached, the portal will only accept single command sessions
scripts until it reaches the limit of acceptable users.

The protocol to distribute tasks is controlled by the portal.
It attempts to distribute the load
@T
\begin{verbatim}
entry	= webservice
portal = 25:10
dbname	= winkel
machine = db1.ins.cwi.nl:db2.ins.cwi.nl:db3.ins.cwi.nl
dbpath  = /usr/dba/dbfarm
\end{verbatim}
@+ Instanc clusters

@+ Guardian commands
In addition to the examples shown above, MSG recognizes
the following commands.
@T
\begin{tabular}{l pw(2i)}
Command		&	Comments\\hline
Mguardian --entry=TPCH --restart	& {
I	f a server has crashed, MSG will attempt to revive it.
	After a limited number of successive attempts, it will
	ignore the server until MSG is explicitly asked to restart the
	sequence using the command}\\
Mguardian --status & {
	Display the current status of all database servers.
	If a ping action was defined, it will be sent to obtain
	up to date information from the servers}\\
Mguardian --entry=TPCH --stop 	&\\
	Sent a soft termination signal to the designated server.
	It will finish the work and not re-start automatically.}
Mguardian --entry=TPCH --kill &{
	Sent a hard termination signal, forcing an all transaction
	failure on the designated instance.}\\
\end{tabular}

@+ Idempotence
Multiple calls to MSG are permitted, but onely the first one
will be active in controlling the collection of database instances.
Secondary calls lead to setting up a connection to the primary
to act.
@T
The table below lists the parameters for each possible entry in the MSG file
\begin{tabular}{l l l l}\hline
Option	& Description			& 	Default		&Example\hline
entry	& Unique name for MSG entry	& 	MSG_DBI<nr>	& MSG_DBI_0\\
dbname	& Database name		& 			& TPCH		\\
owner   & DBAname			& 	current user	& niels\\
password& DBA password for instance	& 	anonymous	& JollyGoodNight\\
config	& Location of configuration file& ~<DBA>/.MonetDB5.conf	& ~niels/monet/performance.conf\\
dbfarm	& Location of database store 	& $MONETDB_PREFIX/var	&  ~niels/databases/\\
mserver	& Path to Mserver executable	& $MONETDB_PREFIX/bin/Mserver & ~niels/monet/Linux/Mserver \\
server   & Machine identity for instance& current machine	& stem.ins.cwi.nl \\
ping	& Ping method= {session,direct}	& <method>:<interval>	& session:30	\\
restart   & Maximum restart sequence& <trials>:<seconds delay>	& 10:10\\
portal	& Act as a query portal	& FALSE	& \\
\end{tabular}
