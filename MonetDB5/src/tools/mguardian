#!/bin/bash
# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-2006 CWI.
# All Rights Reserved.

# The mguardian looks after the healthyness of invidual servers
# A mguardian process is run for each mserver unless you specify
# otherwise.
# The mguardian control information is kept in .mguardian and
# consists of the <delay,pid> pair

function usage()
{
	echo "Usage: mguardian [options] [mserver(s)]"
	echo "    --start        Start looking after mserver(s)[default]"
	echo "    --stop         Stop looking after mserver(s) "
	echo "    --delay        Set check delay to N seconds [300]"
	echo "    --status       Status of all servers"
	echo "    --log          Display the server log"
	echo "    --help         This list of options"
}

DBFARM=$MONET5_PREFIX/var/MonetDB5/dbfarm
DELAY=300
ACTION=start

trap '' 2 3

case "$1" in
 "--start" )
	ACTION=start
	shift ;;
 "--stop" )
	ACTION=stop
	shift ;;
 "--delay="* )
	delay=`echo $1|sed -e "s/--delay=//"`
	if [ $delay"" != "" ]
	then 
		DELAY=$delay
	fi
	ACTION=delay
	shift ;;
 "--help" | * )
	usage 
	exit 0 ;;
esac

cd $DBFARM
if [ "$*" != "" ]
then
	DBLIST=$*
else
	DBLIST=`ls`
fi

tmp=`echo $* | sed -e "s/^.*--dbname=//" -e "s/ .*//"`
if [ "$tmp" != "" ]
then
	DBLIST=$tmp
fi

function getPID ()
{
	active=""
	if [ -f $1/.gdk_lock ]
	then
		pid=`sed -e "s/.*PID=//" -e "s/ .*//" -e 2q $1/.gdk_lock`
		if [ "$pid" != "" ]
		then
			active=`ps --no-heading --format pid -p $pid`
		fi
	fi
	echo $active
}

# before we restart we have to test for a bad system environment,
# such as a full disk
restartcount=0
mailtrigger=1
restartwindow=60
started=`date +%s`

function restart_server()
{
	full=`df . |sed -e 1d -e "s/%.*//" -e "s/.* //"` 

	if [ "$full" -gt 90 ]
	then
		echo "Running out of disk space"
		echo `date +"%F %T"` "WARNING disk use $full%" >>monetdb.log
	fi

	now=`date +%s`
echo "now $now"
	now=`expr $now - $started `
	if [[ "$now" < "$restartwindow" ]]
	then
		if [[ "$restartcount" < $mailtrigger ]]
		then
			now=`date`
			mail -s "MSERVER RESTARTED" $USER <<!EOF
Dear database owner,

Your database named '$1' has been restarted.

Please inspect the monetdb log for further details.

regards. MonetDB Guardian
!EOF
			mailtrigger=`expr $mailtrigger * 2`
		fi
		restartcount=`expr $restartcount + 1 `
	fi
	if [ -f $1/.mserver.args ]
	then
		started=`date +%s`
		if [ -f $1/.mserver.dbinit ]
        then
            STARTUP=$DBFARM/$1/.mserver.dbinit
        fi
		if [ -f $1/.mserver.args ]
		then
			ARGS=`cat $1/.mserver.args`
		fi
        CONFIG="--config=$DBFARM/$1/.monetdb.conf"
		(cd $1; mserver --set daemon=yes --dbname=$1 $CONFIG $ARGS $STARTUP)&
		echo `date +"%F %T"` " RESTART $1 $args" >>monetdb.log
	fi
}

getDelay()
{
 	delay=`grep delay $1/.monetdb.conf| sed -e "s/\t.*//" -e "s/delay=//"`
	if [ "$delay" = "" ]
	then
		delay=11
	fi
	echo $delay
}
#for each mserver a separate mguardian process is started
#it runs in the background until the mguardian control file disappears
function check_mserver()
{
	delay=`getDelay $1`
	mypid=$!
	echo "$delay" >$1/.mguardian.delay
	echo "$!" >$1/.mguardian.pid
	echo `date +"%F %T"` " GUARD $1 " >>monetdb.log

	while [ -f $1/.mguardian.pid ]
	do
		active=`getPID $1`
		if  [ "$active" = "" ]
		then
			restart_server $1
		fi
		# we should pick a cheaper way to detect changes to the delay
		delay=`getDelay $1`
		sleep $delay &
		sid="$!"
		echo "$sid" >$1/.mguardian.sleep
		trap "kill $sid" 1
		wait
		trap 1
	done
	echo `date +"%F %T"` " LEAVE $1 " >>monetdb.log
	exit
}

#ignore a server also involves killing any running mguardian
# for it. 
function stop_guardian()
{
	pid=`getPID $1`
	if [ -f $1/.mguardian.pid ]
	then
		pid=`cat $1/.mguardian.pid`
		kill -TERM $pid
		echo `date +"%F %T"` " LEAVE $1 " >>monetdb.log
		rm $1/.mguardian.pid
	fi
}


#echo "mguardian dblist $DBLIST"
case $ACTION in
	"start" )
		for i in $DBLIST
		do
			 ( check_mserver  $i )  &
		done
		;;
	"stop" )
		for i in $DBLIST
		do
			if [ -d $i ]
			then
				stop_guardian $i
			fi
		done
		;;
	"delay" )
		for i in $DBLIST
		do
			if [ -d $i ]
			then
				if [ -f $i/.mguardian.sleep ]
				then
					#wakeup the mguardian process
					pid=`cat $i/.mguardian.sleep`
					kill -HUP $pid
				fi
				echo "$DELAY" >$i/.mguardian.delay
			fi
		done
		;;
esac
