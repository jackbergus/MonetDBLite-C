@/
The contents of this file are subject to the MonetDB Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is the MonetDB Database System.

The Initial Developer of the Original Code is CWI.
Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
Copyright August 2008-2011 MonetDB B.V.
All Rights Reserved.
@

@- Optimizer code wrapper
The optimizer wrapper code is the interface to the MAL optimizer calls.
It prepares the environment for the optimizers to do their work and removes
the call itself to avoid endless recursions.

Before an optimizer is finished, it should leave a clean state behind.
Moreover, the information of the optimization step is saved for
debugging and analysis.

The wrapper expects the optimizers to return the number of
actions taken, i.e. number of succesful changes to the code.
@{
@= exportOptimizer
opt_export str OPT@1(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);

@= wrapOptimizer
/* #define _DEBUG_OPTIMIZER_*/

str OPT@1(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p){
	str modnme;
	str fcnnme;
	str msg= MAL_SUCCEED;
	Symbol s= NULL;
	lng t,clk= GDKusec();
	int actions = 0;

	optimizerInit();
	if( p )
		removeInstruction(mb, p);
	OPTDEBUG@1 mnstr_printf(cntxt->fdout,"=APPLY OPTIMIZER @1\n");
	if( p && p->argc > 1 ){
		if( getArgType(mb,p,1) != TYPE_str ||
			getArgType(mb,p,2) != TYPE_str ||
			!isVarConstant(mb,getArg(p,1)) ||
			!isVarConstant(mb,getArg(p,2))
		) {
			throw(MAL, "optimizer.@1", ILLARG_CONSTANTS);
		}
		if( stk != 0){
			modnme= *(str*)getArgReference(stk,p,1);
			fcnnme= *(str*)getArgReference(stk,p,2);
		} else {
			modnme= getArgDefault(mb,p,1);
			fcnnme= getArgDefault(mb,p,2);
		}
		s= findSymbol(cntxt->nspace, putName(modnme,strlen(modnme)),putName(fcnnme,strlen(fcnnme)));

		if( s == NULL) {
			char buf[1024];
			snprintf(buf,1024, "%s.%s",modnme,fcnnme);
			throw(MAL, "optimizer.@1", RUNTIME_OBJECT_UNDEFINED ":%s", buf);
		}
		mb = s->def;
		stk= 0;
	} 
	if( mb->errors ){
		/* when we have errors, we still want to see them */
		addtoMalBlkHistory(mb,"@1");
		return MAL_SUCCEED;
	}
	actions= OPT@1Implementation(cntxt, mb,stk,p);
	msg= optimizerCheck(cntxt, mb, "optimizer.@1", actions, t=(GDKusec() - clk),@2);
	OPTDEBUG@1 {
		mnstr_printf(cntxt->fdout,"=FINISHED @1 %d\n",actions);
		printFunction(cntxt->fdout,mb,0,LIST_MAL_STMT | LIST_MAPI);
	}
	DEBUGoptimizers
		mnstr_printf(cntxt->fdout,"#opt_reduce: " LLFMT " ms\n",t);
	QOTupdateStatistics("@1",actions,t);
	addtoMalBlkHistory(mb,"@1");
	return msg;
}
@}
