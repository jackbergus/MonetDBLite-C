@/
The contents of this file are subject to the MonetDB Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is the MonetDB Database System.

The Initial Developer of the Original Code is CWI.
Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
Copyright August 2008-2011 MonetDB B.V.
All Rights Reserved.
@

@f opt_inline
@a M. Kersten
@subsection Function Inliners
The routine @sc{optimizer.inline()} searches MAL function definitions
whose property @{inline@}  is set. In addition, all MAL function calls
whose primary target variable carry the @{inline@} property are inlined
as well.
The code is expanded inline using the macro processor.

The inline optimizer processes all instructions, thereby
causing recursive inlined functions to appear as well.
@{
@mal
pattern optimizer.inline():str
address OPTinline;
pattern optimizer.inline(mod:str, fcn:str):str
address OPTinline
comment "Expand inline functions";

@h
#ifndef _OPT_INLINE_
#define _OPT_INLINE_
#include "opt_prelude.h"
#include "opt_support.h"
#include "mal_interpreter.h"
#include "opt_macro.h"

@:exportOptimizer(inline)@

#define OPTDEBUGinline  if ( optDebug & (1 <<DEBUG_OPT_INLINE) )

#endif
@c
#include "monetdb_config.h"
#include "opt_inline.h"

extern int OPTinlineMultiplex(Client cntxt, MalBlkPtr mb, InstrPtr p);

/* simple scalar function can be compiled into their BAT equivalent */
/* we restrict ourselves for non-loop cases */
static int
canbecompiled(MalBlkPtr mb)
{
	InstrPtr p;
	int i,j;

	for( i= 0; i < mb->stop; i++){
		p= getInstrPtr(mb,i);
		for( j= 0; j< p->argc; j++)
			if ( isaBatType(getVarType(mb, getArg(p,j))) )
				return 0;
		if ( p->barrier && p->barrier != RETURNsymbol )
			return 0;
	}
	return 1;
}

static int
isCorrectInline(MalBlkPtr mb){
	/* make sure we have a simple inline function with a singe return */
	InstrPtr p;
	int i, retseen=0;

	for( i= 1; i < mb->stop; i++){
		p= getInstrPtr(mb,i);
		if ( p->token == RETURNsymbol || p->token == YIELDsymbol || 
			 p->barrier == RETURNsymbol || p->barrier == YIELDsymbol)
			retseen++;
	}
	return retseen <= 1;
}

static int
compileScalarExpression(Client cntxt, MalBlkPtr mb, MalBlkPtr mq, int pc){
	/* make sure we have a simple inline function with a singe return */
	InstrPtr p,pci;
	MalBlkPtr new;
	int i,j,fnd;
	char *mapped;

	new = copyMalBlk(mb);
	if( new == 0)
		return 0;
	/* check existence of alternatives */

	mapped = (char*) GDKzalloc(mb->vtop);
	for( i= 0; i < new->stop; i++){
		p= getInstrPtr(new,i);

		if ( getModuleId(p) == sqlRef && getFunctionId(p) == mvcRef) {
			/* we don't need that for inlining */
			clrFunction(p);
			p->token = REMsymbol;
		}
		fnd = 0;
		for ( j = 0; j< p->argc; j++) 
		if ( !isVarConstant(new, getArg(p,j))  ){
			if ( i == 0) {
				mapped[getArg(p,j)] = 1;
				new->var[getArg(p,j)]->type = newBatType(TYPE_oid,getVarType(new, getArg(p,j)));
			}
			fnd += mapped[getArg(p,j)];
		}

		if (fnd)   {
			fnd = 0;
			if( getModuleId(p) == calcRef) {
				getModuleId(p) = batcalcRef;
				fnd++;
			}
			if( getModuleId(p) == mmathRef) {
				getModuleId(p) = batmmathRef;
				fnd++;	
			}
			if( getModuleId(p) == strRef) {
				getModuleId(p) = strRef;
				fnd++;	
			}
			if( getModuleId(p) == mtimeRef) {
				getModuleId(p) = batmtimeRef;
				fnd++;	
			}
			if( getModuleId(p) == 0) 
				fnd++;
			if ( fnd )
				for( j = 0; j < p->retc; j++) {
					mapped[getArg(p,j)] = 1;
					new->var[getArg(p,j)]->type = newBatType(TYPE_oid,getVarType(new, getArg(p,j)));
				}
		}
	}
	chkTypes(cntxt->nspace, new, TRUE);

	/* printFunction(cntxt->fdout,new,0,LIST_MAL_ALL); */
	fnd = new->errors;
	if ( new->errors == 0 && isCorrectInline(new) )  {
		/* rephrase the multiplex */
		pci = getInstrPtr(mq,pc);
		getModuleId(pci) = getModuleId(getInstrPtr(new,0));
		getFunctionId(pci) =getFunctionId( getInstrPtr(new,0));
		for ( j = pci->retc; j < pci->argc -2; j++)
			pci->argv[j] = pci->argv[j+2];
		pci->argc = j;
		(void) inlineMALblock(mq,pc,new);
	}

	freeMalBlk(new);
	GDKfree(mapped);
	return fnd == 0;
}

int
OPTinlineImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p)
{
	int i,limit;
	InstrPtr q,sig;
	int actions = 0;
	Symbol s;

	(void) p;

	limit = mb->stop;
	for (i = 1; i < mb->stop; i++) {
		q = getInstrPtr(mb, i);
		if( q->blk ){
			sig = getInstrPtr(q->blk,0);
@-
Time for inlining functions that are used in multiplex operations.
They are produced by SQL compiler.
@c
			OPTDEBUGinline {
				mnstr_printf(cntxt->fdout,"#check inline statement\n");
				printInstruction(cntxt->fdout,mb,0,q,LIST_MAL_ALL);
				printInstruction(cntxt->fdout,q->blk,0,sig,LIST_MAL_ALL);
			}

			if( getModuleId(q) == malRef &&
				getFunctionId(q)== multiplexRef
			) {
				/* precompile scalar functions */
				s = findSymbol(cntxt->nspace, userRef, getVarConstant(mb,getArg(q,2)).val.sval);
				if ( s && canbecompiled(s->def) && compileScalarExpression(cntxt, s->def, mb, i) ) {
					i--;
					actions ++;
					continue;
				}
			}

			if( getModuleId(q) == malRef &&
				getFunctionId(q)== multiplexRef &&
				OPTinlineMultiplex(cntxt,mb,q)){

				OPTDEBUGinline {
					mnstr_printf(cntxt->fdout,"#multiplex inline function\n");
					printInstruction(cntxt->fdout,mb,0,q,LIST_MAL_ALL);
				}

			    varSetProp(mb, getArg(q,0), inlineProp, op_eq, NULL);
			} else
@-
Check if the function definition is tagged as being inlined.
@c
			if (sig->token == FUNCTIONsymbol &&
			    varGetProp(q->blk, getArg(sig, 0), inlineProp) != NULL &&
				isCorrectInline(q->blk) ) {
				(void) inlineMALblock(mb,i,q->blk);
				i--;
				actions++;
				OPTDEBUGinline {
					mnstr_printf(cntxt->fdout,"#inline function at %d\n",i);
					printFunction(cntxt->fdout, mb, 0, LIST_MAL_ALL);
				}
			} else 
@-
Check if the local call is tagged as being inlined.
@c
			if (varGetProp(mb, getArg(q,0), inlineProp) != NULL) {
				inlineMALblock(mb,i,q->blk);
				i--;
				actions++;
				OPTDEBUGinline {
					mnstr_printf(cntxt->fdout,"#inlined called at %d\n",i);
					printFunction(cntxt->fdout, mb, 0, LIST_MAL_ALL);
				}
			} 
		}
	}
	(void)stk;
	OPTDEBUGinline
		mnstr_printf(cntxt->fdout,"#mal program: %d MAL instr %d vars (%d K)\n",mb->stop,mb->vtop, 
		((sizeof( MalBlkRecord) +mb->ssize * sizeof(InstrRecord)+ mb->vtop* sizeof(VarRecord) + mb->vsize*sizeof(VarPtr)+1023)/1024));
	DEBUGoptimizers
		mnstr_printf(cntxt->fdout,"#opt_inline: actions %d MAL %d->%d\n",actions,limit,mb->stop);
	return actions;
}


int OPTinlineMultiplex(Client cntxt, MalBlkPtr mb, InstrPtr p){
	Symbol s;
	str mod,fcn;
	int res;

	mod = VALget(&getVar(mb, getArg(p, 1))->value);
	fcn = VALget(&getVar(mb, getArg(p, 2))->value);
	if( (s= findSymbol(cntxt->nspace, mod,fcn)) ==0 )
		return FALSE;
@-
Before we decide to propagate the inline request
to the multiplex operation, we check some basic properties
of the target function. Moreover, we apply the inline optimizer
to the target function as well.
This code should be protected against overflow due to recursive calls.
In general, this is a hard problem. For now, we just expand.
@c
	(void) OPTinlineImplementation(cntxt, s->def, NULL, p);
	res= varGetProp(s->def , getArg(getInstrPtr(s->def,0), 0),
				inlineProp) != NULL;
	return res;
}
@include optimizerWrapper.mx
@c
#include "opt_statistics.h"
@:wrapOptimizer(inline,OPT_CHECK_ALL)@
@}
