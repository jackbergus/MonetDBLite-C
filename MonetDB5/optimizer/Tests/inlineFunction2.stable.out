stdout of test 'inlineFunction2` in directory 'monetdb5/optimizer` itself:


# 23:12:12 >  
# 23:12:12 >   mserver5  --debug=10 --set gdk_nr_threads=0  --set "gdk_dbfarm=/ufs/mk/current//Linux/var/MonetDB" --set mapi_open=true --set mapi_port=35482 --set monet_prompt= --trace --forcemito --set mal_listing=2  --dbname=mTests_optimizer  inlineFunction2.mal
# 23:12:12 >  

# MonetDB 5 server v11.4.0
# This is an unreleased version
# Serving database 'mTests_optimizer', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 7.749 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:35482/
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
function user.my{inline}(A:int,B:int):int;
    X3 := calc.+(A,B);
    return my := X3;
end user.my;
function user.tst():void;
    b := bat.new(:oid,:int);
    z:bat[:oid,:int]  := mal.multiplex("user","my",b,1);
end user.tst;
#WARNING To speedup user.my a bulk operator implementation is needed
function user.main():void;
    io.printf("#result of inline\n");
    mdb.list("user","tst");
end user.main;
#result of inline
function user.tst():void;
    b := bat.new(:oid,:int);
    X_8 := bat.new(nil:oid,nil:int);
barrier (X_12,X_13) := iterator.new(b);
    X_23 := calc.+(X_13,1);
    X_15 := X_23;
    bat.append(X_8,X_15);
    redo (X_12,X_13) := iterator.next(b);
exit (X_12,X_13);
    z:bat[:oid,:int]  := X_8;
end user.tst;

# 23:12:13 >  
# 23:12:13 >  Done.
# 23:12:13 >  

