stdout of test 'GCexample01` in directory 'monetdb5/optimizer` itself:


# 23:17:49 >  
# 23:17:49 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=33385 --set xrpc_port=42531 --set monet_prompt= --trace --dbname=mTests_src_optimizer  GCexample01.mal
# 23:17:49 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:32348/
function user.qry():void;
    b := bat.new(:oid,:int);
    c := bat.new(:oid,:int);
    d := bat.new(:oid,:int);
    bat.append(b,1);
barrier (x,z) := iterator.new(b);
    io.print(x);
exit (x,z);
barrier (x,z) := iterator.new(c);
    io.print(x);
    redo (x,z) := iterator.next(c);
exit (x,z);
# do not close d, it may be reused 
barrier go := true;
    io.print(d);
    redo go := true;
exit go;
end user.qry;
function user.main():void;
#checking proper handling of scopes for the garbage collector 
    mdb.List("user","qry");
end user.main;
function user.qry():void;               	# 
    b:bat[:oid,:int] := bat.new(:oid,:int);	# CMDBATnew
    c:bat[:oid,:int] := bat.new(:oid,:int);	# CMDBATnew
    d:bat[:oid,:int] := bat.new(:oid,:int);	# CMDBATnew
    bat.append(b:bat[:oid,:int],1:int); 	# BKCappend_val_wrap
barrier (x:oid,z:int) := iterator.new(b:bat[:oid,:int]);	# ITRbunIterator
    io.print(x:oid);                    	# IOprint_val
exit (x:oid,z:int);                     	# 
    b:bat[:oid,:int] := nil:bat[:oid,:int];	# 
barrier (x:oid,z:int) := iterator.new(c:bat[:oid,:int]);	# ITRbunIterator
    io.print(x:oid);                    	# IOprint_val
    redo (x:oid,z:int) := iterator.next(c:bat[:oid,:int]);	# ITRbunNext
exit (x:oid,z:int);                     	# 
    c:bat[:oid,:int] := nil:bat[:oid,:int];	# 
# do not close d, it may be reused      	# 
barrier go:bit := true:bit;             	# 
    io.print(d:bat[:oid,:int]);         	# IOprint_val
    redo go:bit := true:bit;            	# 
exit go:bit;                            	# 
    d:bat[:oid,:int] := nil:bat[:oid,:int];	# 
end user.qry;                           	# 

# 23:17:49 >  
# 23:17:49 >  Done.
# 23:17:49 >  

