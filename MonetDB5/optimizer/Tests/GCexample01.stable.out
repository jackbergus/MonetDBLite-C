stdout of test 'GCexample01` in directory 'monetdb5/optimizer` itself:


# 23:17:49 >  
# 23:17:49 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=33385 --set xrpc_port=42531 --set monet_prompt= --trace --dbname=mTests_src_optimizer  GCexample01.mal
# 23:17:49 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:32348/
function user.qry():void;
    b := bat.new(:oid,:int);
    c := bat.new(:oid,:int);
    d := bat.new(:oid,:int);
    bat.append(b,1);
barrier (x,z) := iterator.new(b);
    io.print(x);
exit (x,z);
barrier (x,z) := iterator.new(c);
    io.print(x);
    redo (x,z) := iterator.next(c);
exit (x,z);
# do not close d, it may be reused 
barrier go := true;
    io.print(d);
    redo go := true;
exit go;
end user.qry;
function user.main():void;
#checking proper handling of scopes for the garbage collector 
    mdb.List("user","qry");
end user.main;
function user.qry():void;               	#[0]  0 <- 
    b:bat[:oid,:int] := bat.new(:oid,:int);	#[1] CMDBATnew 1 <- 2 3 
    c:bat[:oid,:int] := bat.new(:oid,:int);	#[2] CMDBATnew 4 <- 2 3 
    d:bat[:oid,:int] := bat.new(:oid,:int);	#[3] CMDBATnew 5 <- 2 3 
    bat.append(b:bat[:oid,:int],1:int); 	#[4] BKCappend_val_wrap 6 <- 1 7 
barrier (x:oid,z:int) := iterator.new(b:bat[:oid,:int]);	#[5] ITRbunIterator 8 9 <- 1 
    io.print(x:oid);                    	#[6] IOprint_val 10 <- 8 
exit (x:oid,z:int);                     	#[7]  8 9 <- 
    b:bat[:oid,:int] := nil:bat[:oid,:int];	#[8]  1 <- 17 
barrier (x:oid,z:int) := iterator.new(c:bat[:oid,:int]);	#[9] ITRbunIterator 8 9 <- 4 
    io.print(x:oid);                    	#[10] IOprint_val 11 <- 8 
    redo (x:oid,z:int) := iterator.next(c:bat[:oid,:int]);	#[11] ITRbunNext 8 9 <- 4 
exit (x:oid,z:int);                     	#[12]  8 9 <- 
    c:bat[:oid,:int] := nil:bat[:oid,:int];	#[13]  4 <- 19 
# do not close d, it may be reused      	#[14]  12 <- 
barrier go:bit := true:bit;             	#[15]  13 <- 14 
    io.print(d:bat[:oid,:int]);         	#[16] IOprint_val 15 <- 5 
    redo go:bit := true:bit;            	#[17]  13 <- 14 
exit go:bit;                            	#[18]  13 <- 
    d:bat[:oid,:int] := nil:bat[:oid,:int];	#[19]  5 <- 21 
end user.qry;                           	#[20]  

# 23:17:49 >  
# 23:17:49 >  Done.
# 23:17:49 >  

