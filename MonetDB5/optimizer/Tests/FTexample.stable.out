stdout of test 'FTexample` in directory 'monetdb5/optimizer` itself:


# 23:53:03 >  
# 23:53:03 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=39352 --set sql_port=45171 --set xquery_port=52900 --set monet_prompt= --trace --dbname=mTests_src_optimizer  FTexample.mal </dev/null
# 23:53:03 >  

# MonetDB server v5.7.0, based on kernel v1.25.0
# Serving database 'mTests_src_optimizer', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2008 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:32348/
function user.test(s:str):wrd;
    b := bat.new(:oid,:str);
    bat.append(b,"hello");
    z := algebra.select(b,s,s);
    i := aggr.count(z);
    return test := i;
end user.test;
function user.main():void;
#Code factorization 
    mdb.List("user","test");
end user.main;
factory user.test(s:str):wrd;           	# 
    b:bat[:oid,:str] := bat.new(:oid,:str);	# CMDBATnew
    bat.append(b:bat[:oid,:str],"hello":str);	# BKCappend_val_wrap
barrier always:bit := true:bit;         	# 
    z:bat[:oid,:str] := algebra.select(b:bat[:oid,:str],s:str,s:str);	# ALGselect
    i:wrd := aggr.count(z:bat[:oid,:str]);	# ALGcount_bat
    yield test:wrd := i:wrd;            	# 
    redo always:bit;                    	# 
exit always:bit;                        	# 
    return test:wrd := test:wrd;        	# 
end user.test;                          	# 

# 23:53:03 >  
# 23:53:03 >  Done.
# 23:53:03 >  

