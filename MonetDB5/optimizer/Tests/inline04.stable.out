stdout of test 'inline04` in directory 'monetdb5/optimizer` itself:


# 18:00:43 >  
# 18:00:43 >   mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=34223 --set xrpc_port=43286 --set monet_prompt= --trace --dbname=mTests_src_optimizer  inline04.mal
# 18:00:43 >  

# MonetDB server v5.3.0, based on kernel v1.21.0
# Serving database 'mTests_src_optimizer'
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2007 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:32348/
function user.foo{inline}(a:int,b:int):int;
    c := calc.+(a,b);
    base := 1;
barrier loop := true;
    c := calc.*(c,c);
    base := calc.+(base,1);
    redo loop := calc.<(base,3);
exit loop;
    return foo := c;
end user.foo;
function user.qry():void;
    b := bat.new(:oid,:int);
    bat.append(b,1);
    z:bat[:oid,:int]  := mal.multiplex("user","foo",b,b);
    z:bat[:oid,:int]  := mal.multiplex("user","foo",b,2);
end user.qry;
function user.main():void;
# remapping inline functions 
# the crucial part is to recognize valid inlines 
# here the inlined function contains more then 
# just multiplex callable functions. 
    mdb.List("user","qry");
end user.main;
function user.qry():void;               #  0 qry:void := user.qry() {G}
    b := bat.new(:oid,:int);            #  1 b:bat[:oid,:int] := CMDBATnew(_2:oid, _3:int) {G}
    bat.append(b,1);                    #  2 _4:bat[:oid,:int] := BKCappend_val_wrap(b:bat[:oid,:int], _5:int) {G}
    X_13 := batcalc.+(b,b);             #  3 _13:bat[:oid,:int] := CMDbatADDsignal(b:bat[:oid,:int], b:bat[:oid,:int]) {G}
    X_14 := 1;                          #  4 _14:int := _5:int 
barrier X_15 := true;                   #  5 _15:bit := _16:bit {J9}
    X_13 := batcalc.*(X_13,X_13);       #  6 _13:bat[:oid,:int] := CMDbatMULsignal(_13:bat[:oid,:int], _13:bat[:oid,:int]) {G}
    X_14 := calc.+(X_14,1);             #  7 _14:int := CMDvarADDsignal(_14:int, _5:int) 
    redo X_15 := calc.<(X_14,3);        #  8 _15:bit := CMDvarLT(_14:int, _17:int) {J6}
exit X_15;                              #  9 _15:bit 
    z:bat[:oid,:int] {inline} := X_13;  # 10 z:bat[:oid,:int] := _13:bat[:oid,:int] {G}
    X_21 := batcalc.+(b,2);             # 11 _21:bat[:oid,:int] := CMDbatADDsignal(b:bat[:oid,:int], _9:int) {G}
    X_22 := 1;                          # 12 _22:int := _5:int 
barrier X_23 := true;                   # 13 _23:bit := _16:bit {J17}
    X_21 := batcalc.*(X_21,X_21);       # 14 _21:bat[:oid,:int] := CMDbatMULsignal(_21:bat[:oid,:int], _21:bat[:oid,:int]) {G}
    X_22 := calc.+(X_22,1);             # 15 _22:int := CMDvarADDsignal(_22:int, _5:int) 
    redo X_23 := calc.<(X_22,3);        # 16 _23:bit := CMDvarLT(_22:int, _17:int) {J14}
exit X_23;                              # 17 _23:bit 
    z:bat[:oid,:int] {inline} := X_21;  # 18 z:bat[:oid,:int] := _21:bat[:oid,:int] {G}
end user.qry;                           # 19  

# 18:00:43 >  
# 18:00:43 >  Done.
# 18:00:43 >  

