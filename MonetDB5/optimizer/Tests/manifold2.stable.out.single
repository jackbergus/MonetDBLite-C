stdout of test 'manifold2` in directory 'monetdb5/optimizer` itself:


# 09:02:36 >  
# 09:02:36 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=33759" "--set" "mapi_usock=/var/tmp/mtest-28130/.s.monetdb.33759" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/export/scratch1/mk/default//Linux/var/MonetDB/mTests_monetdb5_optimizer" "manifold2.mal"
# 09:02:36 >  

# MonetDB 5 server v11.20.0
# This is an unreleased version
# Serving database 'mTests_monetdb5_optimizer', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.590 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.ins.cwi.nl:33759/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-28130/.s.monetdb.33759
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
function user.tst(b:bat[:oid,:dbl],b2:bat[:oid,:dbl]):void;
    c := aggr.count(b);
    c2 := aggr.count(b2);
    z:bat[:oid,:dbl]  := mal.multiplex("calc","max",b,b2);
    io.print(z,b,b2);
end user.tst;
#WARNING To speedup calc.max a bulk operator implementation is needed
function user.main():void;
# the manifold code blocks  
    b := bat.new(:oid,:dbl);
    b2 := bat.new(:oid,:dbl);
    mdb.List("user","tst");
    mdb.var("user","tst");
    mdb.List("user","tst");
end user.main;
function user.tst(b:bat[:oid,:dbl],b2:bat[:oid,:dbl]):void;	# 
    c:wrd := aggr.count(b:bat[:oid,:dbl]);	# ALGcount_bat
    c2:wrd := aggr.count(b2:bat[:oid,:dbl]);	# ALGcount_bat
    X_9:bat[:oid,:dbl] := bat.new(nil:oid,nil:dbl);	# CMDBATnew
barrier (X_13:oid,X_14:dbl) := iterator.new(b:bat[:oid,:dbl]);	# ITRbunIterator
    X_16:dbl := algebra.fetch(b2:bat[:oid,:dbl],X_13:oid);	# ALGfetchoid
    X_18:dbl := calc.max(X_14:dbl,X_16:dbl);	# CALCmax
    bat.append(X_9:bat[:oid,:dbl],X_18:dbl);	# BKCappend_val_wrap
    redo (X_13:oid,X_14:dbl) := iterator.next(b:bat[:oid,:dbl]);	# ITRbunNext
exit (X_13:oid,X_14:dbl);               	# 
    z:bat[:oid,:dbl] := X_9:bat[:oid,:dbl];	# 
    io.print(z:bat[:oid,:dbl],b:bat[:oid,:dbl],b2:bat[:oid,:dbl]);	# IOtable
end user.tst;                           	# 
#[1]     b =  :bat[:oid,:dbl]  
#[2]    b2 =  :bat[:oid,:dbl]  
#[5]     z =  :bat[:oid,:dbl]  
#[6]    _6 = "calc" :str  constant 
#[7]    _7 = "max" :str  constant 
#[9]    _9 =  :bat[:oid,:dbl]  
#[10]   _10 = nil :oid  constant 
#[11]   _11 = nil :dbl  constant 
#[13]   _13 =  :oid  
#[14]   _14 =  :dbl  
#[16]   _16 =  :dbl  
#[18]   _18 =  :dbl  
function user.tst(b:bat[:oid,:dbl],b2:bat[:oid,:dbl]):void;	# 
    c:wrd := aggr.count(b:bat[:oid,:dbl]);	# ALGcount_bat
    c2:wrd := aggr.count(b2:bat[:oid,:dbl]);	# ALGcount_bat
    X_9:bat[:oid,:dbl] := bat.new(nil:oid,nil:dbl);	# CMDBATnew
barrier (X_13:oid,X_14:dbl) := iterator.new(b:bat[:oid,:dbl]);	# ITRbunIterator
    X_16:dbl := algebra.fetch(b2:bat[:oid,:dbl],X_13:oid);	# ALGfetchoid
    X_18:dbl := calc.max(X_14:dbl,X_16:dbl);	# CALCmax
    bat.append(X_9:bat[:oid,:dbl],X_18:dbl);	# BKCappend_val_wrap
    redo (X_13:oid,X_14:dbl) := iterator.next(b:bat[:oid,:dbl]);	# ITRbunNext
exit (X_13:oid,X_14:dbl);               	# 
    z:bat[:oid,:dbl] := X_9:bat[:oid,:dbl];	# 
    io.print(z:bat[:oid,:dbl],b:bat[:oid,:dbl],b2:bat[:oid,:dbl]);	# IOtable
end user.tst;                           	# 

# 09:02:36 >  
# 09:02:36 >  "Done."
# 09:02:36 >  

