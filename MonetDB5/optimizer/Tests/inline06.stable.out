stdout of test 'inline06` in directory 'monetdb5/optimizer` itself:


# 18:00:44 >  
# 18:00:44 >   mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=34223 --set xrpc_port=43286 --set monet_prompt= --trace --dbname=mTests_src_optimizer  inline06.mal
# 18:00:44 >  

# MonetDB server v5.3.0, based on kernel v1.21.0
# Serving database 'mTests_src_optimizer'
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2007 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:32348/
function user.foo{inline}(a:int,b:int):int;
    c := calc.+(a,b);
    base := mmath.rand();
# this has a memory-side effect 
    c := calc.*(c,base);
    return foo := c;
end user.foo;
function user.qry():void;
    b := bat.new(:oid,:int);
    bat.append(b,1);
    z:bat[:oid,:int]  := mal.multiplex("user","foo",b,b);
    z:bat[:oid,:int]  := mal.multiplex("user","foo",b,2);
end user.qry;
function user.main():void;
# remapping inline functions 
# the crucial part is to recognize valid inlines 
    mdb.List("user","qry");
end user.main;
function user.qry():void;               #  0 qry:void := user.qry() {G}
    b := bat.new(:oid,:int);            #  1 b:bat[:oid,:int] := CMDBATnew(_2:oid, _3:int) {G}
    bat.append(b,1);                    #  2 _4:bat[:oid,:int] := BKCappend_val_wrap(b:bat[:oid,:int], _5:int) {G}
    X_13 := batcalc.+(b,b);             #  3 _13:bat[:oid,:int] := CMDbatADDsignal(b:bat[:oid,:int], b:bat[:oid,:int]) {G}
    X_14 := mmath.rand();               #  4 _14:int := MATHrandint() 
# 
    X_13 := batcalc.*(X_13,X_14);       #  6 _13:bat[:oid,:int] := CMDbatMULsignal(_13:bat[:oid,:int], _14:int) {G}
    z:bat[:oid,:int] {inline} := X_13;  #  7 z:bat[:oid,:int] := _13:bat[:oid,:int] {G}
    X_19 := batcalc.+(b,2);             #  8 _19:bat[:oid,:int] := CMDbatADDsignal(b:bat[:oid,:int], _9:int) {G}
    X_20 := mmath.rand();               #  9 _20:int := MATHrandint() 
# 
    X_19 := batcalc.*(X_19,X_20);       # 11 _19:bat[:oid,:int] := CMDbatMULsignal(_19:bat[:oid,:int], _20:int) {G}
    z:bat[:oid,:int] {inline} := X_19;  # 12 z:bat[:oid,:int] := _19:bat[:oid,:int] {G}
end user.qry;                           # 13  

# 18:00:44 >  
# 18:00:44 >  Done.
# 18:00:44 >  

