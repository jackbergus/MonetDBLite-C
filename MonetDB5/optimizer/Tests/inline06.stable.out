stdout of test 'inline06` in directory 'monetdb5/optimizer` itself:


# 18:00:44 >  
# 18:00:44 >   mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=34223 --set xrpc_port=43286 --set monet_prompt= --trace --dbname=mTests_src_optimizer  inline06.mal
# 18:00:44 >  

# MonetDB server v5.3.0, based on kernel v1.21.0
# Serving database 'mTests_src_optimizer'
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2007 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:32348/
function user.foo{inline}(a:int,b:int):int;
    c := calc.+(a,b);
    base := mmath.rand();
# this has a memory-side effect 
    c := calc.*(c,base);
    return foo := c;
end user.foo;
function user.qry():void;
    b := bat.new(:oid,:int);
    bat.append(b,1);
    z:bat[:oid,:int]  := mal.multiplex("user","foo",b,b);
    z:bat[:oid,:int]  := mal.multiplex("user","foo",b,2);
end user.qry;
function user.main():void;
# remapping inline functions 
# the crucial part is to recognize valid inlines 
    mdb.List("user","qry");
end user.main;
function user.qry():void;               	#[0]  0 
    b:bat[:oid,:int] := bat.new(:oid,:int);	#[1] CMDBATnew 1 <- 2 3 
    bat.append(b:bat[:oid,:int],1:int); 	#[2] BKCappend_val_wrap 4 <- 1 5 
    X_14:bat[:oid,:int] := batcalc.+(b:bat[:oid,:int],b:bat[:oid,:int]);	#[3] CMDbatADDsignal 14 <- 1 1 
    X_15:int := mmath.rand();           	#[4] MATHrandint 15 
#                                       
    X_14:bat[:oid,:int] := batcalc.*(X_14:bat[:oid,:int],X_15:int);	#[6] CMDbatMULsignal 14 <- 14 15 
    z:bat[:oid,:int]{inline} := X_14:bat[:oid,:int];	#[7]  6 <- 14 
    X_20:bat[:oid,:int] := batcalc.+(b:bat[:oid,:int],2:int);	#[8] CMDbatADDsignal 20 <- 1 10 
    X_21:int := mmath.rand();           	#[9] MATHrandint 21 
#                                       
    X_20:bat[:oid,:int] := batcalc.*(X_20:bat[:oid,:int],X_21:int);	#[11] CMDbatMULsignal 20 <- 20 21 
    z:bat[:oid,:int]{inline} := X_20:bat[:oid,:int];	#[12]  6 <- 20 
end user.qry;                           	#[13]  

# 18:00:44 >  
# 18:00:44 >  Done.
# 18:00:44 >  

