stdout of test 'mat01` in directory 'optimizer` itself:


# 11:53:46 >  
# 11:53:46 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=39582 --set sql_port=44122 --set xquery_port=52828 --set monet_prompt= --trace --dbname=mTests_src_optimizer  mat01.mal < /dev/null
# 11:53:46 >  

# MonetDB 5 server v11.10.0
# This is an unreleased version
# Serving database 'mTests_optimizer', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.630 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2013 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.ins.cwi.nl:33397/
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
function user.main():void;
# the Multi Assocation Tables 
# use two mats at the same time. 
    mdb.List();
    m0 := bat.new(:oid,:oid);
    bat.append(m0,0@0);
    m1 := bat.new(:oid,:oid);
    bat.append(m1,1@0);
    m2 := bat.new(:oid,:oid);
    bat.append(m2,2@0);
    X_36 := algebra.select(m0,0@0,2@0);
    X_37 := algebra.select(m1,0@0,2@0);
    X_38 := algebra.select(m2,0@0,2@0);
    X_40 := aggr.count(X_36);
    X_41 := aggr.count(X_37);
    X_42 := aggr.count(X_38);
    X_39 := mat.pack(X_40,X_41,X_42);
    X_43 := algebra.selectNotNil(X_39);
    i := aggr.sum(X_43);
    s := mat.pack(X_36,X_37,X_38);
    io.print(s);
    io.print(i);
    c0 := bat.new(:oid,:oid);
    bat.append(c0,4@0);
    c1 := bat.new(:oid,:oid);
    bat.append(c1,5@0);
    c := mat.pack(c0,c1);
    bat.append(c,6@0);
    X_44 := algebra.join(m0,c);
    X_45 := algebra.join(m1,c);
    X_46 := algebra.join(m2,c);
    j := mat.pack(X_44,X_45,X_46);
    io.print(j);
    X_47 := algebra.select(m1,0@0,2@0);
    X_48 := algebra.select(m2,0@0,2@0);
    X_50 := aggr.count(X_47);
    X_51 := aggr.count(X_48);
    X_49 := mat.pack(X_50,X_51);
    X_52 := algebra.selectNotNil(X_49);
    i := aggr.sum(X_52);
    s := mat.pack(X_47,X_48);
    io.print(s);
    b := mat.pack(m0,m1,m2);
    io.print(b);
    io.print(c);
    d := mat.pack(m1,m2);
    io.print(d);
end main;
function user.main():void;              #  0 main:void := user.main() {G}
# the Multi Assocation Tables 
# use two mats at the same time. 
    mdb.List();                         #  3 _3:void := MDBlistDetail() 
    m0 := bat.new(:oid,:oid);           #  4 m0:bat[:oid,:oid] := CMDBATnew(_5:oid, _5:oid) {G}
    bat.append(m0,0@0);                 #  5 _6:bat[:oid,:oid] := BKCappend_val_wrap(m0:bat[:oid,:oid], _7:oid) {G}
    m1 := bat.new(:oid,:oid);           #  6 m1:bat[:oid,:oid] := CMDBATnew(_5:oid, _5:oid) {G}
    bat.append(m1,1@0);                 #  7 _9:bat[:oid,:oid] := BKCappend_val_wrap(m1:bat[:oid,:oid], _10:oid) {G}
    m2 := bat.new(:oid,:oid);           #  8 m2:bat[:oid,:oid] := CMDBATnew(_5:oid, _5:oid) {G}
    bat.append(m2,2@0);                 #  9 _12:bat[:oid,:oid] := BKCappend_val_wrap(m2:bat[:oid,:oid], _13:oid) {G}
    X_36 := algebra.select(m0,0@0,2@0); # 10 _36:bat[:oid,:oid] := ALGselect(m0:bat[:oid,:oid], _7:oid, _13:oid) {G}
    X_37 := algebra.select(m1,0@0,2@0); # 11 _37:bat[:oid,:oid] := ALGselect(m1:bat[:oid,:oid], _7:oid, _13:oid) {G}
    X_38 := algebra.select(m2,0@0,2@0); # 12 _38:bat[:oid,:oid] := ALGselect(m2:bat[:oid,:oid], _7:oid, _13:oid) {G}
    X_40 := aggr.count(X_36);           # 13 _40:wrd := ALGcount_bat(_36:bat[:oid,:oid]) {G}
    X_41 := aggr.count(X_37);           # 14 _41:wrd := ALGcount_bat(_37:bat[:oid,:oid]) {G}
    X_42 := aggr.count(X_38);           # 15 _42:wrd := ALGcount_bat(_38:bat[:oid,:oid]) {G}
    X_39 := mat.pack(X_40,X_41,X_42);   # 16 _39:bat[:oid,:wrd] := MATpackValues(_40:wrd, _41:wrd, _42:wrd) {G}
    X_43 := algebra.selectNotNil(X_39); # 17 _43:bat[:oid,:wrd] := ALGselectNotNil(_39:bat[:oid,:wrd]) {G}
    i := aggr.sum(X_43);                # 18 i:wrd := aggr.sum(_43:bat[:oid,:wrd]) {G}
    s := mat.pack(X_36,X_37,X_38);      # 19 s:bat[:oid,:oid] := MATpack(_36:bat[:oid,:oid], _37:bat[:oid,:oid], _38:bat[:oid,:oid]) {G}
    io.print(s);                        # 20 _18:void := IOprint_val(s:bat[:oid,:oid]) {G}
    io.print(i);                        # 21 _19:void := IOprint_val(i:wrd) 
    c0 := bat.new(:oid,:oid);           # 22 c0:bat[:oid,:oid] := CMDBATnew(_5:oid, _5:oid) {G}
    bat.append(c0,4@0);                 # 23 _21:bat[:oid,:oid] := BKCappend_val_wrap(c0:bat[:oid,:oid], _22:oid) {G}
    c1 := bat.new(:oid,:oid);           # 24 c1:bat[:oid,:oid] := CMDBATnew(_5:oid, _5:oid) {G}
    bat.append(c1,5@0);                 # 25 _24:bat[:oid,:oid] := BKCappend_val_wrap(c1:bat[:oid,:oid], _25:oid) {G}
    c := mat.pack(c0,c1);               # 26 c:bat[:oid,:oid] := MATpack(c0:bat[:oid,:oid], c1:bat[:oid,:oid]) {G}
    bat.append(c,6@0);                  # 27 _27:bat[:oid,:oid] := BKCappend_val_wrap(c:bat[:oid,:oid], _28:oid) {G}
    X_44 := algebra.join(m0,c);         # 28 _44:bat[:oid,:oid] := ALGjoin(m0:bat[:oid,:oid], c:bat[:oid,:oid]) {G}
    X_45 := algebra.join(m1,c);         # 29 _45:bat[:oid,:oid] := ALGjoin(m1:bat[:oid,:oid], c:bat[:oid,:oid]) {G}
    X_46 := algebra.join(m2,c);         # 30 _46:bat[:oid,:oid] := ALGjoin(m2:bat[:oid,:oid], c:bat[:oid,:oid]) {G}
    j := mat.pack(X_44,X_45,X_46);      # 31 j:bat[:oid,:oid] := MATpack(_44:bat[:oid,:oid], _45:bat[:oid,:oid], _46:bat[:oid,:oid]) {G}
    io.print(j);                        # 32 _30:void := IOprint_val(j:bat[:oid,:oid]) {G}
    X_47 := algebra.select(m1,0@0,2@0); # 33 _47:bat[:oid,:oid] := ALGselect(m1:bat[:oid,:oid], _7:oid, _13:oid) {G}
    X_48 := algebra.select(m2,0@0,2@0); # 34 _48:bat[:oid,:oid] := ALGselect(m2:bat[:oid,:oid], _7:oid, _13:oid) {G}
    X_50 := aggr.count(X_47);           # 35 _50:wrd := ALGcount_bat(_47:bat[:oid,:oid]) {G}
    X_51 := aggr.count(X_48);           # 36 _51:wrd := ALGcount_bat(_48:bat[:oid,:oid]) {G}
    X_49 := mat.pack(X_50,X_51);        # 37 _49:bat[:oid,:wrd] := MATpackValues(_50:wrd, _51:wrd) {G}
    X_52 := algebra.selectNotNil(X_49); # 38 _52:bat[:oid,:wrd] := ALGselectNotNil(_49:bat[:oid,:wrd]) {G}
    i := aggr.sum(X_52);                # 39 i:wrd := aggr.sum(_52:bat[:oid,:wrd]) {G}
    s := mat.pack(X_47,X_48);           # 40 s:bat[:oid,:oid] := MATpack(_47:bat[:oid,:oid], _48:bat[:oid,:oid]) {G}
    io.print(s);                        # 41 _31:void := IOprint_val(s:bat[:oid,:oid]) {G}
    b := mat.pack(m0,m1,m2);            # 42 b:bat[:oid,:oid] := MATpack(m0:bat[:oid,:oid], m1:bat[:oid,:oid], m2:bat[:oid,:oid]) {G}
    io.print(b);                        # 43 _32:void := IOprint_val(b:bat[:oid,:oid]) {G}
    io.print(c);                        # 44 _33:void := IOprint_val(c:bat[:oid,:oid]) {G}
    d := mat.pack(m1,m2);               # 45 d:bat[:oid,:oid] := MATpack(m1:bat[:oid,:oid], m2:bat[:oid,:oid]) {G}
    io.print(d);                        # 46 _34:void := IOprint_val(d:bat[:oid,:oid]) {G}
end main;                               # 47  
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  0@0	  ]
[ 0@0,	  1@0	  ]
[ 0@0,	  2@0	  ]
[ 3 ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  4@0	  ]
[ 0@0,	  5@0	  ]
[ 0@0,	  6@0	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  1@0	  ]
[ 0@0,	  2@0	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  0@0	  ]
[ 0@0,	  1@0	  ]
[ 0@0,	  2@0	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 0@0,	  4@0	  ]
[ 0@0,	  5@0	  ]
[ 1@0,	  6@0	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  1@0	  ]
[ 0@0,	  2@0	  ]

# 11:53:46 >  
# 11:53:46 >  Done.
# 11:53:46 >  

