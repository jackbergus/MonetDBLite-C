stdout of test 'inline10` in directory 'monetdb5/optimizer` itself:


# 11:53:01 >  
# 11:53:01 >   mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=36453 --set xrpc_port=42260 --set monet_prompt= --trace --dbname=mTests_src_optimizer  inline10.mal
# 11:53:01 >  

# MonetDB server v5.3.0, based on kernel v1.21.0
# Serving database 'mTests_src_optimizer'
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2007 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:32348/
function user.foo{inline}(a:int,b:int):int;
    c := calc.+(a,b);
    return foo := c;
end user.foo;
function user.bar{inline}(a:int,b:int):int;
    z := user.foo(a,b);
    return bar := z;
end user.bar;
function user.qry():void;
    b := bat.new(:oid,:int);
    bat.append(b,1);
    zz := user.bar(1,2);
# base line test for inlining 
    z:bat[:oid,:int]  := mal.multiplex("user","bar",b,b);
end user.qry;
function user.main():void;
# remapping inline functions 
# recursive inlining 
    mdb.List("user","qry");
end user.main;
function user.qry():void;               #  0 qry:void := user.qry() {G}
    b := bat.new(:oid,:int);            #  1 b:bat[:oid,:int] := CMDBATnew(_2:oid, _3:int) {G}
    bat.append(b,1);                    #  2 _4:bat[:oid,:int] := BKCappend_val_wrap(b:bat[:oid,:int], _5:int) {G}
    X_19 := calc.+(1,2);                #  3 _19:int := CMDvarADDsignal(_5:int, _7:int) 
    X_15 := X_19;                       #  4 _15:int := _19:int 
    zz := X_15;                         #  5 zz:int := _15:int 
# base line test for inlining 
    X_27 := batcalc.+(b,b);             #  7 _27:bat[:oid,:int] := CMDbatADDsignal(b:bat[:oid,:int], b:bat[:oid,:int]) {G}
    X_23 := X_27;                       #  8 _23:bat[:oid,:int] := _27:bat[:oid,:int] {G}
    z:bat[:oid,:int] {inline} := X_23;  #  9 z:bat[:oid,:int] := _23:bat[:oid,:int] {G}
end user.qry;                           # 10  

# 11:53:01 >  
# 11:53:01 >  Done.
# 11:53:01 >  

