stdout of test 'mat00` in directory 'optimizer` itself:


# 08:54:20 >  
# 08:54:20 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=36757 --set sql_port=42245 --set xquery_port=56755 --set monet_prompt= --trace --dbname=mTests_src_optimizer  mat00.mal < /dev/null
# 08:54:20 >  

# MonetDB 5 server v11.10.0
# This is an unreleased version
# Serving database 'mTests_optimizer', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.630 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2012 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.ins.cwi.nl:35811/
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
function user.main():void;
# the Multi Assocation Tables 
    mdb.List();
    m0 := bat.new(:oid,:int);
    bat.insert(m0,nil:oid,0);
    m1 := bat.new(:oid,:int);
    bat.insert(m1,nil:oid,1);
    m2 := bat.new(:oid,:int);
    bat.insert(m2,nil:oid,2);
    X_34 := algebra.select(m0,0,2);
    X_35 := algebra.select(m1,0,2);
    X_36 := algebra.select(m2,0,2);
    X_38 := aggr.count(X_34);
    X_39 := aggr.count(X_35);
    X_40 := aggr.count(X_36);
    X_37 := mat.pack(X_38,X_39,X_40);
    X_41 := algebra.selectNotNil(X_37);
    i := aggr.sum(X_41);
    s := mat.pack(X_34,X_35,X_36);
    io.print(s);
    io.print(i);
    c0 := bat.new(:int,:int);
    bat.insert(c0,0,4);
    c1 := bat.new(:int,:int);
    bat.insert(c1,1,5);
    c := mat.pack(c0,c1);
    bat.insert(c,1,6);
    X_42 := algebra.join(m0,c);
    X_43 := algebra.join(m1,c);
    X_44 := algebra.join(m2,c);
    j := mat.pack(X_42,X_43,X_44);
    io.print(j);
    b := mat.pack(m0,m1,m2);
    io.print(b);
    io.print(c);
end main;
function user.main():void;              #  0 main:void := user.main() {G}
# the Multi Assocation Tables 
    mdb.List();                         #  2 _2:void := MDBlistDetail() 
    m0 := bat.new(:oid,:int);           #  3 m0:bat[:oid,:int] := CMDBATnew(_4:oid, _5:int) {G}
    bat.insert(m0,nil:oid,0);           #  4 _6:bat[:oid,:int] := BKCinsert_bun(m0:bat[:oid,:int], _7:oid, _8:int) {G}
    m1 := bat.new(:oid,:int);           #  5 m1:bat[:oid,:int] := CMDBATnew(_4:oid, _5:int) {G}
    bat.insert(m1,nil:oid,1);           #  6 _10:bat[:oid,:int] := BKCinsert_bun(m1:bat[:oid,:int], _7:oid, _11:int) {G}
    m2 := bat.new(:oid,:int);           #  7 m2:bat[:oid,:int] := CMDBATnew(_4:oid, _5:int) {G}
    bat.insert(m2,nil:oid,2);           #  8 _13:bat[:oid,:int] := BKCinsert_bun(m2:bat[:oid,:int], _7:oid, _14:int) {G}
    X_34 := algebra.select(m0,0,2);     #  9 _34:bat[:oid,:int] := ALGselect(m0:bat[:oid,:int], _8:int, _14:int) {G}
    X_35 := algebra.select(m1,0,2);     # 10 _35:bat[:oid,:int] := ALGselect(m1:bat[:oid,:int], _8:int, _14:int) {G}
    X_36 := algebra.select(m2,0,2);     # 11 _36:bat[:oid,:int] := ALGselect(m2:bat[:oid,:int], _8:int, _14:int) {G}
    X_38 := aggr.count(X_34);           # 12 _38:wrd := ALGcount_bat(_34:bat[:oid,:int]) {G}
    X_39 := aggr.count(X_35);           # 13 _39:wrd := ALGcount_bat(_35:bat[:oid,:int]) {G}
    X_40 := aggr.count(X_36);           # 14 _40:wrd := ALGcount_bat(_36:bat[:oid,:int]) {G}
    X_37 := mat.pack(X_38,X_39,X_40);   # 15 _37:bat[:void,:wrd] := MATpackValues(_38:wrd, _39:wrd, _40:wrd) {G}
    X_41 := algebra.selectNotNil(X_37); # 16 _41:bat[:void,:wrd] := ALGselectNotNil(_37:bat[:void,:wrd]) {G}
    i := aggr.sum(X_41);                # 17 i:wrd := aggr.sum(_41:bat[:void,:wrd]) {G}
    s := mat.pack(X_34,X_35,X_36);      # 18 s:bat[:oid,:int] := MATpack(_34:bat[:oid,:int], _35:bat[:oid,:int], _36:bat[:oid,:int]) {G}
    io.print(s);                        # 19 _18:void := IOprint_val(s:bat[:oid,:int]) {G}
    io.print(i);                        # 20 _19:void := IOprint_val(i:wrd) 
    c0 := bat.new(:int,:int);           # 21 c0:bat[:int,:int] := CMDBATnew(_5:int, _5:int) {G}
    bat.insert(c0,0,4);                 # 22 _21:bat[:int,:int] := BKCinsert_bun(c0:bat[:int,:int], _8:int, _22:int) {G}
    c1 := bat.new(:int,:int);           # 23 c1:bat[:int,:int] := CMDBATnew(_5:int, _5:int) {G}
    bat.insert(c1,1,5);                 # 24 _24:bat[:int,:int] := BKCinsert_bun(c1:bat[:int,:int], _11:int, _25:int) {G}
    c := mat.pack(c0,c1);               # 25 c:bat[:int,:int] := MATpack(c0:bat[:int,:int], c1:bat[:int,:int]) {G}
    bat.insert(c,1,6);                  # 26 _27:bat[:int,:int] := BKCinsert_bun(c:bat[:int,:int], _11:int, _28:int) {G}
    X_42 := algebra.join(m0,c);         # 27 _42:bat[:oid,:int] := ALGjoin(m0:bat[:oid,:int], c:bat[:int,:int]) {G}
    X_43 := algebra.join(m1,c);         # 28 _43:bat[:oid,:int] := ALGjoin(m1:bat[:oid,:int], c:bat[:int,:int]) {G}
    X_44 := algebra.join(m2,c);         # 29 _44:bat[:oid,:int] := ALGjoin(m2:bat[:oid,:int], c:bat[:int,:int]) {G}
    j := mat.pack(X_42,X_43,X_44);      # 30 j:bat[:oid,:int] := MATpack(_42:bat[:oid,:int], _43:bat[:oid,:int], _44:bat[:oid,:int]) {G}
    io.print(j);                        # 31 _30:void := IOprint_val(j:bat[:oid,:int]) {G}
    b := mat.pack(m0,m1,m2);            # 32 b:bat[:oid,:int] := MATpack(m0:bat[:oid,:int], m1:bat[:oid,:int], m2:bat[:oid,:int]) {G}
    io.print(b);                        # 33 _31:void := IOprint_val(b:bat[:oid,:int]) {G}
    io.print(c);                        # 34 _32:void := IOprint_val(c:bat[:int,:int]) {G}
end main;                               # 35  
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ nil,	  0	  ]
[ nil,	  1	  ]
[ nil,	  2	  ]
[ 3 ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ nil,	  4	  ]
[ nil,	  5	  ]
[ nil,	  6	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ nil,	  0	  ]
[ nil,	  1	  ]
[ nil,	  2	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 0,	  4	  ]
[ 1,	  5	  ]
[ 1,	  6	  ]

# 08:54:20 >  
# 08:54:20 >  Done.
# 08:54:20 >  

