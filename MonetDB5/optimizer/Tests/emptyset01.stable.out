stdout of test 'emptyset01` in directory 'optimizer` itself:


# 08:05:29 >  
# 08:05:29 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=38505 --set xrpc_port=43491 --set monet_prompt= --trace --dbname=mTests_src_optimizer  emptyset01.mal
# 08:05:29 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:32348/
function user.do{inline}(V1:bat[:oid,:int]):void;
barrier (x,y,z) := bat.newIterator(V1);
    io.print("loop");
catch MALException:str ;
    io.print(MALException);
exit MALException:str ;
exit (x,y,z);
end do;
function user.tst():void;
    V1 := bat.new(:oid,:int);
    V7 := bat.new(:oid,:int);
    V10 := bat.new(:int,:oid);
    V11 := bat.reverse(V10);
    V12 := algebra.kdifference(V7,V11);
    V16 := algebra.markT(V12);
    V17 := algebra.join(V16,V7);
    bat.append(V1,V17);
    user.do(V1);
    io.print("done");
end tst;
function user.main():void;
#beware that the ESoptimizer does not remove the type of MALException 
    mdb.List("user","tst");
end main;
function user.tst():void;               #  0 tst:void := user.tst() {G}
    V1 := bat.new(:oid,:int);           #  1 V1:bat[:oid,:int] := CMDBATnew(_2:oid, _3:int) {G}
    V7 := bat.new(:oid,:int);           #  2 V7:bat[:oid,:int] := CMDBATnew(_2:oid, _3:int) {G}
    V10{rows=0:lng} := bat.new(:int,:oid);#  3 V10:bat[:int,:oid] := CMDBATnew(_3:int, _2:oid) {G}
    V11{rows=0} := bat.reverse(V10{rows=0:lng});#  4 V11:bat[:oid,:int] := BKCreverse(V10:bat[:int,:oid]) {G}
    V12 := V7;                          #  5 V12:bat[:oid,:int] := V7:bat[:oid,:int] {G}
    V16 := algebra.markT(V12);          #  6 V16:bat[:oid,:oid] := ALGtmark_default(V12:bat[:oid,:int]) {G}
    V17 := algebra.join(V16,V7);        #  7 V17:bat[:oid,:int] := ALGjoin(V16:bat[:oid,:oid], V7:bat[:oid,:int]) {G}
    bat.append(V1,V17);                 #  8 _11:bat[:oid,:int] := BKCappend_wrap(V1:bat[:oid,:int], V17:bat[:oid,:int]) {G}
barrier (X_17,X_18,X_19) := bat.newIterator(V1);#  9 (_17:lng, _18:oid, _19:int) := CHPbunIterator(V1:bat[:oid,:int]) {GJ14}
    io.print("loop");                   # 10 _20:void := IOprint_val(_21:str) {G}
catch MALException:str ;                # 11 MALException:str {J13}
    io.print(MALException);             # 12 _23:void := IOprint_val(MALException:str) {G}
exit MALException:str ;                 # 13 MALException:str 
exit (X_17,X_18,X_19);                  # 14 (_17:lng, _18:oid, _19:int) 
    io.print("done");                   # 15 _13:void := IOprint_val(_14:str) {G}
end tst;	# 16  

# 08:05:29 >  
# 08:05:29 >  Done.
# 08:05:29 >  

