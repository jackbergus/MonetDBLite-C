stdout of test 'partitions05` in directory 'optimizer` itself:


# 21:11:13 >  
# 21:11:13 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=34479 --set xrpc_port=49514 --set monet_prompt= --trace --dbname=mTests_src_optimizer  partitions05.mal
# 21:11:13 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:32348/
pattern sql.bind(s:str,t:str,i:str,flag:int):bat[:oid,:int] address MDBdummy;
pattern sql.rsColumn(b:any...):void address MDBdummy;
pattern sql.resultSet(b:any...):void address MDBdummy;
pattern sql.exportResult(b:any...):void address MDBdummy;
pattern sql.exportValue(b:any...):void address MDBdummy;
function sql.query(A0:sht):void;
    x1:bat[:oid,:int]  := sql.bind("sys","t","i",0);
    x10:bat[:oid,:int]  := sql.bind("sys","t","i",1);
    constraints.emptySet(x10);
    x12:bat[:oid,:int]  := sql.bind("sys","t","i",2);
    constraints.emptySet(x12);
    x17:bat[:oid,:int]  := sql.bind("sys","t","j",1);
    x7 := algebra.uselect(x1,nil:int,2,false,false);
    x14 := algebra.markT(x7,0@0);
    x15 := bat.reverse(x14);
    x16 := algebra.join(x15,x1);
    x19 := algebra.join(x15,x17);
    x20:bat[:oid,:int]  := batcalc.+(x16,x19);
    x21 := sql.resultSet(1,1,x20);
    sql.rsColumn(x21,"sys.","sqlxaddxi","int",32,0,x20);
    sql.exportResult(x21,"");
end query;
function user.main():void;
#testing the BAT partition manager 
# use a fake sql library 
# see how you handle an aggregation 
# select i+j from t where i<2; 
    mdb.List("sql","query");
end main;
function sql.query(A0:sht):void;        #  0 query:void := sql.query(A0:sht) {G}
    x1:bat[:oid,:int] {notnil=true,rows=1,bid=2199} := sql.bind("sys","t","i",0);#  1 x1:bat[:oid,:int] := MDBdummy(_6:str, _7:str, _8:str, _9:int) {G}
    x10:bat[:oid,:int] {notnil=true,rows=0,bid=2653} := sql.bind("sys","t","i",1);#  2 x10:bat[:oid,:int] := MDBdummy(_6:str, _7:str, _8:str, _4:int) {G}
    bpm10:bat[:oid,:int]  := bpm.unfold(x10{notnil=true,rows=0,bid=2653});#  3 bpm10:bat[:oid,:int] := BPMunfold(x10:bat[:oid,:int]) {G}
    bpm.emptySet(bpm10);                #  4 _12:void := BPMemptySet(bpm10:bat[:oid,:int]) {G}
    x12:bat[:oid,:int] {notnil=true,rows=0,bid=2654} := sql.bind("sys","t","i",2);#  5 x12:bat[:oid,:int] := MDBdummy(_6:str, _7:str, _8:str, _15:int) {G}
    bpm13:bat[:oid,:int]  := bpm.unfold(x12{notnil=true,rows=0,bid=2654});#  6 bpm13:bat[:oid,:int] := BPMunfold(x12:bat[:oid,:int]) {G}
    bpm.emptySet(bpm13);                #  7 _16:void := BPMemptySet(bpm13:bat[:oid,:int]) {G}
    x17:bat[:oid,:int] {notnil=true,rows=1,bid=2201} := sql.bind("sys","t","j",1);#  8 x17:bat[:oid,:int] := MDBdummy(_6:str, _7:str, _19:str, _4:int) {G}
    bpm17:bat[:oid,:int]  := bpm.unfold(x17{notnil=true,rows=1,bid=2201});#  9 bpm17:bat[:oid,:int] := BPMunfold(x17:bat[:oid,:int]) {G}
    x7{rows=1} := algebra.uselect(x1{notnil=true,rows=1,bid=2199},nil:int,2,false,false);# 10 x7:bat[:oid,:void] := ALGuselectInclusive(x1:bat[:oid,:int], _21:int, _15:int, _22:bit, _22:bit) {G}
    x14{rows=1} := algebra.markT(x7{rows=1},0@0);# 11 x14:bat[:oid,:oid] := ALGtmark(x7:bat[:oid,:void], _24:oid) {G}
    x15{rows=1} := bat.reverse(x14{rows=1});# 12 x15:bat[:oid,:oid] := BKCreverse(x14:bat[:oid,:oid]) {G}
    x16{rows=1} := algebra.join(x15{rows=1},x1{notnil=true,rows=1,bid=2199});# 13 x16:bat[:oid,:int] := ALGjoin(x15:bat[:oid,:oid], x1:bat[:oid,:int]) {G}
    _43 := bpm.new(:oid,:int);          # 14 _43:bat[:oid,:int] := BPMnew(_44:oid, _45:int) {G}
    x19{rows=1} := nil:bat[:oid,:int];  # 15 x19:bat[:oid,:int] := _47:bat[:oid,:int] {G}
barrier x17:bat[:oid,:int] {notnil=true,rows=1,bid=2201} := bpm.newIterator(bpm17);# 16 x17:bat[:oid,:int] := BPMnewIterator(bpm17:bat[:oid,:int]) {GJ20}
    x19{rows=1} := algebra.join(x15{rows=1},x17{notnil=true,rows=1,bid=2201});# 17 x19:bat[:oid,:int] := ALGjoin(x15:bat[:oid,:oid], x17:bat[:oid,:int]) {G}
    bpm.addPartition(_43,x19{rows=1});  # 18 _49:void := BPMaddPartition(_43:bat[:oid,:int], x19:bat[:oid,:int]) {G}
    redo x17:bat[:oid,:int] {notnil=true,rows=1,bid=2201} := bpm.hasMoreElements(bpm17);# 19 x17:bat[:oid,:int] := BPMhasMoreElements(bpm17:bat[:oid,:int]) {GJ17}
exit x17:bat[:oid,:int] {notnil=true,rows=1,bid=2201};# 20 x17:bat[:oid,:int] 
    x19{rows=1} := bpm.fold(_43);       # 21 x19:bat[:oid,:int] := BPMfold(_43:bat[:oid,:int]) {G}
    x20:bat[:oid,:int] {rows=1} := batcalc.+(x16{rows=1},x19{rows=1});# 22 x20:bat[:oid,:int] := CMDbatADD_int_int_int(x16:bat[:oid,:int], x19:bat[:oid,:int]) {G}
    x21 := sql.resultSet(1,1,x20{rows=1});# 23 x21:void := MDBdummy(_4:int, _4:int, x20:bat[:oid,:int]) {G}
    sql.rsColumn(x21,"sys.","sqlxaddxi","int",32,0,x20{rows=1});# 24 _30:void := MDBdummy(x21:void, _31:str, _32:str, _33:str, _34:int, _9:int, x20:bat[:oid,:int]) {G}
    sql.exportResult(x21,"");           # 25 _35:void := MDBdummy(x21:void, _36:str) {G}
catch SQLexception;                     # 26 SQLexception:str {J31}
    bpm.garbage(bpm10);                 # 27 _54:void := BPMgarbage(bpm10:bat[:oid,:int]) {G}
    bpm.garbage(bpm13);                 # 28 _55:void := BPMgarbage(bpm13:bat[:oid,:int]) {G}
    bpm.garbage(bpm17);                 # 29 _56:void := BPMgarbage(bpm17:bat[:oid,:int]) {G}
    raise SQLexception;                 # 30 SQLexception:str 
exit SQLexception;                      # 31 SQLexception:str 
    bpm.garbage(bpm10);                 # 32 _59:void := BPMgarbage(bpm10:bat[:oid,:int]) {G}
    bpm.garbage(bpm13);                 # 33 _60:void := BPMgarbage(bpm13:bat[:oid,:int]) {G}
    bpm.garbage(bpm17);                 # 34 _61:void := BPMgarbage(bpm17:bat[:oid,:int]) {G}
end query;                              # 35  

# 21:11:13 >  
# 21:11:13 >  Done.
# 21:11:13 >  

