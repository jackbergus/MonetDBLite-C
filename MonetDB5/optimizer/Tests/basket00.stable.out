stdout of test 'basket00` in directory 'optimizer` itself:


# 14:09:12 >  
# 14:09:12 >   mserver5 "--config=/ufs/mk/monet5//Linux/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs"   --set mapi_open=true --set xrpc_open=true --set mapi_port=35043 --set xrpc_port=41056 --set xrpc_docroot=/ufs/mk/monet5/package/MonetDB5 --set monet_prompt= --trace  --dbname=mTests_src_optimizer  basket00.mal
# 14:09:12 >  

# MonetDB server v5.11.0, based on kernel v1.29.0
# Serving database 'mTests_src_optimizer', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008- MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:35043/
function basket.unlock(a:any):void;
end unlock;
function basket.bind(s:str,t:str,c:str,i:int):bat[:any_1,:any_2];
    return bind := bat.new(:any_1,:any_2);
end bind;
function datacell.basket():bit;
    return basket := true;
end basket;
function datacell.s0_0(A0:int):void;
    X7 := A0;
barrier go := datacell.basket();
# the marker of the [ 
#generate binds for all input columns 
    X2:bat[:oid,:int]  := basket.bind("sys","r","i",0);
    X8 := algebra.thetauselect(X2,X7,">");
    X10 := calc.oid(0@0);
    X12 := algebra.markT(X8,X10);
    X13 := bat.reverse(X12);
    X14 := algebra.join(X13,X2);
    X17 := algebra.selectNotNil(X14);
    X18:lng  := aggr.sum(X17);
    X19 := calc.int(X18);
#generate binds for all output columns 
    X3:bat[:oid,:int]  := basket.bind("sys","s","j",1);
#generate updates for all columns 
    X20 := bat.append(X3,X19);
#generate deletion based on pivot 
    X21 := algebra.semijoin(X2,X17);
    bat.delete(X2,X21);
exit go;
# the marker of the ] 
end s0_0;
function user.main():void;
#make the test self contained. 
    mdb.list("datacell","bqs0_0");
end main;
factory datacell.bqs0_0(X7:int):void;
    basket.lock(X2);
    basket.lock(X3);
# the marker of the [ 
#generate binds for all columns 
    X2:bat[:oid,:int]  := basket.bind("sys","r","i",0);
    X8 := algebra.thetauselect(X2,X7,">");
    X10 := calc.oid(0@0);
    X12 := algebra.markT(X8,X10);
    X13 := bat.reverse(X12);
    X14 := algebra.join(X13,X2);
    X17 := algebra.selectNotNil(X14);
    X18:lng  := aggr.sum(X17);
    X19 := calc.int(X18);
#generate binds for all columns 
    X3:bat[:oid,:int]  := basket.bind("sys","s","j",1);
#generate updates for all columns 
    X20 := bat.append(X3,X19);
#generate deletion based on pivot 
    X21 := algebra.semijoin(X2,X17);
    bat.delete(X2,X21);
    basket.unlock(X3);
    basket.unlock(X2);
barrier X_36 := true;
    basket.lock(X2);
    basket.lock(X3);
# the marker of the [ 
#generate binds for all columns 
    X2:bat[:oid,:int]  := basket.bind("sys","r","i",0);
    X8 := algebra.thetauselect(X2,X7,">");
    X10 := calc.oid(0@0);
    X12 := algebra.markT(X8,X10);
    X13 := bat.reverse(X12);
    X14 := algebra.join(X13,X2);
    X17 := algebra.selectNotNil(X14);
    X18:lng  := aggr.sum(X17);
    X19 := calc.int(X18);
#generate binds for all columns 
    X3:bat[:oid,:int]  := basket.bind("sys","s","j",1);
#generate updates for all columns 
    X20 := bat.append(X3,X19);
#generate deletion based on pivot 
    X21 := algebra.semijoin(X2,X17);
    bat.delete(X2,X21);
    basket.unlock(X3);
    basket.unlock(X2);
    redo X_36 := true;
exit X_36;
end bqs0_0;

# 14:09:12 >  
# 14:09:12 >  Done.
# 14:09:12 >  

