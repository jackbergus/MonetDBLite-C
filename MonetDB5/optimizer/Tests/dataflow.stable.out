stdout of test 'dataflow` in directory 'optimizer` itself:


# 18:05:39 >  
# 18:05:39 >   mserver5  --debug=10 --set gdk_nr_threads=0  --set "gdk_dbfarm=/ufs/mk/Aug2011//Linux/var/MonetDB" --set mapi_open=true --set mapi_port=32759 --set monet_prompt= --trace --forcemito --set mal_listing=2  --dbname=mTests_optimizer  dataflow.mal
# 18:05:39 >  

# MonetDB 5 server v11.5.0
# This is an unreleased version
# Serving database 'mTests_optimizer', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 7.749 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2011 MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:32759/
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/DataCell module not loaded
# SQLException:mvc:SQL module not initialized
function user.slow():bat[:oid,:dbl];
    b := bat.new(:oid,:dbl);
barrier (go,i) := language.newRange(0:lng);
    f := calc.dbl(i);
    k := mmath.sin(f);
    bat.insert(b,nil:oid,k);
    redo (go,i) := language.nextElement(1:lng,10000000:lng);
exit (go,i);
    return slow := b;
end slow;
function user.tst():void;
    s := user.slow();
    l := aggr.min(s);
    h := l;
#mdb.setTimer(true); 
#mdb.setThread(true); 
    z := nil:bat[:oid,:dbl];
barrier go := language.dataflow();
    t1 := algebra.select(s,l,h);
    t2 := algebra.select(s,l,h);
    t3 := algebra.select(s,l,h);
    t4 := algebra.select(s,l,h);
    t5 := algebra.select(s,l,h);
    t6 := algebra.select(s,l,h);
    t7 := algebra.select(s,l,h);
    t8 := algebra.select(s,l,h);
    z := mat.pack(t1,t2,t3,t4,t5,t6,t7,t8);
exit go;
    mdb.var();
    c := aggr.count(z);
    io.print(c);
    io.print("done");
end tst;
function user.main():void;
# a simple dataflow test 
    mdb.List("user","tst");
    user.tst();
end main;
function user.tst():void;               #  0 tst:void := user.tst() {G}
    s := user.slow();                   #  1 s:bat[:oid,:dbl] := user.slow() {G}
    l := aggr.min(s);                   #  2 l:dbl := ALGmin_dbl(s:bat[:oid,:dbl]) {G}
    h := l;                             #  3 h:dbl := l:dbl 
#mdb.setTimer(true); 
#mdb.setThread(true); 
    z := nil:bat[:oid,:dbl];            #  6 z:bat[:oid,:dbl] := _7:bat[:oid,:dbl] {G}
barrier go := language.dataflow();      #  7 go:int := MALstartDataflow() {J17}
    t1 := algebra.select(s,l,h);        #  8 t1:bat[:oid,:dbl] := ALGselect(s:bat[:oid,:dbl], l:dbl, h:dbl) {G}
    t2 := algebra.select(s,l,h);        #  9 t2:bat[:oid,:dbl] := ALGselect(s:bat[:oid,:dbl], l:dbl, h:dbl) {G}
    t3 := algebra.select(s,l,h);        # 10 t3:bat[:oid,:dbl] := ALGselect(s:bat[:oid,:dbl], l:dbl, h:dbl) {G}
    t4 := algebra.select(s,l,h);        # 11 t4:bat[:oid,:dbl] := ALGselect(s:bat[:oid,:dbl], l:dbl, h:dbl) {G}
    t5 := algebra.select(s,l,h);        # 12 t5:bat[:oid,:dbl] := ALGselect(s:bat[:oid,:dbl], l:dbl, h:dbl) {G}
    t6 := algebra.select(s,l,h);        # 13 t6:bat[:oid,:dbl] := ALGselect(s:bat[:oid,:dbl], l:dbl, h:dbl) {G}
    t7 := algebra.select(s,l,h);        # 14 t7:bat[:oid,:dbl] := ALGselect(s:bat[:oid,:dbl], l:dbl, h:dbl) {G}
    t8 := algebra.select(s,l,h);        # 15 t8:bat[:oid,:dbl] := ALGselect(s:bat[:oid,:dbl], l:dbl, h:dbl) {G}
    z := mat.pack(t1,t2,t3,t4,t5,t6,t7,t8);# 16 z:bat[:oid,:dbl] := MATpack(t1:bat[:oid,:dbl], t2:bat[:oid,:dbl], t3:bat[:oid,:dbl], t4:bat[:oid,:dbl], t5:bat[:oid,:dbl], t6:bat[:oid,:dbl], t7:bat[:oid,:dbl], t8:bat[:oid,:dbl]) {G}
exit go;                                # 17 go:int 
    s := nil:BAT;                       # 18 s:bat[:oid,:dbl] := _23:BAT {G}
    mdb.var();                          # 19 _17:void := MDBvar() 
    c := aggr.count(z);                 # 20 c:wrd := ALGcount_bat(z:bat[:oid,:dbl]) {G}
    io.print(c);                        # 21 _19:void := IOprint_val(c:wrd) 
    io.print("done");                   # 22 _20:void := IOprint_val(_21:str) {G}
end tst;                                # 23  














#Stack 'tst' size=32 top=25
#[1]     s = nil :bat[:oid,:lng]   eolife=18 
#[2]     l = 735 :lng  
#[3]     h = 735 :lng  
#[5]    _5 = true :bit  constant 
#[7]     z = <tmp_1101> :bat[:oid,:lng] rows=8   eolife=20 
#[8]    _8 = nil :bat[:oid,:lng]  constant  eolife=6 
#[9]    go = -1 :int  
#[10]    t1 = nil :bat[:oid,:lng]   eolife=16 
#[11]    t2 = nil :bat[:oid,:lng]   eolife=16 
#[12]    t3 = nil :bat[:oid,:lng]   eolife=16 
#[13]    t4 = nil :bat[:oid,:lng]   eolife=16 
#[14]    t5 = nil :bat[:oid,:lng]   eolife=16 
#[15]    t6 = nil :bat[:oid,:lng]   eolife=16 
#[16]    t7 = nil :bat[:oid,:lng]   eolife=16 
#[17]    t8 = nil :bat[:oid,:lng]   eolife=16 
#[19]     c = 0 :wrd  
#[22]   _22 = "done" :str  constant 
#[24]   _24 = nil :BAT  constant 


[ 8 ]

[ "done" ]



# 18:05:41 >  
# 18:05:41 >  Done.
# 18:05:41 >  

