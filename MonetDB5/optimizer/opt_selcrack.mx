@/
The contents of this file are subject to the MonetDB Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.monetdb.org/Legal/MonetDBLicense

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is the MonetDB Database System.

The Initial Developer of the Original Code is CWI.
Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
Copyright August 2008-2011 MonetDB B.V.
All Rights Reserved.
@

@f opt_selcrack
@a S.Idreos
This cracker optimizer changes a query plan in order to use the selection cracking operators

@{
@mal
pattern optimizer.selcrack():str
address OPTselcrack;
pattern optimizer.selcrack(mod:str, fcn:str):str
address OPTselcrack
comment "Selection cracking";

@h
#ifndef _OPT_SELCRACK_
#define _OPT_SELCRACK_
#include "opt_support.h"

#define maxTables 10

@:exportOptimizer(selcrack)@
#define OPTDEBUGselcrack  if ( optDebug & ((lng)1 <<DEBUG_OPT_SELCRACK) )

#endif
@c  
#include "monetdb_config.h"
#include "opt_selcrack.h"
#include "mal_interpreter.h"	/* for showErrors() */
#include "opt_prelude.h"
#include "mtime.h"

#define match2(X,M,F) ( (X) && getFunctionId(X) && getFunctionId(X)==F && \
	getModuleId(X) && getModuleId(X)==M)

/* find all algebra select structions in a mal block mb and change them to the corresponding crackers command
    */
static int
OPTselcrackImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	InstrPtr p, *old;
	int update= 0, i, limit, actions=0, j;

	
	str tables[maxTables];
	int crackedTables=0;

	for(j=0;j<maxTables;j++)
		 tables[j] = NULL;	

	OPTDEBUGselcrack
		printf("Crack optimizer started\n");
	(void) cntxt;
	(void) stk; 
	(void) pci;
	
	limit = mb->stop;
	old = mb->stmt;
	
	for (i = 0; i < limit; i++) {
		p = old[i];
		if( getModuleId(p)== sqlRef )
            update |= getFunctionId(p)== appendRef || 
					  getFunctionId(p)== replaceRef ||
					  getFunctionId(p)== deleteRef;
	}
	if (update)
		return 0;

	for (i = 0; i < limit; i++) {
		p = old[i];

		/* add a property "can be cracked" to every base relation that is a candidate for selection cracking */
		/* also, for every candidate bat, maintain the table name */
		if ( match2(p, sqlRef, bindRef) ){  
			ValRecord v, *vp;

		  	/* crack only supported data types */
			switch( update = getTailType(mb->var[getArg(p,0)]->type) ){
			case TYPE_int: case TYPE_lng: case TYPE_sht:
			case TYPE_flt: case TYPE_dbl: case TYPE_oid:
				break;
			case TYPE_wrd: /* to be moved up */
			default:
					if ( update == TYPE_date)
						break;
					continue;
			}

			/* avoid cracking delta bats used for updates */
			if (mb->var[getArg(p,5)]->value.val.ival != 0 ) 
				continue;		
				
			varSetProp(mb, getArg(p, 0), canBeCrackedProp, 0, NULL);

			vp = VALset(&v, TYPE_str, GDKstrdup(getVar(mb,getArg(p,2))->value.val.sval));
			varSetProp(mb, getArg(p,0), tableProp, op_eq, vp);
			continue;
		}

		/* propagate the canBeCracked property */
		if ( match2(p, batRef, setWriteModeRef) || 
			  match2(p, batcalcRef, dblRef) || 
			  match2(p, batcalcRef, intRef) ){ 

			if (varGetProp(mb, getArg(p, 1), canBeCrackedProp) != NULL){
				varSetProp(mb, getArg(p, 0), canBeCrackedProp, 0, NULL);
				if (varGetProp(mb, getArg(p, 1), tableProp) != NULL){
					ValRecord v, *vp;
					vp = VALset(&v, TYPE_str, GDKstrdup(varGetProp(mb, getArg(p,1), tableProp)->value.val.sval));
					varSetProp(mb, getArg(p, 0), tableProp, op_eq, vp);
				}
			}
		
			continue;
		}

		if (match2(p, algebraRef, semijoinRef)){
			if (varGetProp(mb, getArg(p, 1), canBeCrackedProp) != NULL){
				ValRecord v, *vp;
				vp = VALset(&v, TYPE_int,&i);
				varSetProp(mb, getArg(p, 0), canBeJoinselectProp, op_eq, vp);
			}
			continue;
		}

		/* make the actual command changes */
		if (match2(p, algebraRef, selectRef) ||
		    match2(p, algebraRef, uselectRef) || 
		    match2(p, algebraRef, thetauselectRef)){ 

			if (varGetProp(mb, getArg(p,1), canBeCrackedProp) != NULL){
				bit alreadyCracked = FALSE;

				/* see if we have already used a crackers select for this table */
				for(j=0;j<crackedTables;j++)
					if (strcmp(tables[j],varGetProp(mb, getArg(p,1), tableProp)->value.val.sval) == 0)
						alreadyCracked = TRUE;
	
				/* if not then go ahead and use one*/
				if (!alreadyCracked){
					tables[crackedTables]=GDKstrdup(varGetProp(mb, getArg(p,1), tableProp)->value.val.sval);
					crackedTables++;
					setModuleId(p,putName("crackers",8));
					actions++;
					continue;
				}
			}

			if (varGetProp(mb, getArg(p,1), canBeJoinselectProp) != NULL){
				InstrPtr newJoinselect, oldSemijoin;
			
				oldSemijoin = old[varGetProp(mb, getArg(p,1), canBeJoinselectProp)->value.val.ival];
			
				/* create the new operator call */	
				newJoinselect = newInstruction(mb,ASSIGNsymbol);
				getArg(newJoinselect,0) = getArg(p,0);
				setModuleId(newJoinselect, putName("crackers", 8));
				if (match2(p, algebraRef, selectRef))
					setFunctionId(newJoinselect, putName("joinselect", 10));
				else 
				if (match2(p, algebraRef, uselectRef)) 
					setFunctionId(newJoinselect, putName("joinuselect", 11));
				else 
				if (match2(p, algebraRef, thetauselectRef)) 
					setFunctionId(newJoinselect, putName("jointhetauselect", 16));
				newJoinselect= pushArgument(mb, newJoinselect, getArg(oldSemijoin, 1));
				for(j=2; j< p->argc; j++)
					newJoinselect= pushArgument(mb, newJoinselect, getArg(p, j));
				newJoinselect= pushArgument(mb, newJoinselect, getArg(oldSemijoin, 2));
				newJoinselect= pushBit(mb,newJoinselect,FALSE);
				newJoinselect= pushBit(mb,newJoinselect,FALSE);
				/* printInstruction(cntxt->fdout,mb, 0, newJoinselect,0); */

				/* replace the current with the new one and remove the prev semijoin*/
				freeInstruction(p);
				old[i]=newJoinselect;
				removeInstruction(mb, oldSemijoin);
				i--;

				actions++;
				continue;
			}
		}
	}

	return actions;
}

@include optimizerWrapper.mx
@c
#include "opt_statistics.h"
@:wrapOptimizer(selcrack,OPT_CHECK_ALL)@
@}
