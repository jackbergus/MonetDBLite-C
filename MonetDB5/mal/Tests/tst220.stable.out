stdout of test 'tst220` in directory 'monetdb5/mal` itself:


# 08:01:01 >  
# 08:01:01 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst220.mal </dev/null
# 08:01:01 >  

# MonetDB 5 server v11.22.0
# This is an unreleased version
# Serving database 'mTests_monetdb5_mal', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.590 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.ins.cwi.nl:35645/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-15498/.s.monetdb.35645
# MonetDB/GIS module loaded
# Start processing logs sql/sql_logs version 52200
# Start reading the write-ahead log 'sql_logs/sql/log.4'
# Finished reading the write-ahead log 'sql_logs/sql/log.4'
# Finished processing logs sql/sql_logs
# MonetDB/SQL module loaded
function user.steal(bb:bat[:oid,:any_2]):bat[:oid,:any_2];
    i := bbp.getLRefCount(bb);
    io.printf("enter function refcount =%d[2,3]\n",i);
    loc := bb;
    i := bbp.getLRefCount(bb);
    io.printf("local in function refcount =%d[3,4]\n",i);
    return steal := bb;
end user.steal;
function user.createone():bat[:oid,:str];
    b := bat.new(:oid,:str);
    return createone := b;
end user.createone;
function user.main():void;
# a test checking BAT reference counting under various situations 
    b := bat.new(:oid,:str);
    i := bbp.getLRefCount(b);
    io.printf("refcount =%d[1]\n",i);
    bat.append(b,"bat B");
    io.print(b);
    i := bbp.getLRefCount(b);
    io.printf("refcount =%d[1]\n",i);
#handle an alias, which isn't used! 
    b2 := b;
    i := bbp.getLRefCount(b);
    io.printf("after assignment refcount =%d[2]\n",i);
#re-use a bat variable 
    b3 := b;
    cnt := aggr.count(b3);
# forced use 
    i := bbp.getLRefCount(b);
    io.printf("after 2nd assignment refcount =%d[3]\n",i);
#re-use a bat variable 
    b3 := user.createone();
    i := bbp.getLRefCount(b);
    io.printf("after 3rd assignment refcount =%d[2]\n",i);
    i := bbp.getLRefCount(b3);
    io.printf("assignment refcount =%d[1]\n",i);
#re-use a bat variable 
    b4 := algebra.subselect(b,"bat C","bat C",true,true,false);
    b5 := algebra.leftfetchjoin(b4,b);
    io.print(b5);
    i := bbp.getLRefCount(b);
    io.printf("after 4rd assignment refcount =%d[2]\n",i);
# remove by assignment 
    b2 := b3;
    i := bbp.getLRefCount(b);
    io.printf("after 5rd assignment refcount =%d[1]\n",i);
    io.printf("call function\n");
    d := user.steal(b);
    i := bbp.getLRefCount(b);
    io.printf("return from function refcount =%d[2]\n",i);
    io.printf("check self replacement, overrule refcount!\n");
    b := user.steal(b);
    i := bbp.getLRefCount(b);
    io.printf("return from function refcount =%d[2]\n",i);
end user.main;
refcount =1[1]
#-------------------------#
# h	t		  # name
# int	str		  # type
#-------------------------#
[ 0@0,	  "bat B"	  ]
refcount =2[1]
after assignment refcount =3[2]
after 2nd assignment refcount =4[3]
after 3rd assignment refcount =3[2]
assignment refcount =1[1]
#-----------------#
# h	t	  # name
# int	str	  # type
#-----------------#
after 4rd assignment refcount =3[2]
after 5rd assignment refcount =2[1]
call function
enter function refcount =3[2,3]
local in function refcount =4[3,4]
return from function refcount =3[2]
check self replacement, overrule refcount!
enter function refcount =4[2,3]
local in function refcount =5[3,4]
return from function refcount =3[2]

# 08:01:01 >  
# 08:01:01 >  Done.
# 08:01:01 >  

