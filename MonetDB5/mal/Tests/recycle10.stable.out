stdout of test 'recycle10` in directory 'monetdb5/mal` itself:


# 12:55:07 >  
# 12:55:07 >   mserver5 "--config=/export/scratch1/milena/monet.DBG/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/export/scratch1/milena/monet.DBG/lib/MonetDB5:/export/scratch1/milena/monet.DBG/lib/MonetDB5/lib:/export/scratch1/milena/monet.DBG/lib/MonetDB5/bin" --set "gdk_dbfarm=/export/scratch1/milena/monet.DBG/var/MonetDB5/dbfarm" --set "sql_logdir=/export/scratch1/milena/monet.DBG/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=31275 --set xrpc_port=42858 --set monet_prompt= --trace  --dbname=mTests_src_mal  recycle10.mal
# 12:55:07 >  

# MonetDB server v5.7.0, based on kernel v1.25.0
# Serving database 'mTests_src_mal', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.ins.cwi.nl:30041/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-21946/.s.monetdb.30041
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded
function sql.mvc():int;
    return mvc := 1;
end sql.mvc;
function sql.tid(mvc:int,s:str,t:str):bat[:oid,:oid];
    b := bat.new(:oid,:oid);
barrier i := 0@0:oid;
    bat.append(b,i);
    redo i := iterator.next(1@0:oid,11@0:oid);
exit i;
    return tid := b;
end sql.tid;
function sql.bind(m:int,s:str,t:str,c:str,i:int):bat[:oid,:int];
    b := bat.new(:oid,:int);
    bat.append(b,0);
    bat.append(b,1);
    bat.append(b,2);
    bat.append(b,3);
    bat.append(b,4);
    bat.append(b,5);
    bat.append(b,6);
    bat.append(b,7);
    bat.append(b,8);
    bat.append(b,9);
    bat.append(b,10);
    bat.append(b,11);
    return bind := b;
end sql.bind;
function sql.qry(low:int,hgh:int):void;
    m := sql.mvc();
    x:bat[:oid,:oid]  := sql.tid(m,"sys","tbl");
    b:bat[:oid,:int]  := sql.bind(m,"sys","tbl","col",0);
    s1 := algebra.subselect(b,x,low,hgh,true,true,false);
    v := calc.+(low,hgh);
    v1 := calc./(v,2);
    v2 := calc.int(v1);
    s2 := algebra.subselect(b,x,v2,v2,true,true,false);
    s3 := algebra.subselect(b,x,low,v2,true,true,false);
    s4 := algebra.subselect(b,x,low,hgh,false,true,false);
    io.print(s1);
    io.print(s2);
    io.print(s3);
    io.print(s4);
end sql.qry;
function user.main():void;
#test the basics of the recycler 
# testing reuse-cover with different selection instructions 
    user.qry(2,8);
    recycle.dump();
end user.main;
#RECYCLE [  0] cost 4 mem 0 srch  -nan     X_0:int  := sql.mvc();
#RECYCLE [  1] cost 53 mem 88 srch 23.00     X_3:BAT  := sql.tid(X_0=1,X_2="sys",X_1="tbl");
#RECYCLE [  2] cost 36 mem 48 srch 23.50     X_6:BAT  := sql.bind(X_0=1,X_2="sys",X_1="tbl",X_5="col",X_4=0);
#RECYCLE [  3] cost 10 mem 0 srch 24.00     X_11:BAT  := algebra.subselect(X_6=<tmp_1044>,X_3=<tmp_1031>,X_10=2,X_9=8,X_8=true,X_8=true,X_7=false);
#RECYCLE [  4] cost 11 mem 0 srch 24.50     X_12:int  := calc.+(X_10=2,X_9=8);
#RECYCLE [  5] cost 10 mem 0 srch 22.60     X_13:int  := calc./(X_12=10,X_10=2);
#RECYCLE [  6] cost 2 mem 0 srch 21.33     X_14:int  := calc.int(X_13=5);
#RECYCLE [  7] cost 9 mem 0 srch 24.57     X_15:BAT  := algebra.subselect(X_6=<tmp_1044>,X_11=<tmp_1043>,X_14=5,X_14=5,X_8=true,X_8=true,X_7=false);
#REUSED  [  3]  10 (usec)     X_11:BAT  := algebra.subselect(X_6=<tmp_1044>,X_3=<tmp_1031>,X_10=2,X_9=8,X_8=true,X_8=true,X_7=false);
#RECYCLE [  8] cost 7 mem 0 srch 24.12     X_16:BAT  := algebra.subselect(X_6=<tmp_1044>,X_11=<tmp_1043>,X_10=2,X_14=5,X_8=true,X_8=true,X_7=false);
#REUSED  [  3]  10 (usec)     X_11:BAT  := algebra.subselect(X_6=<tmp_1044>,X_3=<tmp_1031>,X_10=2,X_9=8,X_8=true,X_8=true,X_7=false);
#RECYCLE [  9] cost 14 mem 0 srch 23.67     X_17:BAT  := algebra.subselect(X_6=<tmp_1044>,X_11=<tmp_1043>,X_10=2,X_9=8,X_7=false,X_8=true,X_7=false);
#REUSED  [  3]  10 (usec)     X_11:BAT  := algebra.subselect(X_6=<tmp_1044>,X_3=<tmp_1031>,X_10=2,X_9=8,X_8=true,X_8=true,X_7=false);
#--------------------------#
# t	h  # name
# void	oid  # type
#--------------------------#
[ 0@0,	2@0  ]
[ 1@0,	3@0  ]
[ 2@0,	4@0  ]
[ 3@0,	5@0  ]
[ 4@0,	6@0  ]
[ 5@0,	7@0  ]
[ 6@0,	8@0  ]
#--------------------------#
# t	h  # name
# void	oid  # type
#--------------------------#
[ 0@0,	5@0  ]
#--------------------------#
# t	h  # name
# void	oid  # type
#--------------------------#
[ 0@0,	2@0  ]
[ 1@0,	3@0  ]
[ 2@0,	4@0  ]
[ 3@0,	5@0  ]
#--------------------------#
# t	h  # name
# void	oid  # type
#--------------------------#
[ 0@0,	3@0  ]
[ 1@0,	4@0  ]
[ 2@0,	5@0  ]
[ 3@0,	6@0  ]
[ 4@0,	7@0  ]
[ 5@0,	8@0  ]
#RECYCLER  CATALOG admission ADM_ALL
#CACHE= policy PROFIT limit= 20000 
#RESOURCES hard stmt = 20000 hard var = 100000 hard mem=16741163008
#recycled = 3 incache= 10 executed = 1535 memory(KB)= 448 PersBat memory=0
#Cache search time= 0(usec)
# CL	   lru		cnt	 ticks	 rd	 wr	 Instr
#        1	1020281	1	69	1	1	    _1 := user.bind("schema","table","column",0);
#        2	1020384	4	46	1	1	    _6 := algebra.select(<tmp_20>,2,8);
#        3	1020356	1	19	1	1	    _9 := algebra.select(<tmp_20>,5);
#        4	1020371	1	14	1	1	    _11 := algebra.select(<tmp_20>,2,5);
#        5	1020390	1	18	1	1	    _12 := algebra.select(<tmp_20>,2,8,false,true);

# 12:55:08 >  
# 12:55:08 >  Done.
# 12:55:08 >  

