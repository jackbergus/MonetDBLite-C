stdout of test 'tst062` in directory 'monetdb5/mal` itself:


# 17:25:46 >  
# 17:25:46 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=30228" "--set" "mapi_usock=/var/tmp/mtest-25816/.s.monetdb.30228" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/export/scratch1/mk/default//Linux/var/MonetDB/mTests_monetdb5_mal" "tst062.mal"
# 17:25:46 >  

# MonetDB 5 server v11.20.0
# This is an unreleased version
# Serving database 'mTests_monetdb5_mal', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.590 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.ins.cwi.nl:30228/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-25816/.s.monetdb.30228
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
!SyntaxException:user.l2[9]:invalid return target!
function user.l2():void;
    X_3 := sql.mvc();
    X_4:bat[:oid,:oid] := sql.tid(X_3,"sys","part1");
    X_7:bat[:oid,:dbl] := sql.bind(X_3,"sys","part1","x",0);
    X_10 := algebra.leftfetchjoin(X_4,X_7);
    X_11:bat[:oid,:dbl] := sql.bind(X_3,"sys","part1","y",0);
    X_13 := algebra.leftfetchjoin(X_4,X_11);
    X_14:bat[:oid,:dbl] := sql.bind(X_3,"sys","part1","z",0);
    X_16 := algebra.leftfetchjoin(X_4,X_14);
    return (X_10,X_13,X_16) := (X_10,X_13,X_16);
end user.l2;
!TypeException:user.l1[12]:'X_10' may not be used before being initialized
!TypeException:user.l1[12]:'X_13' may not be used before being initialized
!TypeException:user.l1[12]:'X_16' may not be used before being initialized
function user.l1{sqlfunction}() (X_0:bat[:oid,:dbl]{sqlfunction},X_1:bat[:oid,:dbl],X_2:bat[:oid,:dbl]);
barrier X_26 := language.dataflow();
    X_3 := sql.mvc();
    X_4:bat[:oid,:oid] := sql.tid(X_3,"sys","part1");
    X_7:bat[:oid,:dbl] := sql.bind(X_3,"sys","part1","x",0);
    X_10 := algebra.leftfetchjoin(X_4,X_7);
    X_11:bat[:oid,:dbl] := sql.bind(X_3,"sys","part1","y",0);
    X_13 := algebra.leftfetchjoin(X_4,X_11);
    X_14:bat[:oid,:dbl] := sql.bind(X_3,"sys","part1","z",0);
    X_16 := algebra.leftfetchjoin(X_4,X_14);
    language.pass(X_4);
exit X_26;
    return (X_10,X_13,X_16) := (X_10,X_13,X_16);
end user.l1;
function user.main():void;
#the number of return arguments does not match spect 
# the variabls X_10, X_13, X_16 are only valid within the parallel block 
end user.main;

# 17:25:46 >  
# 17:25:46 >  "Done."
# 17:25:46 >  

