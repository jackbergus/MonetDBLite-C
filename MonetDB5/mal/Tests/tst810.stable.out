stdout of test 'tst810` in directory 'monetdb5/mal` itself:


# 16:18:09 >  
# 16:18:09 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "gdk_dbfarm=/scratch/mk/current//Linux/var/MonetDB" "--set" "mapi_open=true" "--set" "mapi_port=32494" "--set" "monet_prompt=" "--trace" "--forcemito" "--set" "mal_listing=2" "--dbname=mTests_mal" "tst810.mal"
# 16:18:09 >  

# MonetDB 5 server v11.10.0
# This is an unreleased version
# Serving database 'mTests_mal', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.620 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rocks019.scilens:32494/
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.

# 10:38:22 >  
# 10:38:22 >  "mclient" "-lmal" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-864" "--port=33541"
# 10:38:22 >  

function user.foo():void;               	#[0]  0 
    b:bat[:oid,:int] := bat.new(:oid,:int);	#[1] CMDBATnew 1 <- 2 3 
    bat.append(b:bat[:oid,:int],1:int); 	#[2] BKCappend_val_wrap 4 <- 1 5 
    bat.append(b:bat[:oid,:int],2:int); 	#[3] BKCappend_val_wrap 6 <- 1 7 
    bat.append(b:bat[:oid,:int],3:int); 	#[4] BKCappend_val_wrap 8 <- 1 9 
    bat.append(b:bat[:oid,:int],4:int); 	#[5] BKCappend_val_wrap 10 <- 1 11 
    bat.append(b:bat[:oid,:int],5:int); 	#[6] BKCappend_val_wrap 12 <- 1 13 
    bat.append(b:bat[:oid,:int],6:int); 	#[7] BKCappend_val_wrap 14 <- 1 15 
    bat.append(b:bat[:oid,:int],7:int); 	#[8] BKCappend_val_wrap 16 <- 1 17 
    bat.append(b:bat[:oid,:int],8:int); 	#[9] BKCappend_val_wrap 18 <- 1 19 
    bat.append(b:bat[:oid,:int],9:int); 	#[10] BKCappend_val_wrap 20 <- 1 21 
    io.print(b:bat[:oid,:int]);         	#[11] IOprint_val 22 <- 1 
    slice1:bat[:oid,:int] := algebra.slice(b:bat[:oid,:int],0@0:oid,4@0:oid);	#[12] ALGslice_oid 23 <- 1 24 25 
    io.print(slice1:bat[:oid,:int]);    	#[13] IOprint_val 26 <- 23 
    slice2:bat[:oid,:int] := algebra.slice(b:bat[:oid,:int],5@0:oid,nil:oid);	#[14] ALGslice_oid 27 <- 1 28 29 
    io.print(slice2:bat[:oid,:int]);    	#[15] IOprint_val 30 <- 27 
end user.foo;                           	#[16]  
#--------------------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  2	  ]
[ 2@0,	  3	  ]
[ 3@0,	  4	  ]
[ 4@0,	  5	  ]
[ 5@0,	  6	  ]
[ 6@0,	  7	  ]
[ 7@0,	  8	  ]
[ 8@0,	  9	  ]
#-----------------#
# t	h	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  2	  ]
[ 2@0,	  3	  ]
[ 3@0,	  4	  ]
[ 4@0,	5  ]
#--------------------------#
# h	t  # name
# void	int	  # type
#--------------------------#
[ 5@0,	6  ]
[ 6@0,	7  ]
[ 7@0,	8  ]
[ 8@0,	9  ]

# 16:18:09 >  
# 16:18:09 >  "Done."
# 16:18:09 >  

