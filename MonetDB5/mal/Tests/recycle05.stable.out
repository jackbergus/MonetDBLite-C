stdout of test 'recycle05` in directory 'monetdb5/mal` itself:


# 15:54:58 >  
# 15:54:58 >   mserver5 "--config=/export/scratch1/milena/monet.DBG/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/export/scratch1/milena/monet.DBG/lib/MonetDB5:/export/scratch1/milena/monet.DBG/lib/MonetDB5/lib:/export/scratch1/milena/monet.DBG/lib/MonetDB5/bin" --set "gdk_dbfarm=/export/scratch1/milena/monet.DBG/var/MonetDB5/dbfarm" --set "sql_logdir=/export/scratch1/milena/monet.DBG/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=34583 --set xrpc_port=49067 --set monet_prompt= --trace  --dbname=mTests_src_mal  recycle05.mal
# 15:54:58 >  

# MonetDB server v5.7.0, based on kernel v1.25.0
# Serving database 'mTests_src_mal'
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.ins.cwi.nl:35178/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-13875/.s.monetdb.35178
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded
function sql.mvc():int;
    return mvc := 1;
end sql.mvc;
function sql.tid(mvc:int,s:str,t:str):bat[:oid,:oid];
    b := bat.new(:oid,:oid);
barrier i := 0@0:oid;
    bat.append(b,i);
    redo i := iterator.next(1@0:oid,1000@0:oid);
exit i;
    return tid := b;
end sql.tid;
function sql.bind(m:int,s:str,t:str,c:str,i:int):bat[:oid,:int];
    b := bat.new(:oid,:int);
barrier i := 0:int;
    bat.append(b,i);
    redo i := iterator.next(1:int,1000:int);
exit i;
    return bind := b;
end sql.bind;
function sql.qry(low:int,hgh:int):void;
    m := sql.mvc();
    x:bat[:oid,:oid]  := sql.tid(m,"sys","tbl");
    b:bat[:oid,:int]  := sql.bind(m,"sys","tbl","col",0);
    s1 := algebra.subselect(b,x,low,hgh,true,true,false);
end sql.qry;
function user.main():void;
# Test of LRU cache policy in limited memory (12 RU) 
    recycle.setCache(4);
    io.print("start");
    user.qry(100,120);
    user.qry(700,710);
    recycle.dump();
# The next query should evict the oldest leaves (#2 mark an #3 reverse) 
    user.qry(400,700);
    recycle.dump();
end user.main;
[ "start" ]
#RECYCLE [  0]     X_0 := sql.mvc();
#RECYCLE [  1]     X_1 := sql.tid(1,"sys","tbl");
#RECYCLE [  2]     X_4 := sql.bind(1,"sys","tbl","col",0);
#RECYCLE [  3]     X_7 := algebra.subselect(<tmp_1034>,<tmp_1033>,100,120,true,true,false);
#REUSED  [  0]       m := sql.mvc();
#REUSED  [  1]       x:bat[:oid,:oid]  := sql.tid(m,"sys","tbl");
#REUSED  [  2]       b:bat[:oid,:int]  := sql.bind(m,"sys","tbl","col",0);
#RECYCLEcleanCache:Fresh-protected 898515 leaves:  3(898472) 	
#RECYCLEcleanCache: policy=PROFIT usedmem=12000
#Target memory 12000KB Available 16741151008KB
#Candidates for eviction
#LRU		Ticks	Life	SZ	Cnt	Wgt	Ben	Prof)
#  3 257359	56	 257.30	 12000	  1	  0.1
#Evicted 1 instruction(s) 
#3	=#  3     X_7:BAT  := algebra.subselect(<tmp_1034>,<tmp_1033>,100,120,true,true,false);#  3 _7:BAT := ALGsubselect2(_4:BAT, _1:BAT, _8:int, _9:int, _10:bit, _10:bit, _11:bit) {GR}
#RECYCLE [  3]     X_7 := algebra.subselect(<tmp_1034>,<tmp_1033>,700,710,true,true,false);
#RECYCLER  CATALOG admission ADM_ALL
#CACHE= policy PROFIT limit= 4 
#RESOURCES hard stmt = 20000 hard var = 100000 hard mem=16741163008
#recycled = 2 incache= 4 executed = 5499 memory(KB)= 12000 PersBat memory=0
#Cache search time= 0(usec)
# CL	   lru		cnt	 ticks	 rd	 wr	 Instr
#        0	898516	2	46	0	0	    X_0 := sql.mvc();
#        1	898525	2	16351	8000	0	    X_1 := sql.tid(1,"sys","tbl");
#        2	898536	2	15620	4000	0	    X_4 := sql.bind(1,"sys","tbl","col",0);
#        3	898547	1	61	88	12000	    X_7 := algebra.subselect(<tmp_1034>,<tmp_1033>,700,710,true,true,false);
#REUSED  [  0]       m := sql.mvc();
#REUSED  [  1]       x:bat[:oid,:oid]  := sql.tid(m,"sys","tbl");
#REUSED  [  2]       b:bat[:oid,:int]  := sql.bind(m,"sys","tbl","col",0);
#RECYCLEcleanCache:Fresh-protected 898720 leaves:  3(898547) 	
#RECYCLEcleanCache: policy=PROFIT usedmem=12000
#Target memory 12000KB Available 16741151008KB
#Candidates for eviction
#LRU		Ticks	Life	SZ	Cnt	Wgt	Ben	Prof)
#  3 257452	62	 257.64	 12000	  1	  0.1
#Evicted 1 instruction(s) 
#3	=#  3     X_7:BAT  := algebra.subselect(<tmp_1034>,<tmp_1033>,700,710,true,true,false);#  3 _7:BAT := ALGsubselect2(_4:BAT, _1:BAT, _8:int, _9:int, _10:bit, _10:bit, _11:bit) {GR}
#RECYCLE [  3]     X_7 := algebra.subselect(<tmp_1034>,<tmp_1033>,400,700,true,true,false);
#RECYCLER  CATALOG admission ADM_ALL
#CACHE= policy PROFIT limit= 4 
#RESOURCES hard stmt = 20000 hard var = 100000 hard mem=16741163008
#recycled = 4 incache= 4 executed = 5509 memory(KB)= 12000 PersBat memory=0
#Cache search time= 0(usec)
# CL	   lru		cnt	 ticks	 rd	 wr	 Instr
#    1	730063	3	799	1	4	    _1 := user.bind("schema","table","column",0);
#    2	729919	1	43	4	1	    _6 := algebra.select(<tmp_20>,100,120);
#    3	729971	1	17	4	1	    _10 := algebra.select(<tmp_20>,700,710);
#    4	729983	1	11	1	1	    _13 := algebra.mark(<tmp_23>,0@0);
#    5	729988	1	5	1	1	    _14 := bat.reverse(<tmp_24>);
#    6	730097	1	34	4	2	    _15 := algebra.select(<tmp_20>,400,700);
#    7	730121	1	24	2	1	    _17 := algebra.mark(<tmp_25>,0@0);
#    8	730136	1	15	1	1	    _18 := bat.reverse(<tmp_26>);

# 15:54:58 >  
# 15:54:58 >  Done.
# 15:54:58 >  

