stdout of test 'tst907` in directory 'monetdb5/mal` itself:


# 08:01:38 >  
# 08:01:38 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst907.mal </dev/null
# 08:01:38 >  

# MonetDB 5 server v11.22.0
# This is an unreleased version
# Serving database 'mTests_monetdb5_mal', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.589 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.da.cwi.nl:30001/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-11334/.s.monetdb.30001
# MonetDB/GIS module loaded
# Start processing logs sql/sql_logs version 52200
# Start reading the write-ahead log 'sql_logs/sql/log.4'
# Finished reading the write-ahead log 'sql_logs/sql/log.4'
# Finished processing logs sql/sql_logs
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.
#WARNING To speedup user.three a bulk operator implementation is needed
#    z:bat[:oid,:int] := mal.multiplex("user":str,"three":str,b:any,2:int,3:int);
#WARNING To speedup user.three a bulk operator implementation is needed
#WARNING To speedup user.one a bulk operator implementation is needed
#WARNING To speedup user.pow a bulk operator implementation is needed
#    z:bat[:oid,:int] := mal.multiplex("user":str,"pow":str,b:bat[:oid,:int],2:int);

# 22:45:40 >  
# 22:45:40 >  "mclient" "-lmal" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-7101" "--port=34631"
# 22:45:40 >  

function user.foo():void;               	#[0]  0 
    k:int := user.one(1:int);           	#[1]  1 <- 2 
    l:int := user.three(1:int,2:int,3:int);	#[2]  3 <- 2 4 5 
    p:int := user.pow(1:int,2:int);     	#[3]  6 <- 2 4 
    b:bat[:oid,:int] := bat.new(:oid,:int);	#[4] CMDBATnew 7 <- 8 9 
    bat.append(b:bat[:oid,:int],1:int); 	#[5] BKCappend_val_wrap 10 <- 7 2 
    io.print("do multiplex three test":str);	#[6] IOprint_val 11 <- 12 
    X_23:bat[:oid,:int] := bat.new(nil:oid,nil:int);	#[7] CMDBATnew 23 <- 24 25 
barrier (X_27:oid,X_28:int) := iterator.new(b:bat[:oid,:int]);	#[8] ITRbunIterator 27 28 <- 7 
    X_30:int := user.three(X_28:int,2:int,3:int);	#[9]  30 <- 28 4 5 
    bat.append(X_23:bat[:oid,:int],X_30:int);	#[10] BKCappend_val_wrap 31 <- 23 30 
    redo (X_27:oid,X_28:int) := iterator.next(b:bat[:oid,:int]);	#[11] ITRbunNext 27 28 <- 7 
exit (X_27:oid,X_28:int);               	#[12]  27 28 
    z:bat[:oid,:int] := X_23:bat[:oid,:int];	#[13]  13 <- 23 
    io.print("do multiplex one test":str);	#[14] IOprint_val 16 <- 17 
    X_35:bat[:oid,:int] := bat.new(nil:oid,nil:int);	#[15] CMDBATnew 35 <- 24 25 
barrier (X_37:oid,X_38:int) := iterator.new(b:bat[:oid,:int]);	#[16] ITRbunIterator 37 38 <- 7 
    X_40:int := user.one(X_38:int);     	#[17]  40 <- 38 
    bat.append(X_35:bat[:oid,:int],X_40:int);	#[18] BKCappend_val_wrap 41 <- 35 40 
    redo (X_37:oid,X_38:int) := iterator.next(b:bat[:oid,:int]);	#[19] ITRbunNext 37 38 <- 7 
exit (X_37:oid,X_38:int);               	#[20]  37 38 
    z:bat[:oid,:int] := X_35:bat[:oid,:int];	#[21]  13 <- 35 
    io.print("do multiplex pow test":str);	#[22] IOprint_val 19 <- 20 
    X_45:bat[:oid,:int] := bat.new(nil:oid,nil:int);	#[23] CMDBATnew 45 <- 24 25 
barrier (X_47:oid,X_48:int) := iterator.new(b:bat[:oid,:int]);	#[24] ITRbunIterator 47 48 <- 7 
    X_50:int := user.pow(X_48:int,2:int);	#[25]  50 <- 48 4 
    bat.append(X_45:bat[:oid,:int],X_50:int);	#[26] BKCappend_val_wrap 51 <- 45 50 
    redo (X_47:oid,X_48:int) := iterator.next(b:bat[:oid,:int]);	#[27] ITRbunNext 47 48 <- 7 
exit (X_47:oid,X_48:int);               	#[28]  47 48 
    z:bat[:oid,:int] := X_45:bat[:oid,:int];	#[29]  13 <- 45 
    io.print(z:bat[:oid,:int]);         	#[30] IOprint_val 22 <- 13 
end user.foo;                           	#[31]  
[ 1 ]
[ 1 ]
[ "do multiplex three test" ]
[ 1 ]
[ "do multiplex one test" ]
[ 1 ]
[ "do multiplex pow test" ]
#-----------------#
# h	tmp_5	  # name
# int	int	  # type
#-----------------#
[ 0@0,	  2	  ]

# 08:01:38 >  
# 08:01:38 >  Done.
# 08:01:38 >  

