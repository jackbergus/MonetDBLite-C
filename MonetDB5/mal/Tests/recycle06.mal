# Test of LRU cache policy in limited cache (10 lines, 1 is always taken by fake 0)
module sql;
function sql.mvc():int;
    return mvc:=1;
end mvc; 
    
function sql.tid(mvc:int,s:str,t:str):bat[:oid,:oid];
b:= bat.new(:oid,:oid);
barrier i:= 0:oid;
	bat.append(b,i);
	redo i:= iterator.next(1:oid,1000:oid);
exit i;
    return tid:= b;
end tid;

function sql.bind(s:str,t:str,c:str,i:int):bat[:oid,:int];
b:= bat.new(:oid,:int);
barrier i:= 0:int;
	bat.append(b,i);
	redo i:= iterator.next(1:int,1000:int);
exit i;
return bind:=b;
end bind;

function qry(low:int, hgh:int);
    m:= sql.mvc();
    x:bat[:oid,:oid]  := sql.tid(m,"sys","tbl");
    b:bat[:oid,:int]:= sql.bind(m,"sys","tbl","col",0);
    s1:= algebra.subselect(b,x,low,hgh,true,true,false);
end qry;

recycle.setCachePolicy(9,10,0.5);
optimizer.recycler("user","qry");

io.print("start");
qry(100,120);
qry(700,710);
recycle.dump();
# The next query should evict the oldest leaf (CL #3 reverse)
qry(400,700);
recycle.dump();
