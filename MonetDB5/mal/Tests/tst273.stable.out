stdout of test 'tst273` in directory 'src/mal` itself:


# 08:45:19 >  
# 08:45:19 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=30797 --set monet_prompt= --trace --dbname=mTests_src_mal  tst273.mal < /dev/null
# 08:45:19 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information
## the multiplex code blocks.
#
#t0:= alarm.usec();
#b:= bat.new(:oid,:lng);
#barrier (go,i):= language.newRange(0:lng);
#	k:= mmath.rand();
#	l:= calc.lng(k);
#	bat.insert(b,nil:oid,l);
#	redo (go,i):= language.nextElement(1:lng,10000:lng);
#exit (go,i);
#
#profiler.setFilter(b);
#profiler.startMonitor();
#io.printf("#monitor \n");
#mx:= aggr.max(b); 
#(clk,rdbytes,wrbytes):= profiler.getEvent();
#io.printf("# clk %d\n",clk);
#io.printf("# rdbytes %d\n",rdbytes);
#io.printf("# wrbytes %d\n",wrbytes);
#io.printf("#max %d\n",mx);
#algebra.select(b,nil:lng,mx); 
#(clk,rdbytes,wrbytes):= profiler.getEvent();
#io.printf("# clk %d\n",clk);
#io.printf("# rdbytes %d\n",rdbytes);
#io.printf("# wrbytes %d\n",wrbytes);
#algebra.select(b,mx,nil:lng); 
#(clk,rdbytes,wrbytes):= profiler.getEvent();
#io.printf("# clk %d\n",clk);
#io.printf("# rdbytes %d\n",rdbytes);
#io.printf("# wrbytes %d\n",wrbytes);
#d:= mmath.sin(0.2:dbl);
#(clk,rdbytes,wrbytes):= profiler.getEvent();
#io.printf("# clk %d\n",clk);
#io.printf("# rdbytes %d\n",rdbytes);
#io.printf("# wrbytes %d\n",wrbytes);
#profiler.stopMonitor();
#
function user.main():void;
# the multiplex code blocks. 
    t0 := alarm.usec();
    b := bat.new(:oid,:lng);
barrier (go,i) := language.newRange(0:lng);
    k := mmath.rand();
    l := calc.lng(k);
    bat.insert(b,nil:oid,l);
    redo (go,i) := language.nextElement(1:lng,10000:lng);
exit (go,i);
    profiler.setFilter(b);
    profiler.start();
    io.printf("#monitor \n");
    mx := aggr.max(b);
    (clk,rdbytes,wrbytes) := profiler.getEvent();
    io.printf("# clk %d\n",clk);
    io.printf("# rdbytes %d\n",rdbytes);
    io.printf("# wrbytes %d\n",wrbytes);
    io.printf("#max %d\n",mx);
    algebra.select(b,nil:lng,mx);
    (clk,rdbytes,wrbytes) := profiler.getEvent();
    io.printf("# clk %d\n",clk);
    io.printf("# rdbytes %d\n",rdbytes);
    io.printf("# wrbytes %d\n",wrbytes);
    algebra.select(b,mx,nil:lng);
    (clk,rdbytes,wrbytes) := profiler.getEvent();
    io.printf("# clk %d\n",clk);
    io.printf("# rdbytes %d\n",rdbytes);
    io.printf("# wrbytes %d\n",wrbytes);
    d := mmath.sin(0.20000000298023224:dbl);
    (clk,rdbytes,wrbytes) := profiler.getEvent();
    io.printf("# clk %d\n",clk);
    io.printf("# rdbytes %d\n",rdbytes);
    io.printf("# wrbytes %d\n",wrbytes);
    profiler.stop();
end main;
# Start performance profiling
#monitor 
# clk 225
# rdbytes 0
# wrbytes 160000
#max 2147469841
# clk 2156
# rdbytes 160000
# wrbytes 160000
# clk 147
# rdbytes 16
# wrbytes 160000
# clk 0
# rdbytes 0
# wrbytes 0

# 08:45:20 >  
# 08:45:20 >  Done.
# 08:45:20 >  

