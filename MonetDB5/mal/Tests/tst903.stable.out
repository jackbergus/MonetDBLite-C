stdout of test 'tst903` in directory 'mal` itself:


# 08:19:07 >  
# 08:19:07 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=46963 --set sql_port=59214 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst903.mal </dev/null
# 08:19:07 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## the multiplex code blocks.
#
#b:= new(:void,:lng);
#barrier (go,i):= newRange(0:lng);
#	k:= rand();
#	l:= lng(k);
#	insert(b,nil,l);
#	redo (go,i):= nextElement(1:lng,1000000:lng);
#exit (go,i);
#
##setReadMode(b);
#mx:= max(b); 
##printf("max %d",mx);
#mi:= min(b); 
##printf(" min %d\n",mi);
#t0:= alarm.usec();
#c:= copy(b);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#copy %d",d0);
#cnt:= count(c);
#printf("#count %d\n",cnt);
#t0:= alarm.usec();
#z:= select(b,25:lng,25:lng);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select none %d",d0);
#cnt:= count(z);
#printf(" count %d\n",cnt);
#t0:= alarm.usec();
#z2:= select(b,mi,mx);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select all %d",d0);
#cnt:= count(z2);
#printf(" count %d\n",cnt);
#rng:= mx-mi;
#r2:= rng/20;
#r3:= mi+r2;
#t0:= alarm.usec();
#z3:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.05 %d",d0);
#cnt:= count(z3);
#printf(" count %d\n",cnt);
#r2:= rng/10;
#r3:= mi+r2;
#t0:= alarm.usec();
#z4:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.1 %d",d0);
#cnt:= count(z4);
#printf(" count %d\n",cnt);
#r2:= rng/5;
#r3:= mi+r2;
#t0:= alarm.usec();
#z5:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.2 %d",d0);
#cnt:= count(z5);
#printf(" count %d\n",cnt);
#r3:= r3+r2;
#t0:= alarm.usec();
#z6:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.4 %d",d0);
#cnt:= count(z6);
#printf(" count %d\n",cnt);
#r3:= r3+r2;
#t0:= alarm.usec();
#z7:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.6 %d",d0);
#cnt:= count(z7);
#printf(" count %d\n",cnt);
#r3:= r3+r2;
#t0:= alarm.usec();
#z8:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.8 %d",d0);
#cnt:= count(z8);
#printf(" count %d\n",cnt);
#r3:= r3+r2;
#t0:= alarm.usec();
#z9:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 1.0 %d",d0);
#cnt:= count(z9);
#printf(" count %d\n",cnt);
#t0:= alarm.usec();
#sr:= reverse(b);
#s:= sort(sr);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#tail sort %d",d0);
#cnt:= count(s);
#printf(" count %d\n",cnt);
#cnt:= count(z9);
#t0:= alarm.usec();
#x:= multiplex.script("+",b,c);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#multiplex.script(+) %d\n",d0);
#t0:= alarm.usec();
#x:= multiplex.tactics("+",b,c);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#multiplex.tactics(+) %d\n",d0);
#
function user.main():void;
# the multiplex code blocks. 
    t0 := alarm.usec();
    b := bat.new(:oid,:lng);
    INT_MAX := 2147483647;
    dbgmsk_restore := mdb.getDebug();
    dbgmsk_unset := calc.+(8,8388608);
    dbgmsk_keep := calc.xor(INT_MAX,dbgmsk_unset);
    dbgmsk_set := calc.and(dbgmsk_restore,dbgmsk_keep);
    mdb.setDebug(dbgmsk_set);
barrier (go,i) := language.newRange(0:lng);
    k := mmath.rand();
    l := calc.lng(k);
    bat.insert(b,nil:oid,l);
    redo (go,i) := language.nextElement(1:lng,1000000:lng);
exit (go,i);
    mdb.setDebug(dbgmsk_restore);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#loop %d\n",d0);
#setReadMode(b); 
    mx := aggr.max(b);
#io.printf("max %d",mx); 
    mi := aggr.min(b);
#io.printf(" min %d\n",mi); 
    t0 := alarm.usec();
    c := algebra.copy(b);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#copy %d ",d0);
    cnt := aggr.count(c);
    io.printf("count %d\n",cnt);
    t0 := alarm.usec();
    z := algebra.select(b,25:lng,25:lng);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#select none %d",d0);
    cnt := aggr.count(z);
    io.printf(" count %d\n",cnt);
    t0 := alarm.usec();
    z2 := algebra.select(b,mi,mx);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#select all %d",d0);
    cnt := aggr.count(z2);
    io.printf(" count %d\n",cnt);
    rng := calc.-(mx,mi);
    r2 := calc./(rng,20);
    r3 := calc.+(mi,r2);
    t0 := alarm.usec();
    z3 := algebra.select(b,mi,r3);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#select 0.05 %d",d0);
    cnt := aggr.count(z3);
    io.printf(" count %d\n",cnt);
    r2 := calc./(rng,10);
    r3 := calc.+(mi,r2);
    t0 := alarm.usec();
    z4 := algebra.select(b,mi,r3);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#select 0.1 %d",d0);
    cnt := aggr.count(z4);
    io.printf(" count %d\n",cnt);
    r2 := calc./(rng,5);
    r3 := calc.+(mi,r2);
    t0 := alarm.usec();
    z5 := algebra.select(b,mi,r3);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#select 0.2 %d",d0);
    cnt := aggr.count(z5);
    io.printf(" count %d\n",cnt);
    r3 := calc.+(r3,r2);
    t0 := alarm.usec();
    z6 := algebra.select(b,mi,r3);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#select 0.4 %d",d0);
    cnt := aggr.count(z6);
    io.printf(" count %d\n",cnt);
    r3 := calc.+(r3,r2);
    t0 := alarm.usec();
    z7 := algebra.select(b,mi,r3);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#select 0.6 %d",d0);
    cnt := aggr.count(z7);
    io.printf(" count %d\n",cnt);
    r3 := calc.+(r3,r2);
    t0 := alarm.usec();
    z8 := algebra.select(b,mi,r3);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#select 0.8 %d",d0);
    cnt := aggr.count(z8);
    io.printf(" count %d\n",cnt);
    r3 := calc.+(r3,r2);
    t0 := alarm.usec();
    z9 := algebra.select(b,mi,r3);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#select 1.0 %d",d0);
    cnt := aggr.count(z9);
    io.printf(" count %d\n",cnt);
    t0 := alarm.usec();
    sr := bat.reverse(b);
    s := algebra.sort(sr);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#head sort %d",d0);
    cnt := aggr.count(s);
    io.printf(" count %d\n",cnt);
    cnt := aggr.count(z9);
    mdb.setDebug(dbgmsk_set);
    t0 := alarm.usec();
    _99 := bat.new(nil:oid,nil:lng);
barrier (_103,_104,_105) := bat.newIterator(b);
    _107 := algebra.find(c,_104);
    _109 := calc.+(_105,_107);
    bat.insert(_99,_104,_109);
    redo (_103,_104,_105) := bat.hasMoreElements(b);
exit (_103,_104,_105);
    x:bat[:oid,:lng]  := _99;
    t1 := alarm.usec();
    mdb.setDebug(dbgmsk_restore);
    d0 := calc.-(t1,t0);
    io.printf("#mal.multiplex(+) %d\n",d0);
    t0 := alarm.usec();
    x:bat[:oid,:lng]  := batcalc.+(b,c);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#batcalc.+() %d\n",d0);
end main;
#loop 2129030
#copy 13206 count 1000000
#select none 122669 count 0
#select all 25802 count 1000000
#select 0.05 14246 count 50163
#select 0.1 15942 count 99610
#select 0.2 20860 count 199706
#select 0.4 30991 count 399110
#select 0.6 39578 count 599486
#select 0.8 57251 count 800136
#select 1.0 22577 count 999999
#head sort 316925 count 1000000
#mal.multiplex(+) 2910647
#batcalc.+() 6612

# 08:19:33 >  
# 08:19:33 >  Done.
# 08:19:33 >  

