stdout of test 'tst830` in directory 'monetdb5/mal` itself:


# 08:49:52 >  
# 08:49:52 >   mserver5 "--config=/ufs/mk/monet5//Linux/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm"    --set mapi_open=true --set xrpc_open=true --set mapi_port=35798 --set xrpc_port=44801 --set monet_prompt= --trace  --dbname=mTests_src_mal  /ufs/mk/monet5/Linux/mTests/src/mal/tst830.mal
# 08:49:52 >  

# MonetDB server v5.13.0, based on kernel v1.31.0
# Serving database 'mTests_src_mal', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.da.cwi.nl:37997/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-13998/.s.monetdb.37997
# MonetDB/GIS module loaded
# Start processing logs sql/sql_logs version 52200
# Start reading the write-ahead log 'sql_logs/sql/log.4'
# Finished reading the write-ahead log 'sql_logs/sql/log.4'
# Finished processing logs sql/sql_logs
# MonetDB/SQL module loaded
function user.foo():void;
    pw := clients.backendsum("Pmonetdb");
    id := clients.addUser("monetdb",pw);
catch MALException:str;
    io.printf("0: %s\n",MALException);
exit MALException:str;
# should print 1@0 or something 
    id := clients.addUser("test",pw);
    io.print(id);
# this should work also 
    id := clients.addUser("checkpoint",pw);
    io.print(id);
# do a simple listing of users known 
    (u,n) := clients.getUsers();
    io.print(u,n);
# should work, we're the admin here 
    clients.removeUser("checkpoint");
# do a simple listing of users known 
    (u,n) := clients.getUsers();
    io.print(u,n);
# forcefully set the password of the user test 
    clients.setPassword("test",pw);
# now try to set the password for ourself, should fail 
    clients.setPassword("monetdb",pw);
catch InvalidCredentialsException:str;
    io.printf("1: %s\n",InvalidCredentialsException);
exit InvalidCredentialsException:str;
# all should fail 
    clients.checkPermission("monetdb","Pmonetdb");
catch InvalidCredentialsException:str;
    io.printf("3: %s\n",InvalidCredentialsException);
    InvalidCredentialsException:str := nil:str;
exit InvalidCredentialsException:str;
    clients.checkPermission("monetdb","x");
catch InvalidCredentialsException:str;
    io.printf("4: %s\n",InvalidCredentialsException);
    InvalidCredentialsException:str := nil:str;
exit InvalidCredentialsException:str;
    clients.checkPermission("x","Pmonetdb");
catch InvalidCredentialsException:str;
    io.printf("5: %s\n",InvalidCredentialsException);
    InvalidCredentialsException:str := nil:str;
exit InvalidCredentialsException:str;
end user.foo;
function user.main():void;
# a simple functional test for the access control table 
# this should fail, the monetdb user is already there 
    user.foo();
end user.main;
0: MALException:addUser:user 'monetdb' already exists
[ 1@0 ]
[ 2@0 ]
#--------------------------#
# h	t	t  # name
# void	void	str  # type
#--------------------------#
[ 0@0,	0@0,	"monetdb"  ]
[ 1@0,	1@0,	"test"  ]
[ 2@0,	2@0,	"checkpoint"  ]
#--------------------------#
# h	t	t  # name
# void	void	str  # type
#--------------------------#
[ 0@0,	0@0,	"monetdb"  ]
[ 1@0,	1@0,	"test"  ]
1: InvalidCredentialsException:setPassword:The administrator cannot set its own password, use changePassword instead
3: InvalidCredentialsException:checkCredentials:invalid credentials for user 'monetdb'
4: InvalidCredentialsException:checkCredentials:invalid credentials for user 'monetdb'
5: InvalidCredentialsException:checkCredentials:invalid credentials for user 'x'

# 08:49:53 >  
# 08:49:53 >  Done.
# 08:49:53 >  

