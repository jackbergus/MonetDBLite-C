stdout of test 'tst1201` in directory 'monetdb5/mal` itself:


# 23:31:29 >  
# 23:31:29 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=35239 --set xrpc_port=40860 --set monet_prompt= --trace --dbname=mTests_src_mal  tst1201.mal
# 23:31:29 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information
## Mil compiler Version 1.0)
## Copyright (c) 1993-2001, CWI. All rights reserved.
#
## Predefined code segment
##
###line 531 "/ufs/mk/monet_5-0/src/modules/atoms/monettime.mx"
##module(monettime,alarm);
##
##
##
#lzone:= mtime.timezone("GMT+1");
#mtime.timezone_local(lzone);
###line 535 "/ufs/mk/monet_5-0/src/modules/atoms/monettime.mx"
### test the various ways to create rules
#	rule_jan:= mtime.rule("1st MON from start of JAN@01:15");
##var rule_jan := mtime.rule("1st MON from start of JAN@01:15");
#	rule_mar:= mtime.rule("first WEDNE on or after march 10@01:15");
##var rule_mar := mtime.rule("first WEDNE on or after march 10@01:15");
#	rule_apr:= mtime.rule("last THU on or before aPr 1@01:15");
##var rule_apr := mtime.rule("last THU on or before aPr 1@01:15");
#	rule_may:= mtime.rule("MAY 26@01:15");
##var rule_may := mtime.rule("MAY 26@01:15");
#	rule_jun:= mtime.rule("2nd TUE from end of june@01:15");
##var rule_jun := mtime.rule("2nd TUE from end of june@01:15");
#	rule_jul:= mtime.rule(7,1,1,75);
##var rule_jul := mtime.rule(7,1,1,75);
#	rule_aug:= mtime.rule(8,-1,1,75);
##var rule_aug := mtime.rule(8,-1,1,75);
#	rule_sep:= mtime.rule(9,-10,3,75);
##var rule_sep := mtime.rule(9,-10,3,75);
#	rule_oct:= mtime.rule(10,31,0,75);
##var rule_oct := mtime.rule(10,31,0,75);
#	rule_nov:= mtime.rule(11,-10,-4,75);
##var rule_nov := mtime.rule(11,-10,-4,75);
### nil rules
#	rule_dec:= mtime.rule(12,-31,0,75);
##var rule_dec := mtime.rule(12,-31,0,75);
#	rule_feb:= mtime.rule("first fRiDaY on or after february 30@01:15");
##var rule_feb := mtime.rule("first fRiDaY on or after february 30@01:15");
## 
#	rule_bat:= bat.new(:str,:zrule,10);
##var rule_bat := bat.new(str,rule,10);
#	bat.insert(rule_bat,"jan",rule_jan);
#	bat.insert(rule_bat,"feb",rule_feb);
#	bat.insert(rule_bat,"mar",rule_mar);
#	bat.insert(rule_bat,"apr",rule_apr);
##rule_bat.bat.insert("jan",rule_jan).insert("feb",rule_feb).insert("mar",rule_mar).insert("apr",rule_apr);
#	bat.insert(rule_bat,"may",rule_may);
#	bat.insert(rule_bat,"jun",rule_jun);
#	bat.insert(rule_bat,"jul",rule_jul);
#	bat.insert(rule_bat,"aug",rule_aug);
##rule_bat.bat.insert("may",rule_may).insert("jun",rule_jun).insert("jul",rule_jul).insert("aug",rule_aug);
#	bat.insert(rule_bat,"sep",rule_sep);
#	bat.insert(rule_bat,"oct",rule_oct);
#	bat.insert(rule_bat,"nov",rule_nov);
#	bat.insert(rule_bat,"dec",rule_dec);
##rule_bat.bat.insert("sep",rule_sep).insert("oct",rule_oct).insert("nov",rule_nov).insert("dec",rule_dec);
##
### test the operations on rules
#	ma_a := bat.setColumn(rule_bat,"rule");
##io.print(rule_bat.bat.setColumn("rule"),
#	na_a:bat[:str,:int] := mal.multiplex("mtime","month",rule_bat);
#	oa_a := bat.setColumn(na_a,"month");
##      [month](rule_bat).bat.setColumn("month"),
#	pa_a:bat[:str,:int] := mal.multiplex("mtime","weekday",rule_bat);
#	qa_a := bat.setColumn(pa_a,"weekday");
##      [weekday](rule_bat).bat.setColumn("weekday"),
#	ra_a:bat[:str,:int] := mal.multiplex("mtime","day",rule_bat);
#	sa_a := bat.setColumn(ra_a,"day");
##      [day](rule_bat).bat.setColumn("day"),
#	ta_a:bat[:str,:int] := mal.multiplex("mtime","minutes",rule_bat);
#	ua_a := bat.setColumn(ta_a,"minutes");
#io.print("rule_bat,na_a,pa_a,ra_a,ta_a");
#	va_a := io.print(rule_bat,na_a,pa_a,ra_a,ta_a);
##      [minutes](rule_bat).bat.setColumn("minutes"));
##
#	bat.setColumn(rule_bat,"rule");
##io.print(rule_bat.bat.setColumn("rule"),
#	xa_a:bat[:str,:date] := mal.multiplex("mtime","compute",rule_bat,2001);
#	ya_a := bat.setColumn(xa_a,"2001");
##      [compute](rule_bat, 2001).bat.setColumn("2001"),
#	ab_a:bat[:str,:date] := mal.multiplex("mtime","compute",rule_bat,2001);
#	bb_a:bat[:str,:int] := mal.multiplex("mtime","dayofweek",ab_a);
#	cb_a:bat[:str,:str] := mal.multiplex("mtime","dayname",bb_a);
#	bat.setColumn(cb_a,"2001");
##      [dayname]([dayofweek]([compute](rule_bat, 2001))).bat.setColumn("2001"),
#	eb_a:bat[:str,:date] := mal.multiplex("mtime","compute",rule_bat,1999);
#	bat.setColumn(eb_a,"1999");
##      [compute](rule_bat, 1999).bat.setColumn("1999"),
#	gb_a:bat[:str,:date] := mal.multiplex("mtime","compute",rule_bat,1999);
#	hb_a:bat[:str,:int] := mal.multiplex("mtime","dayofweek",gb_a);
#	ib_a:bat[:str,:str] := mal.multiplex("mtime","dayname",hb_a);
#	bat.setColumn(ib_a,"1999");
##      [dayname]([dayofweek]([compute](rule_bat, 1999))).bat.setColumn("1999"),
#	kb_a:bat[:str,:date] := mal.multiplex("mtime","compute",rule_bat,1992);
#	bat.setColumn(kb_a,"1992");
##      [compute](rule_bat, 1992).bat.setColumn("1992"),
#	mb_a:bat[:str,:date] := mal.multiplex("mtime","compute",rule_bat,1992);
#	nb_a:bat[:str,:int] := mal.multiplex("mtime","dayofweek",mb_a);
#	ob_a:bat[:str,:str] := mal.multiplex("mtime","dayname",nb_a);
#	bat.setColumn(ob_a,"1992");
#io.print("rule_bat,xa_a,cb_a,eb_a,ib_a,kb_a,ob_a");
#	qb_a := io.print(rule_bat,xa_a,cb_a,eb_a,ib_a,kb_a,ob_a);
##      [dayname]([dayofweek]([compute](rule_bat, 1992))).bat.setColumn("1992"));
##
#	rb_a := bat.setColumn(rule_bat,"rule");
##io.print(rule_bat.bat.setColumn("rule"),
#	sb_a:bat[:str,:date] := mal.multiplex("mtime","compute",rule_bat,1572);
#	tb_a := bat.setColumn(sb_a,"1572");
##      [compute](rule_bat, 1572).bat.setColumn("1572"),
#	ub_a:bat[:str,:date] := mal.multiplex("mtime","compute",rule_bat,1572);
#	vb_a:bat[:str,:int] := mal.multiplex("mtime","dayofweek",ub_a);
#	wb_a:bat[:str,:str] := mal.multiplex("mtime","dayname",vb_a);
#	xb_a := bat.setColumn(wb_a,"1572");
##      [dayname]([dayofweek]([compute](rule_bat, 1572))).bat.setColumn("1572"),
#	yb_a:bat[:str,:date] := mal.multiplex("mtime","compute",rule_bat,1);
#	ac_a := bat.setColumn(yb_a,"1");
##      [compute](rule_bat, 1).bat.setColumn("1"),
#	bc_a:bat[:str,:date] := mal.multiplex("mtime","compute",rule_bat,1);
#	cc_a:bat[:str,:int] := mal.multiplex("mtime","dayofweek",bc_a);
#	dc_a:bat[:str,:str] := mal.multiplex("mtime","dayname",cc_a);
#	ec_a := bat.setColumn(dc_a,"1");
##      [dayname]([dayofweek]([compute](rule_bat, 1))).bat.setColumn("1"),
#	fc_a:bat[:str,:date] := mal.multiplex("mtime","compute",rule_bat,-2000);
#	gc_a := bat.setColumn(fc_a,"-2000");
##      [compute](rule_bat, -2000).bat.setColumn("-2000"),
#	hc_a:bat[:str,:date] := mal.multiplex("mtime","compute",rule_bat,-2000);
#	ic_a:bat[:str,:int] := mal.multiplex("mtime","dayofweek",hc_a);
#	jc_a:bat[:str,:str] := mal.multiplex("mtime","dayname",ic_a);
#	kc_a := bat.setColumn(jc_a,"-2000");
#io.print("rule_bat,sb_a,wb_a,yb_a,dc_a,fc_a,jc_a");
#	lc_a := io.print(rule_bat,sb_a,wb_a,yb_a,dc_a,fc_a,jc_a);
##      [dayname]([dayofweek]([compute](rule_bat, -2000))).bat.setColumn("-2000"));
##
##
#
function user.main():void;
# Mil compiler Version 1.0) 
# Copyright (c) 1993-2001, CWI. All rights reserved. 
# Predefined code segment 
##line 531 "/ufs/mk/monet_5-0/src/modules/atoms/monettime.mx" 
#module(monettime,alarm); 
    lzone := mtime.timezone("GMT+01:00");
    mtime.timezone_local(lzone);
##line 535 "/ufs/mk/monet_5-0/src/modules/atoms/monettime.mx" 
## test the various ways to create rules 
    rule_jan := mtime.rule("1st MON from start of JAN@01:15");
#var rule_jan := mtime.rule("1st MON from start of JAN@01:15"); 
    rule_mar := mtime.rule("first WEDNE on or after march 10@01:15");
#var rule_mar := mtime.rule("first WEDNE on or after march 10@01:15"); 
    rule_apr := mtime.rule("last THU on or before aPr 1@01:15");
#var rule_apr := mtime.rule("last THU on or before aPr 1@01:15"); 
    rule_may := mtime.rule("MAY 26@01:15");
#var rule_may := mtime.rule("MAY 26@01:15"); 
    rule_jun := mtime.rule("2nd TUE from end of june@01:15");
#var rule_jun := mtime.rule("2nd TUE from end of june@01:15"); 
    rule_jul := mtime.rule(7,1,7,75);
#var rule_jul := mtime.rule(7,1,7,75); 
    rule_aug := mtime.rule(8,-1,7,75);
#var rule_aug := mtime.rule(8,-1,7,75); 
    rule_sep := mtime.rule(9,-10,2,75);
#var rule_sep := mtime.rule(9,-10,2,75); 
    rule_oct := mtime.rule(10,31,0,75);
#var rule_oct := mtime.rule(10,31,0,75); 
    rule_nov := mtime.rule(11,-10,-3,75);
#var rule_nov := mtime.rule(11,-10,-3,75); 
## nil rules 
    rule_dec := mtime.rule(12,-31,0,75);
#var rule_dec := mtime.rule(12,-31,0,75); 
    rule_feb := mtime.rule("first fRiDaY on or after february 30@01:15");
#var rule_feb := mtime.rule("first fRiDaY on or after february 30@01:15"); 
#  
    rule_bat := bat.new(:oid,:zrule,10);
    rule_nme := bat.new(:oid,:str,10);
#var rule_bat := bat.new(str,rule,10); 
    bat.append(rule_bat,rule_jan);
    bat.append(rule_bat,rule_feb);
    bat.append(rule_bat,rule_mar);
    bat.append(rule_bat,rule_apr);
    bat.append(rule_nme,"jan");
    bat.append(rule_nme,"feb");
    bat.append(rule_nme,"mar");
    bat.append(rule_nme,"apr");
#rule_bat.bat.insert("jan",rule_jan).insert("feb",rule_feb).insert("mar",rule_mar).insert("apr",rule_apr); 
    bat.append(rule_bat,rule_may);
    bat.append(rule_bat,rule_jun);
    bat.append(rule_bat,rule_jul);
    bat.append(rule_bat,rule_aug);
    bat.append(rule_nme,"may");
    bat.append(rule_nme,"jun");
    bat.append(rule_nme,"jul");
    bat.append(rule_nme,"aug");
#rule_bat.bat.append("may",rule_may).insert("jun",rule_jun).insert("jul",rule_jul).insert("aug",rule_aug); 
    bat.append(rule_bat,rule_sep);
    bat.append(rule_bat,rule_oct);
    bat.append(rule_bat,rule_nov);
    bat.append(rule_bat,rule_dec);
    bat.append(rule_nme,"sep");
    bat.append(rule_nme,"oct");
    bat.append(rule_nme,"nov");
    bat.append(rule_nme,"dec");
#rule_bat.bat.insert("sep",rule_sep).insert("oct",rule_oct).insert("nov",rule_nov).insert("dec",rule_dec); 
## test the operations on rules 
    ma_a := bat.setColumn(rule_bat,"rule");
#io.print(rule_bat.bat.setColumn("rule"), 
    na_a:bat[:oid,:int]  := mal.manifold("mtime","month",rule_bat);
    oa_a := bat.setColumn(na_a,"month");
#      [month](rule_bat).bat.setColumn("month"), 
    pa_a:bat[:oid,:int]  := mal.manifold("mtime","weekday",rule_bat);
    qa_a := bat.setColumn(pa_a,"weekday");
#      [weekday](rule_bat).bat.setColumn("weekday"), 
    ra_a:bat[:oid,:int]  := mal.manifold("mtime","day",rule_bat);
    sa_a := bat.setColumn(ra_a,"day");
#      [day](rule_bat).bat.setColumn("day"), 
    ta_a:bat[:oid,:int]  := mal.manifold("mtime","minutes",rule_bat);
    ua_a := bat.setColumn(ta_a,"minutes");
    io.print("rule_bat,na_a,pa_a,ra_a,ta_a");
    va_a := io.print(rule_nme,rule_bat,na_a,pa_a,ra_a,ta_a);
#      [minutes](rule_bat).bat.setColumn("minutes")); 
    bat.setColumn(rule_bat,"rule");
#io.print(rule_bat.bat.setColumn("rule"), 
    xa_a:bat[:oid,:date]  := mal.manifold("mtime","compute",rule_bat,2001);
    ya_a := bat.setColumn(xa_a,"2001");
#      [compute](rule_bat, 2001).bat.setColumn("2001"), 
    ab_a:bat[:oid,:date]  := mal.manifold("mtime","compute",rule_bat,2001);
    bb_a:bat[:oid,:int]  := mal.manifold("mtime","dayofweek",ab_a);
    cb_a:bat[:oid,:str]  := mal.manifold("mtime","dayname",bb_a);
    bat.setColumn(cb_a,"2001");
#      [dayname]([dayofweek]([compute](rule_bat, 2001))).bat.setColumn("2001"), 
    eb_a:bat[:oid,:date]  := mal.manifold("mtime","compute",rule_bat,1999);
    bat.setColumn(eb_a,"1999");
#      [compute](rule_bat, 1999).bat.setColumn("1999"), 
    gb_a:bat[:oid,:date]  := mal.manifold("mtime","compute",rule_bat,1999);
    hb_a:bat[:oid,:int]  := mal.manifold("mtime","dayofweek",gb_a);
    ib_a:bat[:oid,:str]  := mal.manifold("mtime","dayname",hb_a);
    bat.setColumn(ib_a,"1999");
#      [dayname]([dayofweek]([compute](rule_bat, 1999))).bat.setColumn("1999"), 
    kb_a:bat[:oid,:date]  := mal.manifold("mtime","compute",rule_bat,1992);
    bat.setColumn(kb_a,"1992");
#      [compute](rule_bat, 1992).bat.setColumn("1992"), 
    mb_a:bat[:oid,:date]  := mal.manifold("mtime","compute",rule_bat,1992);
    nb_a:bat[:oid,:int]  := mal.manifold("mtime","dayofweek",mb_a);
    ob_a:bat[:oid,:str]  := mal.manifold("mtime","dayname",nb_a);
    bat.setColumn(ob_a,"1992");
    io.print("rule_bat,xa_a,cb_a,eb_a,ib_a,kb_a,ob_a");
    qb_a := io.print(rule_nme,rule_bat,xa_a,cb_a,eb_a,ib_a,kb_a,ob_a);
#      [dayname]([dayofweek]([compute](rule_bat, 1992))).bat.setColumn("1992")); 
    rb_a := bat.setColumn(rule_bat,"rule");
#io.print(rule_bat.bat.setColumn("rule"), 
    sb_a:bat[:oid,:date]  := mal.manifold("mtime","compute",rule_bat,1572);
    tb_a := bat.setColumn(sb_a,"1572");
#      [compute](rule_bat, 1572).bat.setColumn("1572"), 
    ub_a:bat[:oid,:date]  := mal.manifold("mtime","compute",rule_bat,1572);
    vb_a:bat[:oid,:int]  := mal.manifold("mtime","dayofweek",ub_a);
    wb_a:bat[:oid,:str]  := mal.manifold("mtime","dayname",vb_a);
    xb_a := bat.setColumn(wb_a,"1572");
#      [dayname]([dayofweek]([compute](rule_bat, 1572))).bat.setColumn("1572"), 
    yb_a:bat[:oid,:date]  := mal.manifold("mtime","compute",rule_bat,1);
    ac_a := bat.setColumn(yb_a,"1");
#      [compute](rule_bat, 1).bat.setColumn("1"), 
    bc_a:bat[:oid,:date]  := mal.manifold("mtime","compute",rule_bat,1);
    cc_a:bat[:oid,:int]  := mal.manifold("mtime","dayofweek",bc_a);
    dc_a:bat[:oid,:str]  := mal.manifold("mtime","dayname",cc_a);
    ec_a := bat.setColumn(dc_a,"1");
#      [dayname]([dayofweek]([compute](rule_bat, 1))).bat.setColumn("1"), 
    fc_a:bat[:oid,:date]  := mal.manifold("mtime","compute",rule_bat,-2000);
    gc_a := bat.setColumn(fc_a,"-2000");
#      [compute](rule_bat, -2000).bat.setColumn("-2000"), 
    hc_a:bat[:oid,:date]  := mal.manifold("mtime","compute",rule_bat,-2000);
    ic_a:bat[:oid,:int]  := mal.manifold("mtime","dayofweek",hc_a);
    jc_a:bat[:oid,:str]  := mal.manifold("mtime","dayname",ic_a);
    kc_a := bat.setColumn(jc_a,"-2000");
    io.print("rule_bat,sb_a,wb_a,yb_a,dc_a,fc_a,jc_a");
    lc_a := io.print(rule_nme,rule_bat,sb_a,wb_a,yb_a,dc_a,fc_a,jc_a);
#      [dayname]([dayofweek]([compute](rule_bat, -2000))).bat.setColumn("-2000")); 
end main;
[ "rule_bat,na_a,pa_a,ra_a,ta_a" ]
#-----------------------------------------------------------------------------------------------------------------#
# h	t	rule						month	weekday		day	minutes		  # name
# void	str	zrule						int	int		int	int		  # type
#-----------------------------------------------------------------------------------------------------------------#
[ 0@0,	  "jan",  first monday from start of january@01:15,	  1,	  1,		  1,	  75		  ]
[ 1@0,	  "feb",  nil,						  nil,	  nil,		  nil,	  nil		  ]
[ 2@0,	  "mar",  first wednesday on or after march 10@01:15,	  3,	  -3,		  10,	  75		  ]
[ 3@0,	  "apr",  last thursday on or before april 1@01:15,	  4,	  -4,		  -1,	  75		  ]
[ 4@0,	  "may",  may 26@01:15,					  5,	  0,		  26,	  75		  ]
[ 5@0,	  "jun",  second tuesday from end of june@01:15,	  6,	  2,		  -2,	  75		  ]
[ 6@0,	  "jul",  first sunday from start of july@01:15,	  7,	  7,		  1,	  75		  ]
[ 7@0,	  "aug",  first sunday from end of august@01:15,	  8,	  7,		  -1,	  75		  ]
[ 8@0,	  "sep",  10th tuesday from end of september@01:15,	  9,	  2,		  -10,	  75		  ]
[ 9@0,	  "oct",  october 31@01:15,				  10,	  0,		  31,	  75		  ]
[ 10@0,	  "nov",  last wednesday on or before november 10@01:15,  11,	  -3,		  -10,	  75		  ]
[ 11@0,	  "dec",  nil,						  nil,	  nil,		  nil,	  nil		  ]
[ "rule_bat,xa_a,cb_a,eb_a,ib_a,kb_a,ob_a" ]
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------#
# h	t	rule						2001		2001		1999		1999		1992		1992		  # name
# void	str	zrule						date		str		date		str		date		str		  # type
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------#
[ 0@0,	  "jan",  first monday from start of january@01:15,	  2001-01-01,	  "monday",	  1999-01-04,	  "monday",	  1992-01-06,	  "monday"	  ]
[ 1@0,	  "feb",  nil,						  nil,		  nil,		  nil,		  nil,		  nil,		  nil		  ]
[ 2@0,	  "mar",  first wednesday on or after march 10@01:15,	  2001-03-14,	  "wednesday",	  1999-03-10,	  "wednesday",	  1992-03-11,	  "wednesday"	  ]
[ 3@0,	  "apr",  last thursday on or before april 1@01:15,	  2001-03-29,	  "thursday",	  1999-04-01,	  "thursday",	  1992-03-26,	  "thursday"	  ]
[ 4@0,	  "may",  may 26@01:15,					  2001-05-26,	  "saturday",	  1999-05-26,	  "wednesday",	  1992-05-26,	  "tuesday"	  ]
[ 5@0,	  "jun",  second tuesday from end of june@01:15,	  2001-06-19,	  "tuesday",	  1999-06-22,	  "tuesday",	  1992-06-23,	  "tuesday"	  ]
[ 6@0,	  "jul",  first sunday from start of july@01:15,	  2001-07-01,	  "sunday",	  1999-07-04,	  "sunday",	  1992-07-05,	  "sunday"	  ]
[ 7@0,	  "aug",  first sunday from end of august@01:15,	  2001-08-26,	  "sunday",	  1999-08-29,	  "sunday",	  1992-08-30,	  "sunday"	  ]
[ 8@0,	  "sep",  10th tuesday from end of september@01:15,	  2001-07-24,	  "tuesday",	  1999-07-27,	  "tuesday",	  1992-07-28,	  "tuesday"	  ]
[ 9@0,	  "oct",  october 31@01:15,				  2001-10-31,	  "wednesday",	  1999-10-31,	  "sunday",	  1992-10-31,	  "saturday"	  ]
[ 10@0,	  "nov",  last wednesday on or before november 10@01:15,  2001-11-07,	  "wednesday",	  1999-11-10,	  "wednesday",	  1992-11-04,	  "wednesday"	  ]
[ 11@0,	  "dec",  nil,						  nil,		  nil,		  nil,		  nil,		  nil,		  nil		  ]
[ "rule_bat,sb_a,wb_a,yb_a,dc_a,fc_a,jc_a" ]
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------#
# h	t	rule						1572		1572		1		1		-2000		-2000		  # name
# void	str	zrule						date		str		date		str		date		str		  # type
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------#
[ 0@0,	  "jan",  first monday from start of january@01:15,	  1572-01-03,	  "monday",	  1-01-01,	  "monday",	  -2000-01-01,	  "monday"	  ]
[ 1@0,	  "feb",  nil,						  nil,		  nil,		  nil,		  nil,		  nil,		  nil		  ]
[ 2@0,	  "mar",  first wednesday on or after march 10@01:15,	  1572-03-15,	  "wednesday",	  1-03-14,	  "wednesday",	  -2000-03-14,	  "wednesday"	  ]
[ 3@0,	  "apr",  last thursday on or before april 1@01:15,	  1572-03-30,	  "thursday",	  1-03-29,	  "thursday",	  -2000-03-29,	  "thursday"	  ]
[ 4@0,	  "may",  may 26@01:15,					  1572-05-26,	  "friday",	  1-05-26,	  "saturday",	  -2000-05-26,	  "saturday"	  ]
[ 5@0,	  "jun",  second tuesday from end of june@01:15,	  1572-06-20,	  "tuesday",	  1-06-19,	  "tuesday",	  -2000-06-19,	  "tuesday"	  ]
[ 6@0,	  "jul",  first sunday from start of july@01:15,	  1572-07-02,	  "sunday",	  1-07-01,	  "sunday",	  -2000-07-01,	  "sunday"	  ]
[ 7@0,	  "aug",  first sunday from end of august@01:15,	  1572-08-27,	  "sunday",	  1-08-26,	  "sunday",	  -2000-08-26,	  "sunday"	  ]
[ 8@0,	  "sep",  10th tuesday from end of september@01:15,	  1572-07-25,	  "tuesday",	  1-07-24,	  "tuesday",	  -2000-07-24,	  "tuesday"	  ]
[ 9@0,	  "oct",  october 31@01:15,				  1572-10-31,	  "tuesday",	  1-10-31,	  "wednesday",	  -2000-10-31,	  "wednesday"	  ]
[ 10@0,	  "nov",  last wednesday on or before november 10@01:15,  1572-11-08,	  "wednesday",	  1-11-07,	  "wednesday",	  -2000-11-07,	  "wednesday"	  ]
[ 11@0,	  "dec",  nil,						  nil,		  nil,		  nil,		  nil,		  nil,		  nil		  ]

# 23:31:29 >  
# 23:31:29 >  Done.
# 23:31:29 >  

