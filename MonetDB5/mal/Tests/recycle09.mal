# Test of Retain_ADAPT policy 5, 10usec time limit


module sql;
function sql.mvc():int;
    return mvc:=1;
end mvc;

function sql.tid(mvc:int,s:str,t:str):bat[:oid,:oid];
b:= bat.new(:oid,:oid);
barrier i:= 0:oid;
    bat.append(b,i);
    redo i:= iterator.next(1:oid,1000:oid);
exit i;
    return tid:= b;
end tid;

function sql.bind(m:int, s:str,t:str,c:str,i:int):bat[:oid,:int];
b:= bat.new(:oid,:int);
barrier i:= 0:int;
    bat.append(b,i);
    redo i:= iterator.next(1:int,1000:int);
exit i;
return bind:=b;
end bind;

function qry(low:int, hgh:int);
    m:= sql.mvc();
    x:bat[:oid,:oid]  := sql.tid(m,"sys","tbl");
    b:bat[:oid,:int]:= sql.bind(m,"sys","tbl","col",0);
    s1:= algebra.subselect(b,x,low,hgh,true,true,false);
end qry;

function user.batch(n:int);
barrier (go,i):= language.newRange(0:int);
	k:= mmath.rand();
	k1:= calc.dbl(k);
	k2:= mmath.fmod(k1,1000.0:dbl);
	l:= calc.int(k2);
	h:= calc.+(l,10);
	qry(l,h);
	redo (go,i):= language.nextElement(1:int,n:int);
exit (go,i);
end batch;

recycle.setRetainPolicy(5, 2);
recycle.setReusePolicy(1);
recycle.setCachePolicy(1);
optimizer.recycler("user","qry");

io.print("start");
user.batch(30);
recycle.dump();
ser.qry(1,10);
recycle.dump();
