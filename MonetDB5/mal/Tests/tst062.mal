#the number of return arguments does not match spect
function user.l2() ;
    X_3 := sql.mvc();
    X_4:bat[:oid,:oid]  := sql.tid(X_3,"sys","part1");
    X_7:bat[:oid,:dbl]  := sql.bind(X_3,"sys","part1","x",0);
    X_10 := algebra.leftfetchjoin(X_4,X_7);
    X_11:bat[:oid,:dbl]  := sql.bind(X_3,"sys","part1","y",0);
    X_13 := algebra.leftfetchjoin(X_4,X_11);
    X_14:bat[:oid,:dbl]  := sql.bind(X_3,"sys","part1","z",0);
    X_16 := algebra.leftfetchjoin(X_4,X_14);
    return (X_10,X_13,X_16) := (X_10,X_13,X_16);
end l2;

# the variabls X_10, X_13, X_16 are only valid within the parallel block
function user.l1{sqlfunction}() (X_0:bat[:oid,:dbl]{sqlfunction},X_1:bat[:oid,:dbl],X_2:bat[:oid,:dbl]);
barrier X_26 := language.dataflow();    	
    X_3 := sql.mvc();                   	
    X_4:bat[:oid,:oid] := sql.tid(X_3,"sys","part1");	
    X_7:bat[:oid,:dbl] := sql.bind(X_3,"sys","part1","x",0);	
    X_10 := algebra.leftfetchjoin(X_4,X_7);	
    X_11:bat[:oid,:dbl] := sql.bind(X_3,"sys","part1","y",0);	
    X_13 := algebra.leftfetchjoin(X_4,X_11);	
    X_14:bat[:oid,:dbl] := sql.bind(X_3,"sys","part1","z",0);	
    X_16 := algebra.leftfetchjoin(X_4,X_14);	
    language.pass(X_4);                 	
exit X_26;                              	
    return (X_10,X_13,X_16) := (X_10,X_13,X_16);	
end user.l1;

