stdout of test 'tst866` in directory 'monetdb5/mal` itself:


# 16:27:48 >  
# 16:27:48 >   mserver5 "--config=/ufs/mk/current//Linux/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/ufs/mk/current//Linux/lib/MonetDB5:/ufs/mk/current//Linux/lib/MonetDB5/lib:/ufs/mk/current//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/current//Linux/var/MonetDB5/dbfarm"  --set mapi_open=true --set xrpc_open=true --set mapi_port=33217 --set xrpc_port=42120 --set monet_prompt= --set mal_listing=2 --trace  --dbname=mTests_src_mal  tst866.mal
# 16:27:48 >  

# MonetDB server v5.21.0, based on kernel v1.39.0
# Serving database 'mTests_src_mal', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 7.751 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.da.cwi.nl:30001/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-11334/.s.monetdb.30001
# MonetDB/GIS module loaded
# Start processing logs sql/sql_logs version 52200
# Start reading the write-ahead log 'sql_logs/sql/log.4'
# Finished reading the write-ahead log 'sql_logs/sql/log.4'
# Finished processing logs sql/sql_logs
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.

# 12:36:18 >  
# 12:36:18 >  "mclient" "-lmal" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-11334" "--port=30001"
# 12:36:18 >  

function user.foo():void;               	#[0]  0 
    b:bat[:oid,:int] := bat.new(:oid,:int);	#[1] CMDBATnew 1 <- 2 3 
    bat.append(b:bat[:oid,:int],1:int); 	#[2] BKCappend_val_wrap 4 <- 1 5 
    bat.append(b:bat[:oid,:int],2:int); 	#[3] BKCappend_val_wrap 6 <- 1 7 
    bat.append(b:bat[:oid,:int],3:int); 	#[4] BKCappend_val_wrap 8 <- 1 9 
    bat.append(b:bat[:oid,:int],4:int); 	#[5] BKCappend_val_wrap 10 <- 1 11 
    bat.append(b:bat[:oid,:int],5:int); 	#[6] BKCappend_val_wrap 12 <- 1 13 
    bat.append(b:bat[:oid,:int],6:int); 	#[7] BKCappend_val_wrap 14 <- 1 15 
    bat.append(b:bat[:oid,:int],7:int); 	#[8] BKCappend_val_wrap 16 <- 1 17 
    bat.append(b:bat[:oid,:int],8:int); 	#[9] BKCappend_val_wrap 18 <- 1 19 
    bat.append(b:bat[:oid,:int],9:int); 	#[10] BKCappend_val_wrap 20 <- 1 21 
    io.print(b:bat[:oid,:int]);         	#[11] IOprint_val 22 <- 1 
    d:bat[:oid,:oid] := bat.new(:oid,:oid);	#[12] CMDBATnew 23 <- 2 2 
    bat.append(d:bat[:oid,:oid],1@0:oid);	#[13] BKCappend_val_wrap 24 <- 23 25 
    bat.append(d:bat[:oid,:oid],2@0:oid);	#[14] BKCappend_val_wrap 26 <- 23 27 
    bat.append(d:bat[:oid,:oid],7@0:oid);	#[15] BKCappend_val_wrap 28 <- 23 29 
    io.print(d:bat[:oid,:oid]);         	#[16] IOprint_val 30 <- 23 
    s:bat[:oid,:int] := bat.reuse(b:bat[:oid,:int],d:bat[:oid,:oid]);	#[17] BKCreuseBAT 31 <- 1 23 
    io.print(s:bat[:oid,:int]);         	#[18] IOprint_val 32 <- 31 
    so:bat[:oid,:oid] := bat.reuseMap(b:bat[:oid,:int],d:bat[:oid,:oid]);	#[19] BKCreuseBATmap 33 <- 1 23 
    io.print(so:bat[:oid,:oid]);        	#[20] IOprint_val 34 <- 33 
end user.foo;                           	#[21]  
#--------------------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  2	  ]
[ 2@0,	  3	  ]
[ 3@0,	  4	  ]
[ 4@0,	  5	  ]
[ 5@0,	  6	  ]
[ 6@0,	  7	  ]
[ 7@0,	  8	  ]
[ 8@0,	  9	  ]
#-----------------#
# h	t	  # name
# void	oid	  # type
#-----------------#
[ 0@0,	  1@0	  ]
[ 1@0,	  2@0	  ]
[ 2@0,	  7@0	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  9	  ]
[ 2@0,	  7	  ]
[ 3@0,	  4	  ]
[ 4@0,	  5	  ]
[ 5@0,	  6	  ]
#-----------------#
# h	t	  # name
# void	oid	  # type
#-----------------#
[ 0@0,	  0@0	  ]
[ 1@0,	  8@0	  ]
[ 2@0,	6@0  ]
[ 3@0,	  3@0	  ]
[ 4@0,	  4@0	  ]
[ 5@0,	  5@0	  ]

# 16:27:48 >  
# 16:27:48 >  Done.
# 16:27:48 >  

