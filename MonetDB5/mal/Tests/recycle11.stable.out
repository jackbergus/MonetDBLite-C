stdout of test 'recycle11` in directory 'monetdb5/mal` itself:


# 13:47:51 >  
# 13:47:51 >   mserver5 "--config=/export/scratch1/milena/monet.DBG/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/export/scratch1/milena/monet.DBG/lib/MonetDB5:/export/scratch1/milena/monet.DBG/lib/MonetDB5/lib:/export/scratch1/milena/monet.DBG/lib/MonetDB5/bin" --set "gdk_dbfarm=/export/scratch1/milena/monet.DBG/var/MonetDB5/dbfarm" --set "sql_logdir=/export/scratch1/milena/monet.DBG/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=35909 --set xrpc_port=47862 --set monet_prompt= --trace  --dbname=mTests_src_mal  recycle11.mal
# 13:47:51 >  

# MonetDB server v5.7.0, based on kernel v1.25.0
# Serving database 'mTests_src_mal', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.ins.cwi.nl:35049/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-25339/.s.monetdb.35049
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded
function sql.mvc():int;
    return mvc := 1;
end mvc;
function sql.tid(mvc:int,s:str,t:str):bat[:oid,:oid];
    b := bat.new(:oid,:oid);
barrier i := 0@0:oid;
    bat.append(b,i);
    redo i := iterator.next(1@0:oid,11@0:oid);
exit i;
    return tid := b;
end tid;
function sql.bind(mvc:int,s:str,t:str,c:str,i:int):bat[:oid,:int];
    b := bat.new(:oid,:int);
    bat.insert(b,0@0,0);
    bat.insert(b,1@0,1);
    bat.insert(b,2@0,2);
    bat.insert(b,3@0,3);
    bat.insert(b,4@0,4);
    bat.insert(b,5@0,5);
    bat.insert(b,6@0,6);
    bat.insert(b,7@0,7);
    bat.insert(b,8@0,8);
    bat.insert(b,9@0,9);
    bat.insert(b,10@0,10);
    bat.insert(b,11@0,11);
    return bind := b;
end bind;
function sql.qry(low:int,hgh:int):void;
    m := sql.mvc();
    x:bat[:oid,:oid]  := sql.tid(m,"sys","tbl");
    b:bat[:oid,:int]  := sql.bind(m,"sys","tbl","col",0);
    s1 := algebra.subselect(b,x,low,hgh,true,true,false);
    v := calc.+(low,hgh);
    v1 := calc./(v,2);
    v2 := calc.int(v1);
    l2 := calc.+(low,2);
    h2 := calc.-(hgh,2);
    s2 := algebra.subselect(b,x,v2,v2,true,true,false);
    s3 := algebra.subselect(b,x,l2,h2,true,true,false);
    s4 := algebra.subselect(b,x,l2,hgh,true,false,false);
    io.print(s1);
    io.print(s2);
    io.print(s3);
    io.print(s4);
end qry;
#
#
#recycle.setRetainPolicy(1);
#recycle.setReusePolicy(1);
#optimizer.recycle("user","qry");
#
#qry(1,9);
#
#recycle.dump();
#
function user.main():void;
#test the basics of the recycler 
# testing reuse-cover with different selection instructions 
    user.qry(1,9);
    recycle.dump();
end main;
#RECYCLE [  0]     X_0 := sql.mvc();
#RECYCLE [  1]     X_1 := sql.tid(X_0=1,X_2="sys",X_3="tbl");
#RECYCLE [  2]     X_4 := sql.bind(X_0=1,X_2="sys",X_3="tbl",X_5="col",X_6=0);
#RECYCLE [  3]     X_7 := algebra.subselect(X_4=<tmp_1034>,X_1=<tmp_1033>,X_0=1,X_8=9,X_9=true,X_9=true,X_10=false);
#RECYCLE [  4]     X_11 := calc.+(X_0=1,X_8=9);
#RECYCLE [  5]     X_12 := calc./(X_11=10,X_13=2);
#RECYCLE [  6]     X_12 := calc.int(X_12=5);
#RECYCLE [  7]     X_14 := calc.+(X_0=1,X_13=2);
#RECYCLE [  8]     X_15 := calc.-(X_8=9,X_13=2);
#RECYCLE [  9]     X_16 := algebra.subselect(X_4=<tmp_1034>,X_7=<tmpr_1036>,X_12=5,X_12=5,X_9=true,X_9=true,X_10=false);
#REUSED  [  3]       s2 := algebra.subselect(b,x,v2,v2,true,true,false);
#RECYCLE [ 10]     X_17 := algebra.subselect(X_4=<tmp_1034>,X_7=<tmpr_1036>,X_14=3,X_15=7,X_9=true,X_9=true,X_10=false);
#REUSED  [  3]       s3 := algebra.subselect(b,x,l2,h2,true,true,false);
#RECYCLE [ 11]     X_18 := algebra.subselect(X_4=<tmp_1034>,X_7=<tmpr_1036>,X_14=3,X_8=9,X_9=true,X_10=false,X_10=false);
#REUSED  [  3]       s4 := algebra.subselect(b,x,l2,hgh,true,false,false);
#--------------------------#
# t	h  # name
# void	oid  # type
#--------------------------#
[ 0@0,	1@0  ]
[ 1@0,	2@0  ]
[ 2@0,	3@0  ]
[ 3@0,	4@0  ]
[ 4@0,	5@0  ]
[ 5@0,	6@0  ]
[ 6@0,	7@0  ]
[ 7@0,	8@0  ]
[ 8@0,	9@0  ]
#--------------------------#
# t	h  # name
# void	oid  # type
#--------------------------#
[ 0@0,	5@0  ]
#--------------------------#
# t	h  # name
# void	oid  # type
#--------------------------#
[ 0@0,	3@0  ]
[ 1@0,	4@0  ]
[ 2@0,	5@0  ]
[ 3@0,	6@0  ]
[ 4@0,	7@0  ]
#--------------------------#
# t	h  # name
# void	oid  # type
#--------------------------#
[ 0@0,	3@0  ]
[ 1@0,	4@0  ]
[ 2@0,	5@0  ]
[ 3@0,	6@0  ]
[ 4@0,	7@0  ]
[ 5@0,	8@0  ]
#RECYCLER CATALOG cache limit= 5000 cached 12 memory 16741163008 
#MAL recycled = 9 savings= 0(usec) total MAL executed = 1535 memory(KB)= 496 searchtime=1(usec)
# CL	   lru		cnt	 ticks	 rd	 wr	 Instr
#        1	400914	1	69	1	1	    _1 := user.bind("schema","table","column",0);
#        2	401021	4	49	1	1	    _6 := algebra.select(<tmp_20>,1,9,false,false);
#        3	400993	1	21	1	1	    _10 := algebra.select(<tmp_20>,5);
#        4	401010	1	16	1	1	    _12 := algebra.select(<tmp_20>,3,7);
#        5	401027	1	15	1	1	    _15 := algebra.select(<tmp_20>,3,9,true,false);

# 13:47:51 >  
# 13:47:51 >  Done.
# 13:47:51 >  

