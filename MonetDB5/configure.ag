dnl -*- mode: autoconf -*-
dnl vim: ft=config:

# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2010 MonetDB B.V.
# All Rights Reserved.

dnl Process this file with autoconf to produce a configure script.
AC_PREREQ(2.60)
AC_INIT([MonetDB Server], [5.19.0], [monet@cwi.nl], [MonetDB5-server])
#                          ^^^^^
# Maintained via vertoo. Please don't modify by hand!
# Contact MonetDB-developers@lists.sourceforge.net for details and/or assistance.
AC_CONFIG_AUX_DIR(conf)
AC_CANONICAL_HOST
AC_CANONICAL_TARGET
AH_TOP([#include "sysdefs.h"])
AH_BOTTOM([#include "stddef.h"])

dnl ----------------------
dnl We have filenames larger than 99 chars, so use ustar to allow up to
dnl 256 characters.  tar-pax is too young, and might result in problems
dnl on anchient systems.
AM_INIT_AUTOMAKE([tar-ustar])
AC_CONFIG_SRCDIR([src/mal/mal.mx])
AM_CONFIG_HEADER(mal_config.h:conf/config.h.in)
CONFIG_H=mal_config.h
AC_SUBST(CONFIG_H)

HOST=[$target]
AC_DEFINE_UNQUOTED(HOST, "$HOST", [Host identifier])

if test x"$target_os" = xcygwin; then
	AC_DEFINE(WIN32, 1, [Define on MS Windows (also under Cygwin)])
fi

# MONETDB5_BUILD and MONETDB5_SOURCE are *only* used for monetdb5-config
# MONETDB5_SOURCE is the absolute path name of the source directory
# (srcdir can be relative)

# The Q versions of various variables are used in places where \'s
# need to be escapes with an extra \.  Configure does not support \'s
# in path names, so there is no need to do anything special here
# except set the variables.  The command to set them in case we do
# need to escape the \'s is Qvar=`echo "$var" | sed 's/\\\\/\\\\\\\\/g'`
MONETDB5_BUILD=[`pwd`]
AC_SUBST(MONETDB5_BUILD)

MONETDB5_SOURCE=[`(cd $srcdir && pwd)`]
AC_SUBST(MONETDB5_SOURCE)

AM_MONETDB_XQ_VARS_1()


dnl Check for Monet
# Check for Monet 
req_monetdb_ver='1.36.0'
#                ^^^^^^
# Maintained via vertoo. Please don't modify by hand!
# Contact MonetDB-developers@lists.sourceforge.net for details and/or assistance.
AM_MONETDB_COMMON($req_monetdb_ver)
if test "x$have_monetdb" != xyes; then
	if test "x$MONETDB_VERSION" = "x"; then
		AC_MSG_ERROR([MonetDB was not found. MonetDB5 requires at least version $req_monetdb_ver of MonetDB.])
	else
		AC_MSG_ERROR([MonetDB5 requires at least version $req_monetdb_ver of MonetDB, but only version $MONETDB_VERSION was found.])
	fi
fi
req_clients_ver='1.36.0'
#                ^^^^^^
# Maintained via vertoo. Please don't modify by hand!
# Contact MonetDB-developers@lists.sourceforge.net for details and/or assistance.
AM_MONETDB_CLIENTS($req_clients_ver)
AM_MONETDB_DEFAULTS()
AM_MONETDB_COMPILER()
AM_MONETDB_TOOLS()
AM_MONETDB_OPTIONS()
AM_MONETDB_LIBS()

dnl src/modules/mal/mal_mapi.mx does UNIX domain socket handling
AM_MONETDB_MSG_CONTROL()

AM_MONETDB_UTILS()

if test "x$have_pcre" = xno; then
	AC_MSG_ERROR([MonetDB 5 requires PCRE >= $req_pcre_ver with UTF-8 support $why_no_pcre])
fi
if test "x$have_openssl" = xno; then
	AC_MSG_ERROR([MonetDB 5 requires OpenSSL ($why_no_openssl)])
fi

AC_PROG_LIBTOOL

dnl Checks for header files.
AC_HEADER_TIME()
AC_CHECK_HEADERS([crypt.h fcntl.h ieeefp.h malloc.h sys/resource.h sys/socket.h sys/time.h sys/un.h termios.h time.h xmmintrin.h])

dnl Checks for typedefs, structures, and compiler characteristics.
AC_TRY_COMPILE([$ac_includes_default
#include <malloc.h>], [struct mallinfo m;], AC_DEFINE(HAVE_STRUCT_MALLINFO, 1, [Define if you have struct mallinfo])
AC_TRY_COMPILE([$ac_includes_default
#include <malloc.h>], [struct mallinfo m = {0};
/* compilers that don't like <0 comparisons on unsigned data *
 * will fail here (but then not in src/gdk/gdk_utils.mx)     */
int x = (m.usmblks < 0);], AC_DEFINE(HAVE_SIGNED_MALLINFO, 1, [Define if your mallinfo struct has signed elements])
))
AC_CACHE_CHECK(for _sys_siglist, mn_cv_have__sys_siglist, [
AC_TRY_LINK([$ac_includes_default], [printf("%s\n", _sys_siglist[0]);], mn_cv_have__sys_siglist=yes, mn_cv_have__sys_siglist=no)])
if test $mn_cv_have__sys_siglist = yes; then
	AC_DEFINE(HAVE__SYS_SIGLIST, 1, [Define if you have _sys_siglist])
fi

AC_COMPILE_IFELSE(AC_LANG_SOURCE([int foo(int * restrict p) { return *p; }]),
AC_DEFINE(HAVE_RESTRICT, 1, [Define if the compiler supports the restrict keyword]),
AC_COMPILE_IFELSE(AC_LANG_SOURCE([int foo(int * __restrict__ p) { return *p; }]),
AC_DEFINE(HAVE___RESTRICT__, 1, [Define if the compiler supports the __restrict__ keyword])))

dnl Checks for library functions.
AC_SEARCH_LIBS(crypt, crypt, AC_DEFINE(HAVE_CRYPT, 1, [crypt]))
AC_CHECK_FUNCS([asctime_r ctime_r fpclass fpclassify ftime isinf localtime_r putenv sbrk setenv setsid sigaction strncasecmp strcasestr strtoll sysconf strptime strftime])
AC_CHECK_DECLS([strtoll])

asctime_r3=yes
AC_MSG_CHECKING(asctime_r3)
AC_TRY_LINK([$ac_includes_default
#include <time.h>], 
[char buf[26]; struct tm t; asctime_r(&t,buf,26);],
[AC_DEFINE(HAVE_ASCTIME_R3, 1, [Define if you have asctime_r(struct tm*,char *buf,size_t s)])], [asctime_r3=no])
AC_MSG_RESULT($asctime_r3)

ctime_r3=yes
AC_MSG_CHECKING(ctime_r3)
AC_TRY_LINK([$ac_includes_default
#include <time.h>], 
[char buf[26]; time_t t; ctime_r(&t,buf,26);],
[AC_DEFINE(HAVE_CTIME_R3, 1, [Define if you have ctime_r(time_t*,char *buf,size_t s)])], [ctime_r3=no])
AC_MSG_RESULT($ctime_r3)


dnl raptor
RAPTOR_VERSION_REQUIRED_MIN=1.4.16
have_raptor=auto
RAPTOR_CONFIG=''
RAPTOR_INCS=''
RAPTOR_LIBS=''
wrong=''
AC_ARG_WITH(raptor,
	AS_HELP_STRING([--with-raptor=DIR],
		[raptor library is installed in DIR]),
	have_raptor="$withval")
if test "x$have_raptor" != xno; then
	case "$have_raptor" in
	yes|auto)
		XPATH="$PATH"
		;;
	*)
		XPATH="$have_raptor/bin"
		;;
	esac
	AC_PATH_PROG(RAPTOR_CONFIG,raptor-config,,$XPATH)
	if test "x$RAPTOR_CONFIG" = x; then
		wrong="raptor-config could not be found in $XPATH"
		if test "x$have_raptor" != xauto; then
			AC_MSG_ERROR([$wrong])
		fi
		have_raptor=no
	fi
fi
if test "x$have_raptor" != xno; then
	AC_MSG_CHECKING([for raptor >= $RAPTOR_VERSION_REQUIRED_MIN])
	RAPTOR_VERSION="`$RAPTOR_CONFIG --version`"
	if test MONETDB_VERSION_TO_NUMBER(echo $RAPTOR_VERSION) -lt MONETDB_VERSION_TO_NUMBER(echo $RAPTOR_VERSION_REQUIRED_MIN); then
		AC_MSG_RESULT([no, found $RAPTOR_VERSION])
		wrong="raptor version $RAPTOR_VERSION is older than $RAPTOR_VERSION_REQUIRED_MIN"
		if test "x$have_raptor" != xauto; then
			AC_MSG_ERROR([$wrong])
		fi
		have_raptor=no
	else
		AC_MSG_RESULT([yes, found $RAPTOR_VERSION])
	fi
fi
if test "x$have_raptor" != xno; then
	RAPTOR_LIBS="`$RAPTOR_CONFIG --libs`"
	RAPTOR_INCS="`$RAPTOR_CONFIG --cflags`"
	save_CPPFLAGS="$CPPFLAGS"
	CPPFLAGS="$CPPFLAGS $RAPTOR_INCS"
	AC_CHECK_HEADER(raptor.h, AC_DEFINE(HAVE_RAPTOR_H, 1, [Define to 1 if you have the <raptor.h> header file.]),
		if test "x$have_raptor" != xauto; then
			AC_MSG_ERROR([raptor.h could not be found/used])
		fi
		have_raptor=no
	)
	CPPFLAGS="$save_CPPFLAGS"
fi
if test "x$have_raptor" != xno; then
	save_LIBS="$LIBS"
    	LIBS="$LIBS $RAPTOR_LIBS"
    	AC_CHECK_LIB(raptor, raptor_uri_as_string, :,
		if test "x$have_raptor" != xauto; then
			AC_MSG_ERROR([-lraptor could not be found/used])
		fi
		have_raptor=no
	)
    	LIBS="$save_LIBS"
fi
AC_MSG_CHECKING([whether to use raptor for rdf])
if test "x$have_raptor" = xno; then
	AC_MSG_RESULT([no])
else
	AC_MSG_RESULT([yes])
fi
AC_SUBST(RAPTOR_INCS)
AC_SUBST(RAPTOR_LIBS)
AM_CONDITIONAL(HAVE_RAPTOR, test x"$have_raptor" != xno)

have_libxml2="auto"
AC_ARG_WITH(libxml2,
    AS_HELP_STRING([--with-libxml2=DIR],[libxml2 library is installed in DIR]),
    [have_libxml2="$withval"], [have_libxml2="auto"])
if test "x$have_libxml2" != xno; then
    XML2_CONFIG=""
    XPATH="$PATH"
    case "$have_libxml2" in
    auto|yes)
	;;
    *)
	XPATH="$have_libxml2/bin"
	;;
    esac

    AC_PATH_PROG(XML2_CONFIG,xml2-config.${bits},,$XPATH)
    if test "x$XML2_CONFIG" = x; then
        AC_PATH_PROG(XML2_CONFIG,xml2-${bits}-config,,$XPATH)
        if test "x$XML2_CONFIG" = x; then
            AC_PATH_PROG(XML2_CONFIG,xml2-config,,$XPATH)
        fi
    fi

    if test "x$XML2_CONFIG" != x; then
        LIBXML2_CFLAGS="`$XML2_CONFIG --cflags`"
        LIBXML2_LIBS="`$XML2_CONFIG --libs`"
    else
	case "$have_libxml2" in
	auto|no|yes)
	    ;;
	*)
	    LIBXML2_CFLAGS="-I$have_libxml2/include"
	    LIBXML2_LIBS="-L$have_libxml2/lib"
	    ;;
	esac
    fi
    if test "x$have_libxml2" != xno; then
	save_CPPFLAGS="$CPPFLAGS"
	save_LDFLAGS="$LDFLAGS"
	CPPFLAGS="$CPPFLAGS $LIBXML2_CFLAGS"
	LDFLAGS="$LDFLAGS $LIBXML2_LIBS"
	AC_CHECK_HEADER(libxml/parser.h,
		AC_CHECK_LIB(xml2, xmlParseMemory,
			AC_DEFINE(HAVE_LIBXML2, 1, [Define if you have the libxml2 library])
			have_libxml2=yes,
			[ if test "x$have_libxml2" != xauto; then AC_MSG_ERROR([-lxml2 library not found]); fi; have_libxml2=no ]),
		[ if test "x$have_libxml2" != xauto; then AC_MSG_ERROR([libxml/parser.h header not found]); fi; have_libxml2=no ])
	LDFLAGS="$save_LDFLAGS"
	CPPFLAGS="$save_CPPFLAGS"
    fi
fi
AC_SUBST(LIBXML2_CFLAGS, $LIBXML2_CFLAGS)
AC_SUBST(LIBXML2_LIBS, $LIBXML2_LIBS)
AM_CONDITIONAL(HAVE_LIBXML2, test x"$have_libxml2" != xno)

have_sphinxclient="auto"
AC_ARG_WITH(sphinxclient,
    AS_HELP_STRING([--with-sphinxclient=DIR],[sphinxclient library is installed in DIR]),
    [have_sphinxclient="$withval"], [have_sphinxclient="auto"])
if test "x$have_sphinxclient" != xno; then
	case "$have_sphinxclient" in
	auto|yes)
	    ;;
	*)
	    SPHINXCLIENT_CFLAGS="-I$have_sphinxclient/include"
	    SPHINXCLIENT_LIBS="-L$have_sphinxclient/lib -lsphinxclient"
	    ;;
	esac

	save_CPPFLAGS="$CPPFLAGS"
	save_LDFLAGS="$LDFLAGS"
	CPPFLAGS="$CPPFLAGS $SPHINXCLIENT_CFLAGS"
	LDFLAGS="$LDFLAGS $SPHINXCLIENT_LIBS"
	AC_CHECK_HEADER(sphinxclient.h,
		AC_CHECK_LIB(sphinxclient, sphinx_create,
			AC_DEFINE(HAVE_SPHINXCLIENT, 1, [Define if you have the sphinxclient library])
			have_sphinxclient=yes,
			[ if test "x$have_sphinxclient" != xauto; then AC_MSG_ERROR([-lsphinxclient library not found]); fi; have_sphinxclient=no ]),
		[ if test "x$have_sphinxclient" != xauto; then AC_MSG_ERROR([sphinxclient.h header not found]); fi; have_sphinxclient=no ])
	LDFLAGS="$save_LDFLAGS"
	CPPFLAGS="$save_CPPFLAGS"
fi
AC_SUBST(SPHINXCLIENT_CFLAGS, $SPHINXCLIENT_CFLAGS)
AC_SUBST(SPHINXCLIENT_LIBS, $SPHINXCLIENT_LIBS)
AM_CONDITIONAL(HAVE_SPHINXCLIENT, test x"$have_sphinxclient" != xno)

dnl RIPEMD160 is patent free, academic and European, but unfortunately
dnl can't use it by default, as that would exclude JDBC usage (Java
dnl doesn't natively support RIPEMD160).
MONETDB5_PASSWDHASH="SHA512"
AC_ARG_WITH(password-backend,
	AS_HELP_STRING([--with-password-backend=HASHALG],
		[password hash algorithm, one of MD5, SHA1, RIPEMD160, SHA224, SHA256, SHA384, SHA512, defaults to $MONETDB5_PASSWDHASH]),
	password_backend="$withval")
case "$password_backend" in
	yes|no|auto|"")
	;;
	MD5|SHA1|RIPEMD160|SHA224|SHA256|SHA384|SHA512)
		MONETDB5_PASSWDHASH="$password_backend"
	;;
	*)
		AC_MSG_ERROR(['$password_backend' invalid, choose one of MD5, SHA1, RIPEMD160, SHA224, SHA256, SHA384, SHA512])
	;;
esac
AC_DEFINE_UNQUOTED([MONETDB5_PASSWDHASH], "$MONETDB5_PASSWDHASH", [The used password hash algorithm])

dnl The console is a direct client hooked onto the kernel with full
dnl administrative privileges, bypassing any security checks.  It is
dnl handy only during development.
dnl We simply can't disable it for now because Testing gets hopelessly
dnl upset about it, but we can offer to the user to disable it for
dnl increased security.
use_console=yes
AC_ARG_ENABLE(console,
	AS_HELP_STRING([--enable-console],
		[enables direct console on the server (involves security risks)]),
	use_console="$withval")
if test x$use_console = xyes ; then
	AC_DEFINE([HAVE_CONSOLE], 1, [If the console should be used])
fi

dnl provide different versions of the paths derived above
AM_MONETDB_XQ_VARS_2()
AC_DEFINE_UNQUOTED(MONETDB5_PREFIX,"$QXprefix",[architecture-independent files])
AC_DEFINE_UNQUOTED(MONETDB5_EXEC_PREFIX,"$QXexec_prefix",[architecture-dependent files])
QMONETDB5_BUILD="$MONETDB5_BUILD"
XMONETDB5_BUILD="`$translatepath "$MONETDB5_BUILD"`"
QXMONETDB5_BUILD="`echo "$XMONETDB5_BUILD" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(QMONETDB5_BUILD)
AC_SUBST(XMONETDB5_BUILD)
AC_SUBST(QXMONETDB5_BUILD)
QMONETDB5_SOURCE="$MONETDB5_SOURCE"
XMONETDB5_SOURCE="`$translatepath "$MONETDB5_SOURCE"`"
QXMONETDB5_SOURCE="`echo "$XMONETDB5_SOURCE" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(QMONETDB5_SOURCE)
AC_SUBST(XMONETDB5_SOURCE)
AC_SUBST(QXMONETDB5_SOURCE)
AC_DEFINE_UNQUOTED(MONETDB5_LOCALSTATEDIR,"$QXlocalstatedir",[modifiable single-machine data])
AC_DEFINE_UNQUOTED(MONETDB5_LIBDIR,"$QXlibdir",[object code libraries])
AC_DEFINE_UNQUOTED(MONETDB5_SYSCONFDIR,"$QXsysconfdir",[read-only single-machine data])
AC_DEFINE_UNQUOTED(MONETDB5_CONFFILE,"$QXsysconfdir${QDIRSEP}monetdb5.conf",[MonetDB5 config file])


dnl allow us to keep track of how we are going to build this thing
compilercall="$CC $CFLAGS $X_CFLAGS"
AC_SUBST(compilercall)
linkercall="$LD $LDFLAGS"
AC_SUBST(linkercall)
builtby="${USER}@`hostname`"
AC_SUBST(builtby)
pcreversion="(not linked to any PCRE library)"
if test "x$have_pcre" = xyes; then
	pcreversion="compiled with `$PCRE_CONFIG --version 2>/dev/null`"
fi
AC_SUBST(pcreversion)
opensslversion="(not linked to any openssl library)"
if test "x$have_openssl" != xno; then
	opensslversion="compiled with `openssl version 2>/dev/null`"
fi
AC_SUBST(opensslversion)
libxml2version="(not linked to any libxml2 library)"
if test "x$have_libxml2" = xyes; then
	libxml2version="compiled with `$XML2_CONFIG --version 2>/dev/null`"
fi
AC_SUBST(libxml2version)

dnl  CFLAGS for our code are stricter than what autoconf can cope with.
CFLAGS="$CFLAGS \$(X_CFLAGS)"
