dnl Process this file with autoconf to produce a configure script.
AC_PREREQ(2.53)
AC_INIT(src/mal/mal.mx)
AC_CONFIG_AUX_DIR(conf)
AC_CANONICAL_HOST
AC_CANONICAL_TARGET
AH_TOP([#include "monetdb_config.h"])
AH_TOP([#include "sysdefs.h"])
AH_BOTTOM([#include "stddef.h"])

dnl ----------------------
AM_INIT_AUTOMAKE("MonetDB5", 4.99.19, [no-define])
AM_CONFIG_HEADER(mal_config.h:conf/config.h.in)
CONFIG_H=mal_config.h
AC_SUBST(CONFIG_H)

HOST=[$target]
AC_DEFINE_UNQUOTED(HOST, "$HOST", [Host identifier])

dnl Check for Monet
AM_MONETDB_COMPILER()
AM_MONETDB_TOOLS()
AM_MONETDB_OPTIONS()
AM_MONETDB_LIBS()
req_monetdb_ver='4.11.0'
AM_MONET($req_monetdb_ver)
if test "x$have_monet" != xyes; then
	AC_MSG_ERROR([MonetDB-5 requires at least version $req_monetdb_ver of MonetDB, but only version $MONETDBVERS was found.])
fi
AM_MONETDB_UTILS()

AC_CHECK_FUNCS(strtoll)
AC_CHECK_DECLS([strtoll])
dnl Check if crypt() exists in libc or libcrypt, sets LIBS if needed
AC_SEARCH_LIBS(crypt, crypt, AC_DEFINE(HAVE_CRYPT, 1, [crypt]))

dnl  CFLAGS for our code are stricter than what autoconf can cope with.
CFLAGS="$CFLAGS \$(X_CFLAGS)"

dnl  However, there are still some signed-unsigned comparisons...
if test "$GCC" = "yes"; then
	X_CFLAGS="$X_CFLAGS -Wno-sign-compare"
fi

# MONETDB_BUILD and MONETDB_SOURCE are *only* used for monetdb5-config
# MONETDB_SOURCE is the absolute path name of the source directory
# (srcdir can be relative)

# The Q versions of various variables are used in places where \'s
# need to be escapes with an extra \.  Configure does not support \'s
# in path names, so there is no need to do anything special here
# except set the variables.  The command to set them in case we do
# need to escape the \'s is Qvar=`echo "$var" | sed 's/\\\\/\\\\\\\\/g'`
MONETDB_BUILD=[`pwd`]
AC_SUBST(MONETDB_BUILD)
QMONETDB_BUILD="$MONETDB_BUILD"
XMONETDB_BUILD="`$translatepath "$MONETDB_BUILD"`"
QXMONETDB_BUILD="`echo "$XMONETDB_BUILD" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(QMONETDB_BUILD)
AC_SUBST(XMONETDB_BUILD)
AC_SUBST(QXMONETDB_BUILD)
MONETDB_SOURCE=[`(cd $srcdir && pwd)`]
AC_SUBST(MONETDB_SOURCE)
QMONETDB_SOURCE="$MONETDB_SOURCE"
AC_SUBST(QMONETDB_SOURCE)

# if no --prefix option, we must set Qprefix to the default value
# the problem is that prefix is set very late in the process if it
# wasn't set by --prefix
if test "${prefix}x" = "NONEx"; then
	Qprefix="${ac_default_prefix}"
else
	Qprefix="${prefix}"
fi
AC_SUBST(Qprefix)
# exec_prefix is created very late, so let make do the expansion
if test "${exec_prefix}x" = "NONEx"; then
	Qexec_prefix='${prefix}'
else
	Qexec_prefix="${exec_prefix}"
fi
AC_SUBST(Qexec_prefix)
Qsrcdir="$srcdir"
AC_SUBST(Qsrcdir)
Qlocalstatedir="$localstatedir"
AC_SUBST(Qlocalstatedir)
Qlibdir="$libdir"
AC_SUBST(Qlibdir)
Qsysconfdir="$sysconfdir"
AC_SUBST(Qsysconfdir)
Qbindir="$bindir"
AC_SUBST(Qbindir)
Qlibexecdir="$libexecdir"
AC_SUBST(Qlibexecdir)
Qdatadir="$datadir"
AC_SUBST(Qdatadir)
Qmandir="$mandir"
AC_SUBST(Qmandir)
Qincludedir="$includedir"
AC_SUBST(Qincludedir)
Qinfodir="$infodir"
AC_SUBST(Qinfodir)

DIRSEP="/"
case "$target_os" in
mac*)	DIRSEP=":"
	AC_ERROR([mac not supported yet])
	;;
esac
AC_SUBST(DIRSEP)
QDIRSEP="$DIRSEP"
AC_SUBST(QDIRSEP)

dnl We're not building on native Windows.
AM_CONDITIONAL(NATIVE_WIN32,false)
