dnl -*- mode: autoconf -*-

# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-2007 CWI.
# All Rights Reserved.

dnl Process this file with autoconf to produce a configure script.
AC_PREREQ(2.59)
AC_INIT([MonetDB Server], [5.3.0], [monet@cwi.nl], [MonetDB5])
#                          ^^^^^
# Maintained via vertoo. Please don't modify by hand!
# Contact MonetDB-developers@lists.sourceforge.net for details and/or assistance.
AC_CONFIG_AUX_DIR(conf)
AC_CANONICAL_HOST
AC_CANONICAL_TARGET
AH_TOP([#include "sysdefs.h"])
AH_BOTTOM([#include "stddef.h"])

dnl ----------------------
dnl We have filenames larger than 99 chars, so use ustar to allow up to
dnl 256 characters.  tar-pax is too young, and might result in problems
dnl on anchient systems.
AM_INIT_AUTOMAKE([tar-ustar])
AC_CONFIG_SRCDIR([src/mal/mal.mx])
AM_CONFIG_HEADER(mal_config.h:conf/config.h.in)
CONFIG_H=mal_config.h
AC_SUBST(CONFIG_H)

HOST=[$target]
AC_DEFINE_UNQUOTED(HOST, "$HOST", [Host identifier])

if test x"$target_os" = xcygwin; then
	AC_DEFINE(WIN32, 1, [Define on MS Windows (also under Cygwin)])
fi

# MONETDB5_BUILD and MONETDB5_SOURCE are *only* used for monetdb5-config
# MONETDB5_SOURCE is the absolute path name of the source directory
# (srcdir can be relative)

# The Q versions of various variables are used in places where \'s
# need to be escapes with an extra \.  Configure does not support \'s
# in path names, so there is no need to do anything special here
# except set the variables.  The command to set them in case we do
# need to escape the \'s is Qvar=`echo "$var" | sed 's/\\\\/\\\\\\\\/g'`
MONETDB5_BUILD=[`pwd`]
AC_SUBST(MONETDB5_BUILD)

MONETDB5_SOURCE=[`(cd $srcdir && pwd)`]
AC_SUBST(MONETDB5_SOURCE)

AM_MONETDB_XQ_VARS_1()


dnl Check for Monet
# Check for Monet 
req_monetdb_ver='1.21.0'
#                ^^^^^^
# Maintained via vertoo. Please don't modify by hand!
# Contact MonetDB-developers@lists.sourceforge.net for details and/or assistance.
AM_MONETDB_COMMON($req_monetdb_ver)
if test "x$have_monetdb" != xyes; then
	if test "x$MONETDBVERS" = "x"; then
		AC_MSG_ERROR([MonetDB was not found. MonetDB5 requires at least version $req_monetdb_ver of MonetDB.])
	else
		AC_MSG_ERROR([MonetDB5 requires at least version $req_monetdb_ver of MonetDB, but only version $MONETDBVERS was found.])
	fi
fi
req_clients_ver='1.20.0'
#                ^^^^^^
# Maintained via vertoo. Please don't modify by hand!
# Contact MonetDB-developers@lists.sourceforge.net for details and/or assistance.
AM_MONETDB_CLIENTS($req_clients_ver)
AM_MONETDB_DEFAULTS()
AM_MONETDB_COMPILER()
AM_MONETDB_TOOLS()
AM_MONETDB_OPTIONS()
AM_MONETDB_LIBS()

AM_MONETDB_UTILS()

AC_PROG_LIBTOOL

dnl Checks for header files.
AC_HEADER_TIME()
AC_CHECK_HEADERS([crypt.h fcntl.h ieeefp.h malloc.h sys/resource.h sys/socket.h sys/time.h sys/times.h sys/un.h termios.h time.h xmmintrin.h])

dnl Checks for typedefs, structures, and compiler characteristics.
AC_TRY_COMPILE([$ac_includes_default
#include <malloc.h>], [struct mallinfo m;], AC_DEFINE(HAVE_STRUCT_MALLINFO, 1, [Define if you have struct mallinfo])
AC_TRY_COMPILE([$ac_includes_default
#include <malloc.h>], [struct mallinfo m = {0};
/* compilers that don't like <0 comparisons on unsigned data *
 * will fail here (but then not in src/gdk/gdk_utils.mx)     */
int x = (m.usmblks < 0);], AC_DEFINE(HAVE_SIGNED_MALLINFO, 1, [Define if your mallinfo struct has signed elements])
))
AC_CACHE_CHECK(for _sys_siglist, mn_cv_have__sys_siglist, [
AC_TRY_LINK([$ac_includes_default], [printf("%s\n", _sys_siglist[0]);], mn_cv_have__sys_siglist=yes, mn_cv_have__sys_siglist=no)])
if test $mn_cv_have__sys_siglist = yes; then
	AC_DEFINE(HAVE__SYS_SIGLIST, 1, [Define if you have _sys_siglist])
fi

AC_COMPILE_IFELSE(AC_LANG_SOURCE([int foo(int * restrict p) { return *p; }]),
AC_DEFINE(HAVE_RESTRICT, 1, [Define if the compiler supports the restrict keyword]),
AC_COMPILE_IFELSE(AC_LANG_SOURCE([int foo(int * __restrict__ p) { return *p; }]),
AC_DEFINE(HAVE___RESTRICT__, 1, [Define if the compiler supports the __restrict__ keyword])))

dnl Checks for library functions.
AC_SEARCH_LIBS(crypt, crypt, AC_DEFINE(HAVE_CRYPT, 1, [crypt]))
AC_CHECK_FUNCS([asctime_r ctime_r fpclass fpclassify ftime isinf localtime_r putenv sbrk setenv setsid sigaction strncasecmp strtoll sysconf times])
AC_CHECK_DECLS([strtoll])

asctime_r3=yes
AC_MSG_CHECKING(asctime_r3)
AC_TRY_LINK([$ac_includes_default
#include <time.h>], 
[char buf[26]; struct tm t; asctime_r(&t,buf,26);],
[AC_DEFINE(HAVE_ASCTIME_R3, 1, [Define if you have asctime_r(struct tm*,char *buf,size_t s)])], [asctime_r3=no])
AC_MSG_RESULT($asctime_r3)

ctime_r3=yes
AC_MSG_CHECKING(ctime_r3)
AC_TRY_LINK([$ac_includes_default
#include <time.h>], 
[char buf[26]; time_t t; ctime_r(&t,buf,26);],
[AC_DEFINE(HAVE_CTIME_R3, 1, [Define if you have ctime_r(time_t*,char *buf,size_t s)])], [ctime_r3=no])
AC_MSG_RESULT($ctime_r3)


dnl provide different versions of the paths derived above
AM_MONETDB_XQ_VARS_2()
AC_DEFINE_UNQUOTED(MONETDB5_PREFIX,"$QXprefix",[architecture-independent files])
AC_DEFINE_UNQUOTED(MONETDB5_EXEC_PREFIX,"$QXexec_prefix",[architecture-dependent files])
QMONETDB5_BUILD="$MONETDB5_BUILD"
XMONETDB5_BUILD="`$translatepath "$MONETDB5_BUILD"`"
QXMONETDB5_BUILD="`echo "$XMONETDB5_BUILD" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(QMONETDB5_BUILD)
AC_SUBST(XMONETDB5_BUILD)
AC_SUBST(QXMONETDB5_BUILD)
QMONETDB5_SOURCE="$MONETDB5_SOURCE"
XMONETDB5_SOURCE="`$translatepath "$MONETDB5_SOURCE"`"
QXMONETDB5_SOURCE="`echo "$XMONETDB5_SOURCE" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(QMONETDB5_SOURCE)
AC_SUBST(XMONETDB5_SOURCE)
AC_SUBST(QXMONETDB5_SOURCE)
AC_DEFINE_UNQUOTED(MONETDB5_LOCALSTATEDIR,"$QXlocalstatedir",[modifiable single-machine data])
AC_DEFINE_UNQUOTED(MONETDB5_LIBDIR,"$QXlibdir",[object code libraries])
AC_DEFINE_UNQUOTED(MONETDB5_SYSCONFDIR,"$QXsysconfdir",[read-only single-machine data])


dnl allow to keep track of how we are going to build this thing
compilercall="$CC $CFLAGS $X_CFLAGS"
AC_SUBST(compilercall)
linkercall="$LD $LDFLAGS"
AC_SUBST(linkercall)
builtby="${USER}@`hostname`"
AC_SUBST(builtby)
pcreversion="(not linked to any PCRE library)"
if test "x$have_pcre" = xyes; then
	pcreversion="compiled with `$PCRE_CONFIG --version 2>/dev/null`"
fi
AC_SUBST(pcreversion)
opensslversion="(not linked to any openssl library)"
if test "x$have_openssl" != xno; then
	opensslversion="compiled with `openssl version 2>/dev/null`"
fi
AC_SUBST(opensslversion)

dnl  CFLAGS for our code are stricter than what autoconf can cope with.
CFLAGS="$CFLAGS \$(X_CFLAGS)"
