dnl -*- mode: autoconf -*-

# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-2007 CWI.
# All Rights Reserved.

dnl Process this file with autoconf to produce a configure script.
AC_PREREQ(2.59)
AC_INIT([MonetDB Server], [5.0.0_beta2_1], [monet@cwi.nl], [MonetDB5])
AC_CONFIG_AUX_DIR(conf)
AC_CANONICAL_HOST
AC_CANONICAL_TARGET
AH_TOP([#include "sysdefs.h"])
AH_BOTTOM([#include "stddef.h"])

dnl ----------------------
AM_INIT_AUTOMAKE
AC_CONFIG_SRCDIR([src/mal/mal.mx])
AM_CONFIG_HEADER(mal_config.h:conf/config.h.in)
CONFIG_H=mal_config.h
AC_SUBST(CONFIG_H)

HOST=[$target]
AC_DEFINE_UNQUOTED(HOST, "$HOST", [Host identifier])

if test x"$target_os" = xcygwin; then
	AC_DEFINE(WIN32, 1, [Define on MS Windows (also under Cygwin)])
fi

dnl Check for Monet
# Check for Monet 
req_monetdb_ver='1.17.0'
AM_MONETDB_COMMON($req_monetdb_ver)
if test "x$have_monetdb" != xyes; then
	AC_MSG_ERROR([MonetDB5 requires at least version $req_monetdb_ver of MonetDB, but only version $MONETDBVERS was found.])
fi
req_clients_ver='1.17.0'
AM_MONETDB_CLIENTS($req_clients_ver)
AM_MONETDB_DEFAULTS()
AM_MONETDB_COMPILER()
AM_MONETDB_TOOLS()
AM_MONETDB_OPTIONS()
AM_MONETDB_LIBS()

AM_MONETDB_UTILS()

AC_PROG_LIBTOOL

dnl Checks for header files.
AC_HEADER_TIME()
AC_CHECK_HEADERS([crypt.h fcntl.h ieeefp.h malloc.h sys/resource.h sys/socket.h sys/time.h sys/times.h sys/un.h termios.h time.h xmmintrin.h])

dnl Checks for typedefs, structures, and compiler characteristics.
AC_TRY_COMPILE([$ac_includes_default
#include <malloc.h>], [struct mallinfo m;], AC_DEFINE(HAVE_STRUCT_MALLINFO, 1, [Define if you have struct mallinfo])
AC_TRY_COMPILE([$ac_includes_default
#include <malloc.h>], [struct mallinfo m = {0};
/* compilers that don't like <0 comparisons on unsigned data *
 * will fail here (but then not in src/gdk/gdk_utils.mx)     */
int x = (m.usmblks < 0);], AC_DEFINE(HAVE_SIGNED_MALLINFO, 1, [Define if your mallinfo struct has signed elements])
))
AC_CACHE_CHECK(for _sys_siglist, mn_cv_have__sys_siglist, [
AC_TRY_LINK([$ac_includes_default], [printf("%s\n", _sys_siglist[0]);], mn_cv_have__sys_siglist=yes, mn_cv_have__sys_siglist=no)])
if test $mn_cv_have__sys_siglist = yes; then
	AC_DEFINE(HAVE__SYS_SIGLIST, 1, [Define if you have _sys_siglist])
fi

AC_COMPILE_IFELSE(AC_LANG_SOURCE([int foo(int * restrict p) { return *p; }]),
AC_DEFINE(HAVE_RESTRICT, 1, [Define if the compiler supports the restrict keyword]),
AC_COMPILE_IFELSE(AC_LANG_SOURCE([int foo(int * __restrict__ p) { return *p; }]),
AC_DEFINE(HAVE___RESTRICT__, 1, [Define if the compiler supports the __restrict__ keyword])))

dnl Checks for library functions.
AC_SEARCH_LIBS(crypt, crypt, AC_DEFINE(HAVE_CRYPT, 1, [crypt]))
AC_CHECK_FUNCS([asctime_r ctime_r fpclass fpclassify ftime isinf localtime_r putenv sbrk setenv setsid strncasecmp strtoll sysconf times])

asctime_r3=yes
AC_MSG_CHECKING(asctime_r3)
AC_TRY_LINK([$ac_includes_default
#include <time.h>], 
[char buf[26]; struct tm t; asctime_r(&t,buf,26);],
[AC_DEFINE(HAVE_ASCTIME_R3, 1, [Define if you have asctime_r(struct tm*,char *buf,size_t s)])], [asctime_r3=no])
AC_MSG_RESULT($asctime_r3)

ctime_r3=yes
AC_MSG_CHECKING(ctime_r3)
AC_TRY_LINK([$ac_includes_default
#include <time.h>], 
[char buf[26]; time_t t; ctime_r(&t,buf,26);],
[AC_DEFINE(HAVE_CTIME_R3, 1, [Define if you have ctime_r(time_t*,char *buf,size_t s)])], [ctime_r3=no])
AC_MSG_RESULT($ctime_r3)

# MONETDB5_BUILD and MONETDB5_SOURCE are *only* used for monetdb5-config
# MONETDB5_SOURCE is the absolute path name of the source directory
# (srcdir can be relative)

# The Q versions of various variables are used in places where \'s
# need to be escapes with an extra \.  Configure does not support \'s
# in path names, so there is no need to do anything special here
# except set the variables.  The command to set them in case we do
# need to escape the \'s is Qvar=`echo "$var" | sed 's/\\\\/\\\\\\\\/g'`
MONETDB5_BUILD=[`pwd`]
AC_SUBST(MONETDB5_BUILD)
QMONETDB5_BUILD="$MONETDB5_BUILD"
XMONETDB5_BUILD="`$translatepath "$MONETDB5_BUILD"`"
QXMONETDB5_BUILD="`echo "$XMONETDB5_BUILD" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(QMONETDB5_BUILD)
AC_SUBST(XMONETDB5_BUILD)
AC_SUBST(QXMONETDB5_BUILD)
MONETDB5_SOURCE=[`(cd $srcdir && pwd)`]
AC_SUBST(MONETDB5_SOURCE)
QMONETDB5_SOURCE="$MONETDB5_SOURCE"
AC_SUBST(QMONETDB5_SOURCE)

# if no --prefix option, we must set Qprefix to the default value
# the problem is that prefix is set very late in the process if it
# wasn't set by --prefix
if test "${prefix}x" = "NONEx"; then
	Qprefix="${ac_default_prefix}"
else
	Qprefix="${prefix}"
fi
AC_SUBST(Qprefix)
# exec_prefix is created very late, so let make do the expansion
if test "${exec_prefix}x" = "NONEx"; then
	Qexec_prefix='${prefix}'
else
	Qexec_prefix="${exec_prefix}"
fi
AC_SUBST(Qexec_prefix)
Qsrcdir="$srcdir"
Xsrcdir="`$translatepath "$srcdir"`"
QXsrcdir="`echo "$Xsrcdir" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(Qsrcdir)
AC_SUBST(Xsrcdir)
AC_SUBST(QXsrcdir)
Qlocalstatedir="$localstatedir"
AC_SUBST(Qlocalstatedir)
Qlibdir="$libdir"
AC_SUBST(Qlibdir)
Qsysconfdir="$sysconfdir"
AC_SUBST(Qsysconfdir)
Qbindir="$bindir"
AC_SUBST(Qbindir)
Qlibexecdir="$libexecdir"
AC_SUBST(Qlibexecdir)
Qdatarootdir="$datarootdir"
AC_SUBST(Qdatarootdir)
Qdatadir="$datadir"
AC_SUBST(Qdatadir)
Qmandir="$mandir"
AC_SUBST(Qmandir)
Qincludedir="$includedir"
AC_SUBST(Qincludedir)
Qinfodir="$infodir"
AC_SUBST(Qinfodir)

dnl what is the host byte-order
AC_C_BIGENDIAN()

dnl  CFLAGS for our code are stricter than what autoconf can cope with.
CFLAGS="$CFLAGS \$(X_CFLAGS)"

