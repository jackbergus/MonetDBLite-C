# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2011 MonetDB B.V.
# All Rights Reserved.


# Configuration file for MonetDB Version 5 server

# The configuration file is an integral part of a database store and
# aimed to initialize the server and service components.  This startup
# file is read by the GDK kernel to set system wide parameters.

# It may be inspected by application/scripts for specific settings,
# but such client side configurations are better packed in their own
# structure.

# FIXME:  remove this notice for the installed monetdb5.conf  #
# ----------------------------------------------------------- #
# Please keep the comments below aligned with the defaults in #
# common/options/monet_options.mx                             #
# ----------------------------------------------------------- #

# Absolute path where MonetDB is installed
prefix=@Xprefix@
exec_prefix=@Xexec_prefix@

# GDK Section
#============
# All databases are stored as a directory under the directory given
# below.  Use this value to change the overall location of your data.
gdk_dbfarm=@Xlocalstatedir@@DIRSEP@monetdb5@DIRSEP@dbfarm
#
# MonetDB can only handle one database at a time.  When you start an
# mserver5 manually without specifying the database name yourself, the
# following database name is used.
#gdk_dbname=demo

# Monet Section
#==============
#monet_admin=adm			#administrator user name
# Prompt when using MAL interface
#monet_prompt=>
#
# Where do the MonetDB modules reside? The second path is for windows
# dlls.
monet_mod_path=@Xlibdir@@DIRSEP@monetdb5@PATHSEP@@Xlibdir@@DIRSEP@monetdb5@DIRSEP@lib@PATHSEP@@Xlibdir@@DIRSEP@monetdb5@DIRSEP@bin
#
# Start mserver in daemon mode, or start with MAL interactive
# interface?
#monet_daemon=no
#
# Display version and copyright information upon startup?
#monet_welcome=yes
#
# Where is the file that stores the secret key to unlock the password
# vault?  The file is read up to the first null-byte ('\0'), so you
# can padd the file with trailing null-bytes to obfuscate the key
# length.  You can easily generate some key by running pwgen and
# adding a few of the passwords generated.  Make sure not to make the
# key too small.  If you leave this unset, some default key is used.
# Note: changing this key for an existing database makes that database
# unusable as noone is any longer able to login.  If you use
# Merovingian, a per-database vault key is used and this setting is
# ignored.
#monet_vault_key=@Xsysconfdir@@DIRSEP@monetdb.secret

# Merovingian section
#====================
# Merovingian logs messages and errors by default to the stdout and
# stderr channels on the console.  By setting one or both of the
# variables below, one can specify messages and/or errors to be logged
# to a file instead.  It is legitimate to have both mero_msglog and
# mero_errlog pointing to the same file, as in the default below.
# Setting mero_msglog and/or mero_errlog to the empty string, results
# in merovingian to log to the screen.
#mero_msglog=@Xlocalstatedir@@DIRSEP@log@DIRSEP@monetdb@DIRSEP@merovingian.log
#mero_errlog=@Xlocalstatedir@@DIRSEP@log@DIRSEP@monetdb@DIRSEP@merovingian.log
#
# Merovingian forks itself to detach into the background.  It stores
# its pid in the following file, which can be used to stop Merovingian
# again.
mero_pidfile=@Xlocalstatedir@@DIRSEP@run@DIRSEP@monetdb@DIRSEP@merovingian.pid
#
# In normal use, Merovingian replaces an mserver, and hence listens
# for connections on the same port as an mserver would do (mapi_port).
# For certain configs, however, it may be more suitable to use an
# alternate port, which can be specified here.
#mero_port=50000
#
# mservers that were started by Merovingian are shut down when the
# Merovingian is shut down.  This behaviour is desirable if the
# Merovingian is ran as daemon process that represents MonetDB, such
# as in an init.d script.  Setting the time-out value below to a
# positive non-zero value will shut down each mserver that was started
# with a given time-out in seconds.  If the time-out expires, the
# mserver is killed using the SIGKILL signal.  A time-out value of 0
# means that no mserver is shut down, meaning they will live on after
# the Merovingian has shut down.  The default is to shut down all
# started mservers with a time-out of 60 seconds.
#mero_exittimeout=60
#
# Merovingian has two ways in which it can "attach" a connecting
# client to the target database.  The first method uses a redirect to
# the responsible mserver process, the second method proxies the
# client to the mserver over Merovingian.  While the first is more
# efficient, it requires the connecting client to be able to connect
# to the mserver.  In many settings this may be undesirable or even
# impossible, since a wide range of open ports are necessary for this.
# In such case the proxy behaviour of Merovingian is a good solution,
# which also allows a Merovingian on the border of a network to serve
# requests to nodes in the local (unreachable) network.  Hence, proxy
# mode is the default.  Uncomment the value below to use the first
# method of using redirects.  Note that Merovingian will use an
# efficient method to connect the client with a local target database
# when proxy mode is active.  This method is performance wise equal to
# forwarding, but completely hides the actual way of connecting to the
# target database, like proxying.
#mero_doproxy=no
#
# Neighbour discovery allows Merovingian to discover other running
# Merovingian processes in the local network.  Merovingian publishes
# locally available databases to others periodically.  The interval
# used here depends on the time-to-live of the databases before they
# need to get refreshed.  The default is 10 minutes, which should keep
# traffic in your network fairly low.  Additions and removals are
# processed immediately regardless of this timeout.  If you are in a
# network environment where links disappear often, you may want to
# decrease this value to more quickly remove no longer reachable
# databases.
#mero_discoveryttl=600
#
# Neighbour discovery is done using UDP broadcasts on the port set by
# mero_discoveryport.  It's value defaults to the value of mero_port,
# which usually is 50000.  Setting this value to 0 disables the
# neighbour discovery service entirely.
#mero_discoveryport=50000
#
# Each Merovingian can be controlled by monetdb(1).  By default,
# Merovingian binds to a local UNIX domain socket which allows a local
# monetdb(1) to connect based on the UNIX file system permissions.
# Merovingian can also listen on a TCP socket to serve requests from a
# monetdb(1) elsewhere.  If mero_controlport is set, Merovingian
# listens to that port for remote control commands.  This is an all or
# nothing scenario, hence any remote monetdb(1) can create, destroy,
# etc.  As a little protective measure, the file
# @Xlocalstatedir@@DIRSEP@monetdb5@DIRSEP@dbfarm@DIRSEP@.merovingian_pass
# contains the passphrase that a remote monetdb(1) needs to issue to
# be able to perform any command.  For this file the same rules hold
# as for the monet_vault_key file.  If this file is missing,
# Merovingian will attempt to create it with a random password.  If
# the file cannot be opened for some reason, Merovingian will not
# start.
mero_controlport=50001

# Monet Application Interface Section
#====================================
# default TCP port opened by mserver5 for a client to connect to
#mapi_port=50000
#
# whether or not to automatically find a free port if mapi_port is
# already taken by another application
#mapi_autosense=false
#
# whether or not to allow remote access to the server (bind to any
# interface or just localhost)
#mapi_open=false
#
# mapi_usock is ignored on platforms that do not support UNIX domain
# sockets, it is disabled by default, but e.g. enabled by Merovingian
#mapi_usock=${gdk_dbfarm}@DIRSEP@mapi_socket

# SQL Interface Section
#======================
# The SQL debug level (should be disabled for normal use)
#sql_debug=0
#
# The default SQL optimizer pipeline can be set per server.  See the
# optpipe setting in monetdb(1) when using merovingian.  During SQL
# initialization, the optimizer pipeline is checked against the
# dependency information maintained in the optimizer library to ensure
# there are no conflicts and at least the pre-requisite optimizers are
# used.  The setting of sql_optimizer can be either the list of
# optimizers to run, or one or more variables containing the optimizer
# pipeline to run.  The latter is provided for readability purposes
# only.
#
# Set and define the default pipeline
#sql_optimizer=default_pipe
#
# The minimal pipeline necessary by the server to operate correctly
#minimal_pipe=inline,remap,deadcode,multiplex,garbageCollector
#
# The default pipe line contains as of Feb2010
# mitosis-mergetable-reorder, aimed at large tables and improved
# access locality
#default_pipe=inline,remap,evaluate,costModel,coercions,emptySet,aliases,mitosis,mergetable,deadcode,commonTerms,joinPath,reorder,deadcode,reduce,dataflow,history,multiplex,garbageCollector
#
# The no_mitosis pipe line is (and should be kept!) identical to the
# default pipeline, except that optimizer mitosis is omitted.  It is
# used mainly to make some tests work deterministically, and to check
# / debug whether "unexpected" problems are related to mitosis (and/or
# mergetable).
no_mitosis_pipe=inline,remap,evaluate,costModel,coercions,emptySet,aliases,mergetable,deadcode,commonTerms,joinPath,reorder,deadcode,reduce,dataflow,history,multiplex,garbageCollector
#
# The sequential pipe line is (and should be kept!) identical to the
# default pipeline, except that optimizers mitosis & dataflow are
# omitted.  It is use mainly to make some tests work
# deterministically, i.e., avoid ambigious output, by avoiding
# parallelism.
sequential_pipe=inline,remap,evaluate,costModel,coercions,emptySet,aliases,mergetable,deadcode,commonTerms,joinPath,reorder,deadcode,reduce,history,multiplex,garbageCollector
#
# The default pipeline used in the November 2009 release
nov2009_pipe=inline,remap,evaluate,costModel,coercions,emptySet,aliases,mergetable,deadcode,constants,commonTerms,joinPath,deadcode,reduce,dataflow,history,multiplex,garbageCollector
#
# Experimental pipelines stressing various components under
# development Do not use any of these pipelines in production
# settings!
#
# Replication
replication_pipe=inline,remap,evaluate,costModel,coercions,emptySet,aliases,mergetable,deadcode,constants,commonTerms,joinPath,deadcode,reduce,dataflow,history,replication,multiplex,garbageCollector
#
# Accumulator
accumulator_pipe=inline,remap,evaluate,costModel,coercions,emptySet,aliases,mergetable,deadcode,constants,commonTerms,joinPath,deadcode,reduce,accumulators,dataflow,history,multiplex,garbageCollector
#
# The Recycle pipeline for Skyserver
recycler_pipe=inline,remap,evaluate,costModel,coercions,emptySet,aliases,deadcode,constants,commonTerms,joinPath,deadcode,recycle,reduce,dataflow,history,multiplex,garbageCollector
#
# The Cracking pipeline(s)
cracker_pipe=inline,remap,evaluate,costModel,coercions,emptySet,aliases,selcrack,deadcode,commonTerms,joinPath,reorder,deadcode,reduce,dataflow,history,multiplex,garbageCollector
sidcrack_pipe=inline,remap,evaluate,costModel,coercions,emptySet,aliases,sidcrack,deadcode,commonTerms,joinPath,reorder,deadcode,reduce,dataflow,history,multiplex,garbageCollector
#
# The datacell pipeline
datacell_pipe=inline,remap,evaluate,costModel,coercions,emptySet,aliases,deadcode,constants,commonTerms,joinPath,datacell,deadcode,reduce,dataflow,history,multiplex,garbageCollector
#
# The Octopus pipeline for distributed processing (Merovingian enabled
# platforms only)
octopus_pipe=inline,remap,evaluate,costModel,coercions,emptySet,aliases,mitosis,mergetable,deadcode,constants,commonTerms,joinPath,deadcode,octopus,reduce,dataflow,history,multiplex,garbageCollector
tarantula_pipe=inline,remap,evaluate,costModel,coercions,emptySet,aliases,mitosis,mergetable,deadcode,constants,commonTerms,joinPath,tarantula,deadcode,reduce,dataflow,history,multiplex,garbageCollector
#
# The MapReduce pipeline for a different flavour of distributed
# processing on Merovingian enabled platforms
mapreduce_pipe=inline,remap,evaluate,costModel,coercions,emptySet,aliases,mapreduce,mergetable,deadcode,commonTerms,joinPath,reorder,deadcode,reduce,dataflow,history,multiplex,garbageCollector
#
# The default + datacyclotron
datacyclotron_pipe=inline,remap,evaluate,costModel,coercions,emptySet,aliases,datacyclotron,mergetable,deadcode,commonTerms,joinPath,reorder,deadcode,reduce,dataflow,history,replication,multiplex,garbageCollector
#
# The default + derivePath
derive_pipe=inline,remap,evaluate,costModel,coercions,emptySet,aliases,mitosis,mergetable,deadcode,commonTerms,derivePath,joinPath,reorder,deadcode,reduce,dataflow,history,multiplex,garbageCollector
#
# The default + dictionary
dictionary_pipe=inline,remap,dictionary,evaluate,costModel,coercions,emptySet,aliases,mergetable,deadcode,constants,commonTerms,joinPath,deadcode,reduce,dataflow,history,multiplex,garbageCollector
#
# The default + compression
compression_pipe=inline,remap,evaluate,costModel,coercions,emptySet,aliases,mergetable,deadcode,constants,commonTerms,joinPath,deadcode,reduce,dataflow,compression,dataflow,history,multiplex,garbageCollector
#
# Debugging the optimizer pipeline
# The best way is to use mdb and inspect the information gathered
# during the optimization phase.  Several optimizers produce more
# intermediate information, which may shed light on the details.  The
# opt_debug bitvector controls their output. It can be set to a
# pipeline or a comma separated list of optimizers you would like to
# trace. It is a server wide property and can not be set dynamically,
# as it is intended for internal use.
