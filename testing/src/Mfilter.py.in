#!@PYTHON@

# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2010 MonetDB B.V.
# All Rights Reserved.

import sys
import os
import re
##import time

#############################################################################
#       FUNCTIONS

def Usage(THISFILE) :
    print """

Usage:  %s [-I<exp>] <files>

-I<exp> : ignore lines matching <exp> during first count (optional, default: -I'^#`)
<files> : list of files to be processed

""" % THISFILE
### Usage(THISFILE) #

def warn(THISFILE,TEXT) :
    sys.stderr.write("%s warning: %s\n" % (THISFILE,TEXT))
### warn(THISFILE,TEXT) #

def wlen(str) :
    return len(' '.join(str.split()))
### wlen(str) #

test = (
        # potential differences, which we want to ignore
        re.compile('(?:'+')|(?:'.join([
                # MAPI & XRPC port numbers
                    r"^MAPI  = .*@.*:[0-9]*$",
                    r'^QUERY = execute at { ".*:[0-9]*" }$',
                # Pathfinder revision number (`pf -{h,H}` in pathfinder/compiler/Tests/usage{,H}*)
                    r"^Pathfinder XQuery Compiler \(.Revision: .* .\)$",
                # Tokens depend on flex/bison
                    r'^\[ "TOK_[A-Z]+",\t* +"int",\t* +"frozen",\t* +"constant",\t* +"[0-9]+"\t* +\]',
                # ignore big- vs. little-endian byte-orders in test tests/BugDay_2005-10-06_4.8/Tests/print_CTgroup.SF-1315791.*:
                    r"^\[ .?\\000\\000\\000.?\\000\\000\\000.?.\]$",
                # ignore compile date/time in helps messages:
                    r"^COMPILED:  by adm on .*$",
                # ignore varying BAT IDs in error message (test leftfetchjoin_crash.SF-1705726)
                    r"^!ERROR: BATfetchjoin\(tmp_[0-9]+,tmp_[0-9]+\) does not hit always \(\|bn\|=0 != 2=\|l\|\) => can't use fetchjoin.$",
                # `fuser` (in MkillUsers) triggers these errors on Gentoo with "hardened" kernel
                    r'^! Cannot open /proc/net/unix: Permission denied$',
                    r'^! Cannot stat file /proc/[0-9]+/fd/[0-9]+: (?:No such file or directory|Permission denied)$',
                # Pathfinder: extra error messages that occur only with assertions enabled
                    r'^[ \t]*!# halted in .*, line [0-9]+$',
                # suspicious output/messages/errors? most probably triggered by MkillUsers, but apparently not causing any harm:
                    r'^! /.*/bin/[Mm](?:(?:server5?|apiClient|timeout|diff):e+|log:)$',
                    r'^! /usr/bin/mserver5:  m$',
                 ])+')',  re.MULTILINE),
        # differences due to property-checking, which we want to treat as "minor differences"
        re.compile('(?:'+')|(?:'.join([
                # src/modules/plain/aggr[X3]:
                    r'^\[ .*(?:,\t* ? "?2\.562203[64]3e\+0?13"?)+\t* ? \]$',
                    r'^\[ .*(?:,\t* ? "?7\.65432(?:119|072)"?)+\t* ? \]$',
                    r'^\[ .*(?:,\t* ? "?7\.6543209876543(?:2(?:[13]2?|21)|195)"?)+\t* ? \]$',
                    r'^\[ .*(?:,\t* ? "?6\.6666666666666(?:572|67)"?)+\t* ? \]$',
                    r'^\[ .*(?:,\t* ? "?6\.6666666666666(?:288|67)"?)+\t* ? \]$',
                    r'^\[ .*(?:,\t* ? "?6\.6666666666666(?:128|67)"?)+\t* ? \]$',
                    r'^\[ .*(?:,\t* ? "?158\.765432098765(?:22|36?|44|59|64)"?)+\t* ? \]$',
                # src/gdk/cast:
                    r'^\[ (?:\-|)0 \]$',
                # MonetDB4/src/modules/plain/Tests/mmath.milS (SunOS/Solaris: GNU vs. Sun compiler):
                    r'^\[ (?:\-|)[Ii]nfinity \]$',
                # src/monet/modrefcnt1 & tests/BugDay_2005-11-09_4.9.3/double_load_double_drop.SF-1082293 (on Itanium)
                    r"^!ERROR: DESCload: atom 'lock' unknown, in BAT '[0-9]+'.$",
                # Broken sql error messages:
                    r'^QUERY = (?:\-\-|select|insert|INSERT) ',
                # suggested alternatives in case of XQuery type errors:
                    r'^type error:   .*$',
                # Debugging "strange" errors on Solaris x86:
                    "^!ERROR: interpret: no matching MIL operator to '\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb.*$",
                 ])+')',  re.MULTILINE),
        # warnings and messages that should be treated as errors:
        re.compile('(?:'+')|(?:'.join([
                    r'^#BATpropcheck: .*$',
                 ])+')',  re.MULTILINE)
       )

# differences in BBP.dir entries
# 16 BAT fields, 12 column fields (head and tail), optionally: 3 var
# heap fields (head and tail)
# we want to ignore differences in groups 5, 16+8, 16+12+8 (lastused,
# halign, talign)
# the regular expression (-?[0-9]+) is for numeric fields, the regular
# expression ([^ ]+) is for string fields

bbp_dir = re.compile('^(-?[0-9]+) (-?[0-9]+) ([^ ]+) ([^ ]+) ([^ ]+) (-?[0-9]+) (-?[0-9]+) (-?[0-9]+) (-?[0-9]+) (-?[0-9]+) (-?[0-9]+) (-?[0-9]+) (-?[0-9]+) (-?[0-9]+) (-?[0-9]+) (-?[0-9]+)'
                     ' ([^ ]+) (-?[0-9]+) (-?[0-9]+) (-?[0-9]+) (-?[0-9]+) (-?[0-9]+) (-?[0-9]+) (-?[0-9]+) (-?[0-9]+) (-?[0-9]+) (-?[0-9]+) (-?[0-9]+)'
                     ' ([^ ]+) (-?[0-9]+) (-?[0-9]+) (-?[0-9]+) (-?[0-9]+) (-?[0-9]+) (-?[0-9]+) (-?[0-9]+) (-?[0-9]+) (-?[0-9]+) (-?[0-9]+) (-?[0-9]+)'
                     '( (-?[0-9]+) (-?[0-9]+) (-?[0-9]+))?'
                     '( (-?[0-9]+) (-?[0-9]+) (-?[0-9]+))?$')

        # "normalize" differences in error messages caused by flex/bison:
        # matched groups from "norm_in" are replaced by the respective
        # element of "norm_out", unless the latter is "None" (then, the
        # respective match is kept as-is).
norm_in  = re.compile('(?:'+')|(?:'.join([
##  r'^(ERROR = !| *!|)(syntax|parse|parse error: syntax)( error, )(unexpected .* on line |unexpected .* in: )?(.*)\n',                         # 01: 5
    r'^(ERROR = !| *!|)(syntax|parse|parse error: syntax)( error, )(?:unexpected .* on line |unexpected .* in: )?(?:.*)\n',                     # 01: 3
    r'^(!ERROR: .*: [0-9]+ times inserted nil due to errors at tuples )([0-9]+)(\..*)\n',                                                       # 02: 3
#   r'^( *!ERROR: shred: cannot stat .*: )(No such file or directory|Error 0)\n',                                                               # 03a: 2
#   r'^(ERROR =|       )( !ERROR: | !SQLException:assert:| !SQLException:sql: | !SQLException:| !MALException:)([^:]+)(: *)([^ ].*)\n',         # 03b: 5
#   r'^(Connection warning:.*\()(mserver_mal|mserver_sql)(\).*)\n',                                                                             # 04: 3
#   r'^(ERROR: I/O warning : failed to load external entity ")(.*)(".*)\n',                                                                     # 05: 3
#   r'^(ERROR: shred:mainSHREDDER: xmlCreateURLParserCtxt\(")(.*)("\) failed.*)\n',                                                             # 06: 3
#   r'^(ERROR: err:FORG0001: could not cast value)( from )?(.*)( to )(.*)(\..*)\n',                                                             # 07: 6
#   r"^(type error: can't cast type ')(.*)(' to type ')(.*)('.*)\n",                                                                            # 08: 5
#   r'^(type error: no variant of function )(.*)( accepts the given argument type\(s\): )(?:.*)\n',                                             # 09: 3
#   r'^(type error: illegal arguments for function )(?:.*)\n',                                                                                  # 10: 1
#   r"^(ERROR: pcre_replace: .flags. contains invalid character ')(.*)('.*)\n",                                                                 # 11: 3
#   r"^(ERROR: err:XPTY0004: illegal qname ')(.*)('.*)\n",                                                                                      # 12: 3
#   r'^(ERROR: err:XQDY0025: attribute names are not unique )(in constructed element )?(?:.*)\n',                                               # 13: 2
#   r"^(error in function application: at )(.*)(: wrong number of arguments for function `)(.*)(' \(expected )(.*)(, got )(.*)(\).*)\n",        # 14: 9
#   r'^(error in function application: at )(.*)(?:: )(?:.*)(?: expects at least .* arguments? \(got .*\).*)\n',                                 # 15: 2
#   r'^(ERROR: err:FOER0000)(?:.*)\n',                                                                                                          # 16: 1
#   r"^(illegal reference to context node: at )(.*)(: )(``.'' is unbound|position information not available)(.*)\n",                            # 17: 5
#   r'^(variable\(s\) out of scope or unknown: at )(?:.*)\n',                                                                                   # 18: 1
#   r'^(bad usage of XML namespaces: at )(?:.*)\n',                                                                                             # 19: 1
#   r'^(QUERY = import rpc-module namespace xrpc = "http://www.monetdb.nl/basicfunctions" at ")(/.*)(/tests/XRpc/basic_queries/Tests/basicfunctions.xq";)\n', # 20: 3
    r"^(QUERY|ERROR)( =.* connect)( to|)( ')(localhost)(' port )([0-9]+)( .*)\n",                                                               # 21: 8
    r"^([Uu]sage: )(/.*/|)(lt-|)([A-Za-z0-9_]+)([ \t].*)\n",                                                                                    # 22: 5
#   r'^(.*: )(illegal|invalid)( option -- .*)\n',                                                                                               # 23: 3
    r'^(01/Jan/1970 01:00:00 shttpd_open_port: bind\(|!ERROR: MAPIlisten:binding to stream socket \()([0-9]+)(\): Address already in use|\) failed)\n', # 24: 3
    r'^(!.*Exception:remote\.[^:]*:\(mapi:monetdb://monetdb@)([^/]*)(/mTests_.*\).*)\n',                                                        # 25: 3
#   r'^(ERROR = !sql_stmt symbol\()(.*)(\)->token = CREATE_SCHEMA)\n',                                                                          # 26: 3
    r'^(.*: at )(\([0-9]+,[0-9]+\-[0-9]+,[0-9]+\))(: .*)\n',                                                                                    # 90: 3
#   r'^(fatal error|ERROR)(: err:FORG0005, fn:exactly-one called with a sequence containing zero or more than one item..*)()\n',                # 99: 3
])+')',  re.MULTILINE)
norm_hint = '# the original non-normalized output was: '
norm_out = (
##  None, 'syntax/parse', None, 'unexpected ... on line/in: ', None,                                    # 01: 5
    None, 'syntax/parse', None,                                                                         # 01: 3
    None, '...', None,                                                                                  # 02: 3
#   None, 'No such file or directory',                                                                  # 03a: 2
#   None, ' !ERROR', '', ': ', None,                                                                    # 03b: 5
#   None, 'mserver_sql', None,                                                                          # 04: 3
#   None, '...', None,                                                                                  # 05: 3
#   None, '...', None,                                                                                  # 06: 3
#   None, None, '...', None, '...', None,                                                               # 07: 6
#   None, '...', None, '...', None,                                                                     # 08: 5
#   None, '...', None,                                                                                  # 09: 3
#   None,                                                                                               # 10: 1
#   None, '...', None,                                                                                  # 11: 3
#   None, '...', None,                                                                                  # 12: 3
#   None, None,                                                                                         # 13: 2
#   None, '...', None, '...', None, '...', None, '...', None,                                           # 14: 9
#   None, "...: wrong number of arguments for function `...' (expected ..., got ...)",                  # 15: 2
#   None,                                                                                               # 16: 1
#   None, '...', None, '...', None,                                                                     # 17: 5
#   None,                                                                                               # 18: 1
#   None,                                                                                               # 19: 1
#   None, '$TSTSRCBASE', None,                                                                          # 20: 3
    None, None, None, None, '<HOST>', None, '<MAPIPORT>', None,                                         # 21: 8
    None, '', '', None, None,                                                                           # 22: 5
#   None, 'invalid', None,                                                                              # 23: 3
    None, '...', None,                                                                                  # 24: 3
    None, 'localhost', None,                                                                            # 25: 3
#   None, '...', None,                                                                                  # 26: 3
    None, '...', None,                                                                                  # 90: 3
#   '=ERROR', None, '\n#',                                                                              # 99: 3
##    '=ERROR', None, '''
##type error: no variant of function ... accepts the given argument type(s): ... %s
###type error: no variant of function fn:exactly-one accepts the given argument type(s): ...
##type error: maybe you meant:
##=type error:   fn:exactly-one (node*) as node %s
###type error:   fn:exactly-one (node*) as node
##type error: illegal arguments for function ... %s
###type error: illegal arguments for function fn:exactly-one
###''' % (norm_hint[:-1], norm_hint[:-1], norm_hint[:-1]),                                                # 99: 3
)


attrre = re.compile(r'\b[-:a-zA-Z_0-9]+\s*=\s*(?:\'[^\']*\'|"[^"]*")')
elemre = re.compile(r'<[-:a-zA-Z_0-9]+(?P<attrs>(\s+' + attrre.pattern + r')+)\s*/?>')
# we're only interested in elements with attributes, hence the +^

def mFilter (FILE, IGNORE) :
    fin = open(FILE, "rU")
    LINE = fin.readline().replace('\r','')
    while  len(LINE)  and  ( len(LINE) < 15  or  LINE[:15] not in ("stdout of test ", "stderr of test ") ):
        LINE = fin.readline().replace('\r','')
    fin.close()
    if  len(LINE) >= 15  and  LINE[:15] in ("stdout of test ", "stderr of test "):
        WHAT, TST, TSTDIR = re.search("^std(out|err) of test .(.*). in directory .(.*). itself:", LINE, re.MULTILINE).groups()
    else:
        WHAT, TST, TSTDIR = "", "", ""


    ftmp = []
    ig = n = 0
    il = iw = ic = el = ew = ec = al = aw = ac = 0
    for iline in open(FILE):
        iline = iline.replace('\r', '')
        iline = iline.replace('\033[?1034h','')
        oline = xline = ""
        if iline == "#~BeginVariableOutput~#\n"  or  iline == "#~BeginProfilingOutput~#\n":
            ig = 1
            n = 0
        if ig  and  ( len(iline) == 0  or  iline[0] != "!"  or  iline[:9] != "ERROR = !" ):
            # ignore differences in "VariableOutput" or "ProfilingOutput"
            oline = "#~ " + iline
            n = n + 1
        elif test[2].match(iline):
            # warnings and messages that should be treated as errors:
            oline = "!~" + iline
        elif test[0].match(iline):
            # potential differences, which we want to ignore; see above
            oline = "#~ " + iline
        elif test[1].match(iline):
            # differences due to property-checking, which we want to treat as "minor differences"; see above
            oline = "=" + iline
        elif bbp_dir.match(iline):
            l = iline.split(' ')
            l[5] = '<lastused>'
            l[16+8] = '<halign>'
            l[16+12+8] = '<talign>'
            oline = ' '.join(l)
            xline = norm_hint + iline
        elif norm_in.match(iline):
            # "normalize" differences in error messages caused by flex/bison; see above
            grps_in = norm_in.match(iline).groups()
            oline = ''
            i = 0
            while i < len(grps_in):
                if grps_in[i] is not None:
                    if norm_out[i] is None:
                        oline += grps_in[i]
                    else:
                        oline += norm_out[i]
                i+=1
            oline += '\n'
            xline = norm_hint + iline
        else:
            oline = iline
        if iline == "#~EndVariableOutput~#\n":
            ig = 0
            xline = "~ " + str(n) + " ~\n"
        if iline == "#~EndProfilingOutput~#\n":
            ig = 0
        for ln in oline, xline:
            if len(ln):
                w = len(ln.split())
                c = wlen(ln)
                al = al + 1
                aw = aw + w
                ac = ac + c
                if ln != os.linesep  and  \
                   not re.match(IGNORE,ln, re.MULTILINE):
                    el = el + 1
                    ew = ew + w
                    ec = ec + c
                    if not re.match('^=',ln, re.MULTILINE):
                        il = il + 1
                        iw = iw + w
                        ic = ic + c
                ftmp.append(ln)

    fout = open(FILE + ".FILTERED", "w")
    if (al > 0) or (aw > 0) or (ac >0):
        fout.write("Statistics about std"+WHAT+" of test '"+TST+"` in directory '"+TSTDIR+"`:\n")
        fout.write("  %9d lines, %9d words, %9d chars   in lines not matching '^$|%s|^=`\n" % (il,iw,ic,IGNORE))
        fout.write("= %9d lines, %9d words, %9d chars   in lines not matching '^$|%s`\n"    % (el,ew,ec,IGNORE))
        fout.write("# %9d lines, %9d words, %9d chars   in all lines\n"                     % (al,aw,ac))
        fout.write("\n")
        treatxml = False
        for ln in ftmp:
            if not treatxml and '<?xml' in ln:
                treatxml = True
            if treatxml and (ln[:1] != '#' or ln[:3] == '#~ '):
                # Add a newline after each > and before each <, but
                # only add a single one between >< and don't add an
                # extra one when the line starts with < or ends with >.
                # We also recognize some line prefixes and repeat them
                # after each added newline.
                for pref in ['#~ ', '!~', '=']:
                    if ln[:len(pref)] == pref:
                        break
                else:
                    pref = ''
                preflen = len(pref)
                pos = preflen
                res = elemre.search(ln, pos)
                while res is not None:
                    attrsold = res.group('attrs')
                    attrsnew = ' ' + ' '.join(sorted(attrre.findall(attrsold)))
                    ln = ln[:res.start('attrs')] + attrsnew + ln[res.end('attrs'):]
                    pos = res.end(0) + len(attrsnew) - len(attrsold)
                    res = elemre.search(ln, pos)
                ln = ln.replace('>', '>&\n').replace('<','&\n<').replace('>&\n&\n<', '>&\n<')
                if ln[:2 + preflen] == pref + '&\n':
                    ln = pref + ln[2 + preflen:]
                if ln[-3:] == '&\n\n':
                    ln = ln[:-3] + '\n'
                if pref:
                    ln = ln[:-1].replace('\n', '\n' + pref) + '\n'
            try:
                fout.write(ln.expandtabs())
            except IOError, (IOerrNo, IOerrStr):
                warn(THISFILE, "Writing to output file '%s' failed with #%d: '%s'." % (fout.name, IOerrNo, IOerrStr))
                if IOerrNo == 28:
                    # No space left on device
                    warn(THISFILE, "Removing input file '%s'." % FILE)
                    try:
                        os.remove(FILE)
                        fin = open(FILE,"w")
                        fin.write("%s: Removed '%s' to create space for '%s'.\n" % (THISFILE, FILE, fout.name))
                        fin.close()
                    except:
                        pass
                    try:
                        fout.write(ln.expandtabs())
                    except IOError, (IOerrNo, IOerrStr):
                        warn(THISFILE, "Writing to output file '%s' failed with #%d: '%s'." % (fout.name, IOerrNo, IOerrStr))
        fout.flush()
    fout.close()
### mFilter (FILE, IGNORE) #

#############################################################################
#       MAIN

def main(argv) :
    import getopt
    THISFILE = os.path.basename(argv[0])
    try:
        opts, args = getopt.getopt(argv[1:], "?hI:", ["help"])
    except getopt.GetoptError:
        Usage(THISFILE)
        sys.exit(1)

    IGNORE = "^#"
    for o, a in opts:
        if o in ("-?", "-h", "--help"):
            Usage(THISFILE)
            sys.exit(0)
        if o == "-I":
            IGNORE = a

    for f in args:
        if os.path.isfile(f):
            mFilter(f, IGNORE)
        else:
            warn(THISFILE, "file missing: " + f)
### main(argv) #

if __name__ == "__main__":
    main(sys.argv)

#       END
#############################################################################
