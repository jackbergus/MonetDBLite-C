
This "template" directory contains the nessesary configure files and scripts
to build a simple example module (src/example.mx) for the MonetDB database
engine.


Prerequisites
=============

Before compiling the "example" module, make sure you have version 4.10.3 (or
newer) of MonetDB installed, and "monetdb-config" is reachable via your
$PATH.
See http://monetdb.cwi.nl/ for details.

Further, make sure that you also have the "buildtools" installed, and
"autogen.py", "Mx" and "mel" are reachable via your $PATH.
You can get the "buildtools" via
	cvs -d:pserver:anonymous@monetdb.cvs.sourceforge.net:/cvsroot/monetdb checkout -P -rMonetDB_4-10 buildtools
See the buildtools' README file for more details.


Compilation
===========

In the following, we use <SOURCE> for the absolute path of the directory
where this README file resides in.

Further, be <BUILD> the absolute path of some (temporary) directory, where
the source code will be compiled; preferably <BUILD> != <SOURCE>; e.g.
<BUILD> = <SOURCE>/Build .

Finally, be <PREFIX> the prefix of the absolute path of target directory
where you'd like to install the "example" module in, i.e., the module will
finally be installed in <PREFIX>/lib(64)/MonetDB/ .

To compile the "example" module for the first time, simply execute the
following commands:

	cd <SOURCE>
	./bootstrap
	cd <BUILD>
	<SOURCE>/configure --prefix=<PREFIX>
	make
	make install

To re-compile the "example" module (e.g., after you modified the source
code), you can skip the `bootstrap` and `configure` calls, and simply call
`make && make install` in <BUILD> .


Usage
=====

In case the compilation worked well, you can start MonetDB and load the
"example" module as follows (assuming "Mserver" is reachable via your
$PATH), e.g.:

	Mserver --set monet_mod_path=`monetdb-config --modpath`:<PREFIX>/lib(64)/MonetDB:<PREFIX>/lib(64)/MonetDB/lib --dbinit='module(example);'

Alternatively, you can add
<PREFIX>/lib(64)/MonetDB:<PREFIX>/lib(64)/MonetDB/lib
to the "monet_mod_path" in your MonetDB config file.

In case the <PREFIX> for the "example" module is identical with the prefix
where MonetDB is installed, you don't have to set/edit the "monet_mod_path"
at all.


Source Distribution
===================

To create a source distribution of the "example" module that can be compiled
without requiring the "buildtools" (obviously, MonetDB is still required),
simply follow the "Compilation" instructions above, and then call 
`make dist` in <BUILD> .
This will create a "template-0.1.3.tar.gz" in <BUILD>, which can then be
distributed.
From this source distribution, compilation works just as above, except that
the `bootstrap` has to be skipped.





---- In practice  ----

Obviously, this generates a configured template directory.
Some dependencies exist that you'd better change manually now.

First, the template assumes there is a file src/Tests/All; which should
identify this package uniquely from the AC_INIT clause in configure.ag.
Similarly, it produces a template_config.h with additional includes.

Change those to your preferences by:
  1. Edit AC_INIT, AM_INIT_AUTOMAKE and AM_CONFIG_HEADER in configure.ag with setup
     information for your own module
  2. Edit the EXTRA_HEADERS line in Makefile.ag  accordingly
  3. Optionally, add a call to additional m4 scripts, and copy those into the conf dir
     (e.g., if a library interfaces to a separately developed library, such as GSL).

---- Usage trick: ----

To get an existing directory setup with these files, 
e.g. MODDEVDIR=/ufs/arjen/src/CWITV/monet/array,
proceed as follows.
First, check out this template dir and cd into it (MODTDIR);
then do (in a bash-like shell):

  MODDEVDIR=/ufs/arjen/src/CWITV/monet/array
  MODTDIR=`pwd`

  find . -type d \( -name . -o -name CVS -prune -o \
    -exec echo /bin/mkdir -p ${MODDEVDIR}/{} \; \) > /tmp/t.sh
  find . \( -type d -name CVS -o -name example.mx -o -name README \) -prune  -o \
    -type f -exec echo /bin/cp -f --backup ${MODTDIR}/{} ${MODDEVDIR}/\`dirname {}\` \; >> /tmp/t.sh
  echo pushd ${MODDEVDIR} >> /tmp/t.sh
  find . -type d \( -name . -o -name CVS -prune -o \
    -exec echo cvs add {} \; \) >> /tmp/t.sh
  find . \( -type d -name CVS -o -name example.mx -o -name README \) -prune  -o \
    -type f -exec echo cvs add {} \; >> /tmp/t.sh
  echo popd >> /tmp/t.sh

Check the script manually, or just do it :)
  . /tmp/t.sh
If you had a Makefile.ag pre-existing in the src target dir, then it may be overwritten;
yet a copy is made thanks to the --backup flag used on cp, so do not worry!
