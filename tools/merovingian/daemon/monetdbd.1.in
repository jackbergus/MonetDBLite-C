.\" Process this file with
.\" groff -man -Tascii foo.1
.\"
.TH MONETDBD 1 "FEB 2011" MonetDB "MonetDB 5"
.SH NAME
monetdbd \- the MonetDB Database Server daemon
.SH SYNOPSIS
.B monetdbd
.SH DESCRIPTION
.B monetdbd
is the MonetDB Database Server daemon.  The program is mainly meant to
be used as deamon, but it also allows to setup and change the
configuration of a dbfarm.
The typical use of
.B monetdbd
is to be started from a startup script, such as from
.I /etc/init.d/
on Linux systems or
.BR smf (5)
on Solaris systems, as part of a system startup.
.P
.B monetdbd
was formerly known as
.BR merovingian .
Internally,
.B monetdbd
keeps on using the name
.BR merovingian ,
but it was renamed to better match the expectations of the product to
regular end-users.
.P
A
.B monetdbd
instance manages one local cluster based on the dbfarm specified in the
.I @MONETDB5_CONFFILE@
config file.  Within this local cluster
.B monetdbd
takes care of starting up databases when necessary, and stopping them
either upon request via
.BR monetdb (1)
or when being shut down.  Client connections initially are made against
.B monetdbd
which redirects or proxies the client to the appropriate database
process, started on the fly when necessary.
.P
When started,
.B monetdbd
runs in the background, sending log messages to
.IR @MERO_LOG@ ,
until being sent a stop, terminate or interrupt signal.  Any arguments
given when starting
.B monetdbd
cause the version to be printed followed by a shutdown of
.BR monetdbd .
.P
.B monetdbd
uses a neighbour discovery scheme to detect other
.B monetdbd
processes running in the local network.  Databases from those remote
instances are made available to a locally connecting client.  Remote
databases never override local databases, and their availability is
controlled by the remote
.B monetdbd
process.
.SH CONFIGURATION
.B monetdbd
defaults to use the configuration file
.I @MONETDB5_CONFFILE@
that was placed in the file
system during installation to control its behaviour.  If the environment
variable
.I MONETDB5CONF
is set,
.B monetdbd
uses the value of this variable as configuration file to load instead.
In the configuration file the following options can be specified.  Most
are typically to be found under the
.I Merovingian
section in the default configuration file.
.IP gdk_dbfarm
The value of this setting determines which local cluster
.B monetdbd
will monitor.
.IP mero_msglog
.IP mero_errlog
When both options are set to an empty string,
.B monetdbd
logs messages and errors to the stdout and stderr channels on the
caller's console.  By setting one or both of the
.B mero_msglog
and
.B mero_errlog
variables, one can specify messages and/or errors to be logged to a file
instead.  It is legitimate to have both
.B mero_msglog
and
.B mero_errlog
pointing to the same file, which is the default
.RI ( @MERO_LOG@ ).
.IP mero_pidfile
Location pointing to the pidfile used by
.B monetdbd
to write the process id of the daemon process that was started in the
background.  This pid can be used to stop
.B monetdbd
again by sending a termination signal to the process id found in the file.
.IP mero_port
The port
.B monetdbd
will open up and listen to connections for.  When unset, the default
port
.I 50000
is used, which should be fine for most setups.
.IP mero_exittimeout
All database servers that were started by
.B monetdbd
are shut down when
.B monetdbd
is shut down.  This behaviour is desirable if the
.B monetdbd
process is ran from a start script that represents the MonetDB Database
Server.  Setting the
.B mero_exittimeout
option to a positive
non-zero value, causes each started database server to be shut down by
.B monetdbd
when it shuts down itself with a given time-out in seconds.  If the
time-out expires, the database server is killed using the SIGKILL
signal.  A time-out value of
.B 0
means that no attempt is made to shut down started database servers.  As
a result, database servers will remain active after
.B monetdbd
has stopped.  The default value for
.B mero_exittimeout
is
.B 60
seconds.  If your databases are rather large and find your databases
consistently being killed by
.B monetdbd
upon shutdown, you may have to increase this timeout.
.IP mero_doproxy
.B monetdbd
has two ways in which it can "attach" a connecting client to the target
database.  The first method uses a redirect to the responsible mserver
process, the second method proxies the client to the mserver over
.BR monetdbd .
While the first is more efficient, it requires the connecting client
to be able to connect to the mserver.  In many settings this may be
undesirable or even impossible, since a wide range of open ports and
routing are necessary for this.  In such case the proxy behaviour of
.B monetdbd
is a good solution, which also allows a
.B monetdbd
on the border of a network to serve requests to nodes in the local
(unreachable) network.
.IP mero_discoveryttl
Neighbour discovery allows
.B monetdbd
to discover other running
.B monetdbd
processes in the local network.
.B monetdbd
publishes locally available databases to others periodically.  The
interval used here depends on the time-to-live of the databases before
they need to get refreshed.  The default is 10 minutes, which should
keep traffic in your network fairly low.  If you add and/or remove
databases often, you may want to use a low ttl.  The value of this
option is expressed in seconds.
.IP mero_discoveryport
The neighbour discovery service uses UDP broadcasting to announce
itself.  For this
.B monetdbd
listens to the given port, which defaults to the setting of
.BR mero_port .
If the port is set to 0, the neighbour discovery service is disabled and
hence no announcements will be made, nor received.
.IP mero_controlport
Each
.B monetdbd
can possibly be controlled from a remote site, using
.BR monetdb (1).
The port to use can be set via this option.  If unset,
.B monetdbd
cannot be controlled remotely, but only via the local system by means of
a UNIX domain socket.  Remote control requests are required to be
authenticated using a password.  The password for this is stored in
the .merovingian_pass file in the dbfarm.  If it doesn't exist,
.B monetdbd
will create one to protect itself in case remote control is enabled.
One can set a password in this file.  Note that
.B monetdbd
needs to be restarted in order to pick up changes in
the .merovingian_pass file.
.P
Next to these global settings,
.B monetdbd
respects per-database settings that are managed via
.BR monetdb (1).
The properties 
.IR shared " and " forward
overrule the defaults from
.IR mero_discoveryport " and " mero_doproxy .
To obtain a list of properties, use `monetdb get all`.
.SH "REMOTE DATABASES"
The neighbour discovery capabilities of
.B monetdbd
allow a user to contact a remote database transparently, as if it were a
local database.  By default, all local databases are announced in the
network, such that neighbours can pick them up to make them available
for their local users.  This feature can be disabled globally, or on
database level.  For the latter, the
.BR monetdb (1)
utility can be used to change the share property of a database.
.P
While neighbour discovery in itself is sufficient to locate a database
in a cluster, it is limited in expressiveness.  For instance, database
names are assumed to be unique throughout the entire system.  This means
local databases overshadow remote ones, and duplicate remote entries
cannot be distinguished.  To compensate for this,
.B monetdbd
allows to adds a
.I tag
to each database that is being shared.  This tag is sent in addition to
the database name, and only understood by other
.BR monetdbd s.
.P
Tags are arbitrary ASCII-strings matching the pattern [A\-Za\-z0\-9./]+.
There are no assumed semantics in the tag, which allows for multiple
approaches when using the tag.  The tag is always used in combination
with the database name.  For this, the `/' character is used as
separator, which hence suggests the user to use that character as
separator for multilevel tags.
.B monetdbd
allows common path globbing using `*' on tags, which allows for many
use-cases.  Consider for instance the following three databases with their
tag:
.PP
.RS 0
dbX/master/tableQ
.RS 0
dbY/slave/tableQ
.RS 0
dbZ/slave/tableQ
.PP
A default match has implicit `/*' added to the search, making more generic
search strings match more specific ones.  Hence, a connect with
database
.I dbX
is the same as
.I dbX/*
and hence matches
.IR dbX/master/tableQ .
Similar, a database connect for
.I */master
matches the same database as before.  Note that the implicit `/*' is
not added if that would cause no matches, such as for
.I */master/tableQ
which would return all masters for 
.IR tableQ ,
which in our hypothetical example is only
.IR dbX .
In contrast, a database connect for
.I */slave/tableQ
matches with either
.IR dbY " or " dbZ .
.B monetdbd
returns the two options to the client in a round-robin fashion, such
that subsequent connects for the same pattern result in a load-balanced
connect to either of both databases.
.P
With tags in use, one can possibly make distinction between databases,
if setup like that.  The previous example could hence also be setup like
this:
.PP
.RS 0
tableQ/master
.RS 0
tableQ/slave
.RS 0
tableQ/slave
.PP
Connecting to
.I tableQ/slave
would now return either of both databases even though they are not
unique (apart from the host they are located on, which is not shown in
the example).  While being confusing for humans, for
.B monetdbd
it is the same situation as in the previous example.  However, because
globbing allows to make things easier to understand, tags for both
slaves could be changed to
.IR slaveX " or " slave/X
and use the necessary pattern to match them.  It is up to the user to
decide how to use the tags.
.SH SIGNALS
.B monetdbd
acts upon a number of signals as is common for a daemon.
.IP "SIGINT, SIGTERM, SIGQUIT"
Any of these signals make
.B monetdbd
enter the shutdown sequence.  This sequence involves cleanly shutting
down listener sockets, shutting down all started databases and finally
terminating itself.
.IP SIGHUP
When this signal is received by
.B monetdbd
it will reopen the logfiles as pointed to by
.B mero_msglog
and
.BR mero_errlog .
When these two are unset or point to a file attached to a terminal,
.B monetdbd
will not reopen the associated filedescriptor.
.SH "RETURN VALUE"
.B monetdbd
returns exit code
.B 0
if it was able to successfully launch the background process or when the
version information was printed.  When an
error occurs during startup that prevents
.B monetdbd
from functioning properly, an exit code
.B 1
is returned.
.SH FILES
.I @MONETDB5_CONFFILE@
.RS
The configuration file for MonetDB, located in the system configuration
directory.
.RE
.I @MERO_LOG@
.RS
The configuration file default location to write log output to.
.SH "SEE ALSO"
.BR monetdb (1)
.\".BR mserver5 (1)

# Merovingian section
#====================
# Merovingian logs messages and errors by default to the stdout and
# stderr channels on the console.  By setting one or both of the
# variables below, one can specify messages and/or errors to be logged
# to a file instead.  It is legitimate to have both mero_msglog and
# mero_errlog pointing to the same file, as in the default below.
# Setting mero_msglog and/or mero_errlog to the empty string, results
# in merovingian to log to the screen.
#mero_msglog=@Xlocalstatedir@@DIRSEP@log@DIRSEP@monetdb@DIRSEP@merovingian.log
#mero_errlog=@Xlocalstatedir@@DIRSEP@log@DIRSEP@monetdb@DIRSEP@merovingian.log
#
# Merovingian forks itself to detach into the background.  It stores
# its pid in the following file, which can be used to stop Merovingian
# again.
mero_pidfile=@Xlocalstatedir@@DIRSEP@run@DIRSEP@monetdb@DIRSEP@merovingian.pid
#
# In normal use, Merovingian replaces an mserver, and hence listens
# for connections on the same port as an mserver would do (mapi_port).
# For certain configs, however, it may be more suitable to use an
# alternate port, which can be specified here.
#mero_port=50000
#
# mservers that were started by Merovingian are shut down when the
# Merovingian is shut down.  This behaviour is desirable if the
# Merovingian is ran as daemon process that represents MonetDB, such
# as in an init.d script.  Setting the time-out value below to a
# positive non-zero value will shut down each mserver that was started
# with a given time-out in seconds.  If the time-out expires, the
# mserver is killed using the SIGKILL signal.  A time-out value of 0
# means that no mserver is shut down, meaning they will live on after
# the Merovingian has shut down.  The default is to shut down all
# started mservers with a time-out of 60 seconds.
#mero_exittimeout=60
#
# Merovingian has two ways in which it can "attach" a connecting
# client to the target database.  The first method uses a redirect to
# the responsible mserver process, the second method proxies the
# client to the mserver over Merovingian.  While the first is more
# efficient, it requires the connecting client to be able to connect
# to the mserver.  In many settings this may be undesirable or even
# impossible, since a wide range of open ports are necessary for this.
# In such case the proxy behaviour of Merovingian is a good solution,
# which also allows a Merovingian on the border of a network to serve
# requests to nodes in the local (unreachable) network.  Hence, proxy
# mode is the default.  Uncomment the value below to use the first
# method of using redirects.  Note that Merovingian will use an
# efficient method to connect the client with a local target database
# when proxy mode is active.  This method is performance wise equal to
# forwarding, but completely hides the actual way of connecting to the
# target database, like proxying.
#mero_doproxy=no
#
# Neighbour discovery allows Merovingian to discover other running
# Merovingian processes in the local network.  Merovingian publishes
# locally available databases to others periodically.  The interval
# used here depends on the time-to-live of the databases before they
# need to get refreshed.  The default is 10 minutes, which should keep
# traffic in your network fairly low.  Additions and removals are
# processed immediately regardless of this timeout.  If you are in a
# network environment where links disappear often, you may want to
# decrease this value to more quickly remove no longer reachable
# databases.
#mero_discoveryttl=600
#
# Neighbour discovery is done using UDP broadcasts on the port set by
# mero_discoveryport.  It's value defaults to the value of mero_port,
# which usually is 50000.  Setting this value to 0 disables the
# neighbour discovery service entirely.
#mero_discoveryport=50000
#
# Each Merovingian can be controlled by monetdb(1).  By default,
# Merovingian binds to a local UNIX domain socket which allows a local
# monetdb(1) to connect based on the UNIX file system permissions.
# Merovingian can also listen on a TCP socket to serve requests from a
# monetdb(1) elsewhere.  If mero_controlport is set, Merovingian
# listens to that port for remote control commands.  This is an all or
# nothing scenario, hence any remote monetdb(1) can create, destroy,
# etc.  As a little protective measure, the file
# @Xlocalstatedir@@DIRSEP@monetdb5@DIRSEP@dbfarm@DIRSEP@.merovingian_pass
# contains the passphrase that a remote monetdb(1) needs to issue to
# be able to perform any command.  For this file the same rules hold
# as for the monet_vault_key file.  If this file is missing,
# Merovingian will attempt to create it with a random password.  If
# the file cannot be opened for some reason, Merovingian will not
# start.
mero_controlport=50001
